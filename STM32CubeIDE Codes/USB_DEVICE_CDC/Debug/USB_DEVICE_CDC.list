
USB_DEVICE_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019f  0800a4f8  0800a4f8  0000b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a698  0800a698  0000b698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800a69c  0800a69c  0000b69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000170  20000000  0800a6a0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e6c  20000170  0800a810  0000c170  2**2
                  ALLOC
  7 ._user_heap_stack 00000e04  20000fdc  0800a810  0000cfdc  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000c170  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014651  00000000  00000000  0000c1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003830  00000000  00000000  000207f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001140  00000000  00000000  00024028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ccc  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003075c  00000000  00000000  00025e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000168b9  00000000  00000000  00056590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011f5ea  00000000  00000000  0006ce49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0018c433  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004d10  00000000  00000000  0018c478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000077  00000000  00000000  00191188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000170 	.word	0x20000170
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a4e0 	.word	0x0800a4e0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000174 	.word	0x20000174
 8000274:	0800a4e0 	.word	0x0800a4e0

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b5b0      	push	{r4, r5, r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t TxMessageBuffer[] = "MY USB IS WORKING! \r\n";
 800027e:	4b2a      	ldr	r3, [pc, #168]	@ (8000328 <main+0xb0>)
 8000280:	463c      	mov	r4, r7
 8000282:	461d      	mov	r5, r3
 8000284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000288:	e895 0003 	ldmia.w	r5, {r0, r1}
 800028c:	6020      	str	r0, [r4, #0]
 800028e:	3404      	adds	r4, #4
 8000290:	8021      	strh	r1, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f000 fc0b 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000296:	f000 f8e5 	bl	8000464 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f851 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f933 	bl	8000508 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002a2:	f000 f8eb 	bl	800047c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 80002a6:	4b21      	ldr	r3, [pc, #132]	@ (800032c <main+0xb4>)
 80002a8:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <main+0xb8>)
 80002aa:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

  if(USBD_Init(&hUsbDeviceFS, &CDC_Desc, 0) != USBD_OK)
 80002ae:	2200      	movs	r2, #0
 80002b0:	4920      	ldr	r1, [pc, #128]	@ (8000334 <main+0xbc>)
 80002b2:	481f      	ldr	r0, [pc, #124]	@ (8000330 <main+0xb8>)
 80002b4:	f007 fe3c 	bl	8007f30 <USBD_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <main+0x4a>
        Error_Handler();
 80002be:	f000 f94d 	bl	800055c <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80002c2:	491d      	ldr	r1, [pc, #116]	@ (8000338 <main+0xc0>)
 80002c4:	481a      	ldr	r0, [pc, #104]	@ (8000330 <main+0xb8>)
 80002c6:	f007 fe71 	bl	8007fac <USBD_RegisterClass>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <main+0x5c>
        Error_Handler();
 80002d0:	f000 f944 	bl	800055c <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 80002d4:	4919      	ldr	r1, [pc, #100]	@ (800033c <main+0xc4>)
 80002d6:	4816      	ldr	r0, [pc, #88]	@ (8000330 <main+0xb8>)
 80002d8:	f007 fa42 	bl	8007760 <USBD_CDC_RegisterInterface>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <main+0x6e>
        Error_Handler();
 80002e2:	f000 f93b 	bl	800055c <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80002e6:	4812      	ldr	r0, [pc, #72]	@ (8000330 <main+0xb8>)
 80002e8:	f007 fea4 	bl	8008034 <USBD_Start>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <main+0x7e>
        Error_Handler();
 80002f2:	f000 f933 	bl	800055c <Error_Handler>

  while(hUsbDeviceFS.pClassData == NULL);
 80002f6:	bf00      	nop
 80002f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <main+0xb8>)
 80002fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0fa      	beq.n	80002f8 <main+0x80>
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000302:	2000      	movs	r0, #0
 8000304:	f000 faf6 	bl	80008f4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000308:	2101      	movs	r1, #1
 800030a:	2000      	movs	r0, #0
 800030c:	f000 fb2e 	bl	800096c <BSP_PB_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TEMPLATE_Transmit(TxMessageBuffer, sizeof(TxMessageBuffer));
 8000310:	463b      	mov	r3, r7
 8000312:	2116      	movs	r1, #22
 8000314:	4618      	mov	r0, r3
 8000316:	f007 fbd1 	bl	8007abc <TEMPLATE_Transmit>
	  HAL_Delay(500);
 800031a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800031e:	f000 fc8b 	bl	8000c38 <HAL_Delay>
	  TEMPLATE_Transmit(TxMessageBuffer, sizeof(TxMessageBuffer));
 8000322:	bf00      	nop
 8000324:	e7f4      	b.n	8000310 <main+0x98>
 8000326:	bf00      	nop
 8000328:	0800a4f8 	.word	0x0800a4f8
 800032c:	2000018c 	.word	0x2000018c
 8000330:	20000470 	.word	0x20000470
 8000334:	200000c4 	.word	0x200000c4
 8000338:	20000028 	.word	0x20000028
 800033c:	200000a8 	.word	0x200000a8

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b0a6      	sub	sp, #152	@ 0x98
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800034a:	2260      	movs	r2, #96	@ 0x60
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f009 fa67 	bl	8009822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	f107 0320 	add.w	r3, r7, #32
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
 8000364:	615a      	str	r2, [r3, #20]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]
 8000376:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000378:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800037c:	f002 fd8e 	bl	8002e9c <HAL_PWREx_ControlVoltageScaling>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000386:	f000 f8e9 	bl	800055c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800038a:	2322      	movs	r3, #34	@ 0x22
 800038c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000398:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039a:	2310      	movs	r3, #16
 800039c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003a2:	2302      	movs	r3, #2
 80003a4:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80003aa:	2303      	movs	r3, #3
 80003ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLN = 24;
 80003ae:	2318      	movs	r3, #24
 80003b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLR = 1;
 80003c0:	2301      	movs	r3, #1
 80003c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fe4c 	bl	8003074 <HAL_RCC_OscConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003e2:	f000 f8bb 	bl	800055c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	231f      	movs	r3, #31
 80003e8:	623b      	str	r3, [r7, #32]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ea:	2303      	movs	r3, #3
 80003ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003fe:	f107 0320 	add.w	r3, r7, #32
 8000402:	2103      	movs	r1, #3
 8000404:	4618      	mov	r0, r3
 8000406:	f003 fd11 	bl	8003e2c <HAL_RCC_ClockConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000410:	f000 f8a4 	bl	800055c <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <SystemClock_Config+0x120>)
 8000416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800041a:	4a11      	ldr	r2, [pc, #68]	@ (8000460 <SystemClock_Config+0x120>)
 800041c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000420:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000424:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <SystemClock_Config+0x120>)
 8000426:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800042a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8000436:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000440:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8000444:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000446:	2322      	movs	r3, #34	@ 0x22
 8000448:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800044a:	2320      	movs	r3, #32
 800044c:	61fb      	str	r3, [r7, #28]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	4618      	mov	r0, r3
 8000454:	f004 fdbc 	bl	8004fd0 <HAL_RCCEx_CRSConfig>
}
 8000458:	bf00      	nop
 800045a:	3798      	adds	r7, #152	@ 0x98
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	46020c00 	.word	0x46020c00

08000464 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000468:	2002      	movs	r0, #2
 800046a:	f002 fda3 	bl	8002fb4 <HAL_PWREx_ConfigSupply>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000474:	f000 f872 	bl	800055c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000480:	2000      	movs	r0, #0
 8000482:	f000 fff1 	bl	8001468 <HAL_ICACHE_ConfigAssociativityMode>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800048c:	f000 f866 	bl	800055c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000490:	f001 f80a 	bl	80014a8 <HAL_ICACHE_Enable>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800049a:	f000 f85f 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <MX_USB_DRD_FS_PCD_Init>:
  * @brief USB_DRD_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_DRD_FS_PCD_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80004a8:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004aa:	4a16      	ldr	r2, [pc, #88]	@ (8000504 <MX_USB_DRD_FS_PCD_Init+0x60>)
 80004ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004b0:	2208      	movs	r2, #8
 80004b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 80004b4:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004b6:	2202      	movs	r2, #2
 80004b8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004ba:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004bc:	2202      	movs	r2, #2
 80004be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_USB_DRD_FS_PCD_Init+0x5c>)
 80004ec:	f001 f84f 	bl	800158e <HAL_PCD_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_USB_DRD_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80004f6:	f000 f831 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2000018c 	.word	0x2000018c
 8000504:	40016000 	.word	0x40016000

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <MX_GPIO_Init+0x50>)
 8000510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000514:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <MX_GPIO_Init+0x50>)
 8000516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800051a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <MX_GPIO_Init+0x50>)
 8000520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <MX_GPIO_Init+0x50>)
 800052e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000532:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <MX_GPIO_Init+0x50>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_GPIO_Init+0x50>)
 800053e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	46020c00 	.word	0x46020c00

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <Error_Handler+0x8>

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <HAL_MspInit+0x30>)
 8000570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000574:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <HAL_MspInit+0x30>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_MspInit+0x30>)
 8000580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 800058c:	f002 fd62 	bl	8003054 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	46020c00 	.word	0x46020c00

0800059c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b4      	sub	sp, #208	@ 0xd0
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	22c0      	movs	r2, #192	@ 0xc0
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f009 f938 	bl	8009822 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000660 <HAL_PCD_MspInit+0xc4>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d14c      	bne.n	8000656 <HAL_PCD_MspInit+0xba>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80005bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005c0:	f04f 0300 	mov.w	r3, #0
 80005c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 ffbe 	bl	8004554 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 80005de:	f7ff ffbd 	bl	800055c <Error_Handler>
    }

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005e2:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 80005e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d119      	bne.n	8000624 <HAL_PCD_MspInit+0x88>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 80005f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 8000602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800060e:	f002 fd21 	bl	8003054 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 8000614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000618:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 800061a:	f023 0304 	bic.w	r3, r3, #4
 800061e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000622:	e001      	b.n	8000628 <HAL_PCD_MspInit+0x8c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000624:	f002 fd16 	bl	8003054 <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 800062a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800062e:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 8000630:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000634:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <HAL_PCD_MspInit+0xc8>)
 800063a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800063e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2049      	movs	r0, #73	@ 0x49
 800064c:	f000 fbd0 	bl	8000df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8000650:	2049      	movs	r0, #73	@ 0x49
 8000652:	f000 fbe7 	bl	8000e24 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8000656:	bf00      	nop
 8000658:	37d0      	adds	r7, #208	@ 0xd0
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40016000 	.word	0x40016000
 8000664:	46020c00 	.word	0x46020c00

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <NMI_Handler+0x4>

08000670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <MemManage_Handler+0x4>

08000680 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <UsageFault_Handler+0x4>

08000690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006be:	f000 fa9b 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 f9c6 	bl	8000a5c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt.
  */
void USB_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <USB_IRQHandler+0x10>)
 80006da:	f001 f87b 	bl	80017d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000018c 	.word	0x2000018c

080006e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	e00a      	b.n	8000710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fa:	f3af 8000 	nop.w
 80006fe:	4601      	mov	r1, r0
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	60ba      	str	r2, [r7, #8]
 8000706:	b2ca      	uxtb	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf0      	blt.n	80006fa <_read+0x12>
  }

  return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b086      	sub	sp, #24
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	e009      	b.n	8000748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	60ba      	str	r2, [r7, #8]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf1      	blt.n	8000734 <_write+0x12>
  }
  return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_close>:

int _close(int file)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000782:	605a      	str	r2, [r3, #4]
  return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <_isatty>:

int _isatty(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f009 f864 	bl	80098c0 <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20040000 	.word	0x20040000
 8000824:	00000800 	.word	0x00000800
 8000828:	20000758 	.word	0x20000758
 800082c:	20000fe0 	.word	0x20000fe0

08000830 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <SystemInit+0x68>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083a:	4a17      	ldr	r2, [pc, #92]	@ (8000898 <SystemInit+0x68>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <SystemInit+0x6c>)
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <SystemInit+0x6c>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <SystemInit+0x6c>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <SystemInit+0x6c>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <SystemInit+0x6c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <SystemInit+0x6c>)
 8000862:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000866:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800086a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800086c:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <SystemInit+0x6c>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <SystemInit+0x6c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a09      	ldr	r2, [pc, #36]	@ (800089c <SystemInit+0x6c>)
 8000878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800087c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800087e:	4b07      	ldr	r3, [pc, #28]	@ (800089c <SystemInit+0x6c>)
 8000880:	2200      	movs	r2, #0
 8000882:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <SystemInit+0x68>)
 8000886:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800088a:	609a      	str	r2, [r3, #8]
  #endif
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	46020c00 	.word	0x46020c00

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a4:	f7ff ffc4 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	@ (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	@ (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ce:	f008 fffd 	bl	80098cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fcd1 	bl	8000278 <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80008e4:	0800a6a0 	.word	0x0800a6a0
  ldr r2, =_sbss
 80008e8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80008ec:	20000fdc 	.word	0x20000fdc

080008f0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_IRQHandler>
	...

080008f4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000908:	f06f 0301 	mvn.w	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
 800090e:	e023      	b.n	8000958 <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10e      	bne.n	8000934 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <BSP_LED_Init+0x70>)
 8000918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091c:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <BSP_LED_Init+0x70>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <BSP_LED_Init+0x70>)
 8000928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000934:	2320      	movs	r3, #32
 8000936:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <BSP_LED_Init+0x74>)
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	f107 0210 	add.w	r2, r7, #16
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fbb0 	bl	80010b8 <HAL_GPIO_Init>
  }

  return ret;
 8000958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800095a:	4618      	mov	r0, r3
 800095c:	3728      	adds	r7, #40	@ 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	46020c00 	.word	0x46020c00
 8000968:	20000004 	.word	0x20000004

0800096c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800097c:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <BSP_PB_Init+0xd4>)
 800097e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000982:	4a2f      	ldr	r2, [pc, #188]	@ (8000a40 <BSP_PB_Init+0xd4>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <BSP_PB_Init+0xd4>)
 800098e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800099a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10c      	bne.n	80009c8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <BSP_PB_Init+0xd8>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	f107 020c 	add.w	r2, r7, #12
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fb79 	bl	80010b8 <HAL_GPIO_Init>
 80009c6:	e036      	b.n	8000a36 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <BSP_PB_Init+0xdc>)
 80009ca:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000a44 <BSP_PB_Init+0xd8>)
 80009d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d4:	f107 020c 	add.w	r2, r7, #12
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fb6c 	bl	80010b8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80009e0:	79fa      	ldrb	r2, [r7, #7]
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4a18      	ldr	r2, [pc, #96]	@ (8000a4c <BSP_PB_Init+0xe0>)
 80009ec:	441a      	add	r2, r3
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4917      	ldr	r1, [pc, #92]	@ (8000a50 <BSP_PB_Init+0xe4>)
 80009f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009f6:	4619      	mov	r1, r3
 80009f8:	4610      	mov	r0, r2
 80009fa:	f000 fb01 	bl	8001000 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <BSP_PB_Init+0xe0>)
 8000a0a:	1898      	adds	r0, r3, r2
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4a11      	ldr	r2, [pc, #68]	@ (8000a54 <BSP_PB_Init+0xe8>)
 8000a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a14:	461a      	mov	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f000 fac6 	bl	8000fa8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000a1c:	2018      	movs	r0, #24
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <BSP_PB_Init+0xec>)
 8000a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f000 f9e1 	bl	8000df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000a2e:	2318      	movs	r3, #24
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f9f7 	bl	8000e24 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	46020c00 	.word	0x46020c00
 8000a44:	20000008 	.word	0x20000008
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	2000075c 	.word	0x2000075c
 8000a50:	0800a5e0 	.word	0x0800a5e0
 8000a54:	2000000c 	.word	0x2000000c
 8000a58:	20000010 	.word	0x20000010

08000a5c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000a66:	79fa      	ldrb	r2, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <BSP_PB_IRQHandler+0x28>)
 8000a72:	4413      	add	r3, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fad7 	bl	8001028 <HAL_EXTI_IRQHandler>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000075c 	.word	0x2000075c

08000a88 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fff0 	bl	8000a88 <BSP_PB_Callback>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_Init+0x50>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <HAL_Init+0x50>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f98c 	bl	8000dda <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000ac2:	f003 fba5 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <HAL_Init+0x54>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	f003 030f 	and.w	r3, r3, #15
 8000ad0:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <HAL_Init+0x58>)
 8000ad2:	5ccb      	ldrb	r3, [r1, r3]
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <HAL_Init+0x5c>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000adc:	2004      	movs	r0, #4
 8000ade:	f000 f9d1 	bl	8000e84 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f000 f812 	bl	8000b0c <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e002      	b.n	8000af8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000af2:	f7ff fd39 	bl	8000568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40022000 	.word	0x40022000
 8000b00:	46020c00 	.word	0x46020c00
 8000b04:	0800a590 	.word	0x0800a590
 8000b08:	20000000 	.word	0x20000000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000b18:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e05c      	b.n	8000bde <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000b24:	4b31      	ldr	r3, [pc, #196]	@ (8000bec <HAL_InitTick+0xe0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d10c      	bne.n	8000b4a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000b30:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e037      	b.n	8000bba <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000b4a:	f000 f9f3 	bl	8000f34 <HAL_SYSTICK_GetCLKSourceConfig>
 8000b4e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d023      	beq.n	8000b9e <HAL_InitTick+0x92>
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d82d      	bhi.n	8000bb8 <HAL_InitTick+0xac>
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_InitTick+0x5e>
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d00d      	beq.n	8000b84 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000b68:	e026      	b.n	8000bb8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_InitTick+0xe4>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000b78:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b80:	60fb      	str	r3, [r7, #12]
        break;
 8000b82:	e01a      	b.n	8000bba <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b92:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	60fb      	str	r3, [r7, #12]
        break;
 8000b9c:	e00d      	b.n	8000bba <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b9e:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	60fb      	str	r3, [r7, #12]
        break;
 8000bb6:	e000      	b.n	8000bba <HAL_InitTick+0xae>
        break;
 8000bb8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f000 f940 	bl	8000e40 <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e009      	b.n	8000bde <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd2:	f000 f90d 	bl	8000df0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000bd6:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_InitTick+0xe8>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000018 	.word	0x20000018
 8000bec:	e000e010 	.word	0xe000e010
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000014 	.word	0x20000014

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000018 	.word	0x20000018
 8000c1c:	20000768 	.word	0x20000768

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000768 	.word	0x20000768

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000018 	.word	0x20000018

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	@ (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ff4c 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfe:	f7ff ff63 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	6978      	ldr	r0, [r7, #20]
 8000e0a:	f7ff ffb3 	bl	8000d74 <NVIC_EncodePriority>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff82 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff56 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00d      	b.n	8000e72 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_SYSTICK_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <HAL_SYSTICK_Config+0x40>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_SYSTICK_Config+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <HAL_SYSTICK_Config+0x40>)
 8000e6a:	f043 0303 	orr.w	r3, r3, #3
 8000e6e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d844      	bhi.n	8000f1c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000e92:	a201      	add	r2, pc, #4	@ (adr r2, 8000e98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000ebb 	.word	0x08000ebb
 8000e9c:	08000ed9 	.word	0x08000ed9
 8000ea0:	08000efb 	.word	0x08000efb
 8000ea4:	08000f1d 	.word	0x08000f1d
 8000ea8:	08000ead 	.word	0x08000ead
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6013      	str	r3, [r2, #0]
      break;
 8000eb8:	e031      	b.n	8000f1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ece:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ed6:	e022      	b.n	8000f1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ede:	f023 0304 	bic.w	r3, r3, #4
 8000ee2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ef8:	e011      	b.n	8000f1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000f10:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000f12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000f1a:	e000      	b.n	8000f1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000f1c:	bf00      	nop
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e010 	.word	0xe000e010
 8000f30:	46020c00 	.word	0x46020c00

08000f34 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000f46:	2304      	movs	r3, #4
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e021      	b.n	8000f90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000f56:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000f5e:	d011      	beq.n	8000f84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000f66:	d810      	bhi.n	8000f8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f74:	d003      	beq.n	8000f7e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000f76:	e008      	b.n	8000f8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
        break;
 8000f7c:	e008      	b.n	8000f90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
        break;
 8000f82:	e005      	b.n	8000f90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000f84:	2302      	movs	r3, #2
 8000f86:	607b      	str	r3, [r7, #4]
        break;
 8000f88:	e002      	b.n	8000f90 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
        break;
 8000f8e:	bf00      	nop
    }
  }
  return systick_source;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010
 8000fa4:	46020c00 	.word	0x46020c00

08000fa8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d011      	beq.n	8000fe4 <HAL_EXTI_RegisterCallback+0x3c>
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	dc13      	bgt.n	8000fec <HAL_EXTI_RegisterCallback+0x44>
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <HAL_EXTI_RegisterCallback+0x26>
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d007      	beq.n	8000fdc <HAL_EXTI_RegisterCallback+0x34>
 8000fcc:	e00e      	b.n	8000fec <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
      break;
 8000fda:	e00a      	b.n	8000ff2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	605a      	str	r2, [r3, #4]
      break;
 8000fe2:	e006      	b.n	8000ff2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
      break;
 8000fea:	e002      	b.n	8000ff2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	75fb      	strb	r3, [r7, #23]
      break;
 8000ff0:	bf00      	nop
  }

  return status;
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e003      	b.n	800101c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800101a:	2300      	movs	r3, #0
  }
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0c1b      	lsrs	r3, r3, #16
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	2201      	movs	r2, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	015a      	lsls	r2, r3, #5
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_EXTI_IRQHandler+0x88>)
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d009      	beq.n	800107a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	015a      	lsls	r2, r3, #5
 800107e:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <HAL_EXTI_IRQHandler+0x8c>)
 8001080:	4413      	add	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d009      	beq.n	80010a8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	4798      	blx	r3
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	4602200c 	.word	0x4602200c
 80010b4:	46022010 	.word	0x46022010

080010b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010ca:	e1ba      	b.n	8001442 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2101      	movs	r1, #1
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 81aa 	beq.w	800143c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a55      	ldr	r2, [pc, #340]	@ (8001240 <HAL_GPIO_Init+0x188>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d15d      	bne.n	80011ac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80010f6:	2201      	movs	r2, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	4013      	ands	r3, r2
 8001104:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	4313      	orrs	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001120:	4a48      	ldr	r2, [pc, #288]	@ (8001244 <HAL_GPIO_Init+0x18c>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001128:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800112a:	4a46      	ldr	r2, [pc, #280]	@ (8001244 <HAL_GPIO_Init+0x18c>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	3208      	adds	r2, #8
 800113e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001142:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	4013      	ands	r3, r2
 8001158:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220b      	movs	r2, #11
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	4313      	orrs	r3, r2
 800116c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3208      	adds	r2, #8
 8001176:	69f9      	ldr	r1, [r7, #28]
 8001178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	4013      	ands	r3, r2
 8001192:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2202      	movs	r2, #2
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	e067      	b.n	800127c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x104>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b12      	cmp	r3, #18
 80011ba:	d145      	bne.n	8001248 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	4013      	ands	r3, r2
 80011de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	f003 020f 	and.w	r2, r3, #15
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	69f9      	ldr	r1, [r7, #28]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	4013      	ands	r3, r2
 800121e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0203 	and.w	r2, r3, #3
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	4313      	orrs	r3, r2
 8001234:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e01e      	b.n	800127c <HAL_GPIO_Init+0x1c4>
 800123e:	bf00      	nop
 8001240:	46020000 	.word	0x46020000
 8001244:	0800a5e4 	.word	0x0800a5e4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4013      	ands	r3, r2
 800125e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	4313      	orrs	r3, r2
 8001274:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d00b      	beq.n	800129c <HAL_GPIO_Init+0x1e4>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001290:	2b11      	cmp	r3, #17
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b12      	cmp	r3, #18
 800129a:	d130      	bne.n	80012fe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80012d2:	2201      	movs	r2, #1
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	4013      	ands	r3, r2
 80012e0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	f003 0201 	and.w	r2, r3, #1
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d017      	beq.n	8001336 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	4013      	ands	r3, r2
 800131c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	4313      	orrs	r3, r2
 800132e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d07c      	beq.n	800143c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3318      	adds	r3, #24
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	4013      	ands	r3, r2
 8001364:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0a9a      	lsrs	r2, r3, #10
 800136a:	4b3e      	ldr	r3, [pc, #248]	@ (8001464 <HAL_GPIO_Init+0x3ac>)
 800136c:	4013      	ands	r3, r2
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	00d2      	lsls	r2, r2, #3
 8001376:	4093      	lsls	r3, r2
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	4313      	orrs	r3, r2
 800137c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800137e:	4938      	ldr	r1, [pc, #224]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3318      	adds	r3, #24
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800138c:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4013      	ands	r3, r2
 800139a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80013b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80013b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80013da:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 80013e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001406:	4a16      	ldr	r2, [pc, #88]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 8001410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001414:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	4013      	ands	r3, r2
 800141e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_GPIO_Init+0x3a8>)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	f47f ae3d 	bne.w	80010cc <HAL_GPIO_Init+0x14>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3724      	adds	r7, #36	@ 0x24
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	46022000 	.word	0x46022000
 8001464:	002f7f7f 	.word	0x002f7f7f

08001468 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e007      	b.n	8001496 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 0204 	bic.w	r2, r3, #4
 800148e:	4905      	ldr	r1, [pc, #20]	@ (80014a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40030400 	.word	0x40030400

080014a8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_ICACHE_Enable+0x1c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_ICACHE_Enable+0x1c>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40030400 	.word	0x40030400

080014c8 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80014d4:	230a      	movs	r3, #10
 80014d6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80014d8:	e002      	b.n	80014e0 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	0c1b      	lsrs	r3, r3, #16
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014fc:	b29b      	uxth	r3, r3
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001516:	230a      	movs	r3, #10
 8001518:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800151a:	e002      	b.n	8001522 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3b01      	subs	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f9      	bne.n	800151c <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001530:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	b29b      	uxth	r3, r3
 800153a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800153e:	b29b      	uxth	r3, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001558:	230a      	movs	r3, #10
 800155a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800155c:	e002      	b.n	8001564 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3b01      	subs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f9      	bne.n	800155e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001572:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	b29b      	uxth	r3, r3
 800157c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001580:	b29b      	uxth	r3, r3
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af02      	add	r7, sp, #8
 8001594:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0f3      	b.n	8001788 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d106      	bne.n	80015ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7fe fff1 	bl	800059c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 febd 	bl	8005346 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7c1a      	ldrb	r2, [r3, #16]
 80015d4:	f88d 2000 	strb.w	r2, [sp]
 80015d8:	3304      	adds	r3, #4
 80015da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015dc:	f003 fe81 	bl	80052e2 <USB_CoreInit>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2202      	movs	r2, #2
 80015ea:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0ca      	b.n	8001788 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 feb9 	bl	8005370 <USB_SetCurrentMode>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0bb      	b.n	8001788 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e03f      	b.n	8001696 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	3315      	adds	r3, #21
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3314      	adds	r3, #20
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3317      	adds	r3, #23
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3324      	adds	r3, #36	@ 0x24
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3328      	adds	r3, #40	@ 0x28
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	3304      	adds	r3, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	3301      	adds	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3ba      	bcc.n	8001616 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e044      	b.n	8001730 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	440b      	add	r3, r1
 800170c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	3301      	adds	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	791b      	ldrb	r3, [r3, #4]
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	429a      	cmp	r2, r3
 8001738:	d3b5      	bcc.n	80016a6 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7c1a      	ldrb	r2, [r3, #16]
 8001742:	f88d 2000 	strb.w	r2, [sp]
 8001746:	3304      	adds	r3, #4
 8001748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174a:	f003 fe34 	bl	80053b6 <USB_DevInit>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e013      	b.n	8001788 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d102      	bne.n	800177c <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f001 fb61 	bl	8002e3e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f005 fb05 	bl	8006d90 <USB_DevDisconnect>

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_PCD_Start+0x16>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e012      	b.n	80017cc <HAL_PCD_Start+0x3c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 fdb3 	bl	800531e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 fad6 	bl	8006d6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f005 fae6 	bl	8006db2 <USB_ReadInterrupts>
 80017e6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 faf2 	bl	8001ddc <PCD_EP_ISR_Handler>

    return;
 80017f8:	e0de      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d010      	beq.n	8001826 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8001812:	400b      	ands	r3, r1
 8001814:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f006 f9d9 	bl	8007bce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800181c:	2100      	movs	r1, #0
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f8e1 	bl	80019e6 <HAL_PCD_SetAddress>

    return;
 8001824:	e0c8      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800183e:	400b      	ands	r3, r1
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001842:	e0b9      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 800185c:	400b      	ands	r3, r1
 800185e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001860:	e0aa      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d029      	beq.n	80018c0 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0204 	bic.w	r2, r2, #4
 800187a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0208 	bic.w	r2, r2, #8
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800189e:	2100      	movs	r1, #0
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f001 faee 	bl	8002e82 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f893 	bl	80019d2 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80018ba:	400b      	ands	r3, r1
 80018bc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80018be:	e07b      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01c      	beq.n	8001904 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0208 	orr.w	r2, r2, #8
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80018e8:	400b      	ands	r3, r1
 80018ea:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0204 	orr.w	r2, r2, #4
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f85e 	bl	80019be <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001902:	e059      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800190a:	2b00      	cmp	r3, #0
 800190c:	d033      	beq.n	8001976 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800191c:	400b      	ands	r3, r1
 800191e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8001926:	2b00      	cmp	r3, #0
 8001928:	d121      	bne.n	800196e <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0204 	orr.w	r2, r2, #4
 8001938:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0208 	orr.w	r2, r2, #8
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001964:	2101      	movs	r1, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f001 fa8b 	bl	8002e82 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800196c:	e024      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f825 	bl	80019be <HAL_PCD_SuspendCallback>
    return;
 8001974:	e020      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00c      	beq.n	800199a <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800198e:	400b      	ands	r3, r1
 8001990:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f006 f90d 	bl	8007bb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001998:	e00e      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80019b2:	400b      	ands	r3, r1
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80019b6:	bf00      	nop
  }
}
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_PCD_SetAddress+0x1a>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e012      	b.n	8001a26 <HAL_PCD_SetAddress+0x40>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 f996 	bl	8006d48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	4608      	mov	r0, r1
 8001a38:	4611      	mov	r1, r2
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	70fb      	strb	r3, [r7, #3]
 8001a40:	460b      	mov	r3, r1
 8001a42:	803b      	strh	r3, [r7, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da0f      	bge.n	8001a74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	f003 0207 	and.w	r2, r3, #7
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	3310      	adds	r3, #16
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	3304      	adds	r3, #4
 8001a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	705a      	strb	r2, [r3, #1]
 8001a72:	e00f      	b.n	8001a94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 0207 	and.w	r2, r3, #7
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001aa0:	883b      	ldrh	r3, [r7, #0]
 8001aa2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	78ba      	ldrb	r2, [r7, #2]
 8001aae:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ab0:	78bb      	ldrb	r3, [r7, #2]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d102      	bne.n	8001abc <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_PCD_EP_Open+0x9c>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e00e      	b.n	8001ae8 <HAL_PCD_EP_Open+0xba>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68f9      	ldr	r1, [r7, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 fc8f 	bl	80053fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da0f      	bge.n	8001b24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 0207 	and.w	r2, r3, #7
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	3310      	adds	r3, #16
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	3304      	adds	r3, #4
 8001b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	705a      	strb	r2, [r3, #1]
 8001b22:	e00f      	b.n	8001b44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	f003 0207 	and.w	r2, r3, #7
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_PCD_EP_Close+0x6e>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e00e      	b.n	8001b7c <HAL_PCD_EP_Close+0x8c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68f9      	ldr	r1, [r7, #12]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f004 f8e1 	bl	8005d34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	460b      	mov	r3, r1
 8001b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	f003 0207 	and.w	r2, r3, #7
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4413      	add	r3, r2
 8001baa:	3304      	adds	r3, #4
 8001bac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f004 fa35 	bl	8006048 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 0207 	and.w	r2, r3, #7
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	460b      	mov	r3, r1
 8001c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f003 0207 	and.w	r2, r3, #7
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	3310      	adds	r3, #16
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2201      	movs	r2, #1
 8001c64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c66:	7afb      	ldrb	r3, [r7, #11]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6979      	ldr	r1, [r7, #20]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 f9e5 	bl	8006048 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	7912      	ldrb	r2, [r2, #4]
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e040      	b.n	8001d28 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	da0f      	bge.n	8001cce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 0207 	and.w	r2, r3, #7
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	3310      	adds	r3, #16
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	705a      	strb	r2, [r3, #1]
 8001ccc:	e00d      	b.n	8001cea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_PCD_EP_SetStall+0x82>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e00e      	b.n	8001d28 <HAL_PCD_EP_SetStall+0xa0>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68f9      	ldr	r1, [r7, #12]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f004 ff3f 	bl	8006b9c <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	7912      	ldrb	r2, [r2, #4]
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e042      	b.n	8001dd4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da0f      	bge.n	8001d76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 0207 	and.w	r2, r3, #7
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	3310      	adds	r3, #16
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	705a      	strb	r2, [r3, #1]
 8001d74:	e00f      	b.n	8001d96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 0207 	and.w	r2, r3, #7
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_PCD_EP_ClrStall+0x86>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e00e      	b.n	8001dd4 <HAL_PCD_EP_ClrStall+0xa4>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f004 ff2f 	bl	8006c28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	@ 0x38
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001de4:	e2d9      	b.n	800239a <PCD_EP_ISR_Handler+0x5be>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	837b      	strh	r3, [r7, #26]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8001dee:	8b7b      	ldrh	r3, [r7, #26]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	767b      	strb	r3, [r7, #25]

    if (epindex == 0U)
 8001df8:	7e7b      	ldrb	r3, [r7, #25]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 80dc 	bne.w	8001fb8 <PCD_EP_ISR_Handler+0x1dc>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e00:	8b7b      	ldrh	r3, [r7, #26]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d13e      	bne.n	8001e88 <PCD_EP_ISR_Handler+0xac>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b93      	ldr	r3, [pc, #588]	@ (8002060 <PCD_EP_ISR_Handler+0x284>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e20:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3314      	adds	r3, #20
 8001e26:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	441a      	add	r2, r3
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e50:	2100      	movs	r1, #0
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f005 fe93 	bl	8007b7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7c5b      	ldrb	r3, [r3, #17]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 829b 	beq.w	800239a <PCD_EP_ISR_Handler+0x5be>
 8001e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 8296 	bne.w	800239a <PCD_EP_ISR_Handler+0x5be>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7c5b      	ldrb	r3, [r3, #17]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	745a      	strb	r2, [r3, #17]
 8001e86:	e288      	b.n	800239a <PCD_EP_ISR_Handler+0x5be>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001e8e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e98:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d027      	beq.n	8001ef2 <PCD_EP_ISR_Handler+0x116>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f7ff fb0b 	bl	80014c8 <PCD_GET_EP_RX_CNT>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f004 ffdf 	bl	8006e90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b62      	ldr	r3, [pc, #392]	@ (8002064 <PCD_EP_ISR_Handler+0x288>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ee8:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f005 fe1a 	bl	8007b24 <HAL_PCD_SetupStageCallback>
 8001ef0:	e253      	b.n	800239a <PCD_EP_ISR_Handler+0x5be>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8001ef2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f280 824f 	bge.w	800239a <PCD_EP_ISR_Handler+0x5be>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b58      	ldr	r3, [pc, #352]	@ (8002064 <PCD_EP_ISR_Handler+0x288>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f12:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f7ff fad2 	bl	80014c8 <PCD_GET_EP_RX_CNT>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d019      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x18c>
 8001f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x18c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f42:	6959      	ldr	r1, [r3, #20]
 8001f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f004 ff9f 	bl	8006e90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	441a      	add	r2, r3
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f60:	2100      	movs	r1, #0
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f005 fdf0 	bl	8007b48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001f70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 820f 	bne.w	800239a <PCD_EP_ISR_Handler+0x5be>
 8001f7c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001f82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001f86:	f000 8208 	beq.w	800239a <PCD_EP_ISR_Handler+0x5be>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b35      	ldr	r3, [pc, #212]	@ (8002068 <PCD_EP_ISR_Handler+0x28c>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e1f0      	b.n	800239a <PCD_EP_ISR_Handler+0x5be>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	7e7b      	ldrb	r3, [r7, #25]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8001fc8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f280 80c0 	bge.w	8002152 <PCD_EP_ISR_Handler+0x376>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	7e7b      	ldrb	r3, [r7, #25]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <PCD_EP_ISR_Handler+0x288>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	7e7b      	ldrb	r3, [r7, #25]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	6a3a      	ldr	r2, [r7, #32]
 8001ff4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ff8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ffa:	7e7a      	ldrb	r2, [r7, #25]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002012:	7b1b      	ldrb	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d116      	bne.n	8002046 <PCD_EP_ISR_Handler+0x26a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f7ff fa50 	bl	80014c8 <PCD_GET_EP_RX_CNT>
 8002028:	4603      	mov	r3, r0
 800202a:	853b      	strh	r3, [r7, #40]	@ 0x28

          if (count != 0U)
 800202c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d06d      	beq.n	800210e <PCD_EP_ISR_Handler+0x332>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002038:	6959      	ldr	r1, [r3, #20]
 800203a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203c:	88da      	ldrh	r2, [r3, #6]
 800203e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002040:	f004 ff26 	bl	8006e90 <USB_ReadPMA>
 8002044:	e063      	b.n	800210e <PCD_EP_ISR_Handler+0x332>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002048:	78db      	ldrb	r3, [r3, #3]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d10e      	bne.n	800206c <PCD_EP_ISR_Handler+0x290>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800204e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002050:	461a      	mov	r2, r3
 8002052:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f9ad 	bl	80023b4 <HAL_PCD_EP_DB_Receive>
 800205a:	4603      	mov	r3, r0
 800205c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800205e:	e056      	b.n	800210e <PCD_EP_ISR_Handler+0x332>
 8002060:	07ff8f0f 	.word	0x07ff8f0f
 8002064:	07ff0f8f 	.word	0x07ff0f8f
 8002068:	07ffbf8f 	.word	0x07ffbf8f
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4ba2      	ldr	r3, [pc, #648]	@ (8002308 <PCD_EP_ISR_Handler+0x52c>)
 800207e:	4013      	ands	r3, r2
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	441a      	add	r2, r3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002096:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800209a:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d016      	beq.n	80020e2 <PCD_EP_ISR_Handler+0x306>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f7ff fa23 	bl	800150a <PCD_GET_EP_DBUF0_CNT>
 80020c4:	4603      	mov	r3, r0
 80020c6:	853b      	strh	r3, [r7, #40]	@ 0x28

              if (count != 0U)
 80020c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01f      	beq.n	800210e <PCD_EP_ISR_Handler+0x332>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d4:	6959      	ldr	r1, [r3, #20]
 80020d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d8:	891a      	ldrh	r2, [r3, #8]
 80020da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80020dc:	f004 fed8 	bl	8006e90 <USB_ReadPMA>
 80020e0:	e015      	b.n	800210e <PCD_EP_ISR_Handler+0x332>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4619      	mov	r1, r3
 80020ec:	4610      	mov	r0, r2
 80020ee:	f7ff fa2d 	bl	800154c <PCD_GET_EP_DBUF1_CNT>
 80020f2:	4603      	mov	r3, r0
 80020f4:	853b      	strh	r3, [r7, #40]	@ 0x28

              if (count != 0U)
 80020f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <PCD_EP_ISR_Handler+0x332>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002102:	6959      	ldr	r1, [r3, #20]
 8002104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002106:	895a      	ldrh	r2, [r3, #10]
 8002108:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800210a:	f004 fec1 	bl	8006e90 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800210e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002114:	441a      	add	r2, r3
 8002116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002118:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800211a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002120:	441a      	add	r2, r3
 8002122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002124:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <PCD_EP_ISR_Handler+0x35c>
 800212e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d206      	bcs.n	8002146 <PCD_EP_ISR_Handler+0x36a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f005 fd02 	bl	8007b48 <HAL_PCD_DataOutStageCallback>
 8002144:	e005      	b.n	8002152 <PCD_EP_ISR_Handler+0x376>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800214c:	4618      	mov	r0, r3
 800214e:	f003 ff7b 	bl	8006048 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8002152:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 811e 	beq.w	800239a <PCD_EP_ISR_Handler+0x5be>
      {
        ep = &hpcd->IN_ep[epindex];
 800215e:	7e7a      	ldrb	r2, [r7, #25]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	3310      	adds	r3, #16
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	3304      	adds	r3, #4
 8002170:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	7e7b      	ldrb	r3, [r7, #25]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b62      	ldr	r3, [pc, #392]	@ (800230c <PCD_EP_ISR_Handler+0x530>)
 8002182:	4013      	ands	r3, r2
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	7e7b      	ldrb	r3, [r7, #25]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002194:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002198:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800219a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219c:	78db      	ldrb	r3, [r3, #3]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	f040 80b6 	bne.w	8002310 <PCD_EP_ISR_Handler+0x534>
        {
          ep->xfer_len = 0U;
 80021a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80021aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ac:	7b1b      	ldrb	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80a2 	beq.w	80022f8 <PCD_EP_ISR_Handler+0x51c>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80021b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d04e      	beq.n	800225c <PCD_EP_ISR_Handler+0x480>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d124      	bne.n	8002210 <PCD_EP_ISR_Handler+0x434>
 80021c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021e4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002208:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e073      	b.n	80022f8 <PCD_EP_ISR_Handler+0x51c>
 8002210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d16f      	bne.n	80022f8 <PCD_EP_ISR_Handler+0x51c>
 8002218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002222:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002232:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002236:	b292      	uxth	r2, r2
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002244:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002252:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e04d      	b.n	80022f8 <PCD_EP_ISR_Handler+0x51c>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d124      	bne.n	80022ae <PCD_EP_ISR_Handler+0x4d2>
 8002264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800226e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800227e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002282:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002292:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80022a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	e024      	b.n	80022f8 <PCD_EP_ISR_Handler+0x51c>
 80022ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b0:	785b      	ldrb	r3, [r3, #1]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d120      	bne.n	80022f8 <PCD_EP_ISR_Handler+0x51c>
 80022b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80022d4:	b292      	uxth	r2, r2
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80022e2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80022e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80022f4:	6852      	ldr	r2, [r2, #4]
 80022f6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f005 fc3d 	bl	8007b7e <HAL_PCD_DataInStageCallback>
 8002304:	e049      	b.n	800239a <PCD_EP_ISR_Handler+0x5be>
 8002306:	bf00      	nop
 8002308:	07ff8f8f 	.word	0x07ff8f8f
 800230c:	07ff8f0f 	.word	0x07ff8f0f
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002310:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d139      	bne.n	800238e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002324:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	b29b      	uxth	r3, r3
 800232e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002332:	857b      	strh	r3, [r7, #42]	@ 0x2a

            if (ep->xfer_len > TxPctSize)
 8002334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800233a:	429a      	cmp	r2, r3
 800233c:	d906      	bls.n	800234c <PCD_EP_ISR_Handler+0x570>
            {
              ep->xfer_len -= TxPctSize;
 800233e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002348:	619a      	str	r2, [r3, #24]
 800234a:	e002      	b.n	8002352 <PCD_EP_ISR_Handler+0x576>
            }
            else
            {
              ep->xfer_len = 0U;
 800234c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <PCD_EP_ISR_Handler+0x58c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800235a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f005 fc0c 	bl	8007b7e <HAL_PCD_DataInStageCallback>
 8002366:	e018      	b.n	800239a <PCD_EP_ISR_Handler+0x5be>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800236e:	441a      	add	r2, r3
 8002370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002372:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800237a:	441a      	add	r2, r3
 800237c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fe5e 	bl	8006048 <USB_EPStartXfer>
 800238c:	e005      	b.n	800239a <PCD_EP_ISR_Handler+0x5be>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800238e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002390:	461a      	mov	r2, r3
 8002392:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8e7 	bl	8002568 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f ad1e 	bne.w	8001de6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3738      	adds	r7, #56	@ 0x38
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d062      	beq.n	8002492 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f7ff f897 	bl	800150a <PCD_GET_EP_DBUF0_CNT>
 80023dc:	4603      	mov	r3, r0
 80023de:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	8bfb      	ldrh	r3, [r7, #30]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d306      	bcc.n	80023f8 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	8bfb      	ldrh	r3, [r7, #30]
 80023f0:	1ad2      	subs	r2, r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	619a      	str	r2, [r3, #24]
 80023f6:	e002      	b.n	80023fe <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11b      	bne.n	800243e <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b52      	ldr	r3, [pc, #328]	@ (8002560 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	441a      	add	r2, r3
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800243c:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d017      	beq.n	8002478 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b42      	ldr	r3, [pc, #264]	@ (8002564 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800245a:	4013      	ands	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	441a      	add	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002472:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002476:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8002478:	8bfb      	ldrh	r3, [r7, #30]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d06b      	beq.n	8002556 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6959      	ldr	r1, [r3, #20]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	891a      	ldrh	r2, [r3, #8]
 800248a:	8bfb      	ldrh	r3, [r7, #30]
 800248c:	f004 fd00 	bl	8006e90 <USB_ReadPMA>
 8002490:	e061      	b.n	8002556 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	4610      	mov	r0, r2
 800249e:	f7ff f855 	bl	800154c <PCD_GET_EP_DBUF1_CNT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	8bfb      	ldrh	r3, [r7, #30]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d306      	bcc.n	80024be <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	8bfb      	ldrh	r3, [r7, #30]
 80024b6:	1ad2      	subs	r2, r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	e002      	b.n	80024c4 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11b      	bne.n	8002504 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80024de:	4013      	ands	r3, r2
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	441a      	add	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002502:	6013      	str	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d117      	bne.n	800253e <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8002520:	4013      	ands	r3, r2
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	441a      	add	r2, r3
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002538:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800253c:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800253e:	8bfb      	ldrh	r3, [r7, #30]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6959      	ldr	r1, [r3, #20]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	895a      	ldrh	r2, [r3, #10]
 8002550:	8bfb      	ldrh	r3, [r7, #30]
 8002552:	f004 fc9d 	bl	8006e90 <USB_ReadPMA>
    }
  }

  return count;
 8002556:	8bfb      	ldrh	r3, [r7, #30]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3728      	adds	r7, #40	@ 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	07ffbf8f 	.word	0x07ffbf8f
 8002564:	07ff8f8f 	.word	0x07ff8f8f

08002568 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b090      	sub	sp, #64	@ 0x40
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 81f5 	beq.w	800296c <HAL_PCD_EP_DB_Transmit+0x404>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f7fe ffbc 	bl	800150a <PCD_GET_EP_DBUF0_CNT>
 8002592:	4603      	mov	r3, r0
 8002594:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	8bfb      	ldrh	r3, [r7, #30]
 800259c:	429a      	cmp	r2, r3
 800259e:	d906      	bls.n	80025ae <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	8bfb      	ldrh	r3, [r7, #30]
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	e002      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 80e1 	bne.w	8002780 <HAL_PCD_EP_DB_Transmit+0x218>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d124      	bne.n	8002610 <HAL_PCD_EP_DB_Transmit+0xa8>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025e4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002604:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002608:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e024      	b.n	800265a <HAL_PCD_EP_DB_Transmit+0xf2>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d120      	bne.n	800265a <HAL_PCD_EP_DB_Transmit+0xf2>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002632:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002636:	b292      	uxth	r2, r2
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002644:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002652:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d124      	bne.n	80026ac <HAL_PCD_EP_DB_Transmit+0x144>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800266c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800267c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002680:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002690:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80026a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	e024      	b.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x18e>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d120      	bne.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x18e>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80026d2:	b292      	uxth	r2, r2
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80026e0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80026f2:	6852      	ldr	r2, [r2, #4]
 80026f4:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	78db      	ldrb	r3, [r3, #3]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d11b      	bne.n	8002736 <HAL_PCD_EP_DB_Transmit+0x1ce>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4ba2      	ldr	r3, [pc, #648]	@ (8002998 <HAL_PCD_EP_DB_Transmit+0x430>)
 8002710:	4013      	ands	r3, r2
 8002712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002716:	f083 0320 	eor.w	r3, r3, #32
 800271a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	441a      	add	r2, r3
 800272a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800272c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002734:	6013      	str	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f005 fa1e 	bl	8007b7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d017      	beq.n	800277c <HAL_PCD_EP_DB_Transmit+0x214>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b8f      	ldr	r3, [pc, #572]	@ (800299c <HAL_PCD_EP_DB_Transmit+0x434>)
 800275e:	4013      	ands	r3, r2
 8002760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	441a      	add	r2, r3
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800277a:	6013      	str	r3, [r2, #0]
      }

      return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e312      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x83e>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d017      	beq.n	80027ba <HAL_PCD_EP_DB_Transmit+0x252>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b80      	ldr	r3, [pc, #512]	@ (800299c <HAL_PCD_EP_DB_Transmit+0x434>)
 800279c:	4013      	ands	r3, r2
 800279e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027b8:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	f040 82cf 	bne.w	8002d64 <HAL_PCD_EP_DB_Transmit+0x7fc>
      {
        ep->xfer_buff += TxPctSize;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	8bfb      	ldrh	r3, [r7, #30]
 80027cc:	441a      	add	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	8bfb      	ldrh	r3, [r7, #30]
 80027d8:	441a      	add	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6a1a      	ldr	r2, [r3, #32]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d309      	bcc.n	80027fe <HAL_PCD_EP_DB_Transmit+0x296>
        {
          len = ep->maxpacket;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	1ad2      	subs	r2, r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	621a      	str	r2, [r3, #32]
 80027fc:	e014      	b.n	8002828 <HAL_PCD_EP_DB_Transmit+0x2c0>
        }
        else if (ep->xfer_len_db == 0U)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_PCD_EP_DB_Transmit+0x2ac>
        {
          len = TxPctSize;
 8002806:	8bfb      	ldrh	r3, [r7, #30]
 8002808:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002812:	e009      	b.n	8002828 <HAL_PCD_EP_DB_Transmit+0x2c0>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d16a      	bne.n	8002906 <HAL_PCD_EP_DB_Transmit+0x39e>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800283a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800284a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800284e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002856:	2b00      	cmp	r3, #0
 8002858:	d112      	bne.n	8002880 <HAL_PCD_EP_DB_Transmit+0x318>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002864:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002874:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002878:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e06a      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8002880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002882:	2b3e      	cmp	r3, #62	@ 0x3e
 8002884:	d81e      	bhi.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x35c>
 8002886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	633b      	str	r3, [r7, #48]	@ 0x30
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_PCD_EP_DB_Transmit+0x334>
 8002896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002898:	3301      	adds	r3, #1
 800289a:	633b      	str	r3, [r7, #48]	@ 0x30
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ae:	069a      	lsls	r2, r3, #26
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e048      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0x3ee>
 80028c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <HAL_PCD_EP_DB_Transmit+0x372>
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	3b01      	subs	r3, #1
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ec:	069b      	lsls	r3, r3, #26
 80028ee:	431a      	orrs	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80028fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e027      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d123      	bne.n	8002956 <HAL_PCD_EP_DB_Transmit+0x3ee>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002918:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002928:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800292c:	b292      	uxth	r2, r2
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800293a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	041a      	lsls	r2, r3, #16
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800294e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	6959      	ldr	r1, [r3, #20]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	891a      	ldrh	r2, [r3, #8]
 8002962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002964:	b29b      	uxth	r3, r3
 8002966:	f004 fa32 	bl	8006dce <USB_WritePMA>
 800296a:	e1fb      	b.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x7fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f7fe fde8 	bl	800154c <PCD_GET_EP_DBUF1_CNT>
 800297c:	4603      	mov	r3, r0
 800297e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8bfb      	ldrh	r3, [r7, #30]
 8002986:	429a      	cmp	r2, r3
 8002988:	d30a      	bcc.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x438>
    {
      ep->xfer_len -= TxPctSize;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	8bfb      	ldrh	r3, [r7, #30]
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	619a      	str	r2, [r3, #24]
 8002996:	e006      	b.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x43e>
 8002998:	07ff8fbf 	.word	0x07ff8fbf
 800299c:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80e1 	bne.w	8002b72 <HAL_PCD_EP_DB_Transmit+0x60a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d124      	bne.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x49a>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e024      	b.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x4e4>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d120      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x4e4>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002a36:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d124      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x536>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a72:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a96:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	e024      	b.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x580>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d120      	bne.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x580>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ac0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002ad2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ae0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ae4:	6852      	ldr	r2, [r2, #4]
 8002ae6:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	78db      	ldrb	r3, [r3, #3]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d11b      	bne.n	8002b28 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf8 <HAL_PCD_EP_DB_Transmit+0x790>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	f083 0320 	eor.w	r3, r3, #32
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	441a      	add	r2, r3
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b26:	6013      	str	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f005 f825 	bl	8007b7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d117      	bne.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x606>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002cfc <HAL_PCD_EP_DB_Transmit+0x794>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b6c:	6013      	str	r3, [r2, #0]
      }

      return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e119      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x83e>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d117      	bne.n	8002bac <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b5b      	ldr	r3, [pc, #364]	@ (8002cfc <HAL_PCD_EP_DB_Transmit+0x794>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002baa:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	f040 80d6 	bne.w	8002d64 <HAL_PCD_EP_DB_Transmit+0x7fc>
      {
        ep->xfer_buff += TxPctSize;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	8bfb      	ldrh	r3, [r7, #30]
 8002bbe:	441a      	add	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	8bfb      	ldrh	r3, [r7, #30]
 8002bca:	441a      	add	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d309      	bcc.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x688>
        {
          len = ep->maxpacket;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be8:	1ad2      	subs	r2, r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	621a      	str	r2, [r3, #32]
 8002bee:	e014      	b.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x6b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x69e>
        {
          len = TxPctSize;
 8002bf8:	8bfb      	ldrh	r3, [r7, #30]
 8002bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c04:	e009      	b.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x6b2>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	785b      	ldrb	r3, [r3, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d16e      	bne.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x798>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c40:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d112      	bne.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x70a>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	e06e      	b.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x7e8>
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c76:	d81e      	bhi.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0x74e>
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x726>
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	069a      	lsls	r2, r3, #26
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	e04c      	b.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x7e8>
 8002cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x764>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	069b      	lsls	r3, r3, #26
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cf0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	e02b      	b.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x7e8>
 8002cf8:	07ff8fbf 	.word	0x07ff8fbf
 8002cfc:	07ff8f8f 	.word	0x07ff8f8f
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d123      	bne.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x7e8>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d26:	b292      	uxth	r2, r2
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	041a      	lsls	r2, r3, #16
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6959      	ldr	r1, [r3, #20]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	895a      	ldrh	r2, [r3, #10]
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f004 f835 	bl	8006dce <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <HAL_PCD_EP_DB_Transmit+0x848>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	f083 0310 	eor.w	r3, r3, #16
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d84:	f083 0320 	eor.w	r3, r3, #32
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3740      	adds	r7, #64	@ 0x40
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	07ff8fbf 	.word	0x07ff8fbf

08002db4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00c      	beq.n	8002dec <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	f003 0207 	and.w	r2, r3, #7
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3310      	adds	r3, #16
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	3304      	adds	r3, #4
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e00a      	b.n	8002e02 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dec:	897a      	ldrh	r2, [r7, #10]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e02:	893b      	ldrh	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	80da      	strh	r2, [r3, #6]
 8002e16:	e00b      	b.n	8002e30 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	f043 0202 	orr.w	r2, r3, #2
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002ea4:	4b39      	ldr	r3, [pc, #228]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10b      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ebc:	d905      	bls.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002ebe:	4b33      	ldr	r3, [pc, #204]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a32      	ldr	r2, [pc, #200]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ec8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e057      	b.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed4:	d90a      	bls.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee8:	60d3      	str	r3, [r2, #12]
 8002eea:	e007      	b.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002eec:	4b27      	ldr	r3, [pc, #156]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002ef4:	4925      	ldr	r1, [pc, #148]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002efc:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a24      	ldr	r2, [pc, #144]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	2232      	movs	r2, #50	@ 0x32
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a21      	ldr	r2, [pc, #132]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	3301      	adds	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002f1a:	e002      	b.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002f22:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f3      	bne.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01b      	beq.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002f3a:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a15      	ldr	r2, [pc, #84]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	2232      	movs	r2, #50	@ 0x32
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	4a11      	ldr	r2, [pc, #68]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002f58:	e002      	b.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f3      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	46020800 	.word	0x46020800
 8002f90:	20000000 	.word	0x20000000
 8002f94:	10624dd3 	.word	0x10624dd3

08002f98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002f9c:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	46020800 	.word	0x46020800

08002fb4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002fbc:	4b22      	ldr	r3, [pc, #136]	@ (8003048 <HAL_PWREx_ConfigSupply+0x94>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a22      	ldr	r2, [pc, #136]	@ (800304c <HAL_PWREx_ConfigSupply+0x98>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	2232      	movs	r2, #50	@ 0x32
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	4a1f      	ldr	r2, [pc, #124]	@ (800304c <HAL_PWREx_ConfigSupply+0x98>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d113      	bne.n	8003008 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_PWREx_ConfigSupply+0x9c>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8003050 <HAL_PWREx_ConfigSupply+0x9c>)
 8002fe6:	f023 0302 	bic.w	r3, r3, #2
 8002fea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002fec:	e002      	b.n	8002ff4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002ff4:	4b16      	ldr	r3, [pc, #88]	@ (8003050 <HAL_PWREx_ConfigSupply+0x9c>)
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d116      	bne.n	800302e <HAL_PWREx_ConfigSupply+0x7a>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f3      	bne.n	8002fee <HAL_PWREx_ConfigSupply+0x3a>
 8003006:	e012      	b.n	800302e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_PWREx_ConfigSupply+0x9c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a10      	ldr	r2, [pc, #64]	@ (8003050 <HAL_PWREx_ConfigSupply+0x9c>)
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003014:	e002      	b.n	800301c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3b01      	subs	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <HAL_PWREx_ConfigSupply+0x9c>)
 800301e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <HAL_PWREx_ConfigSupply+0x7a>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f3      	bne.n	8003016 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e000      	b.n	800303a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000
 800304c:	10624dd3 	.word	0x10624dd3
 8003050:	46020800 	.word	0x46020800

08003054 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_PWREx_EnableVddUSB+0x1c>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <HAL_PWREx_EnableVddUSB+0x1c>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003062:	6113      	str	r3, [r2, #16]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	46020800 	.word	0x46020800

08003074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08e      	sub	sp, #56	@ 0x38
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f000 bec8 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308e:	4b99      	ldr	r3, [pc, #612]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003098:	4b96      	ldr	r3, [pc, #600]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 816c 	beq.w	8003388 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_RCC_OscConfig+0x52>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	f040 80de 	bne.w	800327a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 80da 	bne.w	800327a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f000 bea5 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030d8:	4b86      	ldr	r3, [pc, #536]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <HAL_RCC_OscConfig+0x7a>
 80030e4:	4b83      	ldr	r3, [pc, #524]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80030ec:	e005      	b.n	80030fa <HAL_RCC_OscConfig+0x86>
 80030ee:	4b81      	ldr	r3, [pc, #516]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d255      	bcs.n	80031aa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	4618      	mov	r0, r3
 800310a:	f001 f99d 	bl	8004448 <RCC_SetFlashLatencyFromMSIRange>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f000 be82 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800311a:	4b76      	ldr	r3, [pc, #472]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4a75      	ldr	r2, [pc, #468]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003120:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003124:	6093      	str	r3, [r2, #8]
 8003126:	4b73      	ldr	r3, [pc, #460]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	4970      	ldr	r1, [pc, #448]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003140:	d309      	bcc.n	8003156 <HAL_RCC_OscConfig+0xe2>
 8003142:	4b6c      	ldr	r3, [pc, #432]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f023 021f 	bic.w	r2, r3, #31
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4969      	ldr	r1, [pc, #420]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003150:	4313      	orrs	r3, r2
 8003152:	60cb      	str	r3, [r1, #12]
 8003154:	e07e      	b.n	8003254 <HAL_RCC_OscConfig+0x1e0>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	da0a      	bge.n	8003174 <HAL_RCC_OscConfig+0x100>
 800315e:	4b65      	ldr	r3, [pc, #404]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	015b      	lsls	r3, r3, #5
 800316c:	4961      	ldr	r1, [pc, #388]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 800316e:	4313      	orrs	r3, r2
 8003170:	60cb      	str	r3, [r1, #12]
 8003172:	e06f      	b.n	8003254 <HAL_RCC_OscConfig+0x1e0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317c:	d30a      	bcc.n	8003194 <HAL_RCC_OscConfig+0x120>
 800317e:	4b5d      	ldr	r3, [pc, #372]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	029b      	lsls	r3, r3, #10
 800318c:	4959      	ldr	r1, [pc, #356]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 800318e:	4313      	orrs	r3, r2
 8003190:	60cb      	str	r3, [r1, #12]
 8003192:	e05f      	b.n	8003254 <HAL_RCC_OscConfig+0x1e0>
 8003194:	4b57      	ldr	r3, [pc, #348]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	03db      	lsls	r3, r3, #15
 80031a2:	4954      	ldr	r1, [pc, #336]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60cb      	str	r3, [r1, #12]
 80031a8:	e054      	b.n	8003254 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80031aa:	4b52      	ldr	r3, [pc, #328]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4a51      	ldr	r2, [pc, #324]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031b4:	6093      	str	r3, [r2, #8]
 80031b6:	4b4f      	ldr	r3, [pc, #316]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	494c      	ldr	r1, [pc, #304]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80031d0:	d309      	bcc.n	80031e6 <HAL_RCC_OscConfig+0x172>
 80031d2:	4b48      	ldr	r3, [pc, #288]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 021f 	bic.w	r2, r3, #31
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4945      	ldr	r1, [pc, #276]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60cb      	str	r3, [r1, #12]
 80031e4:	e028      	b.n	8003238 <HAL_RCC_OscConfig+0x1c4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da0a      	bge.n	8003204 <HAL_RCC_OscConfig+0x190>
 80031ee:	4b41      	ldr	r3, [pc, #260]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	015b      	lsls	r3, r3, #5
 80031fc:	493d      	ldr	r1, [pc, #244]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	60cb      	str	r3, [r1, #12]
 8003202:	e019      	b.n	8003238 <HAL_RCC_OscConfig+0x1c4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320c:	d30a      	bcc.n	8003224 <HAL_RCC_OscConfig+0x1b0>
 800320e:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	4935      	ldr	r1, [pc, #212]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 800321e:	4313      	orrs	r3, r2
 8003220:	60cb      	str	r3, [r1, #12]
 8003222:	e009      	b.n	8003238 <HAL_RCC_OscConfig+0x1c4>
 8003224:	4b33      	ldr	r3, [pc, #204]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	03db      	lsls	r3, r3, #15
 8003232:	4930      	ldr	r1, [pc, #192]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003234:	4313      	orrs	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	4618      	mov	r0, r3
 8003244:	f001 f900 	bl	8004448 <RCC_SetFlashLatencyFromMSIRange>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f000 bde5 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003254:	f001 f8de 	bl	8004414 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003258:	4b27      	ldr	r3, [pc, #156]	@ (80032f8 <HAL_RCC_OscConfig+0x284>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fc55 	bl	8000b0c <HAL_InitTick>
 8003262:	4603      	mov	r3, r0
 8003264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 808a 	beq.w	8003386 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003272:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003276:	f000 bdd2 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d066      	beq.n	8003350 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003282:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800328e:	f7fd fcc7 	bl	8000c20 <HAL_GetTick>
 8003292:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003294:	e009      	b.n	80032aa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003296:	f7fd fcc3 	bl	8000c20 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d902      	bls.n	80032aa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	f000 bdba 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0ef      	beq.n	8003296 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80032b6:	4b0f      	ldr	r3, [pc, #60]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4a0e      	ldr	r2, [pc, #56]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032c0:	6093      	str	r3, [r2, #8]
 80032c2:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	4909      	ldr	r1, [pc, #36]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80032dc:	d30e      	bcc.n	80032fc <HAL_RCC_OscConfig+0x288>
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f023 021f 	bic.w	r2, r3, #31
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4902      	ldr	r1, [pc, #8]	@ (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60cb      	str	r3, [r1, #12]
 80032f0:	e04a      	b.n	8003388 <HAL_RCC_OscConfig+0x314>
 80032f2:	bf00      	nop
 80032f4:	46020c00 	.word	0x46020c00
 80032f8:	20000014 	.word	0x20000014
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	2b00      	cmp	r3, #0
 8003302:	da0a      	bge.n	800331a <HAL_RCC_OscConfig+0x2a6>
 8003304:	4b98      	ldr	r3, [pc, #608]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	015b      	lsls	r3, r3, #5
 8003312:	4995      	ldr	r1, [pc, #596]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	4313      	orrs	r3, r2
 8003316:	60cb      	str	r3, [r1, #12]
 8003318:	e036      	b.n	8003388 <HAL_RCC_OscConfig+0x314>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003322:	d30a      	bcc.n	800333a <HAL_RCC_OscConfig+0x2c6>
 8003324:	4b90      	ldr	r3, [pc, #576]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	029b      	lsls	r3, r3, #10
 8003332:	498d      	ldr	r1, [pc, #564]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	4313      	orrs	r3, r2
 8003336:	60cb      	str	r3, [r1, #12]
 8003338:	e026      	b.n	8003388 <HAL_RCC_OscConfig+0x314>
 800333a:	4b8b      	ldr	r3, [pc, #556]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	03db      	lsls	r3, r3, #15
 8003348:	4987      	ldr	r1, [pc, #540]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	60cb      	str	r3, [r1, #12]
 800334e:	e01b      	b.n	8003388 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003350:	4b85      	ldr	r3, [pc, #532]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a84      	ldr	r2, [pc, #528]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800335c:	f7fd fc60 	bl	8000c20 <HAL_GetTick>
 8003360:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003362:	e009      	b.n	8003378 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003364:	f7fd fc5c 	bl	8000c20 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	f000 bd53 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003378:	4b7b      	ldr	r3, [pc, #492]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ef      	bne.n	8003364 <HAL_RCC_OscConfig+0x2f0>
 8003384:	e000      	b.n	8003388 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003386:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 808b 	beq.w	80034ac <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	2b08      	cmp	r3, #8
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x334>
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d17d      	bne.n	80034ac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f000 bd34 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x35a>
 80033c0:	4b69      	ldr	r3, [pc, #420]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a68      	ldr	r2, [pc, #416]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e041      	b.n	8003452 <HAL_RCC_OscConfig+0x3de>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d6:	d112      	bne.n	80033fe <HAL_RCC_OscConfig+0x38a>
 80033d8:	4b63      	ldr	r3, [pc, #396]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a62      	ldr	r2, [pc, #392]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80033de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b60      	ldr	r3, [pc, #384]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80033ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a5c      	ldr	r2, [pc, #368]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e029      	b.n	8003452 <HAL_RCC_OscConfig+0x3de>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003406:	d112      	bne.n	800342e <HAL_RCC_OscConfig+0x3ba>
 8003408:	4b57      	ldr	r3, [pc, #348]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a56      	ldr	r2, [pc, #344]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800340e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b54      	ldr	r3, [pc, #336]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a53      	ldr	r2, [pc, #332]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b51      	ldr	r3, [pc, #324]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a50      	ldr	r2, [pc, #320]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e011      	b.n	8003452 <HAL_RCC_OscConfig+0x3de>
 800342e:	4b4e      	ldr	r3, [pc, #312]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4d      	ldr	r2, [pc, #308]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b4b      	ldr	r3, [pc, #300]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a4a      	ldr	r2, [pc, #296]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b48      	ldr	r3, [pc, #288]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a47      	ldr	r2, [pc, #284]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003450:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d014      	beq.n	8003484 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800345a:	f7fd fbe1 	bl	8000c20 <HAL_GetTick>
 800345e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003460:	e009      	b.n	8003476 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003462:	f7fd fbdd 	bl	8000c20 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b64      	cmp	r3, #100	@ 0x64
 800346e:	d902      	bls.n	8003476 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	f000 bcd4 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	4b3c      	ldr	r3, [pc, #240]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ef      	beq.n	8003462 <HAL_RCC_OscConfig+0x3ee>
 8003482:	e013      	b.n	80034ac <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003484:	f7fd fbcc 	bl	8000c20 <HAL_GetTick>
 8003488:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348a:	e009      	b.n	80034a0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348c:	f7fd fbc8 	bl	8000c20 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	@ 0x64
 8003498:	d902      	bls.n	80034a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	f000 bcbf 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a0:	4b31      	ldr	r3, [pc, #196]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ef      	bne.n	800348c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05f      	beq.n	8003578 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x456>
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d114      	bne.n	80034ee <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d111      	bne.n	80034ee <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f000 bca3 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80034d8:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	4920      	ldr	r1, [pc, #128]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034ec:	e044      	b.n	8003578 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d024      	beq.n	8003540 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80034f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003500:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003502:	f7fd fb8d 	bl	8000c20 <HAL_GetTick>
 8003506:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003508:	e009      	b.n	800351e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350a:	f7fd fb89 	bl	8000c20 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d902      	bls.n	800351e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	f000 bc80 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351e:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ef      	beq.n	800350a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	490b      	ldr	r1, [pc, #44]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	610b      	str	r3, [r1, #16]
 800353e:	e01b      	b.n	8003578 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003540:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a08      	ldr	r2, [pc, #32]	@ (8003568 <HAL_RCC_OscConfig+0x4f4>)
 8003546:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800354a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800354c:	f7fd fb68 	bl	8000c20 <HAL_GetTick>
 8003550:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fd fb64 	bl	8000c20 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d904      	bls.n	800356c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	f000 bc5b 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
 8003568:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800356c:	4baf      	ldr	r3, [pc, #700]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ed      	bne.n	8003554 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80c8 	beq.w	8003716 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358c:	4ba7      	ldr	r3, [pc, #668]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d111      	bne.n	80035be <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	4ba4      	ldr	r3, [pc, #656]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800359c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035a0:	4aa2      	ldr	r2, [pc, #648]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80035a2:	f043 0304 	orr.w	r3, r3, #4
 80035a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80035aa:	4ba0      	ldr	r3, [pc, #640]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035be:	4b9c      	ldr	r3, [pc, #624]	@ (8003830 <HAL_RCC_OscConfig+0x7bc>)
 80035c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d119      	bne.n	80035fe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80035ca:	4b99      	ldr	r3, [pc, #612]	@ (8003830 <HAL_RCC_OscConfig+0x7bc>)
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	4a98      	ldr	r2, [pc, #608]	@ (8003830 <HAL_RCC_OscConfig+0x7bc>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7fd fb23 	bl	8000c20 <HAL_GetTick>
 80035da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035dc:	e009      	b.n	80035f2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035de:	f7fd fb1f 	bl	8000c20 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d902      	bls.n	80035f2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	f000 bc16 	b.w	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003830 <HAL_RCC_OscConfig+0x7bc>)
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ef      	beq.n	80035de <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d05f      	beq.n	80036c6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003606:	4b89      	ldr	r3, [pc, #548]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 8003608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800360c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003618:	429a      	cmp	r2, r3
 800361a:	d037      	beq.n	800368c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e3f4      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01b      	beq.n	8003676 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800363e:	4b7b      	ldr	r3, [pc, #492]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 8003640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003644:	4a79      	ldr	r2, [pc, #484]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 8003646:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800364a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800364e:	f7fd fae7 	bl	8000c20 <HAL_GetTick>
 8003652:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003656:	f7fd fae3 	bl	8000c20 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b05      	cmp	r3, #5
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e3da      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003668:	4b70      	ldr	r3, [pc, #448]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800366a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800366e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ef      	bne.n	8003656 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003676:	4b6d      	ldr	r3, [pc, #436]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 8003678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800367c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	4969      	ldr	r1, [pc, #420]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800368c:	4b67      	ldr	r3, [pc, #412]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800368e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003692:	4a66      	ldr	r2, [pc, #408]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 8003694:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003698:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800369c:	f7fd fac0 	bl	8000c20 <HAL_GetTick>
 80036a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fd fabc 	bl	8000c20 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e3b3      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80036b6:	4b5d      	ldr	r3, [pc, #372]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80036b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ef      	beq.n	80036a4 <HAL_RCC_OscConfig+0x630>
 80036c4:	e01b      	b.n	80036fe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80036c6:	4b59      	ldr	r3, [pc, #356]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80036c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036cc:	4a57      	ldr	r2, [pc, #348]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80036ce:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80036d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80036d6:	f7fd faa3 	bl	8000c20 <HAL_GetTick>
 80036da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036de:	f7fd fa9f 	bl	8000c20 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e396      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80036f0:	4b4e      	ldr	r3, [pc, #312]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80036f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ef      	bne.n	80036de <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036fe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003702:	2b01      	cmp	r3, #1
 8003704:	d107      	bne.n	8003716 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4b49      	ldr	r3, [pc, #292]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 8003708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370c:	4a47      	ldr	r2, [pc, #284]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800370e:	f023 0304 	bic.w	r3, r3, #4
 8003712:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8111 	beq.w	8003946 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b40      	ldr	r3, [pc, #256]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800372c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d111      	bne.n	800375c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b3c      	ldr	r3, [pc, #240]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373e:	4a3b      	ldr	r2, [pc, #236]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003748:	4b38      	ldr	r3, [pc, #224]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800375c:	4b34      	ldr	r3, [pc, #208]	@ (8003830 <HAL_RCC_OscConfig+0x7bc>)
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003768:	4b31      	ldr	r3, [pc, #196]	@ (8003830 <HAL_RCC_OscConfig+0x7bc>)
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	4a30      	ldr	r2, [pc, #192]	@ (8003830 <HAL_RCC_OscConfig+0x7bc>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fd fa54 	bl	8000c20 <HAL_GetTick>
 8003778:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fd fa50 	bl	8000c20 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e347      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800378e:	4b28      	ldr	r3, [pc, #160]	@ (8003830 <HAL_RCC_OscConfig+0x7bc>)
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01f      	beq.n	80037e6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d010      	beq.n	80037d4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037b2:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037b8:	4a1c      	ldr	r2, [pc, #112]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037c2:	4b1a      	ldr	r3, [pc, #104]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037c8:	4a18      	ldr	r2, [pc, #96]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037d2:	e018      	b.n	8003806 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037d4:	4b15      	ldr	r3, [pc, #84]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037da:	4a14      	ldr	r2, [pc, #80]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037e4:	e00f      	b.n	8003806 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037e6:	4b11      	ldr	r3, [pc, #68]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037ec:	4a0f      	ldr	r2, [pc, #60]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037fc:	4a0b      	ldr	r2, [pc, #44]	@ (800382c <HAL_RCC_OscConfig+0x7b8>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d057      	beq.n	80038be <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800380e:	f7fd fa07 	bl	8000c20 <HAL_GetTick>
 8003812:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003814:	e00e      	b.n	8003834 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fd fa03 	bl	8000c20 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d905      	bls.n	8003834 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e2f8      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
 800382c:	46020c00 	.word	0x46020c00
 8003830:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003834:	4b9c      	ldr	r3, [pc, #624]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0e9      	beq.n	8003816 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01b      	beq.n	8003886 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800384e:	4b96      	ldr	r3, [pc, #600]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003854:	4a94      	ldr	r2, [pc, #592]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800385a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fd f9de 	bl	8000c20 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e2d3      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003876:	4b8c      	ldr	r3, [pc, #560]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800387c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ed      	beq.n	8003860 <HAL_RCC_OscConfig+0x7ec>
 8003884:	e053      	b.n	800392e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003886:	4b88      	ldr	r3, [pc, #544]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800388c:	4a86      	ldr	r2, [pc, #536]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 800388e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003892:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fd f9c2 	bl	8000c20 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e2b7      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038ae:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 80038b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ed      	bne.n	8003898 <HAL_RCC_OscConfig+0x824>
 80038bc:	e037      	b.n	800392e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80038be:	f7fd f9af 	bl	8000c20 <HAL_GetTick>
 80038c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fd f9ab 	bl	8000c20 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e2a0      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038dc:	4b72      	ldr	r3, [pc, #456]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 80038de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ed      	bne.n	80038c6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80038ea:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 80038ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01a      	beq.n	800392e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038f8:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 80038fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038fe:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003900:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003904:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fd f989 	bl	8000c20 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e27e      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003920:	4b61      	ldr	r3, [pc, #388]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ed      	bne.n	800390a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800392e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003936:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393c:	4a5a      	ldr	r2, [pc, #360]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 800393e:	f023 0304 	bic.w	r3, r3, #4
 8003942:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d036      	beq.n	80039c0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800395a:	4b53      	ldr	r3, [pc, #332]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a52      	ldr	r2, [pc, #328]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003960:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003964:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003966:	f7fd f95b 	bl	8000c20 <HAL_GetTick>
 800396a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800396e:	f7fd f957 	bl	8000c20 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e24e      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003980:	4b49      	ldr	r3, [pc, #292]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x8fa>
 800398c:	e018      	b.n	80039c0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800398e:	4b46      	ldr	r3, [pc, #280]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a45      	ldr	r2, [pc, #276]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003994:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003998:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800399a:	f7fd f941 	bl	8000c20 <HAL_GetTick>
 800399e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a2:	f7fd f93d 	bl	8000c20 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e234      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039b4:	4b3c      	ldr	r3, [pc, #240]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d036      	beq.n	8003a3a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d019      	beq.n	8003a08 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80039d4:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a33      	ldr	r2, [pc, #204]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 80039da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80039e0:	f7fd f91e 	bl	8000c20 <HAL_GetTick>
 80039e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80039e8:	f7fd f91a 	bl	8000c20 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e211      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80039fa:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x974>
 8003a06:	e018      	b.n	8003a3a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003a08:	4b27      	ldr	r3, [pc, #156]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a26      	ldr	r2, [pc, #152]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003a14:	f7fd f904 	bl	8000c20 <HAL_GetTick>
 8003a18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003a1c:	f7fd f900 	bl	8000c20 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1f7      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d07f      	beq.n	8003b46 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d062      	beq.n	8003b14 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003a4e:	4b16      	ldr	r3, [pc, #88]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4a15      	ldr	r2, [pc, #84]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a58:	6093      	str	r3, [r2, #8]
 8003a5a:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	4910      	ldr	r1, [pc, #64]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a74:	d309      	bcc.n	8003a8a <HAL_RCC_OscConfig+0xa16>
 8003a76:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f023 021f 	bic.w	r2, r3, #31
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4909      	ldr	r1, [pc, #36]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60cb      	str	r3, [r1, #12]
 8003a88:	e02a      	b.n	8003ae0 <HAL_RCC_OscConfig+0xa6c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da0c      	bge.n	8003aac <HAL_RCC_OscConfig+0xa38>
 8003a92:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	015b      	lsls	r3, r3, #5
 8003aa0:	4901      	ldr	r1, [pc, #4]	@ (8003aa8 <HAL_RCC_OscConfig+0xa34>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60cb      	str	r3, [r1, #12]
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0xa6c>
 8003aa8:	46020c00 	.word	0x46020c00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab4:	d30a      	bcc.n	8003acc <HAL_RCC_OscConfig+0xa58>
 8003ab6:	4ba1      	ldr	r3, [pc, #644]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	029b      	lsls	r3, r3, #10
 8003ac4:	499d      	ldr	r1, [pc, #628]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60cb      	str	r3, [r1, #12]
 8003aca:	e009      	b.n	8003ae0 <HAL_RCC_OscConfig+0xa6c>
 8003acc:	4b9b      	ldr	r3, [pc, #620]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	03db      	lsls	r3, r3, #15
 8003ada:	4998      	ldr	r1, [pc, #608]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003ae0:	4b96      	ldr	r3, [pc, #600]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a95      	ldr	r2, [pc, #596]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003aec:	f7fd f898 	bl	8000c20 <HAL_GetTick>
 8003af0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003af4:	f7fd f894 	bl	8000c20 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e18b      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003b06:	4b8d      	ldr	r3, [pc, #564]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0xa80>
 8003b12:	e018      	b.n	8003b46 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003b14:	4b89      	ldr	r3, [pc, #548]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a88      	ldr	r2, [pc, #544]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003b1a:	f023 0310 	bic.w	r3, r3, #16
 8003b1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003b20:	f7fd f87e 	bl	8000c20 <HAL_GetTick>
 8003b24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003b28:	f7fd f87a 	bl	8000c20 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e171      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003b3a:	4b80      	ldr	r3, [pc, #512]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8166 	beq.w	8003e1c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b56:	4b79      	ldr	r3, [pc, #484]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	f000 80f2 	beq.w	8003d48 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	f040 80c5 	bne.w	8003cf8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	4b73      	ldr	r3, [pc, #460]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a72      	ldr	r2, [pc, #456]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003b74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b7a:	f7fd f851 	bl	8000c20 <HAL_GetTick>
 8003b7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fd f84d 	bl	8000c20 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e144      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b94:	4b69      	ldr	r3, [pc, #420]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba0:	4b66      	ldr	r3, [pc, #408]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d111      	bne.n	8003bd2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	4b63      	ldr	r3, [pc, #396]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb4:	4a61      	ldr	r2, [pc, #388]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d40 <HAL_RCC_OscConfig+0xccc>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003be6:	4b56      	ldr	r3, [pc, #344]	@ (8003d40 <HAL_RCC_OscConfig+0xccc>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4a55      	ldr	r2, [pc, #340]	@ (8003d40 <HAL_RCC_OscConfig+0xccc>)
 8003bec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003bf2:	4b52      	ldr	r3, [pc, #328]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c06:	3a01      	subs	r2, #1
 8003c08:	0212      	lsls	r2, r2, #8
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c10:	430a      	orrs	r2, r1
 8003c12:	494a      	ldr	r1, [pc, #296]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c18:	4b48      	ldr	r3, [pc, #288]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c1c:	4b49      	ldr	r3, [pc, #292]	@ (8003d44 <HAL_RCC_OscConfig+0xcd0>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c24:	3a01      	subs	r2, #1
 8003c26:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c2e:	3a01      	subs	r2, #1
 8003c30:	0252      	lsls	r2, r2, #9
 8003c32:	b292      	uxth	r2, r2
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	0412      	lsls	r2, r2, #16
 8003c3e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0612      	lsls	r2, r2, #24
 8003c4c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003c50:	430a      	orrs	r2, r1
 8003c52:	493a      	ldr	r1, [pc, #232]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003c58:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	4a37      	ldr	r2, [pc, #220]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c5e:	f023 0310 	bic.w	r3, r3, #16
 8003c62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c68:	4a34      	ldr	r2, [pc, #208]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003c6e:	4b33      	ldr	r3, [pc, #204]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	4a32      	ldr	r2, [pc, #200]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c74:	f043 0310 	orr.w	r3, r3, #16
 8003c78:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003c7a:	4b30      	ldr	r3, [pc, #192]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	f023 020c 	bic.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	492d      	ldr	r1, [pc, #180]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003c94:	4b2a      	ldr	r3, [pc, #168]	@ (8003d40 <HAL_RCC_OscConfig+0xccc>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a29      	ldr	r2, [pc, #164]	@ (8003d40 <HAL_RCC_OscConfig+0xccc>)
 8003c9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c9e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003ca0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003ca8:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cae:	4a23      	ldr	r2, [pc, #140]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003cc4:	f7fc ffac 	bl	8000c20 <HAL_GetTick>
 8003cc8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fc ffa8 	bl	8000c20 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e09f      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003cde:	4b17      	ldr	r3, [pc, #92]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cea:	4b14      	ldr	r3, [pc, #80]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	4a13      	ldr	r2, [pc, #76]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cf4:	6293      	str	r3, [r2, #40]	@ 0x28
 8003cf6:	e091      	b.n	8003e1c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003cf8:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d04:	f7fc ff8c 	bl	8000c20 <HAL_GetTick>
 8003d08:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fc ff88 	bl	8000c20 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d1e:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003d2a:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	4a03      	ldr	r2, [pc, #12]	@ (8003d3c <HAL_RCC_OscConfig+0xcc8>)
 8003d30:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003d34:	f023 0303 	bic.w	r3, r3, #3
 8003d38:	6293      	str	r3, [r2, #40]	@ 0x28
 8003d3a:	e06f      	b.n	8003e1c <HAL_RCC_OscConfig+0xda8>
 8003d3c:	46020c00 	.word	0x46020c00
 8003d40:	46020800 	.word	0x46020800
 8003d44:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003d48:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <HAL_RCC_OscConfig+0xdb4>)
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d4e:	4b36      	ldr	r3, [pc, #216]	@ (8003e28 <HAL_RCC_OscConfig+0xdb4>)
 8003d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d52:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d039      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0203 	and.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d132      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d129      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d122      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d11a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	0a5b      	lsrs	r3, r3, #9
 8003d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d108      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e024      	b.n	8003e1e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003dd4:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <HAL_RCC_OscConfig+0xdb4>)
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd8:	08db      	lsrs	r3, r3, #3
 8003dda:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d01a      	beq.n	8003e1c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003de6:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <HAL_RCC_OscConfig+0xdb4>)
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	4a0f      	ldr	r2, [pc, #60]	@ (8003e28 <HAL_RCC_OscConfig+0xdb4>)
 8003dec:	f023 0310 	bic.w	r3, r3, #16
 8003df0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fc ff15 	bl	8000c20 <HAL_GetTick>
 8003df6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003df8:	bf00      	nop
 8003dfa:	f7fc ff11 	bl	8000c20 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d0f9      	beq.n	8003dfa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0a:	4a07      	ldr	r2, [pc, #28]	@ (8003e28 <HAL_RCC_OscConfig+0xdb4>)
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003e10:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <HAL_RCC_OscConfig+0xdb4>)
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	4a04      	ldr	r2, [pc, #16]	@ (8003e28 <HAL_RCC_OscConfig+0xdb4>)
 8003e16:	f043 0310 	orr.w	r3, r3, #16
 8003e1a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3738      	adds	r7, #56	@ 0x38
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	46020c00 	.word	0x46020c00

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e1d9      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b9b      	ldr	r3, [pc, #620]	@ (80040b0 <HAL_RCC_ClockConfig+0x284>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d910      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b98      	ldr	r3, [pc, #608]	@ (80040b0 <HAL_RCC_ClockConfig+0x284>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 020f 	bic.w	r2, r3, #15
 8003e56:	4996      	ldr	r1, [pc, #600]	@ (80040b0 <HAL_RCC_ClockConfig+0x284>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b94      	ldr	r3, [pc, #592]	@ (80040b0 <HAL_RCC_ClockConfig+0x284>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e1c1      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	4b8c      	ldr	r3, [pc, #560]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d908      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003e8c:	4b89      	ldr	r3, [pc, #548]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	4986      	ldr	r1, [pc, #536]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d012      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	4b81      	ldr	r3, [pc, #516]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d909      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003ebc:	4b7d      	ldr	r3, [pc, #500]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	497a      	ldr	r1, [pc, #488]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	4b74      	ldr	r3, [pc, #464]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d908      	bls.n	8003efe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b71      	ldr	r3, [pc, #452]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	496e      	ldr	r1, [pc, #440]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d010      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	4b69      	ldr	r3, [pc, #420]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d908      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003f1a:	4b66      	ldr	r3, [pc, #408]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f023 020f 	bic.w	r2, r3, #15
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4963      	ldr	r1, [pc, #396]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80d2 	beq.w	80040de <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d143      	bne.n	8003fce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b5b      	ldr	r3, [pc, #364]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d110      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f54:	4b57      	ldr	r3, [pc, #348]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5a:	4a56      	ldr	r2, [pc, #344]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003f64:	4b53      	ldr	r3, [pc, #332]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003f76:	f7fc fe53 	bl	8000c20 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003f7c:	4b4e      	ldr	r3, [pc, #312]	@ (80040b8 <HAL_RCC_ClockConfig+0x28c>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00f      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003f8a:	f7fc fe49 	bl	8000c20 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e12b      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003f9c:	4b46      	ldr	r3, [pc, #280]	@ (80040b8 <HAL_RCC_ClockConfig+0x28c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003fae:	4b41      	ldr	r3, [pc, #260]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb4:	4a3f      	ldr	r2, [pc, #252]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003fb6:	f023 0304 	bic.w	r3, r3, #4
 8003fba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d121      	bne.n	800400e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e112      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd6:	4b37      	ldr	r3, [pc, #220]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d115      	bne.n	800400e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e106      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003fee:	4b31      	ldr	r3, [pc, #196]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0fa      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0f2      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800400e:	4b29      	ldr	r3, [pc, #164]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4926      	ldr	r1, [pc, #152]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 800401c:	4313      	orrs	r3, r2
 800401e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004020:	f7fc fdfe 	bl	8000c20 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d112      	bne.n	8004054 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004030:	f7fc fdf6 	bl	8000c20 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0d6      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004046:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d1ee      	bne.n	8004030 <HAL_RCC_ClockConfig+0x204>
 8004052:	e044      	b.n	80040de <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d112      	bne.n	8004082 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405e:	f7fc fddf 	bl	8000c20 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0bf      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004074:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d1ee      	bne.n	800405e <HAL_RCC_ClockConfig+0x232>
 8004080:	e02d      	b.n	80040de <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d123      	bne.n	80040d2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408c:	f7fc fdc8 	bl	8000c20 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e0a8      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80040a2:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <HAL_RCC_ClockConfig+0x288>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1ee      	bne.n	800408c <HAL_RCC_ClockConfig+0x260>
 80040ae:	e016      	b.n	80040de <HAL_RCC_ClockConfig+0x2b2>
 80040b0:	40022000 	.word	0x40022000
 80040b4:	46020c00 	.word	0x46020c00
 80040b8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fc fdb0 	bl	8000c20 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e090      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d2:	4b4a      	ldr	r3, [pc, #296]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d1ee      	bne.n	80040bc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	4b43      	ldr	r3, [pc, #268]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d208      	bcs.n	800410c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80040fa:	4b40      	ldr	r3, [pc, #256]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	493d      	ldr	r1, [pc, #244]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b3c      	ldr	r3, [pc, #240]	@ (8004200 <HAL_RCC_ClockConfig+0x3d4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d210      	bcs.n	800413c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <HAL_RCC_ClockConfig+0x3d4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 020f 	bic.w	r2, r3, #15
 8004122:	4937      	ldr	r1, [pc, #220]	@ (8004200 <HAL_RCC_ClockConfig+0x3d4>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b35      	ldr	r3, [pc, #212]	@ (8004200 <HAL_RCC_ClockConfig+0x3d4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e05b      	b.n	80041f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004154:	429a      	cmp	r2, r3
 8004156:	d208      	bcs.n	800416a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004158:	4b28      	ldr	r3, [pc, #160]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4925      	ldr	r1, [pc, #148]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 8004166:	4313      	orrs	r3, r2
 8004168:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d012      	beq.n	800419c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004184:	429a      	cmp	r2, r3
 8004186:	d209      	bcs.n	800419c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004188:	4b1c      	ldr	r3, [pc, #112]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	4919      	ldr	r1, [pc, #100]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	4b13      	ldr	r3, [pc, #76]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d208      	bcs.n	80041ca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80041b8:	4b10      	ldr	r3, [pc, #64]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	490d      	ldr	r1, [pc, #52]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80041ca:	f000 f821 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <HAL_RCC_ClockConfig+0x3d0>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	490a      	ldr	r1, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x3d8>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
 80041e0:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <HAL_RCC_ClockConfig+0x3dc>)
 80041e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041e4:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_ClockConfig+0x3e0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc fc8f 	bl	8000b0c <HAL_InitTick>
 80041ee:	4603      	mov	r3, r0
 80041f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	46020c00 	.word	0x46020c00
 8004200:	40022000 	.word	0x40022000
 8004204:	0800a590 	.word	0x0800a590
 8004208:	20000000 	.word	0x20000000
 800420c:	20000014 	.word	0x20000014

08004210 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	b08b      	sub	sp, #44	@ 0x2c
 8004214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421e:	4b78      	ldr	r3, [pc, #480]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004228:	4b75      	ldr	r3, [pc, #468]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x34>
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d121      	bne.n	8004282 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d11e      	bne.n	8004282 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004244:	4b6e      	ldr	r3, [pc, #440]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004250:	4b6b      	ldr	r3, [pc, #428]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004256:	0b1b      	lsrs	r3, r3, #12
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
 800425e:	e005      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004260:	4b67      	ldr	r3, [pc, #412]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	0f1b      	lsrs	r3, r3, #28
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800426c:	4a65      	ldr	r2, [pc, #404]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d110      	bne.n	800429e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004280:	e00d      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004282:	4b5f      	ldr	r3, [pc, #380]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b04      	cmp	r3, #4
 800428c:	d102      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800428e:	4b5e      	ldr	r3, [pc, #376]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	e004      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b08      	cmp	r3, #8
 8004298:	d101      	bne.n	800429e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800429a:	4b5b      	ldr	r3, [pc, #364]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800429c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	f040 80a5 	bne.w	80043f0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80042a6:	4b56      	ldr	r3, [pc, #344]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80042b0:	4b53      	ldr	r3, [pc, #332]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80042be:	4b50      	ldr	r3, [pc, #320]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80042ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d003      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0xe4>
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d022      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x128>
 80042f2:	e043      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800440c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004306:	4b3e      	ldr	r3, [pc, #248]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004316:	ed97 6a01 	vldr	s12, [r7, #4]
 800431a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004410 <HAL_RCC_GetSysClockFreq+0x200>
 800431e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004322:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800432a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800432e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004336:	e046      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800440c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434a:	4b2d      	ldr	r3, [pc, #180]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800434c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800435a:	ed97 6a01 	vldr	s12, [r7, #4]
 800435e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004410 <HAL_RCC_GetSysClockFreq+0x200>
 8004362:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004366:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800436a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800437a:	e024      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	ee07 3a90 	vmov	s15, r3
 800438c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004394:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80043a4:	ed97 6a01 	vldr	s12, [r7, #4]
 80043a8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004410 <HAL_RCC_GetSysClockFreq+0x200>
 80043ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80043b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80043c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80043c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ca:	0e1b      	lsrs	r3, r3, #24
 80043cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d0:	3301      	adds	r3, #1
 80043d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043de:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ea:	ee17 3a90 	vmov	r3, s15
 80043ee:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80043f0:	6a3b      	ldr	r3, [r7, #32]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	372c      	adds	r7, #44	@ 0x2c
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	46020c00 	.word	0x46020c00
 8004404:	0800a5a0 	.word	0x0800a5a0
 8004408:	00f42400 	.word	0x00f42400
 800440c:	4b742400 	.word	0x4b742400
 8004410:	46000000 	.word	0x46000000

08004414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004418:	f7ff fefa 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b07      	ldr	r3, [pc, #28]	@ (800443c <HAL_RCC_GetHCLKFreq+0x28>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	4906      	ldr	r1, [pc, #24]	@ (8004440 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a05      	ldr	r2, [pc, #20]	@ (8004444 <HAL_RCC_GetHCLKFreq+0x30>)
 8004430:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004432:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <HAL_RCC_GetHCLKFreq+0x30>)
 8004434:	681b      	ldr	r3, [r3, #0]
}
 8004436:	4618      	mov	r0, r3
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	46020c00 	.word	0x46020c00
 8004440:	0800a590 	.word	0x0800a590
 8004444:	20000000 	.word	0x20000000

08004448 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004450:	4b3e      	ldr	r3, [pc, #248]	@ (800454c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800445e:	f7fe fd9b 	bl	8002f98 <HAL_PWREx_GetVoltageRange>
 8004462:	6178      	str	r0, [r7, #20]
 8004464:	e019      	b.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	4b39      	ldr	r3, [pc, #228]	@ (800454c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446c:	4a37      	ldr	r2, [pc, #220]	@ (800454c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800446e:	f043 0304 	orr.w	r3, r3, #4
 8004472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004476:	4b35      	ldr	r3, [pc, #212]	@ (800454c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004484:	f7fe fd88 	bl	8002f98 <HAL_PWREx_GetVoltageRange>
 8004488:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800448a:	4b30      	ldr	r3, [pc, #192]	@ (800454c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800448c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004490:	4a2e      	ldr	r2, [pc, #184]	@ (800454c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004492:	f023 0304 	bic.w	r3, r3, #4
 8004496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044a0:	d003      	beq.n	80044aa <RCC_SetFlashLatencyFromMSIRange+0x62>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a8:	d109      	bne.n	80044be <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044b0:	d202      	bcs.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80044b2:	2301      	movs	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80044b6:	e033      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80044bc:	e030      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044c4:	d208      	bcs.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044cc:	d102      	bne.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80044ce:	2303      	movs	r3, #3
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e025      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e035      	b.n	8004544 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044de:	d90f      	bls.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044ec:	d902      	bls.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	e015      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80044f4:	2301      	movs	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e012      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	e00f      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004506:	d109      	bne.n	800451c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450e:	d102      	bne.n	8004516 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004510:	2301      	movs	r3, #1
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e004      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004516:	2302      	movs	r3, #2
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e001      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800451c:	2301      	movs	r3, #1
 800451e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 020f 	bic.w	r2, r3, #15
 8004528:	4909      	ldr	r1, [pc, #36]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004530:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	46020c00 	.word	0x46020c00
 8004550:	40022000 	.word	0x40022000

08004554 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004558:	b0b6      	sub	sp, #216	@ 0xd8
 800455a:	af00      	add	r7, sp, #0
 800455c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004560:	2300      	movs	r3, #0
 8004562:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004566:	2300      	movs	r3, #0
 8004568:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800456c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	f002 0401 	and.w	r4, r2, #1
 8004578:	2500      	movs	r5, #0
 800457a:	ea54 0305 	orrs.w	r3, r4, r5
 800457e:	d00b      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004580:	4bc5      	ldr	r3, [pc, #788]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004586:	f023 0103 	bic.w	r1, r3, #3
 800458a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800458e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004590:	4ac1      	ldr	r2, [pc, #772]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004592:	430b      	orrs	r3, r1
 8004594:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f002 0804 	and.w	r8, r2, #4
 80045a4:	f04f 0900 	mov.w	r9, #0
 80045a8:	ea58 0309 	orrs.w	r3, r8, r9
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80045ae:	4bba      	ldr	r3, [pc, #744]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80045b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80045b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	4ab6      	ldr	r2, [pc, #728]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f002 0a08 	and.w	sl, r2, #8
 80045d2:	f04f 0b00 	mov.w	fp, #0
 80045d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80045da:	d00b      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80045dc:	4bae      	ldr	r3, [pc, #696]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80045de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ec:	4aaa      	ldr	r2, [pc, #680]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80045ee:	430b      	orrs	r3, r1
 80045f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f002 0310 	and.w	r3, r2, #16
 8004600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004604:	2300      	movs	r3, #0
 8004606:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800460a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800460e:	460b      	mov	r3, r1
 8004610:	4313      	orrs	r3, r2
 8004612:	d00b      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004614:	4ba0      	ldr	r3, [pc, #640]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800461a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800461e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004624:	4a9c      	ldr	r2, [pc, #624]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004626:	430b      	orrs	r3, r1
 8004628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800462c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f002 0320 	and.w	r3, r2, #32
 8004638:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004642:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004646:	460b      	mov	r3, r1
 8004648:	4313      	orrs	r3, r2
 800464a:	d00b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800464c:	4b92      	ldr	r3, [pc, #584]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800464e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004652:	f023 0107 	bic.w	r1, r3, #7
 8004656:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800465a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465c:	4a8e      	ldr	r2, [pc, #568]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800465e:	430b      	orrs	r3, r1
 8004660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800467a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d00b      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004684:	4b84      	ldr	r3, [pc, #528]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800468a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800468e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004694:	4a80      	ldr	r2, [pc, #512]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004696:	430b      	orrs	r3, r1
 8004698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800469c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80046a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ac:	2300      	movs	r3, #0
 80046ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046b2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	d00b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80046bc:	4b76      	ldr	r3, [pc, #472]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046cc:	4a72      	ldr	r2, [pc, #456]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046ce:	430b      	orrs	r3, r1
 80046d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046ee:	460b      	mov	r3, r1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	d00b      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80046f4:	4b68      	ldr	r3, [pc, #416]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004704:	4a64      	ldr	r2, [pc, #400]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004706:	430b      	orrs	r3, r1
 8004708:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800470c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004718:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004722:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	d00b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800472c:	4b5a      	ldr	r3, [pc, #360]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800472e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004732:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	4a56      	ldr	r2, [pc, #344]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800473e:	430b      	orrs	r3, r1
 8004740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004754:	2300      	movs	r3, #0
 8004756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800475a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800475e:	460b      	mov	r3, r1
 8004760:	4313      	orrs	r3, r2
 8004762:	d00b      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004764:	4b4c      	ldr	r3, [pc, #304]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800476a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800476e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004774:	4a48      	ldr	r2, [pc, #288]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004776:	430b      	orrs	r3, r1
 8004778:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800477c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004792:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004796:	460b      	mov	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	d00b      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800479c:	4b3e      	ldr	r3, [pc, #248]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800479e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047a2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80047a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047ae:	430b      	orrs	r3, r1
 80047b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80047b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80047c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047c2:	2300      	movs	r3, #0
 80047c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	d00b      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80047d0:	4b31      	ldr	r3, [pc, #196]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047e2:	430b      	orrs	r3, r1
 80047e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80047f6:	2300      	movs	r3, #0
 80047f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80047fa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047fe:	460b      	mov	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	d04f      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800480c:	2b80      	cmp	r3, #128	@ 0x80
 800480e:	d02d      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004810:	2b80      	cmp	r3, #128	@ 0x80
 8004812:	d827      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004814:	2b60      	cmp	r3, #96	@ 0x60
 8004816:	d02b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004818:	2b60      	cmp	r3, #96	@ 0x60
 800481a:	d823      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d006      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d81f      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004828:	2b20      	cmp	r3, #32
 800482a:	d011      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800482c:	e01a      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800482e:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	4a19      	ldr	r2, [pc, #100]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004838:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800483a:	e01a      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800483c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004840:	3308      	adds	r3, #8
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fc06 	bl	8005054 <RCCEx_PLL2_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800484e:	e010      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004854:	332c      	adds	r3, #44	@ 0x2c
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fc94 	bl	8005184 <RCCEx_PLL3_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004862:	e006      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800486a:	e002      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004872:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d110      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800487a:	4b07      	ldr	r3, [pc, #28]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800487c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004880:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800488c:	4a02      	ldr	r2, [pc, #8]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800488e:	430b      	orrs	r3, r1
 8004890:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004894:	e006      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004896:	bf00      	nop
 8004898:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80048a0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80048a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80048b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b2:	2300      	movs	r3, #0
 80048b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d046      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80048c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048cc:	d028      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80048ce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80048d2:	d821      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80048d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048d8:	d022      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80048da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048de:	d81b      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80048e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048e4:	d01c      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80048e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048ea:	d815      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80048ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80048f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f6:	d80f      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d011      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80048fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004900:	d00e      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004902:	e009      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004908:	3308      	adds	r3, #8
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fba2 	bl	8005054 <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004916:	e004      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8004920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004922:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800492a:	4bb6      	ldr	r3, [pc, #728]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800492c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004930:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004938:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800493c:	4ab1      	ldr	r2, [pc, #708]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800493e:	430b      	orrs	r3, r1
 8004940:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004946:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800494a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800494e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800495a:	663b      	str	r3, [r7, #96]	@ 0x60
 800495c:	2300      	movs	r3, #0
 800495e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004960:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004964:	460b      	mov	r3, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	d03e      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800496a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004972:	2b04      	cmp	r3, #4
 8004974:	d81d      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049bb 	.word	0x080049bb
 8004980:	08004991 	.word	0x08004991
 8004984:	0800499f 	.word	0x0800499f
 8004988:	080049bb 	.word	0x080049bb
 800498c:	080049bb 	.word	0x080049bb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004990:	4b9c      	ldr	r3, [pc, #624]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	4a9b      	ldr	r2, [pc, #620]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800499c:	e00e      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800499e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049a2:	332c      	adds	r3, #44	@ 0x2c
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fbed 	bl	8005184 <RCCEx_PLL3_Config>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80049b0:	e004      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80049ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 80049bc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10d      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80049c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80049c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049ca:	f023 0107 	bic.w	r1, r3, #7
 80049ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d6:	4a8b      	ldr	r2, [pc, #556]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80049d8:	430b      	orrs	r3, r1
 80049da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80049de:	e003      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80049e4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80049e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80049f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049f6:	2300      	movs	r3, #0
 80049f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d04a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a10:	d028      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004a12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a16:	d821      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004a18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a1c:	d024      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a22:	d81b      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004a24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a28:	d00e      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004a2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a2e:	d815      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a38:	d110      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a3a:	4b72      	ldr	r3, [pc, #456]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3e:	4a71      	ldr	r2, [pc, #452]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a44:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004a46:	e012      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a4c:	332c      	adds	r3, #44	@ 0x2c
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb98 	bl	8005184 <RCCEx_PLL3_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004a62:	e004      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004a64:	bf00      	nop
 8004a66:	e002      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004a6c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004a6e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004a76:	4b63      	ldr	r3, [pc, #396]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a88:	4a5e      	ldr	r2, [pc, #376]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a90:	e003      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004a96:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004aa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aac:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f000 80ba 	beq.w	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004abe:	4b51      	ldr	r3, [pc, #324]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d113      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	4b4d      	ldr	r3, [pc, #308]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004ad4:	f043 0304 	orr.w	r3, r3, #4
 8004ad8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004adc:	4b49      	ldr	r3, [pc, #292]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004af4:	4b44      	ldr	r3, [pc, #272]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af8:	4a43      	ldr	r2, [pc, #268]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b00:	f7fc f88e 	bl	8000c20 <HAL_GetTick>
 8004b04:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b08:	e00b      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7fc f889 	bl	8000c20 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d903      	bls.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004b20:	e005      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b22:	4b39      	ldr	r3, [pc, #228]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0ed      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8004b2e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d16a      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b36:	4b33      	ldr	r3, [pc, #204]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d023      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b50:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004b54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d01b      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b5c:	4b29      	ldr	r3, [pc, #164]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b6a:	4b26      	ldr	r3, [pc, #152]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b70:	4a24      	ldr	r2, [pc, #144]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b7a:	4b22      	ldr	r3, [pc, #136]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b80:	4a20      	ldr	r2, [pc, #128]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d019      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fc f83e 	bl	8000c20 <HAL_GetTick>
 8004ba4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba8:	e00d      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fc f839 	bl	8000c20 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d903      	bls.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ea      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8004bd4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10d      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004bdc:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004be2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004be6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004bee:	4a05      	ldr	r2, [pc, #20]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bf6:	e00d      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004bfc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004c02:	bf00      	nop
 8004c04:	46020c00 	.word	0x46020c00
 8004c08:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004c10:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c14:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1c:	4bb2      	ldr	r3, [pc, #712]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c22:	4ab1      	ldr	r2, [pc, #708]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004c24:	f023 0304 	bic.w	r3, r3, #4
 8004c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d042      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c50:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c54:	d022      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004c56:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004c5a:	d81b      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c60:	d011      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8004c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c66:	d815      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d019      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004c6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c70:	d110      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c76:	3308      	adds	r3, #8
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f9eb 	bl	8005054 <RCCEx_PLL2_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004c84:	e00d      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c86:	4b98      	ldr	r3, [pc, #608]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	4a97      	ldr	r2, [pc, #604]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c90:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004c92:	e006      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004ca0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004ca2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004caa:	4b8f      	ldr	r3, [pc, #572]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cbc:	4a8a      	ldr	r2, [pc, #552]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cc4:	e003      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004cca:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cdc:	2300      	movs	r3, #0
 8004cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	d02d      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	d00b      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfc:	d804      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d06:	d007      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004d0e:	e004      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004d18:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d1a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10d      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004d22:	4b71      	ldr	r3, [pc, #452]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004d24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	4a6c      	ldr	r2, [pc, #432]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004d42:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d54:	2300      	movs	r3, #0
 8004d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d00c      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004d62:	4b61      	ldr	r3, [pc, #388]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004d64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d68:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8004d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d74:	4a5c      	ldr	r2, [pc, #368]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004d76:	430b      	orrs	r3, r1
 8004d78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d92:	460b      	mov	r3, r1
 8004d94:	4313      	orrs	r3, r2
 8004d96:	d019      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004da4:	d105      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004da6:	4b50      	ldr	r3, [pc, #320]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004daa:	4a4f      	ldr	r2, [pc, #316]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004db2:	4b4d      	ldr	r3, [pc, #308]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004db4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004db8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dc4:	4a48      	ldr	r2, [pc, #288]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dda:	2300      	movs	r3, #0
 8004ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dde:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004de2:	460b      	mov	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d00c      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004de8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004df2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004df6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dfa:	493b      	ldr	r1, [pc, #236]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004e02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	2300      	movs	r3, #0
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d00c      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004e1e:	4b32      	ldr	r3, [pc, #200]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e30:	492d      	ldr	r1, [pc, #180]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4313      	orrs	r3, r2
 8004e52:	d00c      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004e54:	4b24      	ldr	r3, [pc, #144]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e5a:	f023 0218 	bic.w	r2, r3, #24
 8004e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e66:	4920      	ldr	r1, [pc, #128]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d034      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e98:	4b13      	ldr	r3, [pc, #76]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	4a12      	ldr	r2, [pc, #72]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ea8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004eac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004eb0:	d108      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f8cb 	bl	8005054 <RCCEx_PLL2_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8004ec4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10f      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004ecc:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ed2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ed6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ede:	4902      	ldr	r1, [pc, #8]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004ee6:	e005      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004ee8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004ef0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	d03a      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f1c:	d00e      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004f1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f22:	d815      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d017      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f2c:	d110      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f2e:	4b27      	ldr	r3, [pc, #156]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	4a26      	ldr	r2, [pc, #152]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f38:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004f3a:	e00e      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f40:	3308      	adds	r3, #8
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f886 	bl	8005054 <RCCEx_PLL2_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004f4e:	e004      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004f56:	e000      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004f58:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004f5a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004f62:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f68:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f74:	4915      	ldr	r1, [pc, #84]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004f7c:	e003      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004f82:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004f86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	2300      	movs	r3, #0
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	d00c      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fa8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fb4:	4905      	ldr	r1, [pc, #20]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004fbc:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	37d8      	adds	r7, #216	@ 0xd8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fca:	bf00      	nop
 8004fcc:	46020c00 	.word	0x46020c00

08004fd0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800504c <HAL_RCCEx_CRSConfig+0x7c>)
 8004fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800504c <HAL_RCCEx_CRSConfig+0x7c>)
 8004fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fe2:	6753      	str	r3, [r2, #116]	@ 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 8004fe4:	4b19      	ldr	r3, [pc, #100]	@ (800504c <HAL_RCCEx_CRSConfig+0x7c>)
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe8:	4a18      	ldr	r2, [pc, #96]	@ (800504c <HAL_RCCEx_CRSConfig+0x7c>)
 8004fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fee:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8005018:	4a0d      	ldr	r2, [pc, #52]	@ (8005050 <HAL_RCCEx_CRSConfig+0x80>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800501e:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <HAL_RCCEx_CRSConfig+0x80>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	4908      	ldr	r1, [pc, #32]	@ (8005050 <HAL_RCCEx_CRSConfig+0x80>)
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005032:	4b07      	ldr	r3, [pc, #28]	@ (8005050 <HAL_RCCEx_CRSConfig+0x80>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a06      	ldr	r2, [pc, #24]	@ (8005050 <HAL_RCCEx_CRSConfig+0x80>)
 8005038:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800503c:	6013      	str	r3, [r2, #0]
}
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	46020c00 	.word	0x46020c00
 8005050:	40006000 	.word	0x40006000

08005054 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800505c:	4b47      	ldr	r3, [pc, #284]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a46      	ldr	r2, [pc, #280]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005066:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005068:	f7fb fdda 	bl	8000c20 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800506e:	e008      	b.n	8005082 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005070:	f7fb fdd6 	bl	8000c20 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e077      	b.n	8005172 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005082:	4b3e      	ldr	r3, [pc, #248]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800508e:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6811      	ldr	r1, [r2, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6852      	ldr	r2, [r2, #4]
 80050a2:	3a01      	subs	r2, #1
 80050a4:	0212      	lsls	r2, r2, #8
 80050a6:	430a      	orrs	r2, r1
 80050a8:	4934      	ldr	r1, [pc, #208]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80050ae:	4b33      	ldr	r3, [pc, #204]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 80050b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050b2:	4b33      	ldr	r3, [pc, #204]	@ (8005180 <RCCEx_PLL2_Config+0x12c>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6892      	ldr	r2, [r2, #8]
 80050ba:	3a01      	subs	r2, #1
 80050bc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	68d2      	ldr	r2, [r2, #12]
 80050c4:	3a01      	subs	r2, #1
 80050c6:	0252      	lsls	r2, r2, #9
 80050c8:	b292      	uxth	r2, r2
 80050ca:	4311      	orrs	r1, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6912      	ldr	r2, [r2, #16]
 80050d0:	3a01      	subs	r2, #1
 80050d2:	0412      	lsls	r2, r2, #16
 80050d4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80050d8:	4311      	orrs	r1, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6952      	ldr	r2, [r2, #20]
 80050de:	3a01      	subs	r2, #1
 80050e0:	0612      	lsls	r2, r2, #24
 80050e2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80050e6:	430a      	orrs	r2, r1
 80050e8:	4924      	ldr	r1, [pc, #144]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80050ee:	4b23      	ldr	r3, [pc, #140]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	f023 020c 	bic.w	r2, r3, #12
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	4920      	ldr	r1, [pc, #128]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005100:	4b1e      	ldr	r3, [pc, #120]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	491c      	ldr	r1, [pc, #112]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 800510a:	4313      	orrs	r3, r2
 800510c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800510e:	4b1b      	ldr	r3, [pc, #108]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	4a1a      	ldr	r2, [pc, #104]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005114:	f023 0310 	bic.w	r3, r3, #16
 8005118:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800511a:	4b18      	ldr	r3, [pc, #96]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005122:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	69d2      	ldr	r2, [r2, #28]
 800512a:	00d2      	lsls	r2, r2, #3
 800512c:	4913      	ldr	r1, [pc, #76]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 800512e:	4313      	orrs	r3, r2
 8005130:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005132:	4b12      	ldr	r3, [pc, #72]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	4a11      	ldr	r2, [pc, #68]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005138:	f043 0310 	orr.w	r3, r3, #16
 800513c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800513e:	4b0f      	ldr	r3, [pc, #60]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a0e      	ldr	r2, [pc, #56]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005144:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005148:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800514a:	f7fb fd69 	bl	8000c20 <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005150:	e008      	b.n	8005164 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005152:	f7fb fd65 	bl	8000c20 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e006      	b.n	8005172 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <RCCEx_PLL2_Config+0x128>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0

}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	46020c00 	.word	0x46020c00
 8005180:	80800000 	.word	0x80800000

08005184 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800518c:	4b47      	ldr	r3, [pc, #284]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a46      	ldr	r2, [pc, #280]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005196:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005198:	f7fb fd42 	bl	8000c20 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800519e:	e008      	b.n	80051b2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051a0:	f7fb fd3e 	bl	8000c20 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e077      	b.n	80052a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051b2:	4b3e      	ldr	r3, [pc, #248]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80051be:	4b3b      	ldr	r3, [pc, #236]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6811      	ldr	r1, [r2, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6852      	ldr	r2, [r2, #4]
 80051d2:	3a01      	subs	r2, #1
 80051d4:	0212      	lsls	r2, r2, #8
 80051d6:	430a      	orrs	r2, r1
 80051d8:	4934      	ldr	r1, [pc, #208]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	630b      	str	r3, [r1, #48]	@ 0x30
 80051de:	4b33      	ldr	r3, [pc, #204]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 80051e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051e2:	4b33      	ldr	r3, [pc, #204]	@ (80052b0 <RCCEx_PLL3_Config+0x12c>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6892      	ldr	r2, [r2, #8]
 80051ea:	3a01      	subs	r2, #1
 80051ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	68d2      	ldr	r2, [r2, #12]
 80051f4:	3a01      	subs	r2, #1
 80051f6:	0252      	lsls	r2, r2, #9
 80051f8:	b292      	uxth	r2, r2
 80051fa:	4311      	orrs	r1, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6912      	ldr	r2, [r2, #16]
 8005200:	3a01      	subs	r2, #1
 8005202:	0412      	lsls	r2, r2, #16
 8005204:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005208:	4311      	orrs	r1, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6952      	ldr	r2, [r2, #20]
 800520e:	3a01      	subs	r2, #1
 8005210:	0612      	lsls	r2, r2, #24
 8005212:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005216:	430a      	orrs	r2, r1
 8005218:	4924      	ldr	r1, [pc, #144]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 800521a:	4313      	orrs	r3, r2
 800521c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800521e:	4b23      	ldr	r3, [pc, #140]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005222:	f023 020c 	bic.w	r2, r3, #12
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	4920      	ldr	r1, [pc, #128]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 800522c:	4313      	orrs	r3, r2
 800522e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005230:	4b1e      	ldr	r3, [pc, #120]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	491c      	ldr	r1, [pc, #112]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 800523a:	4313      	orrs	r3, r2
 800523c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800523e:	4b1b      	ldr	r3, [pc, #108]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005242:	4a1a      	ldr	r2, [pc, #104]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005244:	f023 0310 	bic.w	r3, r3, #16
 8005248:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800524a:	4b18      	ldr	r3, [pc, #96]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 800524c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005252:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	69d2      	ldr	r2, [r2, #28]
 800525a:	00d2      	lsls	r2, r2, #3
 800525c:	4913      	ldr	r1, [pc, #76]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 800525e:	4313      	orrs	r3, r2
 8005260:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005262:	4b12      	ldr	r3, [pc, #72]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005266:	4a11      	ldr	r2, [pc, #68]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005268:	f043 0310 	orr.w	r3, r3, #16
 800526c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800526e:	4b0f      	ldr	r3, [pc, #60]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a0e      	ldr	r2, [pc, #56]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005278:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800527a:	f7fb fcd1 	bl	8000c20 <HAL_GetTick>
 800527e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005280:	e008      	b.n	8005294 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005282:	f7fb fccd 	bl	8000c20 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e006      	b.n	80052a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <RCCEx_PLL3_Config+0x128>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	46020c00 	.word	0x46020c00
 80052b0:	80800000 	.word	0x80800000

080052b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	f043 0201 	orr.w	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80052e2:	b084      	sub	sp, #16
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	f107 001c 	add.w	r0, r7, #28
 80052f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e008      	b.n	8005310 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ffd8 	bl	80052b4 <USB_CoreReset>
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800530e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800531a:	b004      	add	sp, #16
 800531c:	4770      	bx	lr

0800531e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800532c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005330:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800534e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005352:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	43db      	mvns	r3, r3
 800535c:	401a      	ands	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	641a      	str	r2, [r3, #64]	@ 0x40
 800538e:	e00b      	b.n	80053a8 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d106      	bne.n	80053a4 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80053a2:	e001      	b.n	80053a8 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80053b6:	b084      	sub	sp, #16
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	f107 001c 	add.w	r0, r7, #28
 80053c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 80053da:	2100      	movs	r1, #0
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff ffc7 	bl	8005370 <USB_SetCurrentMode>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f8:	b004      	add	sp, #16
 80053fa:	4770      	bx	lr

080053fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b0a1      	sub	sp, #132	@ 0x84
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4ba0      	ldr	r3, [pc, #640]	@ (800569c <USB_ActivateEndpoint+0x2a0>)
 800541a:	4013      	ands	r3, r2
 800541c:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* initialize Endpoint */
  switch (ep->type)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d819      	bhi.n	800545a <USB_ActivateEndpoint+0x5e>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <USB_ActivateEndpoint+0x30>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	0800543d 	.word	0x0800543d
 8005430:	08005451 	.word	0x08005451
 8005434:	08005463 	.word	0x08005463
 8005438:	08005447 	.word	0x08005447
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800543c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800543e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005442:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 8005444:	e00e      	b.n	8005464 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005448:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800544c:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 800544e:	e009      	b.n	8005464 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005452:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005456:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 8005458:	e004      	b.n	8005464 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8005460:	e000      	b.n	8005464 <USB_ActivateEndpoint+0x68>
      break;
 8005462:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005478:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b86      	ldr	r3, [pc, #536]	@ (80056a0 <USB_ActivateEndpoint+0x2a4>)
 8005488:	4013      	ands	r3, r2
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	7812      	ldrb	r2, [r2, #0]
 800548e:	4313      	orrs	r3, r2
 8005490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800549e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a6:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	7b1b      	ldrb	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 8177 	bne.w	80057a0 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d079      	beq.n	80055ae <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054d8:	0c12      	lsrs	r2, r2, #16
 80054da:	0412      	lsls	r2, r2, #16
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054ec:	6819      	ldr	r1, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	88db      	ldrh	r3, [r3, #6]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	009a      	lsls	r2, r3, #2
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005502:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <USB_ActivateEndpoint+0x14e>
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b5c      	ldr	r3, [pc, #368]	@ (80056a0 <USB_ActivateEndpoint+0x2a4>)
 8005530:	4013      	ands	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005544:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005548:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d018      	beq.n	8005584 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4b51      	ldr	r3, [pc, #324]	@ (80056a4 <USB_ActivateEndpoint+0x2a8>)
 8005560:	4013      	ands	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f083 0320 	eor.w	r3, r3, #32
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800557c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e3c8      	b.n	8005d16 <USB_ActivateEndpoint+0x91a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b44      	ldr	r3, [pc, #272]	@ (80056a4 <USB_ActivateEndpoint+0x2a8>)
 8005592:	4013      	ands	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e3b3      	b.n	8005d16 <USB_ActivateEndpoint+0x91a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055cc:	0c12      	lsrs	r2, r2, #16
 80055ce:	0412      	lsls	r2, r2, #16
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	88db      	ldrh	r3, [r3, #6]
 80055e6:	089b      	lsrs	r3, r3, #2
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	009a      	lsls	r2, r3, #2
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005608:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005618:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800561c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d112      	bne.n	8005650 <USB_ActivateEndpoint+0x254>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005634:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005644:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005648:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	e04d      	b.n	80056ec <USB_ActivateEndpoint+0x2f0>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b3e      	cmp	r3, #62	@ 0x3e
 8005656:	d827      	bhi.n	80056a8 <USB_ActivateEndpoint+0x2ac>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <USB_ActivateEndpoint+0x276>
 800566c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800566e:	3301      	adds	r3, #1
 8005670:	677b      	str	r3, [r7, #116]	@ 0x74
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800567c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005684:	069a      	lsls	r2, r3, #26
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005690:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
 8005698:	e028      	b.n	80056ec <USB_ActivateEndpoint+0x2f0>
 800569a:	bf00      	nop
 800569c:	07ff898f 	.word	0x07ff898f
 80056a0:	07ff8f8f 	.word	0x07ff8f8f
 80056a4:	07ff8fbf 	.word	0x07ff8fbf
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <USB_ActivateEndpoint+0x2c6>
 80056bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056be:	3b01      	subs	r3, #1
 80056c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056d4:	069b      	lsls	r3, r3, #26
 80056d6:	431a      	orrs	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80056ea:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d013      	beq.n	800572c <USB_ActivateEndpoint+0x330>
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b9b      	ldr	r3, [pc, #620]	@ (8005980 <USB_ActivateEndpoint+0x584>)
 8005712:	4013      	ands	r3, r2
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800572a:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d11c      	bne.n	800576e <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b90      	ldr	r3, [pc, #576]	@ (8005984 <USB_ActivateEndpoint+0x588>)
 8005742:	4013      	ands	r3, r2
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	441a      	add	r2, r3
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	e2d3      	b.n	8005d16 <USB_ActivateEndpoint+0x91a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b82      	ldr	r3, [pc, #520]	@ (8005984 <USB_ActivateEndpoint+0x588>)
 800577c:	4013      	ands	r3, r2
 800577e:	623b      	str	r3, [r7, #32]
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005786:	623b      	str	r3, [r7, #32]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e2ba      	b.n	8005d16 <USB_ActivateEndpoint+0x91a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	78db      	ldrb	r3, [r3, #3]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d114      	bne.n	80057d2 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b72      	ldr	r3, [pc, #456]	@ (8005980 <USB_ActivateEndpoint+0x584>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	441a      	add	r2, r3
 80057c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80057ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e013      	b.n	80057fa <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b6a      	ldr	r3, [pc, #424]	@ (8005988 <USB_ActivateEndpoint+0x58c>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	441a      	add	r2, r3
 80057ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f8:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005814:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005818:	0c12      	lsrs	r2, r2, #16
 800581a:	0412      	lsls	r2, r2, #16
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005828:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	891b      	ldrh	r3, [r3, #8]
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	b29b      	uxth	r3, r3
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005842:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005854:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005864:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005868:	0c12      	lsrs	r2, r2, #16
 800586a:	0412      	lsls	r2, r2, #16
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005878:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	895b      	ldrh	r3, [r3, #10]
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	b29b      	uxth	r3, r3
 8005886:	009a      	lsls	r2, r3, #2
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005892:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f040 81b4 	bne.w	8005c0c <USB_ActivateEndpoint+0x810>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d013      	beq.n	80058e4 <USB_ActivateEndpoint+0x4e8>
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005980 <USB_ActivateEndpoint+0x584>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	441a      	add	r2, r3
 80058d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e2:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d013      	beq.n	8005924 <USB_ActivateEndpoint+0x528>
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	4b1d      	ldr	r3, [pc, #116]	@ (8005980 <USB_ActivateEndpoint+0x584>)
 800590a:	4013      	ands	r3, r2
 800590c:	637b      	str	r3, [r7, #52]	@ 0x34
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800591e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005922:	6013      	str	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d177      	bne.n	8005a1c <USB_ActivateEndpoint+0x620>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005946:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800594a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d119      	bne.n	800598c <USB_ActivateEndpoint+0x590>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005962:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005972:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005976:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e077      	b.n	8005a6e <USB_ActivateEndpoint+0x672>
 800597e:	bf00      	nop
 8005980:	07ff8f8f 	.word	0x07ff8f8f
 8005984:	07ffbf8f 	.word	0x07ffbf8f
 8005988:	07ff8e8f 	.word	0x07ff8e8f
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b3e      	cmp	r3, #62	@ 0x3e
 8005992:	d820      	bhi.n	80059d6 <USB_ActivateEndpoint+0x5da>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	673b      	str	r3, [r7, #112]	@ 0x70
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <USB_ActivateEndpoint+0x5b2>
 80059a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059aa:	3301      	adds	r3, #1
 80059ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059bc:	6819      	ldr	r1, [r3, #0]
 80059be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c0:	069a      	lsls	r2, r3, #26
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059d0:	430a      	orrs	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e04b      	b.n	8005a6e <USB_ActivateEndpoint+0x672>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <USB_ActivateEndpoint+0x5f4>
 80059ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059ec:	3b01      	subs	r3, #1
 80059ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a02:	069b      	lsls	r3, r3, #26
 8005a04:	431a      	orrs	r2, r3
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a14:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e028      	b.n	8005a6e <USB_ActivateEndpoint+0x672>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d124      	bne.n	8005a6e <USB_ActivateEndpoint+0x672>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a42:	b292      	uxth	r2, r2
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a54:	6819      	ldr	r1, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	041a      	lsls	r2, r3, #16
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d170      	bne.n	8005b58 <USB_ActivateEndpoint+0x75c>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a94:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005a98:	605a      	str	r2, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d112      	bne.n	8005ac8 <USB_ActivateEndpoint+0x6cc>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005aac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005abc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ac0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	e070      	b.n	8005baa <USB_ActivateEndpoint+0x7ae>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ace:	d820      	bhi.n	8005b12 <USB_ActivateEndpoint+0x716>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <USB_ActivateEndpoint+0x6ee>
 8005ae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005af4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005af8:	6859      	ldr	r1, [r3, #4]
 8005afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005afc:	069a      	lsls	r2, r3, #26
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	e04b      	b.n	8005baa <USB_ActivateEndpoint+0x7ae>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <USB_ActivateEndpoint+0x730>
 8005b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b3e:	069b      	lsls	r3, r3, #26
 8005b40:	431a      	orrs	r2, r3
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	e028      	b.n	8005baa <USB_ActivateEndpoint+0x7ae>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d124      	bne.n	8005baa <USB_ActivateEndpoint+0x7ae>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b7e:	b292      	uxth	r2, r2
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b90:	6859      	ldr	r1, [r3, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	041a      	lsls	r2, r3, #16
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ba2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8005d28 <USB_ActivateEndpoint+0x92c>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	441a      	add	r2, r3
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be0:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b4f      	ldr	r3, [pc, #316]	@ (8005d2c <USB_ActivateEndpoint+0x930>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	441a      	add	r2, r3
 8005bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e084      	b.n	8005d16 <USB_ActivateEndpoint+0x91a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d013      	beq.n	8005c4c <USB_ActivateEndpoint+0x850>
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b3f      	ldr	r3, [pc, #252]	@ (8005d30 <USB_ActivateEndpoint+0x934>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c4a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d013      	beq.n	8005c8c <USB_ActivateEndpoint+0x890>
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b2f      	ldr	r3, [pc, #188]	@ (8005d30 <USB_ActivateEndpoint+0x934>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	441a      	add	r2, r3
 8005c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d018      	beq.n	8005cc6 <USB_ActivateEndpoint+0x8ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <USB_ActivateEndpoint+0x930>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca8:	f083 0320 	eor.w	r3, r3, #32
 8005cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e013      	b.n	8005cee <USB_ActivateEndpoint+0x8f2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b16      	ldr	r3, [pc, #88]	@ (8005d2c <USB_ActivateEndpoint+0x930>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cec:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005d28 <USB_ActivateEndpoint+0x92c>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d14:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d16:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3784      	adds	r7, #132	@ 0x84
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	07ffbf8f 	.word	0x07ffbf8f
 8005d2c:	07ff8fbf 	.word	0x07ff8fbf
 8005d30:	07ff8f8f 	.word	0x07ff8f8f

08005d34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b097      	sub	sp, #92	@ 0x5c
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	7b1b      	ldrb	r3, [r3, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d16d      	bne.n	8005e22 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d034      	beq.n	8005db8 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d013      	beq.n	8005d8e <USB_DeactivateEndpoint+0x5a>
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b6d      	ldr	r3, [pc, #436]	@ (8005f28 <USB_DeactivateEndpoint+0x1f4>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d8c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b64      	ldr	r3, [pc, #400]	@ (8005f2c <USB_DeactivateEndpoint+0x1f8>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e139      	b.n	800602c <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d013      	beq.n	8005df8 <USB_DeactivateEndpoint+0xc4>
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4b52      	ldr	r3, [pc, #328]	@ (8005f28 <USB_DeactivateEndpoint+0x1f4>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	441a      	add	r2, r3
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005df6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b4a      	ldr	r3, [pc, #296]	@ (8005f30 <USB_DeactivateEndpoint+0x1fc>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	441a      	add	r2, r3
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	e104      	b.n	800602c <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 8084 	bne.w	8005f34 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d013      	beq.n	8005e6c <USB_DeactivateEndpoint+0x138>
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b35      	ldr	r3, [pc, #212]	@ (8005f28 <USB_DeactivateEndpoint+0x1f4>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	441a      	add	r2, r3
 8005e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d013      	beq.n	8005eac <USB_DeactivateEndpoint+0x178>
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b25      	ldr	r3, [pc, #148]	@ (8005f28 <USB_DeactivateEndpoint+0x1f4>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ea6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eaa:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <USB_DeactivateEndpoint+0x1f4>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ece:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ed2:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b13      	ldr	r3, [pc, #76]	@ (8005f30 <USB_DeactivateEndpoint+0x1fc>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005efa:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b08      	ldr	r3, [pc, #32]	@ (8005f2c <USB_DeactivateEndpoint+0x1f8>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e082      	b.n	800602c <USB_DeactivateEndpoint+0x2f8>
 8005f26:	bf00      	nop
 8005f28:	07ff8f8f 	.word	0x07ff8f8f
 8005f2c:	07ff8fbf 	.word	0x07ff8fbf
 8005f30:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d013      	beq.n	8005f74 <USB_DeactivateEndpoint+0x240>
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4b38      	ldr	r3, [pc, #224]	@ (800603c <USB_DeactivateEndpoint+0x308>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	441a      	add	r2, r3
 8005f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f72:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d013      	beq.n	8005fb4 <USB_DeactivateEndpoint+0x280>
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b28      	ldr	r3, [pc, #160]	@ (800603c <USB_DeactivateEndpoint+0x308>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	441a      	add	r2, r3
 8005fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fb2:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800603c <USB_DeactivateEndpoint+0x308>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	441a      	add	r2, r3
 8005fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fda:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b15      	ldr	r3, [pc, #84]	@ (8006040 <USB_DeactivateEndpoint+0x30c>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006002:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <USB_DeactivateEndpoint+0x310>)
 8006012:	4013      	ands	r3, r2
 8006014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800602a:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	375c      	adds	r7, #92	@ 0x5c
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	07ff8f8f 	.word	0x07ff8f8f
 8006040:	07ff8fbf 	.word	0x07ff8fbf
 8006044:	07ffbf8f 	.word	0x07ffbf8f

08006048 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b092      	sub	sp, #72	@ 0x48
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b01      	cmp	r3, #1
 8006058:	f040 84ed 	bne.w	8006a36 <USB_EPStartXfer+0x9ee>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	429a      	cmp	r2, r3
 8006066:	d903      	bls.n	8006070 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	647b      	str	r3, [r7, #68]	@ 0x44
 800606e:	e002      	b.n	8006076 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	7b1b      	ldrb	r3, [r3, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d12e      	bne.n	80060dc <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6959      	ldr	r1, [r3, #20]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	88da      	ldrh	r2, [r3, #6]
 8006086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006088:	b29b      	uxth	r3, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fe9f 	bl	8006dce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800609a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060ae:	b292      	uxth	r2, r2
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060c0:	6819      	ldr	r1, [r3, #0]
 80060c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060c4:	041a      	lsls	r2, r3, #16
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060d4:	430a      	orrs	r2, r1
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f000 bc90 	b.w	80069fc <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	78db      	ldrb	r3, [r3, #3]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	f040 8332 	bne.w	800674a <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6a1a      	ldr	r2, [r3, #32]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	f240 82e4 	bls.w	80066bc <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4ba4      	ldr	r3, [pc, #656]	@ (8006394 <USB_EPStartXfer+0x34c>)
 8006102:	4013      	ands	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611a:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8161 	beq.w	8006400 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d16a      	bne.n	800621c <USB_EPStartXfer+0x1d4>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006150:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006160:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006164:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006168:	605a      	str	r2, [r3, #4]
 800616a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800616c:	2b00      	cmp	r3, #0
 800616e:	d112      	bne.n	8006196 <USB_EPStartXfer+0x14e>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800617a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800618a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800618e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006192:	605a      	str	r2, [r3, #4]
 8006194:	e06a      	b.n	800626c <USB_EPStartXfer+0x224>
 8006196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006198:	2b3e      	cmp	r3, #62	@ 0x3e
 800619a:	d81e      	bhi.n	80061da <USB_EPStartXfer+0x192>
 800619c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80061a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <USB_EPStartXfer+0x16a>
 80061ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ae:	3301      	adds	r3, #1
 80061b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c4:	069a      	lsls	r2, r3, #26
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061d4:	430a      	orrs	r2, r1
 80061d6:	605a      	str	r2, [r3, #4]
 80061d8:	e048      	b.n	800626c <USB_EPStartXfer+0x224>
 80061da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <USB_EPStartXfer+0x1a8>
 80061ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ec:	3b01      	subs	r3, #1
 80061ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006202:	069b      	lsls	r3, r3, #26
 8006204:	431a      	orrs	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006210:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006214:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	e027      	b.n	800626c <USB_EPStartXfer+0x224>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d123      	bne.n	800626c <USB_EPStartXfer+0x224>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800622e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800623e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006242:	b292      	uxth	r2, r2
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006250:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006254:	6859      	ldr	r1, [r3, #4]
 8006256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006258:	041a      	lsls	r2, r3, #16
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006264:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	895b      	ldrh	r3, [r3, #10]
 8006270:	82fb      	strh	r3, [r7, #22]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6959      	ldr	r1, [r3, #20]
 8006276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006278:	b29b      	uxth	r3, r3
 800627a:	8afa      	ldrh	r2, [r7, #22]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fda6 	bl	8006dce <USB_WritePMA>
            ep->xfer_buff += len;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695a      	ldr	r2, [r3, #20]
 8006286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006288:	441a      	add	r2, r3
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d906      	bls.n	80062a8 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6a1a      	ldr	r2, [r3, #32]
 800629e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062a0:	1ad2      	subs	r2, r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	621a      	str	r2, [r3, #32]
 80062a6:	e005      	b.n	80062b4 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2200      	movs	r2, #0
 80062b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d16d      	bne.n	8006398 <USB_EPStartXfer+0x350>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062da:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d112      	bne.n	800630c <USB_EPStartXfer+0x2c4>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006300:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006304:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e06d      	b.n	80063e8 <USB_EPStartXfer+0x3a0>
 800630c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800630e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006310:	d81e      	bhi.n	8006350 <USB_EPStartXfer+0x308>
 8006312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006314:	085b      	lsrs	r3, r3, #1
 8006316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <USB_EPStartXfer+0x2e0>
 8006322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006324:	3301      	adds	r3, #1
 8006326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006332:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006336:	6819      	ldr	r1, [r3, #0]
 8006338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633a:	069a      	lsls	r2, r3, #26
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006346:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800634a:	430a      	orrs	r2, r1
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e04b      	b.n	80063e8 <USB_EPStartXfer+0x3a0>
 8006350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <USB_EPStartXfer+0x31e>
 8006360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006362:	3b01      	subs	r3, #1
 8006364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006370:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006378:	069b      	lsls	r3, r3, #26
 800637a:	431a      	orrs	r2, r3
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006386:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800638a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e02a      	b.n	80063e8 <USB_EPStartXfer+0x3a0>
 8006392:	bf00      	nop
 8006394:	07ff8f8f 	.word	0x07ff8f8f
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d123      	bne.n	80063e8 <USB_EPStartXfer+0x3a0>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063be:	b292      	uxth	r2, r2
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063d0:	6819      	ldr	r1, [r3, #0]
 80063d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d4:	041a      	lsls	r2, r3, #16
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063e4:	430a      	orrs	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	891b      	ldrh	r3, [r3, #8]
 80063ec:	82fb      	strh	r3, [r7, #22]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6959      	ldr	r1, [r3, #20]
 80063f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8afa      	ldrh	r2, [r7, #22]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fce8 	bl	8006dce <USB_WritePMA>
 80063fe:	e2fd      	b.n	80069fc <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d16a      	bne.n	80064de <USB_EPStartXfer+0x496>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006412:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006422:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006426:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800642e:	2b00      	cmp	r3, #0
 8006430:	d112      	bne.n	8006458 <USB_EPStartXfer+0x410>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800643c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800644c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006450:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e06a      	b.n	800652e <USB_EPStartXfer+0x4e6>
 8006458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800645a:	2b3e      	cmp	r3, #62	@ 0x3e
 800645c:	d81e      	bhi.n	800649c <USB_EPStartXfer+0x454>
 800645e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <USB_EPStartXfer+0x42c>
 800646e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006470:	3301      	adds	r3, #1
 8006472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800647e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006482:	6819      	ldr	r1, [r3, #0]
 8006484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006486:	069a      	lsls	r2, r3, #26
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006492:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006496:	430a      	orrs	r2, r1
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e048      	b.n	800652e <USB_EPStartXfer+0x4e6>
 800649c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a4:	f003 031f 	and.w	r3, r3, #31
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <USB_EPStartXfer+0x46a>
 80064ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ae:	3b01      	subs	r3, #1
 80064b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c4:	069b      	lsls	r3, r3, #26
 80064c6:	431a      	orrs	r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	e027      	b.n	800652e <USB_EPStartXfer+0x4e6>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	785b      	ldrb	r3, [r3, #1]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d123      	bne.n	800652e <USB_EPStartXfer+0x4e6>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006500:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006504:	b292      	uxth	r2, r2
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006512:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006516:	6819      	ldr	r1, [r3, #0]
 8006518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651a:	041a      	lsls	r2, r3, #16
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006526:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800652a:	430a      	orrs	r2, r1
 800652c:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	891b      	ldrh	r3, [r3, #8]
 8006532:	82fb      	strh	r3, [r7, #22]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	6959      	ldr	r1, [r3, #20]
 8006538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800653a:	b29b      	uxth	r3, r3
 800653c:	8afa      	ldrh	r2, [r7, #22]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fc45 	bl	8006dce <USB_WritePMA>
            ep->xfer_buff += len;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695a      	ldr	r2, [r3, #20]
 8006548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654a:	441a      	add	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	6a1a      	ldr	r2, [r3, #32]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	429a      	cmp	r2, r3
 800655a:	d906      	bls.n	800656a <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006562:	1ad2      	subs	r2, r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	621a      	str	r2, [r3, #32]
 8006568:	e005      	b.n	8006576 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d16a      	bne.n	8006654 <USB_EPStartXfer+0x60c>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006598:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800659c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80065a0:	605a      	str	r2, [r3, #4]
 80065a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d112      	bne.n	80065ce <USB_EPStartXfer+0x586>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065c6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80065ca:	605a      	str	r2, [r3, #4]
 80065cc:	e06a      	b.n	80066a4 <USB_EPStartXfer+0x65c>
 80065ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80065d2:	d81e      	bhi.n	8006612 <USB_EPStartXfer+0x5ca>
 80065d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <USB_EPStartXfer+0x5a2>
 80065e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e6:	3301      	adds	r3, #1
 80065e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065f8:	6859      	ldr	r1, [r3, #4]
 80065fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fc:	069a      	lsls	r2, r3, #26
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006608:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
 8006610:	e048      	b.n	80066a4 <USB_EPStartXfer+0x65c>
 8006612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
 8006618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <USB_EPStartXfer+0x5e0>
 8006622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006624:	3b01      	subs	r3, #1
 8006626:	637b      	str	r3, [r7, #52]	@ 0x34
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006632:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663a:	069b      	lsls	r3, r3, #26
 800663c:	431a      	orrs	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006648:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800664c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	e027      	b.n	80066a4 <USB_EPStartXfer+0x65c>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d123      	bne.n	80066a4 <USB_EPStartXfer+0x65c>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006666:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006676:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800667a:	b292      	uxth	r2, r2
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006688:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800668c:	6859      	ldr	r1, [r3, #4]
 800668e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006690:	041a      	lsls	r2, r3, #16
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800669c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	895b      	ldrh	r3, [r3, #10]
 80066a8:	82fb      	strh	r3, [r7, #22]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	6959      	ldr	r1, [r3, #20]
 80066ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	8afa      	ldrh	r2, [r7, #22]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fb8a 	bl	8006dce <USB_WritePMA>
 80066ba:	e19f      	b.n	80069fc <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	647b      	str	r3, [r7, #68]	@ 0x44

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4ba0      	ldr	r3, [pc, #640]	@ (8006950 <USB_EPStartXfer+0x908>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e8:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006704:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006708:	b292      	uxth	r2, r2
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006716:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800671a:	6819      	ldr	r1, [r3, #0]
 800671c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800671e:	041a      	lsls	r2, r3, #16
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800672a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800672e:	430a      	orrs	r2, r1
 8006730:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	891b      	ldrh	r3, [r3, #8]
 8006736:	82fb      	strh	r3, [r7, #22]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6959      	ldr	r1, [r3, #20]
 800673c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673e:	b29b      	uxth	r3, r3
 8006740:	8afa      	ldrh	r2, [r7, #22]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fb43 	bl	8006dce <USB_WritePMA>
 8006748:	e158      	b.n	80069fc <USB_EPStartXfer+0x9b4>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	6a1a      	ldr	r2, [r3, #32]
 800674e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006750:	1ad2      	subs	r2, r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80a3 	beq.w	80068b2 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d16a      	bne.n	800684a <USB_EPStartXfer+0x802>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800677e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800678e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006792:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006796:	605a      	str	r2, [r3, #4]
 8006798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679a:	2b00      	cmp	r3, #0
 800679c:	d112      	bne.n	80067c4 <USB_EPStartXfer+0x77c>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80067c0:	605a      	str	r2, [r3, #4]
 80067c2:	e06a      	b.n	800689a <USB_EPStartXfer+0x852>
 80067c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80067c8:	d81e      	bhi.n	8006808 <USB_EPStartXfer+0x7c0>
 80067ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80067d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <USB_EPStartXfer+0x798>
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	3301      	adds	r3, #1
 80067de:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	069a      	lsls	r2, r3, #26
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	e048      	b.n	800689a <USB_EPStartXfer+0x852>
 8006808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	633b      	str	r3, [r7, #48]	@ 0x30
 800680e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <USB_EPStartXfer+0x7d6>
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	3b01      	subs	r3, #1
 800681c:	633b      	str	r3, [r7, #48]	@ 0x30
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006828:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	069b      	lsls	r3, r3, #26
 8006832:	431a      	orrs	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800683e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006842:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006846:	605a      	str	r2, [r3, #4]
 8006848:	e027      	b.n	800689a <USB_EPStartXfer+0x852>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d123      	bne.n	800689a <USB_EPStartXfer+0x852>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800685c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800686c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006870:	b292      	uxth	r2, r2
 8006872:	605a      	str	r2, [r3, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800687e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006886:	041a      	lsls	r2, r3, #16
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006892:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	895b      	ldrh	r3, [r3, #10]
 800689e:	82fb      	strh	r3, [r7, #22]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6959      	ldr	r1, [r3, #20]
 80068a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8afa      	ldrh	r2, [r7, #22]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa8f 	bl	8006dce <USB_WritePMA>
 80068b0:	e0a4      	b.n	80069fc <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d16d      	bne.n	8006996 <USB_EPStartXfer+0x94e>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068d8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d112      	bne.n	800690a <USB_EPStartXfer+0x8c2>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006902:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	e06d      	b.n	80069e6 <USB_EPStartXfer+0x99e>
 800690a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800690c:	2b3e      	cmp	r3, #62	@ 0x3e
 800690e:	d821      	bhi.n	8006954 <USB_EPStartXfer+0x90c>
 8006910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <USB_EPStartXfer+0x8de>
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	3301      	adds	r3, #1
 8006924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006930:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006934:	6819      	ldr	r1, [r3, #0]
 8006936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006938:	069a      	lsls	r2, r3, #26
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006944:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006948:	430a      	orrs	r2, r1
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e04b      	b.n	80069e6 <USB_EPStartXfer+0x99e>
 800694e:	bf00      	nop
 8006950:	07ff8e8f 	.word	0x07ff8e8f
 8006954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <USB_EPStartXfer+0x922>
 8006964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006966:	3b01      	subs	r3, #1
 8006968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006974:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697c:	069b      	lsls	r3, r3, #26
 800697e:	431a      	orrs	r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800698a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800698e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	e027      	b.n	80069e6 <USB_EPStartXfer+0x99e>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d123      	bne.n	80069e6 <USB_EPStartXfer+0x99e>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069bc:	b292      	uxth	r2, r2
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d2:	041a      	lsls	r2, r3, #16
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069e2:	430a      	orrs	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	891b      	ldrh	r3, [r3, #8]
 80069ea:	82fb      	strh	r3, [r7, #22]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6959      	ldr	r1, [r3, #20]
 80069f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8afa      	ldrh	r2, [r7, #22]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9e9 	bl	8006dce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b60      	ldr	r3, [pc, #384]	@ (8006b8c <USB_EPStartXfer+0xb44>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	60bb      	str	r3, [r7, #8]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f083 0310 	eor.w	r3, r3, #16
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f083 0320 	eor.w	r3, r3, #32
 8006a1c:	60bb      	str	r3, [r7, #8]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	e0a4      	b.n	8006b80 <USB_EPStartXfer+0xb38>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	7b1b      	ldrb	r3, [r3, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d142      	bne.n	8006ac4 <USB_EPStartXfer+0xa7c>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d118      	bne.n	8006a78 <USB_EPStartXfer+0xa30>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	78db      	ldrb	r3, [r3, #3]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d114      	bne.n	8006a78 <USB_EPStartXfer+0xa30>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8006b90 <USB_EPStartXfer+0xb48>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	623b      	str	r3, [r7, #32]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e013      	b.n	8006aa0 <USB_EPStartXfer+0xa58>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b43      	ldr	r3, [pc, #268]	@ (8006b94 <USB_EPStartXfer+0xb4c>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9e:	6013      	str	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d907      	bls.n	8006abc <USB_EPStartXfer+0xa74>
      {
        ep->xfer_len -= ep->maxpacket;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	1ad2      	subs	r2, r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	619a      	str	r2, [r3, #24]
 8006aba:	e045      	b.n	8006b48 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	619a      	str	r2, [r3, #24]
 8006ac2:	e041      	b.n	8006b48 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	78db      	ldrb	r3, [r3, #3]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d133      	bne.n	8006b34 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d039      	beq.n	8006b48 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	857b      	strh	r3, [r7, #42]	@ 0x2a

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ae2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <USB_EPStartXfer+0xaae>
 8006aec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <USB_EPStartXfer+0xac2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006af6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d123      	bne.n	8006b48 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11e      	bne.n	8006b48 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b1e      	ldr	r3, [pc, #120]	@ (8006b90 <USB_EPStartXfer+0xb48>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	e009      	b.n	8006b48 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	78db      	ldrb	r3, [r3, #3]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d103      	bne.n	8006b44 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	619a      	str	r2, [r3, #24]
 8006b42:	e001      	b.n	8006b48 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e01c      	b.n	8006b82 <USB_EPStartXfer+0xb3a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b10      	ldr	r3, [pc, #64]	@ (8006b98 <USB_EPStartXfer+0xb50>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	441a      	add	r2, r3
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3748      	adds	r7, #72	@ 0x48
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	07ff8fbf 	.word	0x07ff8fbf
 8006b90:	07ff8f8f 	.word	0x07ff8f8f
 8006b94:	07ff8e8f 	.word	0x07ff8e8f
 8006b98:	07ffbf8f 	.word	0x07ffbf8f

08006b9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d018      	beq.n	8006be0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b19      	ldr	r3, [pc, #100]	@ (8006c20 <USB_EPSetStall+0x84>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60bb      	str	r3, [r7, #8]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f083 0310 	eor.w	r3, r3, #16
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e017      	b.n	8006c10 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <USB_EPSetStall+0x88>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	441a      	add	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	07ff8fbf 	.word	0x07ff8fbf
 8006c24:	07ffbf8f 	.word	0x07ffbf8f

08006c28 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b089      	sub	sp, #36	@ 0x24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d03c      	beq.n	8006cb4 <USB_EPClearStall+0x8c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <USB_EPClearStall+0x52>
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	4b37      	ldr	r3, [pc, #220]	@ (8006d3c <USB_EPClearStall+0x114>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c78:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	78db      	ldrb	r3, [r3, #3]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d054      	beq.n	8006d2c <USB_EPClearStall+0x104>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006d40 <USB_EPClearStall+0x118>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	60bb      	str	r3, [r7, #8]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f083 0320 	eor.w	r3, r3, #32
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	e03b      	b.n	8006d2c <USB_EPClearStall+0x104>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d013      	beq.n	8006cf4 <USB_EPClearStall+0xcc>
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b18      	ldr	r3, [pc, #96]	@ (8006d3c <USB_EPClearStall+0x114>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	441a      	add	r2, r3
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf2:	6013      	str	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4b10      	ldr	r3, [pc, #64]	@ (8006d44 <USB_EPClearStall+0x11c>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	441a      	add	r2, r3
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3724      	adds	r7, #36	@ 0x24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	07ff8f8f 	.word	0x07ff8f8f
 8006d40:	07ff8fbf 	.word	0x07ff8fbf
 8006d44:	07ffbf8f 	.word	0x07ffbf8f

08006d48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2280      	movs	r2, #128	@ 0x80
 8006d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d7a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dbe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b08b      	sub	sp, #44	@ 0x2c
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	4611      	mov	r1, r2
 8006dda:	461a      	mov	r2, r3
 8006ddc:	460b      	mov	r3, r1
 8006dde:	80fb      	strh	r3, [r7, #6]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8006de4:	88bb      	ldrh	r3, [r7, #4]
 8006de6:	3303      	adds	r3, #3
 8006de8:	089b      	lsrs	r3, r3, #2
 8006dea:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006dec:	88bb      	ldrh	r3, [r7, #4]
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8006df8:	8afb      	ldrh	r3, [r7, #22]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <USB_WritePMA+0x36>
  {
    NbWords--;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e0e:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	623b      	str	r3, [r7, #32]
 8006e14:	e015      	b.n	8006e42 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3304      	adds	r3, #4
 8006e22:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3301      	adds	r3, #1
 8006e28:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	3301      	adds	r3, #1
 8006e34:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	623b      	str	r3, [r7, #32]
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8006e48:	8afb      	ldrh	r3, [r7, #22]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01a      	beq.n	8006e84 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e62:	4313      	orrs	r3, r2
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	623b      	str	r3, [r7, #32]
      pBuf++;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8006e72:	8afb      	ldrh	r3, [r7, #22]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8006e78:	8afb      	ldrh	r3, [r7, #22]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e9      	bne.n	8006e52 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e82:	601a      	str	r2, [r3, #0]
  }
}
 8006e84:	bf00      	nop
 8006e86:	372c      	adds	r7, #44	@ 0x2c
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b08b      	sub	sp, #44	@ 0x2c
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	80fb      	strh	r3, [r7, #6]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8006ea6:	88bb      	ldrh	r3, [r7, #4]
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	089b      	lsrs	r3, r3, #2
 8006eac:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006eae:	88bb      	ldrh	r3, [r7, #4]
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ec0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ec4:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8006ec6:	8b7b      	ldrh	r3, [r7, #26]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <USB_ReadPMA+0x42>
  {
    NbWords--;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ed6:	e015      	b.n	8006f04 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	623b      	str	r3, [r7, #32]
    pBuf++;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3301      	adds	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	3b01      	subs	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e6      	bne.n	8006ed8 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8006f0a:	8b7b      	ldrh	r3, [r7, #26]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d017      	beq.n	8006f40 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	701a      	strb	r2, [r3, #0]
      count++;
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	3301      	adds	r3, #1
 8006f32:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8006f34:	8b7b      	ldrh	r3, [r7, #26]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8006f3a:	8b7b      	ldrh	r3, [r7, #26]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1ea      	bne.n	8006f16 <USB_ReadPMA+0x86>
  }
}
 8006f40:	bf00      	nop
 8006f42:	372c      	adds	r7, #44	@ 0x2c
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f5c:	f000 ffa4 	bl	8007ea8 <USBD_static_malloc>
 8006f60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	33b0      	adds	r3, #176	@ 0xb0
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e0d6      	b.n	800712c <USBD_CDC_Init+0x1e0>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f7e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006f82:	2100      	movs	r1, #0
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f002 fc4c 	bl	8009822 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	33b0      	adds	r3, #176	@ 0xb0
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	33b0      	adds	r3, #176	@ 0xb0
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7c1b      	ldrb	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d138      	bne.n	800702c <USBD_CDC_Init+0xe0>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fba:	4b5e      	ldr	r3, [pc, #376]	@ (8007134 <USBD_CDC_Init+0x1e8>)
 8006fbc:	7819      	ldrb	r1, [r3, #0]
 8006fbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fe76 	bl	8007cb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fca:	4b5a      	ldr	r3, [pc, #360]	@ (8007134 <USBD_CDC_Init+0x1e8>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f003 020f 	and.w	r2, r3, #15
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	3324      	adds	r3, #36	@ 0x24
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006fe4:	4b54      	ldr	r3, [pc, #336]	@ (8007138 <USBD_CDC_Init+0x1ec>)
 8006fe6:	7819      	ldrb	r1, [r3, #0]
 8006fe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fec:	2202      	movs	r2, #2
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fe61 	bl	8007cb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ff4:	4b50      	ldr	r3, [pc, #320]	@ (8007138 <USBD_CDC_Init+0x1ec>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f003 020f 	and.w	r2, r3, #15
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800700c:	2201      	movs	r2, #1
 800700e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007010:	4b4a      	ldr	r3, [pc, #296]	@ (800713c <USBD_CDC_Init+0x1f0>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 020f 	and.w	r2, r3, #15
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	3326      	adds	r3, #38	@ 0x26
 8007026:	2210      	movs	r2, #16
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	e035      	b.n	8007098 <USBD_CDC_Init+0x14c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800702c:	4b41      	ldr	r3, [pc, #260]	@ (8007134 <USBD_CDC_Init+0x1e8>)
 800702e:	7819      	ldrb	r1, [r3, #0]
 8007030:	2340      	movs	r3, #64	@ 0x40
 8007032:	2202      	movs	r2, #2
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fe3e 	bl	8007cb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800703a:	4b3e      	ldr	r3, [pc, #248]	@ (8007134 <USBD_CDC_Init+0x1e8>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	f003 020f 	and.w	r2, r3, #15
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	3324      	adds	r3, #36	@ 0x24
 8007050:	2201      	movs	r2, #1
 8007052:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007054:	4b38      	ldr	r3, [pc, #224]	@ (8007138 <USBD_CDC_Init+0x1ec>)
 8007056:	7819      	ldrb	r1, [r3, #0]
 8007058:	2340      	movs	r3, #64	@ 0x40
 800705a:	2202      	movs	r2, #2
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fe2a 	bl	8007cb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007062:	4b35      	ldr	r3, [pc, #212]	@ (8007138 <USBD_CDC_Init+0x1ec>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	f003 020f 	and.w	r2, r3, #15
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800707a:	2201      	movs	r2, #1
 800707c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800707e:	4b2f      	ldr	r3, [pc, #188]	@ (800713c <USBD_CDC_Init+0x1f0>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	f003 020f 	and.w	r2, r3, #15
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	440b      	add	r3, r1
 8007092:	3326      	adds	r3, #38	@ 0x26
 8007094:	2210      	movs	r2, #16
 8007096:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007098:	4b28      	ldr	r3, [pc, #160]	@ (800713c <USBD_CDC_Init+0x1f0>)
 800709a:	7819      	ldrb	r1, [r3, #0]
 800709c:	2308      	movs	r3, #8
 800709e:	2203      	movs	r2, #3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fe08 	bl	8007cb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80070a6:	4b25      	ldr	r3, [pc, #148]	@ (800713c <USBD_CDC_Init+0x1f0>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	f003 020f 	and.w	r2, r3, #15
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	3324      	adds	r3, #36	@ 0x24
 80070bc:	2201      	movs	r2, #1
 80070be:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	33b2      	adds	r3, #178	@ 0xb2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <USBD_CDC_Init+0x1ae>
  {
    return (uint8_t)USBD_EMEM;
 80070f6:	2302      	movs	r3, #2
 80070f8:	e018      	b.n	800712c <USBD_CDC_Init+0x1e0>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7c1b      	ldrb	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <USBD_CDC_Init+0x1cc>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007102:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <USBD_CDC_Init+0x1ec>)
 8007104:	7819      	ldrb	r1, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800710c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fe9b 	bl	8007e4c <USBD_LL_PrepareReceive>
 8007116:	e008      	b.n	800712a <USBD_CDC_Init+0x1de>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007118:	4b07      	ldr	r3, [pc, #28]	@ (8007138 <USBD_CDC_Init+0x1ec>)
 800711a:	7819      	ldrb	r1, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007122:	2340      	movs	r3, #64	@ 0x40
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fe91 	bl	8007e4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	200000a3 	.word	0x200000a3
 8007138:	200000a4 	.word	0x200000a4
 800713c:	200000a5 	.word	0x200000a5

08007140 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800714c:	4b3b      	ldr	r3, [pc, #236]	@ (800723c <USBD_CDC_DeInit+0xfc>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fdcf 	bl	8007cf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007158:	4b38      	ldr	r3, [pc, #224]	@ (800723c <USBD_CDC_DeInit+0xfc>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 020f 	and.w	r2, r3, #15
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	3324      	adds	r3, #36	@ 0x24
 800716e:	2200      	movs	r2, #0
 8007170:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007172:	4b33      	ldr	r3, [pc, #204]	@ (8007240 <USBD_CDC_DeInit+0x100>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fdbc 	bl	8007cf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800717e:	4b30      	ldr	r3, [pc, #192]	@ (8007240 <USBD_CDC_DeInit+0x100>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	f003 020f 	and.w	r2, r3, #15
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	440b      	add	r3, r1
 8007192:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007196:	2200      	movs	r2, #0
 8007198:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800719a:	4b2a      	ldr	r3, [pc, #168]	@ (8007244 <USBD_CDC_DeInit+0x104>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fda8 	bl	8007cf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80071a6:	4b27      	ldr	r3, [pc, #156]	@ (8007244 <USBD_CDC_DeInit+0x104>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	f003 020f 	and.w	r2, r3, #15
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	3324      	adds	r3, #36	@ 0x24
 80071bc:	2200      	movs	r2, #0
 80071be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80071c0:	4b20      	ldr	r3, [pc, #128]	@ (8007244 <USBD_CDC_DeInit+0x104>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	f003 020f 	and.w	r2, r3, #15
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	440b      	add	r3, r1
 80071d4:	3326      	adds	r3, #38	@ 0x26
 80071d6:	2200      	movs	r2, #0
 80071d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	33b0      	adds	r3, #176	@ 0xb0
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d021      	beq.n	8007232 <USBD_CDC_DeInit+0xf2>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	33b2      	adds	r3, #178	@ 0xb2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	33b0      	adds	r3, #176	@ 0xb0
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fe56 	bl	8007ec4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	33b0      	adds	r3, #176	@ 0xb0
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	2200      	movs	r2, #0
 8007228:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	200000a3 	.word	0x200000a3
 8007240:	200000a4 	.word	0x200000a4
 8007244:	200000a5 	.word	0x200000a5

08007248 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	33b0      	adds	r3, #176	@ 0xb0
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007276:	2303      	movs	r3, #3
 8007278:	e0c0      	b.n	80073fc <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007282:	2b00      	cmp	r3, #0
 8007284:	d050      	beq.n	8007328 <USBD_CDC_Setup+0xe0>
 8007286:	2b20      	cmp	r3, #32
 8007288:	f040 80b0 	bne.w	80073ec <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	88db      	ldrh	r3, [r3, #6]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d03a      	beq.n	800730a <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b25b      	sxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	da1b      	bge.n	80072d6 <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	33b2      	adds	r3, #178	@ 0xb2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80072b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	88d2      	ldrh	r2, [r2, #6]
 80072ba:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	88db      	ldrh	r3, [r3, #6]
 80072c0:	2b07      	cmp	r3, #7
 80072c2:	bf28      	it	cs
 80072c4:	2307      	movcs	r3, #7
 80072c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	89fa      	ldrh	r2, [r7, #14]
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f002 f907 	bl	80094e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80072d4:	e091      	b.n	80073fa <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	785a      	ldrb	r2, [r3, #1]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	88db      	ldrh	r3, [r3, #6]
 80072e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80072e6:	d803      	bhi.n	80072f0 <USBD_CDC_Setup+0xa8>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88db      	ldrh	r3, [r3, #6]
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	e000      	b.n	80072f2 <USBD_CDC_Setup+0xaa>
 80072f0:	2240      	movs	r2, #64	@ 0x40
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80072f8:	6939      	ldr	r1, [r7, #16]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007300:	461a      	mov	r2, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f002 f919 	bl	800953a <USBD_CtlPrepareRx>
      break;
 8007308:	e077      	b.n	80073fa <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	33b2      	adds	r3, #178	@ 0xb2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	7850      	ldrb	r0, [r2, #1]
 8007320:	2200      	movs	r2, #0
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	4798      	blx	r3
      break;
 8007326:	e068      	b.n	80073fa <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b0b      	cmp	r3, #11
 800732e:	d852      	bhi.n	80073d6 <USBD_CDC_Setup+0x18e>
 8007330:	a201      	add	r2, pc, #4	@ (adr r2, 8007338 <USBD_CDC_Setup+0xf0>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	08007369 	.word	0x08007369
 800733c:	080073e5 	.word	0x080073e5
 8007340:	080073d7 	.word	0x080073d7
 8007344:	080073d7 	.word	0x080073d7
 8007348:	080073d7 	.word	0x080073d7
 800734c:	080073d7 	.word	0x080073d7
 8007350:	080073d7 	.word	0x080073d7
 8007354:	080073d7 	.word	0x080073d7
 8007358:	080073d7 	.word	0x080073d7
 800735c:	080073d7 	.word	0x080073d7
 8007360:	08007393 	.word	0x08007393
 8007364:	080073bd 	.word	0x080073bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b03      	cmp	r3, #3
 8007372:	d107      	bne.n	8007384 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007374:	f107 030a 	add.w	r3, r7, #10
 8007378:	2202      	movs	r2, #2
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f002 f8b0 	bl	80094e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007382:	e032      	b.n	80073ea <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 ff2d 	bl	80091e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800738c:	2303      	movs	r3, #3
 800738e:	75fb      	strb	r3, [r7, #23]
          break;
 8007390:	e02b      	b.n	80073ea <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d107      	bne.n	80073ae <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800739e:	f107 030d 	add.w	r3, r7, #13
 80073a2:	2201      	movs	r2, #1
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f002 f89b 	bl	80094e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073ac:	e01d      	b.n	80073ea <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 ff18 	bl	80091e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80073b6:	2303      	movs	r3, #3
 80073b8:	75fb      	strb	r3, [r7, #23]
          break;
 80073ba:	e016      	b.n	80073ea <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d00f      	beq.n	80073e8 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 ff0b 	bl	80091e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073d4:	e008      	b.n	80073e8 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 ff04 	bl	80091e6 <USBD_CtlError>
          ret = USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	75fb      	strb	r3, [r7, #23]
          break;
 80073e2:	e002      	b.n	80073ea <USBD_CDC_Setup+0x1a2>
          break;
 80073e4:	bf00      	nop
 80073e6:	e008      	b.n	80073fa <USBD_CDC_Setup+0x1b2>
          break;
 80073e8:	bf00      	nop
      }
      break;
 80073ea:	e006      	b.n	80073fa <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 fef9 	bl	80091e6 <USBD_CtlError>
      ret = USBD_FAIL;
 80073f4:	2303      	movs	r3, #3
 80073f6:	75fb      	strb	r3, [r7, #23]
      break;
 80073f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007416:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	33b0      	adds	r3, #176	@ 0xb0
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	e066      	b.n	80074fe <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	33b0      	adds	r3, #176	@ 0xb0
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	f003 020f 	and.w	r2, r3, #15
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	3318      	adds	r3, #24
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02f      	beq.n	80074bc <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	f003 020f 	and.w	r2, r3, #15
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	4613      	mov	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	440b      	add	r3, r1
 800746e:	3318      	adds	r3, #24
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	f003 010f 	and.w	r1, r3, #15
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	460b      	mov	r3, r1
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	4403      	add	r3, r0
 8007484:	3324      	adds	r3, #36	@ 0x24
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	fbb2 f1f3 	udiv	r1, r2, r3
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007492:	2b00      	cmp	r3, #0
 8007494:	d112      	bne.n	80074bc <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	3318      	adds	r3, #24
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074ae:	78f9      	ldrb	r1, [r7, #3]
 80074b0:	2300      	movs	r3, #0
 80074b2:	2200      	movs	r2, #0
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fcae 	bl	8007e16 <USBD_LL_Transmit>
 80074ba:	e01f      	b.n	80074fc <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	33b2      	adds	r3, #178	@ 0xb2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d010      	beq.n	80074fc <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	33b2      	adds	r3, #178	@ 0xb2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	33b0      	adds	r3, #176	@ 0xb0
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	33b0      	adds	r3, #176	@ 0xb0
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	e01a      	b.n	8007572 <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fc9e 	bl	8007e82 <USBD_LL_GetRxDataSize>
 8007546:	4602      	mov	r2, r0
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	33b2      	adds	r3, #178	@ 0xb2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800756c:	4611      	mov	r1, r2
 800756e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	33b0      	adds	r3, #176	@ 0xb0
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800759a:	2303      	movs	r3, #3
 800759c:	e024      	b.n	80075e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	33b2      	adds	r3, #178	@ 0xb2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d019      	beq.n	80075e6 <USBD_CDC_EP0_RxReady+0x6c>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80075b8:	2bff      	cmp	r3, #255	@ 0xff
 80075ba:	d014      	beq.n	80075e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	33b2      	adds	r3, #178	@ 0xb2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80075d4:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	22ff      	movs	r2, #255	@ 0xff
 80075e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075f8:	2183      	movs	r1, #131	@ 0x83
 80075fa:	4818      	ldr	r0, [pc, #96]	@ (800765c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075fc:	f000 ffbd 	bl	800857a <USBD_GetEpDesc>
 8007600:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007602:	2101      	movs	r1, #1
 8007604:	4815      	ldr	r0, [pc, #84]	@ (800765c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007606:	f000 ffb8 	bl	800857a <USBD_GetEpDesc>
 800760a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800760c:	2182      	movs	r1, #130	@ 0x82
 800760e:	4813      	ldr	r0, [pc, #76]	@ (800765c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007610:	f000 ffb3 	bl	800857a <USBD_GetEpDesc>
 8007614:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2210      	movs	r2, #16
 8007620:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d006      	beq.n	8007636 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	2200      	movs	r2, #0
 800762c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007630:	711a      	strb	r2, [r3, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d006      	beq.n	800764a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007644:	711a      	strb	r2, [r3, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2243      	movs	r2, #67	@ 0x43
 800764e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007650:	4b02      	ldr	r3, [pc, #8]	@ (800765c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000060 	.word	0x20000060

08007660 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007668:	2183      	movs	r1, #131	@ 0x83
 800766a:	4818      	ldr	r0, [pc, #96]	@ (80076cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800766c:	f000 ff85 	bl	800857a <USBD_GetEpDesc>
 8007670:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007672:	2101      	movs	r1, #1
 8007674:	4815      	ldr	r0, [pc, #84]	@ (80076cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007676:	f000 ff80 	bl	800857a <USBD_GetEpDesc>
 800767a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800767c:	2182      	movs	r1, #130	@ 0x82
 800767e:	4813      	ldr	r0, [pc, #76]	@ (80076cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007680:	f000 ff7b 	bl	800857a <USBD_GetEpDesc>
 8007684:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2210      	movs	r2, #16
 8007690:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d006      	beq.n	80076a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2200      	movs	r2, #0
 800769c:	711a      	strb	r2, [r3, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f042 0202 	orr.w	r2, r2, #2
 80076a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	711a      	strb	r2, [r3, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f042 0202 	orr.w	r2, r2, #2
 80076b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2243      	movs	r2, #67	@ 0x43
 80076be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076c0:	4b02      	ldr	r3, [pc, #8]	@ (80076cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000060 	.word	0x20000060

080076d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076d8:	2183      	movs	r1, #131	@ 0x83
 80076da:	4818      	ldr	r0, [pc, #96]	@ (800773c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076dc:	f000 ff4d 	bl	800857a <USBD_GetEpDesc>
 80076e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076e2:	2101      	movs	r1, #1
 80076e4:	4815      	ldr	r0, [pc, #84]	@ (800773c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076e6:	f000 ff48 	bl	800857a <USBD_GetEpDesc>
 80076ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076ec:	2182      	movs	r1, #130	@ 0x82
 80076ee:	4813      	ldr	r0, [pc, #76]	@ (800773c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076f0:	f000 ff43 	bl	800857a <USBD_GetEpDesc>
 80076f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2210      	movs	r2, #16
 8007700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2200      	movs	r2, #0
 800770c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007710:	711a      	strb	r2, [r3, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d006      	beq.n	800772a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007724:	711a      	strb	r2, [r3, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2243      	movs	r2, #67	@ 0x43
 800772e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007730:	4b02      	ldr	r3, [pc, #8]	@ (800773c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000060 	.word	0x20000060

08007740 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	220a      	movs	r2, #10
 800774c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800774e:	4b03      	ldr	r3, [pc, #12]	@ (800775c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	2000001c 	.word	0x2000001c

08007760 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007770:	2303      	movs	r3, #3
 8007772:	e009      	b.n	8007788 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	33b2      	adds	r3, #178	@ 0xb2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	33b0      	adds	r3, #176	@ 0xb0
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e008      	b.n	80077ce <USBD_CDC_SetTxBuffer+0x3a>
  }

  hcdc->TxBuffer = pbuff;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	33b0      	adds	r3, #176	@ 0xb0
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e004      	b.n	800780a <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
	...

08007818 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	33b0      	adds	r3, #176	@ 0xb0
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007832:	2301      	movs	r3, #1
 8007834:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	e025      	b.n	800788c <USBD_CDC_TransmitPacket+0x74>
  }

  if (hcdc->TxState == 0U)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007846:	2b00      	cmp	r3, #0
 8007848:	d11f      	bne.n	800788a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2201      	movs	r2, #1
 800784e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007852:	4b10      	ldr	r3, [pc, #64]	@ (8007894 <USBD_CDC_TransmitPacket+0x7c>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4403      	add	r3, r0
 800786c:	3318      	adds	r3, #24
 800786e:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007870:	4b08      	ldr	r3, [pc, #32]	@ (8007894 <USBD_CDC_TransmitPacket+0x7c>)
 8007872:	7819      	ldrb	r1, [r3, #0]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fac8 	bl	8007e16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200000a3 	.word	0x200000a3

08007898 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	33b0      	adds	r3, #176	@ 0xb0
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	33b0      	adds	r3, #176	@ 0xb0
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e018      	b.n	80078fc <USBD_CDC_ReceivePacket+0x64>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7c1b      	ldrb	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <USBD_CDC_ReceivePacket+0x50>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007904 <USBD_CDC_ReceivePacket+0x6c>)
 80078d4:	7819      	ldrb	r1, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fab3 	bl	8007e4c <USBD_LL_PrepareReceive>
 80078e6:	e008      	b.n	80078fa <USBD_CDC_ReceivePacket+0x62>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078e8:	4b06      	ldr	r3, [pc, #24]	@ (8007904 <USBD_CDC_ReceivePacket+0x6c>)
 80078ea:	7819      	ldrb	r1, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078f2:	2340      	movs	r3, #64	@ 0x40
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 faa9 	bl	8007e4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	200000a4 	.word	0x200000a4

08007908 <TEMPLATE_Init>:
 *         Initializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Init(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800790c:	2200      	movs	r2, #0
 800790e:	4905      	ldr	r1, [pc, #20]	@ (8007924 <TEMPLATE_Init+0x1c>)
 8007910:	4805      	ldr	r0, [pc, #20]	@ (8007928 <TEMPLATE_Init+0x20>)
 8007912:	f7ff ff3f 	bl	8007794 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007916:	4905      	ldr	r1, [pc, #20]	@ (800792c <TEMPLATE_Init+0x24>)
 8007918:	4803      	ldr	r0, [pc, #12]	@ (8007928 <TEMPLATE_Init+0x20>)
 800791a:	f7ff ff5e 	bl	80077da <USBD_CDC_SetRxBuffer>
    return (0);
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	bd80      	pop	{r7, pc}
 8007924:	2000096c 	.word	0x2000096c
 8007928:	20000470 	.word	0x20000470
 800792c:	2000076c 	.word	0x2000076c

08007930 <TEMPLATE_DeInit>:
 *         DeInitializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_DeInit(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
	/*
     Add your deinitialization code here
	 */
	return (0);
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <TEMPLATE_Control>:
 * @param  Buf: Buffer containing command data (request parameters)
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
 800794c:	4613      	mov	r3, r2
 800794e:	80bb      	strh	r3, [r7, #4]
	UNUSED(length);

	switch (cmd)
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	2b23      	cmp	r3, #35	@ 0x23
 8007954:	f200 8098 	bhi.w	8007a88 <TEMPLATE_Control+0x148>
 8007958:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <TEMPLATE_Control+0x20>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007a89 	.word	0x08007a89
 8007964:	08007a89 	.word	0x08007a89
 8007968:	08007a89 	.word	0x08007a89
 800796c:	08007a89 	.word	0x08007a89
 8007970:	08007a89 	.word	0x08007a89
 8007974:	08007a89 	.word	0x08007a89
 8007978:	08007a89 	.word	0x08007a89
 800797c:	08007a89 	.word	0x08007a89
 8007980:	08007a89 	.word	0x08007a89
 8007984:	08007a89 	.word	0x08007a89
 8007988:	08007a89 	.word	0x08007a89
 800798c:	08007a89 	.word	0x08007a89
 8007990:	08007a89 	.word	0x08007a89
 8007994:	08007a89 	.word	0x08007a89
 8007998:	08007a89 	.word	0x08007a89
 800799c:	08007a89 	.word	0x08007a89
 80079a0:	08007a89 	.word	0x08007a89
 80079a4:	08007a89 	.word	0x08007a89
 80079a8:	08007a89 	.word	0x08007a89
 80079ac:	08007a89 	.word	0x08007a89
 80079b0:	08007a89 	.word	0x08007a89
 80079b4:	08007a89 	.word	0x08007a89
 80079b8:	08007a89 	.word	0x08007a89
 80079bc:	08007a89 	.word	0x08007a89
 80079c0:	08007a89 	.word	0x08007a89
 80079c4:	08007a89 	.word	0x08007a89
 80079c8:	08007a89 	.word	0x08007a89
 80079cc:	08007a89 	.word	0x08007a89
 80079d0:	08007a89 	.word	0x08007a89
 80079d4:	08007a89 	.word	0x08007a89
 80079d8:	08007a89 	.word	0x08007a89
 80079dc:	08007a89 	.word	0x08007a89
 80079e0:	080079f1 	.word	0x080079f1
 80079e4:	08007a35 	.word	0x08007a35
 80079e8:	08007a89 	.word	0x08007a89
 80079ec:	08007a89 	.word	0x08007a89
	case CDC_CLEAR_COMM_FEATURE:
		/* Add your code here */
		break;

	case CDC_SET_LINE_CODING:
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	431a      	orrs	r2, r3
				(pbuf[2] << 16) | (pbuf[3] << 24));
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	3302      	adds	r3, #2
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	041b      	lsls	r3, r3, #16
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8007a08:	431a      	orrs	r2, r3
				(pbuf[2] << 16) | (pbuf[3] << 24));
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	3303      	adds	r3, #3
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	061b      	lsls	r3, r3, #24
 8007a12:	4313      	orrs	r3, r2
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8007a14:	461a      	mov	r2, r3
 8007a16:	4b20      	ldr	r3, [pc, #128]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a18:	601a      	str	r2, [r3, #0]
		linecoding.format     = pbuf[4];
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	791a      	ldrb	r2, [r3, #4]
 8007a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a20:	711a      	strb	r2, [r3, #4]
		linecoding.paritytype = pbuf[5];
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	795a      	ldrb	r2, [r3, #5]
 8007a26:	4b1c      	ldr	r3, [pc, #112]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a28:	715a      	strb	r2, [r3, #5]
		linecoding.datatype   = pbuf[6];
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	799a      	ldrb	r2, [r3, #6]
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a30:	719a      	strb	r2, [r3, #6]

		/* Add your code here */
		break;
 8007a32:	e02a      	b.n	8007a8a <TEMPLATE_Control+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(linecoding.bitrate);
 8007a34:	4b18      	ldr	r3, [pc, #96]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8007a3e:	4b16      	ldr	r3, [pc, #88]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	0a1a      	lsrs	r2, r3, #8
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8007a4c:	4b12      	ldr	r3, [pc, #72]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	0c1a      	lsrs	r2, r3, #16
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	3302      	adds	r3, #2
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	0e1a      	lsrs	r2, r3, #24
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	3303      	adds	r3, #3
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]
		pbuf[4] = linecoding.format;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a6e:	7912      	ldrb	r2, [r2, #4]
 8007a70:	701a      	strb	r2, [r3, #0]
		pbuf[5] = linecoding.paritytype;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	3305      	adds	r3, #5
 8007a76:	4a08      	ldr	r2, [pc, #32]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a78:	7952      	ldrb	r2, [r2, #5]
 8007a7a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = linecoding.datatype;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	3306      	adds	r3, #6
 8007a80:	4a05      	ldr	r2, [pc, #20]	@ (8007a98 <TEMPLATE_Control+0x158>)
 8007a82:	7992      	ldrb	r2, [r2, #6]
 8007a84:	701a      	strb	r2, [r3, #0]

		/* Add your code here */
		break;
 8007a86:	e000      	b.n	8007a8a <TEMPLATE_Control+0x14a>
	case CDC_SEND_BREAK:
		/* Add your code here */
		break;

	default:
		break;
 8007a88:	bf00      	nop
	}

	return (0);
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	200000bc 	.word	0x200000bc

08007a9c <TEMPLATE_Receive>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	/* Add your RX code here */

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007aa6:	4804      	ldr	r0, [pc, #16]	@ (8007ab8 <TEMPLATE_Receive+0x1c>)
 8007aa8:	f7ff fef6 	bl	8007898 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000470 	.word	0x20000470

08007abc <TEMPLATE_Transmit>:


uint8_t TEMPLATE_Transmit(uint8_t* Buf, uint16_t Len)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007acc:	4b0d      	ldr	r3, [pc, #52]	@ (8007b04 <TEMPLATE_Transmit+0x48>)
 8007ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ad2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <TEMPLATE_Transmit+0x26>
    return
             USBD_BUSY;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e00b      	b.n	8007afa <TEMPLATE_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	4806      	ldr	r0, [pc, #24]	@ (8007b04 <TEMPLATE_Transmit+0x48>)
 8007aea:	f7ff fe53 	bl	8007794 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007aee:	4805      	ldr	r0, [pc, #20]	@ (8007b04 <TEMPLATE_Transmit+0x48>)
 8007af0:	f7ff fe92 	bl	8007818 <USBD_CDC_TransmitPacket>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
  return result;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000470 	.word	0x20000470

08007b08 <TEMPLATE_TransmitCplt>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);

	return (0);
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_PCD_SetupStageCallback>:
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);

/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f000 fac7 	bl	80080ce <USBD_LL_SetupStage>
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	440b      	add	r3, r1
 8007b68:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	78fb      	ldrb	r3, [r7, #3]
 8007b70:	4619      	mov	r1, r3
 8007b72:	f000 fb01 	bl	8008178 <USBD_LL_DataOutStage>
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	440b      	add	r3, r1
 8007b9e:	3328      	adds	r3, #40	@ 0x28
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f000 fb9a 	bl	80082de <USBD_LL_DataInStage>
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
	USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fca0 	bl	8008506 <USBD_LL_SOF>
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
	USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	73fb      	strb	r3, [r7, #15]

	if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	79db      	ldrb	r3, [r3, #7]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d001      	beq.n	8007be6 <HAL_PCD_ResetCallback+0x18>
	{
		Error_Handler();
 8007be2:	f7f8 fcbb 	bl	800055c <Error_Handler>
	}
	/* Set Speed. */
	USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007bec:	7bfa      	ldrb	r2, [r7, #15]
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fc78 	bl	80084e6 <USBD_LL_SetSpeed>

	/* Reset Device. */
	USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fc20 	bl	8008442 <USBD_LL_Reset>
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <USBD_LL_Init>:
 * @brief  Initializes the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <USBD_LL_Init+0x7c>)
 8007c18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 8007c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8007c88 <USBD_LL_Init+0x7c>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8c2 32e0 	str.w	r3, [r2, #736]	@ 0x2e0

	/* Initialize LL Driver */
	MX_USB_DRD_FS_PCD_Init();
 8007c24:	f7f8 fc3e 	bl	80004a4 <MX_USB_DRD_FS_PCD_Init>

	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007c2e:	2320      	movs	r3, #32
 8007c30:	2200      	movs	r2, #0
 8007c32:	2100      	movs	r1, #0
 8007c34:	f7fb f8be 	bl	8002db4 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007c3e:	2360      	movs	r3, #96	@ 0x60
 8007c40:	2200      	movs	r2, #0
 8007c42:	2180      	movs	r1, #128	@ 0x80
 8007c44:	f7fb f8b6 	bl	8002db4 <HAL_PCDEx_PMAConfig>

	/* HID Endpoints */
	//HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);

	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0xE0);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007c4e:	23e0      	movs	r3, #224	@ 0xe0
 8007c50:	2200      	movs	r2, #0
 8007c52:	2101      	movs	r1, #1
 8007c54:	f7fb f8ae 	bl	8002db4 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x120);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007c5e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8007c62:	2200      	movs	r2, #0
 8007c64:	2182      	movs	r1, #130	@ 0x82
 8007c66:	f7fb f8a5 	bl	8002db4 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007c70:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8007c74:	2200      	movs	r2, #0
 8007c76:	2183      	movs	r1, #131	@ 0x83
 8007c78:	f7fb f89c 	bl	8002db4 <HAL_PCDEx_PMAConfig>

	return USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	2000018c 	.word	0x2000018c

08007c8c <USBD_LL_Start>:
 * @brief  Starts the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7f9 fd78 	bl	8001790 <HAL_PCD_Start>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f916 	bl	8007ed8 <USBD_Get_USB_Status>
 8007cac:	4603      	mov	r3, r0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_LL_OpenEP>:
 * @param  ep_mps: Endpoint Max Packet Size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	4608      	mov	r0, r1
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	70fb      	strb	r3, [r7, #3]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70bb      	strb	r3, [r7, #2]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007cd6:	78bb      	ldrb	r3, [r7, #2]
 8007cd8:	883a      	ldrh	r2, [r7, #0]
 8007cda:	78f9      	ldrb	r1, [r7, #3]
 8007cdc:	f7f9 fea7 	bl	8001a2e <HAL_PCD_EP_Open>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 f8f6 	bl	8007ed8 <USBD_Get_USB_Status>
 8007cec:	4603      	mov	r3, r0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_CloseEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d08:	78fa      	ldrb	r2, [r7, #3]
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7f9 feef 	bl	8001af0 <HAL_PCD_EP_Close>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 f8dd 	bl	8007ed8 <USBD_Get_USB_Status>
 8007d1e:	4603      	mov	r3, r0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_StallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7f9 ffa2 	bl	8001c88 <HAL_PCD_EP_SetStall>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f8c4 	bl	8007ed8 <USBD_Get_USB_Status>
 8007d50:	4603      	mov	r3, r0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_LL_ClearStallEP>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7f9 ffdd 	bl	8001d30 <HAL_PCD_EP_ClrStall>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 f8ab 	bl	8007ed8 <USBD_Get_USB_Status>
 8007d82:	4603      	mov	r3, r0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d9e:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 8007da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	da0b      	bge.n	8007dc0 <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dae:	68f9      	ldr	r1, [r7, #12]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	440b      	add	r3, r1
 8007dba:	3316      	adds	r3, #22
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	e00b      	b.n	8007dd8 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	440b      	add	r3, r1
 8007dd2:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8007dd6:	781b      	ldrb	r3, [r3, #0]
	}
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USBD_LL_SetUSBAddress>:
 * @param  dev_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7f9 fdf3 	bl	80019e6 <HAL_PCD_SetAddress>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f866 	bl	8007ed8 <USBD_Get_USB_Status>
 8007e0c:	4603      	mov	r3, r0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_LL_Transmit>:
 * @param  size: Data size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b086      	sub	sp, #24
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
 8007e22:	460b      	mov	r3, r1
 8007e24:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007e2c:	7af9      	ldrb	r1, [r7, #11]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	f7f9 fef1 	bl	8001c18 <HAL_PCD_EP_Transmit>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 f84b 	bl	8007ed8 <USBD_Get_USB_Status>
 8007e42:	4603      	mov	r3, r0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_LL_PrepareReceive>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007e62:	7af9      	ldrb	r1, [r7, #11]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	f7f9 fe8c 	bl	8001b84 <HAL_PCD_EP_Receive>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f830 	bl	8007ed8 <USBD_Get_USB_Status>
 8007e78:	4603      	mov	r3, r0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_LL_GetRxDataSize>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e94:	78fa      	ldrb	r2, [r7, #3]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7f9 fea5 	bl	8001be8 <HAL_PCD_EP_GetRxCount>
 8007e9e:	4603      	mov	r3, r0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_static_malloc>:
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void *USBD_static_malloc(uint32_t size)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 8007eb0:	4b03      	ldr	r3, [pc, #12]	@ (8007ec0 <USBD_static_malloc+0x18>)
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000b6c 	.word	0x20000b6c

08007ec4 <USBD_static_free>:
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void *p)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_Get_USB_Status>:
{
	HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]

	switch (hal_status)
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d817      	bhi.n	8007f1c <USBD_Get_USB_Status+0x44>
 8007eec:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef4 <USBD_Get_USB_Status+0x1c>)
 8007eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef2:	bf00      	nop
 8007ef4:	08007f05 	.word	0x08007f05
 8007ef8:	08007f0b 	.word	0x08007f0b
 8007efc:	08007f11 	.word	0x08007f11
 8007f00:	08007f17 	.word	0x08007f17
	{
	case HAL_OK :
		usb_status = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
		break;
 8007f08:	e00b      	b.n	8007f22 <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	73fb      	strb	r3, [r7, #15]
		break;
 8007f0e:	e008      	b.n	8007f22 <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 8007f10:	2301      	movs	r3, #1
 8007f12:	73fb      	strb	r3, [r7, #15]
		break;
 8007f14:	e005      	b.n	8007f22 <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 8007f16:	2303      	movs	r3, #3
 8007f18:	73fb      	strb	r3, [r7, #15]
		break;
 8007f1a:	e002      	b.n	8007f22 <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	73fb      	strb	r3, [r7, #15]
		break;
 8007f20:	bf00      	nop
	}
	return usb_status;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007f44:	4817      	ldr	r0, [pc, #92]	@ (8007fa4 <USBD_Init+0x74>)
 8007f46:	f001 fc0f 	bl	8009768 <iprintf>
 8007f4a:	4817      	ldr	r0, [pc, #92]	@ (8007fa8 <USBD_Init+0x78>)
 8007f4c:	f001 fc0c 	bl	8009768 <iprintf>
 8007f50:	200a      	movs	r0, #10
 8007f52:	f001 fc1b 	bl	800978c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e01f      	b.n	8007f9a <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	79fa      	ldrb	r2, [r7, #7]
 8007f8c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7ff fe3c 	bl	8007c0c <USBD_LL_Init>
 8007f94:	4603      	mov	r3, r0
 8007f96:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	0800a510 	.word	0x0800a510
 8007fa8:	0800a518 	.word	0x0800a518

08007fac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007fc0:	481a      	ldr	r0, [pc, #104]	@ (800802c <USBD_RegisterClass+0x80>)
 8007fc2:	f001 fbd1 	bl	8009768 <iprintf>
 8007fc6:	481a      	ldr	r0, [pc, #104]	@ (8008030 <USBD_RegisterClass+0x84>)
 8007fc8:	f001 fbce 	bl	8009768 <iprintf>
 8007fcc:	200a      	movs	r0, #10
 8007fce:	f001 fbdd 	bl	800978c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e025      	b.n	8008022 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	32ae      	adds	r2, #174	@ 0xae
 8007fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00f      	beq.n	8008012 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	32ae      	adds	r2, #174	@ 0xae
 8007ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	f107 020e 	add.w	r2, r7, #14
 8008006:	4610      	mov	r0, r2
 8008008:	4798      	blx	r3
 800800a:	4602      	mov	r2, r0
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4

  return USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	0800a510 	.word	0x0800a510
 8008030:	0800a530 	.word	0x0800a530

08008034 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff fe25 	bl	8007c8c <USBD_LL_Start>
 8008042:	4603      	mov	r3, r0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008054:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	78fa      	ldrb	r2, [r7, #3]
 8008086:	4611      	mov	r1, r2
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008090:	7bfb      	ldrb	r3, [r7, #15]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	78fa      	ldrb	r2, [r7, #3]
 80080b4:	4611      	mov	r1, r2
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 f846 	bl	8009172 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80080f4:	461a      	mov	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008102:	f003 031f 	and.w	r3, r3, #31
 8008106:	2b02      	cmp	r3, #2
 8008108:	d01a      	beq.n	8008140 <USBD_LL_SetupStage+0x72>
 800810a:	2b02      	cmp	r3, #2
 800810c:	d822      	bhi.n	8008154 <USBD_LL_SetupStage+0x86>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <USBD_LL_SetupStage+0x4a>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d00a      	beq.n	800812c <USBD_LL_SetupStage+0x5e>
 8008116:	e01d      	b.n	8008154 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fa9d 	bl	8008660 <USBD_StdDevReq>
 8008126:	4603      	mov	r3, r0
 8008128:	73fb      	strb	r3, [r7, #15]
      break;
 800812a:	e020      	b.n	800816e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fb05 	bl	8008744 <USBD_StdItfReq>
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]
      break;
 800813e:	e016      	b.n	800816e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fb67 	bl	800881c <USBD_StdEPReq>
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]
      break;
 8008152:	e00c      	b.n	800816e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800815a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800815e:	b2db      	uxtb	r3, r3
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fde0 	bl	8007d28 <USBD_LL_StallEP>
 8008168:	4603      	mov	r3, r0
 800816a:	73fb      	strb	r3, [r7, #15]
      break;
 800816c:	bf00      	nop
  }

  return ret;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	460b      	mov	r3, r1
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d16e      	bne.n	800826e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008196:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800819e:	2b03      	cmp	r3, #3
 80081a0:	f040 8098 	bne.w	80082d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d913      	bls.n	80081d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	1ad2      	subs	r2, r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	4293      	cmp	r3, r2
 80081c8:	bf28      	it	cs
 80081ca:	4613      	movcs	r3, r2
 80081cc:	461a      	mov	r2, r3
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 f9cf 	bl	8009574 <USBD_CtlContinueRx>
 80081d6:	e07d      	b.n	80082d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80081de:	f003 031f 	and.w	r3, r3, #31
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d014      	beq.n	8008210 <USBD_LL_DataOutStage+0x98>
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d81d      	bhi.n	8008226 <USBD_LL_DataOutStage+0xae>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <USBD_LL_DataOutStage+0x7c>
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d003      	beq.n	80081fa <USBD_LL_DataOutStage+0x82>
 80081f2:	e018      	b.n	8008226 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	75bb      	strb	r3, [r7, #22]
            break;
 80081f8:	e018      	b.n	800822c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008200:	b2db      	uxtb	r3, r3
 8008202:	4619      	mov	r1, r3
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f99e 	bl	8008546 <USBD_CoreFindIF>
 800820a:	4603      	mov	r3, r0
 800820c:	75bb      	strb	r3, [r7, #22]
            break;
 800820e:	e00d      	b.n	800822c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008216:	b2db      	uxtb	r3, r3
 8008218:	4619      	mov	r1, r3
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 f9a0 	bl	8008560 <USBD_CoreFindEP>
 8008220:	4603      	mov	r3, r0
 8008222:	75bb      	strb	r3, [r7, #22]
            break;
 8008224:	e002      	b.n	800822c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	75bb      	strb	r3, [r7, #22]
            break;
 800822a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800822c:	7dbb      	ldrb	r3, [r7, #22]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d819      	bhi.n	8008266 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b03      	cmp	r3, #3
 800823c:	d113      	bne.n	8008266 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800823e:	7dba      	ldrb	r2, [r7, #22]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	32ae      	adds	r2, #174	@ 0xae
 8008244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800824e:	7dba      	ldrb	r2, [r7, #22]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008256:	7dba      	ldrb	r2, [r7, #22]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	32ae      	adds	r2, #174	@ 0xae
 800825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f001 f995 	bl	8009596 <USBD_CtlSendStatus>
 800826c:	e032      	b.n	80082d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008274:	b2db      	uxtb	r3, r3
 8008276:	4619      	mov	r1, r3
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f971 	bl	8008560 <USBD_CoreFindEP>
 800827e:	4603      	mov	r3, r0
 8008280:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008282:	7dbb      	ldrb	r3, [r7, #22]
 8008284:	2bff      	cmp	r3, #255	@ 0xff
 8008286:	d025      	beq.n	80082d4 <USBD_LL_DataOutStage+0x15c>
 8008288:	7dbb      	ldrb	r3, [r7, #22]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d822      	bhi.n	80082d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b03      	cmp	r3, #3
 8008298:	d117      	bne.n	80082ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800829a:	7dba      	ldrb	r2, [r7, #22]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	32ae      	adds	r2, #174	@ 0xae
 80082a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80082aa:	7dba      	ldrb	r2, [r7, #22]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80082b2:	7dba      	ldrb	r2, [r7, #22]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	32ae      	adds	r2, #174	@ 0xae
 80082b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	7afa      	ldrb	r2, [r7, #11]
 80082c0:	4611      	mov	r1, r2
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	4798      	blx	r3
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	e000      	b.n	80082d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b086      	sub	sp, #24
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	460b      	mov	r3, r1
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d16f      	bne.n	80083d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3314      	adds	r3, #20
 80082f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d15a      	bne.n	80083b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	429a      	cmp	r2, r3
 800830c:	d914      	bls.n	8008338 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	461a      	mov	r2, r3
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f001 f8f7 	bl	8009518 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800832a:	2300      	movs	r3, #0
 800832c:	2200      	movs	r2, #0
 800832e:	2100      	movs	r1, #0
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff fd8b 	bl	8007e4c <USBD_LL_PrepareReceive>
 8008336:	e03f      	b.n	80083b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	429a      	cmp	r2, r3
 8008342:	d11c      	bne.n	800837e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800834c:	429a      	cmp	r2, r3
 800834e:	d316      	bcc.n	800837e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800835a:	429a      	cmp	r2, r3
 800835c:	d20f      	bcs.n	800837e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800835e:	2200      	movs	r2, #0
 8008360:	2100      	movs	r1, #0
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f001 f8d8 	bl	8009518 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008370:	2300      	movs	r3, #0
 8008372:	2200      	movs	r2, #0
 8008374:	2100      	movs	r1, #0
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff fd68 	bl	8007e4c <USBD_LL_PrepareReceive>
 800837c:	e01c      	b.n	80083b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b03      	cmp	r3, #3
 8008388:	d10f      	bne.n	80083aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d009      	beq.n	80083aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083aa:	2180      	movs	r1, #128	@ 0x80
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff fcbb 	bl	8007d28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f001 f902 	bl	80095bc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d03a      	beq.n	8008438 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff fe42 	bl	800804c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80083d0:	e032      	b.n	8008438 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80083d2:	7afb      	ldrb	r3, [r7, #11]
 80083d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	4619      	mov	r1, r3
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 f8bf 	bl	8008560 <USBD_CoreFindEP>
 80083e2:	4603      	mov	r3, r0
 80083e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	2bff      	cmp	r3, #255	@ 0xff
 80083ea:	d025      	beq.n	8008438 <USBD_LL_DataInStage+0x15a>
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d822      	bhi.n	8008438 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d11c      	bne.n	8008438 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80083fe:	7dfa      	ldrb	r2, [r7, #23]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	32ae      	adds	r2, #174	@ 0xae
 8008404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d014      	beq.n	8008438 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800840e:	7dfa      	ldrb	r2, [r7, #23]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008416:	7dfa      	ldrb	r2, [r7, #23]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	32ae      	adds	r2, #174	@ 0xae
 800841c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	7afa      	ldrb	r2, [r7, #11]
 8008424:	4611      	mov	r1, r2
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	4798      	blx	r3
 800842a:	4603      	mov	r3, r0
 800842c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800842e:	7dbb      	ldrb	r3, [r7, #22]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008434:	7dbb      	ldrb	r3, [r7, #22]
 8008436:	e000      	b.n	800843a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800847a:	2b00      	cmp	r3, #0
 800847c:	d014      	beq.n	80084a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00e      	beq.n	80084a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6852      	ldr	r2, [r2, #4]
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	4611      	mov	r1, r2
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80084a4:	2303      	movs	r3, #3
 80084a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084a8:	2340      	movs	r3, #64	@ 0x40
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff fc01 	bl	8007cb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2240      	movs	r2, #64	@ 0x40
 80084c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084c4:	2340      	movs	r3, #64	@ 0x40
 80084c6:	2200      	movs	r2, #0
 80084c8:	2180      	movs	r1, #128	@ 0x80
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7ff fbf3 	bl	8007cb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2240      	movs	r2, #64	@ 0x40
 80084da:	621a      	str	r2, [r3, #32]

  return ret;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	78fa      	ldrb	r2, [r7, #3]
 80084f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b03      	cmp	r3, #3
 8008518:	d110      	bne.n	800853c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00b      	beq.n	800853c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d005      	beq.n	800853c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008552:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800856c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	460b      	mov	r3, r1
 8008584:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	885b      	ldrh	r3, [r3, #2]
 8008596:	b29b      	uxth	r3, r3
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	7812      	ldrb	r2, [r2, #0]
 800859c:	4293      	cmp	r3, r2
 800859e:	d91f      	bls.n	80085e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80085a6:	e013      	b.n	80085d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80085a8:	f107 030a 	add.w	r3, r7, #10
 80085ac:	4619      	mov	r1, r3
 80085ae:	6978      	ldr	r0, [r7, #20]
 80085b0:	f000 f81b 	bl	80085ea <USBD_GetNextDesc>
 80085b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	785b      	ldrb	r3, [r3, #1]
 80085ba:	2b05      	cmp	r3, #5
 80085bc:	d108      	bne.n	80085d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	789b      	ldrb	r3, [r3, #2]
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d008      	beq.n	80085de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	885b      	ldrh	r3, [r3, #2]
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	897b      	ldrh	r3, [r7, #10]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d8e5      	bhi.n	80085a8 <USBD_GetEpDesc+0x2e>
 80085dc:	e000      	b.n	80085e0 <USBD_GetEpDesc+0x66>
          break;
 80085de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80085e0:	693b      	ldr	r3, [r7, #16]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	7812      	ldrb	r2, [r2, #0]
 8008600:	4413      	add	r3, r2
 8008602:	b29a      	uxth	r2, r3
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4413      	add	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008614:	68fb      	ldr	r3, [r7, #12]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008622:	b480      	push	{r7}
 8008624:	b087      	sub	sp, #28
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	3301      	adds	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008640:	8a3b      	ldrh	r3, [r7, #16]
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	b21a      	sxth	r2, r3
 8008646:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800864a:	4313      	orrs	r3, r2
 800864c:	b21b      	sxth	r3, r3
 800864e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008650:	89fb      	ldrh	r3, [r7, #14]
}
 8008652:	4618      	mov	r0, r3
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
	...

08008660 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008676:	2b40      	cmp	r3, #64	@ 0x40
 8008678:	d005      	beq.n	8008686 <USBD_StdDevReq+0x26>
 800867a:	2b40      	cmp	r3, #64	@ 0x40
 800867c:	d857      	bhi.n	800872e <USBD_StdDevReq+0xce>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00f      	beq.n	80086a2 <USBD_StdDevReq+0x42>
 8008682:	2b20      	cmp	r3, #32
 8008684:	d153      	bne.n	800872e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	32ae      	adds	r2, #174	@ 0xae
 8008690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	4798      	blx	r3
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]
      break;
 80086a0:	e04a      	b.n	8008738 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	2b09      	cmp	r3, #9
 80086a8:	d83b      	bhi.n	8008722 <USBD_StdDevReq+0xc2>
 80086aa:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <USBD_StdDevReq+0x50>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	08008705 	.word	0x08008705
 80086b4:	08008719 	.word	0x08008719
 80086b8:	08008723 	.word	0x08008723
 80086bc:	0800870f 	.word	0x0800870f
 80086c0:	08008723 	.word	0x08008723
 80086c4:	080086e3 	.word	0x080086e3
 80086c8:	080086d9 	.word	0x080086d9
 80086cc:	08008723 	.word	0x08008723
 80086d0:	080086fb 	.word	0x080086fb
 80086d4:	080086ed 	.word	0x080086ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa3c 	bl	8008b58 <USBD_GetDescriptor>
          break;
 80086e0:	e024      	b.n	800872c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fba1 	bl	8008e2c <USBD_SetAddress>
          break;
 80086ea:	e01f      	b.n	800872c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fbe0 	bl	8008eb4 <USBD_SetConfig>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]
          break;
 80086f8:	e018      	b.n	800872c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fc83 	bl	8009008 <USBD_GetConfig>
          break;
 8008702:	e013      	b.n	800872c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fcb4 	bl	8009074 <USBD_GetStatus>
          break;
 800870c:	e00e      	b.n	800872c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fce3 	bl	80090dc <USBD_SetFeature>
          break;
 8008716:	e009      	b.n	800872c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fd07 	bl	800912e <USBD_ClrFeature>
          break;
 8008720:	e004      	b.n	800872c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fd5e 	bl	80091e6 <USBD_CtlError>
          break;
 800872a:	bf00      	nop
      }
      break;
 800872c:	e004      	b.n	8008738 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fd58 	bl	80091e6 <USBD_CtlError>
      break;
 8008736:	bf00      	nop
  }

  return ret;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop

08008744 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800875a:	2b40      	cmp	r3, #64	@ 0x40
 800875c:	d005      	beq.n	800876a <USBD_StdItfReq+0x26>
 800875e:	2b40      	cmp	r3, #64	@ 0x40
 8008760:	d852      	bhi.n	8008808 <USBD_StdItfReq+0xc4>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <USBD_StdItfReq+0x26>
 8008766:	2b20      	cmp	r3, #32
 8008768:	d14e      	bne.n	8008808 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008770:	b2db      	uxtb	r3, r3
 8008772:	3b01      	subs	r3, #1
 8008774:	2b02      	cmp	r3, #2
 8008776:	d840      	bhi.n	80087fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	889b      	ldrh	r3, [r3, #4]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b01      	cmp	r3, #1
 8008780:	d836      	bhi.n	80087f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	889b      	ldrh	r3, [r3, #4]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fedb 	bl	8008546 <USBD_CoreFindIF>
 8008790:	4603      	mov	r3, r0
 8008792:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2bff      	cmp	r3, #255	@ 0xff
 8008798:	d01d      	beq.n	80087d6 <USBD_StdItfReq+0x92>
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d81a      	bhi.n	80087d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80087a0:	7bba      	ldrb	r2, [r7, #14]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	32ae      	adds	r2, #174	@ 0xae
 80087a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00f      	beq.n	80087d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80087b0:	7bba      	ldrb	r2, [r7, #14]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80087b8:	7bba      	ldrb	r2, [r7, #14]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	32ae      	adds	r2, #174	@ 0xae
 80087be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087ce:	e004      	b.n	80087da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80087d0:	2303      	movs	r3, #3
 80087d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087d4:	e001      	b.n	80087da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80087d6:	2303      	movs	r3, #3
 80087d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	88db      	ldrh	r3, [r3, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d110      	bne.n	8008804 <USBD_StdItfReq+0xc0>
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10d      	bne.n	8008804 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fed4 	bl	8009596 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087ee:	e009      	b.n	8008804 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fcf7 	bl	80091e6 <USBD_CtlError>
          break;
 80087f8:	e004      	b.n	8008804 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fcf2 	bl	80091e6 <USBD_CtlError>
          break;
 8008802:	e000      	b.n	8008806 <USBD_StdItfReq+0xc2>
          break;
 8008804:	bf00      	nop
      }
      break;
 8008806:	e004      	b.n	8008812 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fceb 	bl	80091e6 <USBD_CtlError>
      break;
 8008810:	bf00      	nop
  }

  return ret;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	889b      	ldrh	r3, [r3, #4]
 800882e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008838:	2b40      	cmp	r3, #64	@ 0x40
 800883a:	d007      	beq.n	800884c <USBD_StdEPReq+0x30>
 800883c:	2b40      	cmp	r3, #64	@ 0x40
 800883e:	f200 817f 	bhi.w	8008b40 <USBD_StdEPReq+0x324>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d02a      	beq.n	800889c <USBD_StdEPReq+0x80>
 8008846:	2b20      	cmp	r3, #32
 8008848:	f040 817a 	bne.w	8008b40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff fe85 	bl	8008560 <USBD_CoreFindEP>
 8008856:	4603      	mov	r3, r0
 8008858:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800885a:	7b7b      	ldrb	r3, [r7, #13]
 800885c:	2bff      	cmp	r3, #255	@ 0xff
 800885e:	f000 8174 	beq.w	8008b4a <USBD_StdEPReq+0x32e>
 8008862:	7b7b      	ldrb	r3, [r7, #13]
 8008864:	2b01      	cmp	r3, #1
 8008866:	f200 8170 	bhi.w	8008b4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800886a:	7b7a      	ldrb	r2, [r7, #13]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008872:	7b7a      	ldrb	r2, [r7, #13]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	32ae      	adds	r2, #174	@ 0xae
 8008878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 8163 	beq.w	8008b4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008884:	7b7a      	ldrb	r2, [r7, #13]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	32ae      	adds	r2, #174	@ 0xae
 800888a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	4798      	blx	r3
 8008896:	4603      	mov	r3, r0
 8008898:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800889a:	e156      	b.n	8008b4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d008      	beq.n	80088b6 <USBD_StdEPReq+0x9a>
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	f300 8145 	bgt.w	8008b34 <USBD_StdEPReq+0x318>
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 809b 	beq.w	80089e6 <USBD_StdEPReq+0x1ca>
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d03c      	beq.n	800892e <USBD_StdEPReq+0x112>
 80088b4:	e13e      	b.n	8008b34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d002      	beq.n	80088c8 <USBD_StdEPReq+0xac>
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d016      	beq.n	80088f4 <USBD_StdEPReq+0xd8>
 80088c6:	e02c      	b.n	8008922 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00d      	beq.n	80088ea <USBD_StdEPReq+0xce>
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	2b80      	cmp	r3, #128	@ 0x80
 80088d2:	d00a      	beq.n	80088ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff fa25 	bl	8007d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088de:	2180      	movs	r1, #128	@ 0x80
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fa21 	bl	8007d28 <USBD_LL_StallEP>
 80088e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088e8:	e020      	b.n	800892c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fc7a 	bl	80091e6 <USBD_CtlError>
              break;
 80088f2:	e01b      	b.n	800892c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	885b      	ldrh	r3, [r3, #2]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10e      	bne.n	800891a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00b      	beq.n	800891a <USBD_StdEPReq+0xfe>
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b80      	cmp	r3, #128	@ 0x80
 8008906:	d008      	beq.n	800891a <USBD_StdEPReq+0xfe>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	88db      	ldrh	r3, [r3, #6]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d104      	bne.n	800891a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff fa07 	bl	8007d28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fe3b 	bl	8009596 <USBD_CtlSendStatus>

              break;
 8008920:	e004      	b.n	800892c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fc5e 	bl	80091e6 <USBD_CtlError>
              break;
 800892a:	bf00      	nop
          }
          break;
 800892c:	e107      	b.n	8008b3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d002      	beq.n	8008940 <USBD_StdEPReq+0x124>
 800893a:	2b03      	cmp	r3, #3
 800893c:	d016      	beq.n	800896c <USBD_StdEPReq+0x150>
 800893e:	e04b      	b.n	80089d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00d      	beq.n	8008962 <USBD_StdEPReq+0x146>
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	2b80      	cmp	r3, #128	@ 0x80
 800894a:	d00a      	beq.n	8008962 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff f9e9 	bl	8007d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008956:	2180      	movs	r1, #128	@ 0x80
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff f9e5 	bl	8007d28 <USBD_LL_StallEP>
 800895e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008960:	e040      	b.n	80089e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fc3e 	bl	80091e6 <USBD_CtlError>
              break;
 800896a:	e03b      	b.n	80089e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	885b      	ldrh	r3, [r3, #2]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d136      	bne.n	80089e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800897a:	2b00      	cmp	r3, #0
 800897c:	d004      	beq.n	8008988 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff f9e9 	bl	8007d5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fe04 	bl	8009596 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff fde4 	bl	8008560 <USBD_CoreFindEP>
 8008998:	4603      	mov	r3, r0
 800899a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800899c:	7b7b      	ldrb	r3, [r7, #13]
 800899e:	2bff      	cmp	r3, #255	@ 0xff
 80089a0:	d01f      	beq.n	80089e2 <USBD_StdEPReq+0x1c6>
 80089a2:	7b7b      	ldrb	r3, [r7, #13]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d81c      	bhi.n	80089e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80089a8:	7b7a      	ldrb	r2, [r7, #13]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80089b0:	7b7a      	ldrb	r2, [r7, #13]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	32ae      	adds	r2, #174	@ 0xae
 80089b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d010      	beq.n	80089e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089c0:	7b7a      	ldrb	r2, [r7, #13]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	32ae      	adds	r2, #174	@ 0xae
 80089c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80089d6:	e004      	b.n	80089e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fc03 	bl	80091e6 <USBD_CtlError>
              break;
 80089e0:	e000      	b.n	80089e4 <USBD_StdEPReq+0x1c8>
              break;
 80089e2:	bf00      	nop
          }
          break;
 80089e4:	e0ab      	b.n	8008b3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d002      	beq.n	80089f8 <USBD_StdEPReq+0x1dc>
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d032      	beq.n	8008a5c <USBD_StdEPReq+0x240>
 80089f6:	e097      	b.n	8008b28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d007      	beq.n	8008a0e <USBD_StdEPReq+0x1f2>
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
 8008a00:	2b80      	cmp	r3, #128	@ 0x80
 8008a02:	d004      	beq.n	8008a0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fbed 	bl	80091e6 <USBD_CtlError>
                break;
 8008a0c:	e091      	b.n	8008b32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da0b      	bge.n	8008a2e <USBD_StdEPReq+0x212>
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	3310      	adds	r3, #16
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	4413      	add	r3, r2
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	e00b      	b.n	8008a46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a34:	4613      	mov	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	4413      	add	r3, r2
 8008a44:	3304      	adds	r3, #4
 8008a46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2202      	movs	r2, #2
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fd44 	bl	80094e2 <USBD_CtlSendData>
              break;
 8008a5a:	e06a      	b.n	8008b32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	da11      	bge.n	8008a88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	f003 020f 	and.w	r2, r3, #15
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	440b      	add	r3, r1
 8008a76:	3324      	adds	r3, #36	@ 0x24
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d117      	bne.n	8008aae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fbb0 	bl	80091e6 <USBD_CtlError>
                  break;
 8008a86:	e054      	b.n	8008b32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	f003 020f 	and.w	r2, r3, #15
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	440b      	add	r3, r1
 8008a9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb9d 	bl	80091e6 <USBD_CtlError>
                  break;
 8008aac:	e041      	b.n	8008b32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	da0b      	bge.n	8008ace <USBD_StdEPReq+0x2b2>
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	3310      	adds	r3, #16
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	3304      	adds	r3, #4
 8008acc:	e00b      	b.n	8008ae6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <USBD_StdEPReq+0x2d8>
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	2b80      	cmp	r3, #128	@ 0x80
 8008af2:	d103      	bne.n	8008afc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	e00e      	b.n	8008b1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff f943 	bl	8007d8c <USBD_LL_IsStallEP>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e002      	b.n	8008b1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fcde 	bl	80094e2 <USBD_CtlSendData>
              break;
 8008b26:	e004      	b.n	8008b32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fb5b 	bl	80091e6 <USBD_CtlError>
              break;
 8008b30:	bf00      	nop
          }
          break;
 8008b32:	e004      	b.n	8008b3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fb55 	bl	80091e6 <USBD_CtlError>
          break;
 8008b3c:	bf00      	nop
      }
      break;
 8008b3e:	e005      	b.n	8008b4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fb4f 	bl	80091e6 <USBD_CtlError>
      break;
 8008b48:	e000      	b.n	8008b4c <USBD_StdEPReq+0x330>
      break;
 8008b4a:	bf00      	nop
  }

  return ret;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	885b      	ldrh	r3, [r3, #2]
 8008b72:	0a1b      	lsrs	r3, r3, #8
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	2b06      	cmp	r3, #6
 8008b7a:	f200 8128 	bhi.w	8008dce <USBD_GetDescriptor+0x276>
 8008b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <USBD_GetDescriptor+0x2c>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008ba1 	.word	0x08008ba1
 8008b88:	08008bb9 	.word	0x08008bb9
 8008b8c:	08008bf9 	.word	0x08008bf9
 8008b90:	08008dcf 	.word	0x08008dcf
 8008b94:	08008dcf 	.word	0x08008dcf
 8008b98:	08008d6f 	.word	0x08008d6f
 8008b9c:	08008d9b 	.word	0x08008d9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	7c12      	ldrb	r2, [r2, #16]
 8008bac:	f107 0108 	add.w	r1, r7, #8
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	60f8      	str	r0, [r7, #12]
      break;
 8008bb6:	e112      	b.n	8008dde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7c1b      	ldrb	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10d      	bne.n	8008bdc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc8:	f107 0208 	add.w	r2, r7, #8
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bda:	e100      	b.n	8008dde <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be4:	f107 0208 	add.w	r2, r7, #8
 8008be8:	4610      	mov	r0, r2
 8008bea:	4798      	blx	r3
 8008bec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	701a      	strb	r2, [r3, #0]
      break;
 8008bf6:	e0f2      	b.n	8008dde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	885b      	ldrh	r3, [r3, #2]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	f200 80ac 	bhi.w	8008d5c <USBD_GetDescriptor+0x204>
 8008c04:	a201      	add	r2, pc, #4	@ (adr r2, 8008c0c <USBD_GetDescriptor+0xb4>)
 8008c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0a:	bf00      	nop
 8008c0c:	08008c25 	.word	0x08008c25
 8008c10:	08008c59 	.word	0x08008c59
 8008c14:	08008c8d 	.word	0x08008c8d
 8008c18:	08008cc1 	.word	0x08008cc1
 8008c1c:	08008cf5 	.word	0x08008cf5
 8008c20:	08008d29 	.word	0x08008d29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	7c12      	ldrb	r2, [r2, #16]
 8008c3c:	f107 0108 	add.w	r1, r7, #8
 8008c40:	4610      	mov	r0, r2
 8008c42:	4798      	blx	r3
 8008c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c46:	e091      	b.n	8008d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 facb 	bl	80091e6 <USBD_CtlError>
            err++;
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	3301      	adds	r3, #1
 8008c54:	72fb      	strb	r3, [r7, #11]
          break;
 8008c56:	e089      	b.n	8008d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00b      	beq.n	8008c7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	7c12      	ldrb	r2, [r2, #16]
 8008c70:	f107 0108 	add.w	r1, r7, #8
 8008c74:	4610      	mov	r0, r2
 8008c76:	4798      	blx	r3
 8008c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7a:	e077      	b.n	8008d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fab1 	bl	80091e6 <USBD_CtlError>
            err++;
 8008c84:	7afb      	ldrb	r3, [r7, #11]
 8008c86:	3301      	adds	r3, #1
 8008c88:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8a:	e06f      	b.n	8008d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	7c12      	ldrb	r2, [r2, #16]
 8008ca4:	f107 0108 	add.w	r1, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cae:	e05d      	b.n	8008d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa97 	bl	80091e6 <USBD_CtlError>
            err++;
 8008cb8:	7afb      	ldrb	r3, [r7, #11]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cbe:	e055      	b.n	8008d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	7c12      	ldrb	r2, [r2, #16]
 8008cd8:	f107 0108 	add.w	r1, r7, #8
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4798      	blx	r3
 8008ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ce2:	e043      	b.n	8008d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa7d 	bl	80091e6 <USBD_CtlError>
            err++;
 8008cec:	7afb      	ldrb	r3, [r7, #11]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cf2:	e03b      	b.n	8008d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00b      	beq.n	8008d18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	7c12      	ldrb	r2, [r2, #16]
 8008d0c:	f107 0108 	add.w	r1, r7, #8
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
 8008d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d16:	e029      	b.n	8008d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa63 	bl	80091e6 <USBD_CtlError>
            err++;
 8008d20:	7afb      	ldrb	r3, [r7, #11]
 8008d22:	3301      	adds	r3, #1
 8008d24:	72fb      	strb	r3, [r7, #11]
          break;
 8008d26:	e021      	b.n	8008d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00b      	beq.n	8008d4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	7c12      	ldrb	r2, [r2, #16]
 8008d40:	f107 0108 	add.w	r1, r7, #8
 8008d44:	4610      	mov	r0, r2
 8008d46:	4798      	blx	r3
 8008d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d4a:	e00f      	b.n	8008d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa49 	bl	80091e6 <USBD_CtlError>
            err++;
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	3301      	adds	r3, #1
 8008d58:	72fb      	strb	r3, [r7, #11]
          break;
 8008d5a:	e007      	b.n	8008d6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa41 	bl	80091e6 <USBD_CtlError>
          err++;
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	3301      	adds	r3, #1
 8008d68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d6a:	bf00      	nop
      }
      break;
 8008d6c:	e037      	b.n	8008dde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	7c1b      	ldrb	r3, [r3, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d109      	bne.n	8008d8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d7e:	f107 0208 	add.w	r2, r7, #8
 8008d82:	4610      	mov	r0, r2
 8008d84:	4798      	blx	r3
 8008d86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d88:	e029      	b.n	8008dde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fa2a 	bl	80091e6 <USBD_CtlError>
        err++;
 8008d92:	7afb      	ldrb	r3, [r7, #11]
 8008d94:	3301      	adds	r3, #1
 8008d96:	72fb      	strb	r3, [r7, #11]
      break;
 8008d98:	e021      	b.n	8008dde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	7c1b      	ldrb	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10d      	bne.n	8008dbe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008daa:	f107 0208 	add.w	r2, r7, #8
 8008dae:	4610      	mov	r0, r2
 8008db0:	4798      	blx	r3
 8008db2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	2207      	movs	r2, #7
 8008dba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dbc:	e00f      	b.n	8008dde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fa10 	bl	80091e6 <USBD_CtlError>
        err++;
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	72fb      	strb	r3, [r7, #11]
      break;
 8008dcc:	e007      	b.n	8008dde <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fa08 	bl	80091e6 <USBD_CtlError>
      err++;
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	72fb      	strb	r3, [r7, #11]
      break;
 8008ddc:	bf00      	nop
  }

  if (err != 0U)
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d11e      	bne.n	8008e22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	88db      	ldrh	r3, [r3, #6]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d016      	beq.n	8008e1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008dec:	893b      	ldrh	r3, [r7, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00e      	beq.n	8008e10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	88da      	ldrh	r2, [r3, #6]
 8008df6:	893b      	ldrh	r3, [r7, #8]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	bf28      	it	cs
 8008dfc:	4613      	movcs	r3, r2
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e02:	893b      	ldrh	r3, [r7, #8]
 8008e04:	461a      	mov	r2, r3
 8008e06:	68f9      	ldr	r1, [r7, #12]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fb6a 	bl	80094e2 <USBD_CtlSendData>
 8008e0e:	e009      	b.n	8008e24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f9e7 	bl	80091e6 <USBD_CtlError>
 8008e18:	e004      	b.n	8008e24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fbbb 	bl	8009596 <USBD_CtlSendStatus>
 8008e20:	e000      	b.n	8008e24 <USBD_GetDescriptor+0x2cc>
    return;
 8008e22:	bf00      	nop
  }
}
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop

08008e2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	889b      	ldrh	r3, [r3, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d131      	bne.n	8008ea2 <USBD_SetAddress+0x76>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	88db      	ldrh	r3, [r3, #6]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d12d      	bne.n	8008ea2 <USBD_SetAddress+0x76>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	885b      	ldrh	r3, [r3, #2]
 8008e4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e4c:	d829      	bhi.n	8008ea2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	885b      	ldrh	r3, [r3, #2]
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d104      	bne.n	8008e70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f9bc 	bl	80091e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6e:	e01d      	b.n	8008eac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	7bfa      	ldrb	r2, [r7, #15]
 8008e74:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7fe ffb1 	bl	8007de4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fb87 	bl	8009596 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d004      	beq.n	8008e98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2202      	movs	r2, #2
 8008e92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e96:	e009      	b.n	8008eac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea0:	e004      	b.n	8008eac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f99e 	bl	80091e6 <USBD_CtlError>
  }
}
 8008eaa:	bf00      	nop
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	885b      	ldrh	r3, [r3, #2]
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	4b4e      	ldr	r3, [pc, #312]	@ (8009004 <USBD_SetConfig+0x150>)
 8008eca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8009004 <USBD_SetConfig+0x150>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d905      	bls.n	8008ee0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f985 	bl	80091e6 <USBD_CtlError>
    return USBD_FAIL;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e08c      	b.n	8008ffa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d002      	beq.n	8008ef2 <USBD_SetConfig+0x3e>
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d029      	beq.n	8008f44 <USBD_SetConfig+0x90>
 8008ef0:	e075      	b.n	8008fde <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ef2:	4b44      	ldr	r3, [pc, #272]	@ (8009004 <USBD_SetConfig+0x150>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d020      	beq.n	8008f3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008efa:	4b42      	ldr	r3, [pc, #264]	@ (8009004 <USBD_SetConfig+0x150>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f04:	4b3f      	ldr	r3, [pc, #252]	@ (8009004 <USBD_SetConfig+0x150>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff f8a9 	bl	8008062 <USBD_SetClassConfig>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d008      	beq.n	8008f2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f962 	bl	80091e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f2a:	e065      	b.n	8008ff8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fb32 	bl	8009596 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2203      	movs	r2, #3
 8008f36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f3a:	e05d      	b.n	8008ff8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fb2a 	bl	8009596 <USBD_CtlSendStatus>
      break;
 8008f42:	e059      	b.n	8008ff8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f44:	4b2f      	ldr	r3, [pc, #188]	@ (8009004 <USBD_SetConfig+0x150>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d112      	bne.n	8008f72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008f54:	4b2b      	ldr	r3, [pc, #172]	@ (8009004 <USBD_SetConfig+0x150>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f5e:	4b29      	ldr	r3, [pc, #164]	@ (8009004 <USBD_SetConfig+0x150>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff f898 	bl	800809a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fb13 	bl	8009596 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f70:	e042      	b.n	8008ff8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f72:	4b24      	ldr	r3, [pc, #144]	@ (8009004 <USBD_SetConfig+0x150>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d02a      	beq.n	8008fd6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff f886 	bl	800809a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8009004 <USBD_SetConfig+0x150>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f98:	4b1a      	ldr	r3, [pc, #104]	@ (8009004 <USBD_SetConfig+0x150>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f85f 	bl	8008062 <USBD_SetClassConfig>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00f      	beq.n	8008fce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f918 	bl	80091e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff f86b 	bl	800809a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fcc:	e014      	b.n	8008ff8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fae1 	bl	8009596 <USBD_CtlSendStatus>
      break;
 8008fd4:	e010      	b.n	8008ff8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fadd 	bl	8009596 <USBD_CtlSendStatus>
      break;
 8008fdc:	e00c      	b.n	8008ff8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f900 	bl	80091e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fe6:	4b07      	ldr	r3, [pc, #28]	@ (8009004 <USBD_SetConfig+0x150>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff f854 	bl	800809a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff6:	bf00      	nop
  }

  return ret;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000d8c 	.word	0x20000d8c

08009008 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	88db      	ldrh	r3, [r3, #6]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d004      	beq.n	8009024 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8e2 	bl	80091e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009022:	e023      	b.n	800906c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	dc02      	bgt.n	8009036 <USBD_GetConfig+0x2e>
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc03      	bgt.n	800903c <USBD_GetConfig+0x34>
 8009034:	e015      	b.n	8009062 <USBD_GetConfig+0x5a>
 8009036:	2b03      	cmp	r3, #3
 8009038:	d00b      	beq.n	8009052 <USBD_GetConfig+0x4a>
 800903a:	e012      	b.n	8009062 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3308      	adds	r3, #8
 8009046:	2201      	movs	r2, #1
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa49 	bl	80094e2 <USBD_CtlSendData>
        break;
 8009050:	e00c      	b.n	800906c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3304      	adds	r3, #4
 8009056:	2201      	movs	r2, #1
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa41 	bl	80094e2 <USBD_CtlSendData>
        break;
 8009060:	e004      	b.n	800906c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f8be 	bl	80091e6 <USBD_CtlError>
        break;
 800906a:	bf00      	nop
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009084:	b2db      	uxtb	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	2b02      	cmp	r3, #2
 800908a:	d81e      	bhi.n	80090ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	88db      	ldrh	r3, [r3, #6]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d004      	beq.n	800909e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f8a5 	bl	80091e6 <USBD_CtlError>
        break;
 800909c:	e01a      	b.n	80090d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f043 0202 	orr.w	r2, r3, #2
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	330c      	adds	r3, #12
 80090be:	2202      	movs	r2, #2
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa0d 	bl	80094e2 <USBD_CtlSendData>
      break;
 80090c8:	e004      	b.n	80090d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f88a 	bl	80091e6 <USBD_CtlError>
      break;
 80090d2:	bf00      	nop
  }
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	885b      	ldrh	r3, [r3, #2]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d107      	bne.n	80090fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fa4d 	bl	8009596 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80090fc:	e013      	b.n	8009126 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	885b      	ldrh	r3, [r3, #2]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d10b      	bne.n	800911e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	889b      	ldrh	r3, [r3, #4]
 800910a:	0a1b      	lsrs	r3, r3, #8
 800910c:	b29b      	uxth	r3, r3
 800910e:	b2da      	uxtb	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa3d 	bl	8009596 <USBD_CtlSendStatus>
}
 800911c:	e003      	b.n	8009126 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f860 	bl	80091e6 <USBD_CtlError>
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800913e:	b2db      	uxtb	r3, r3
 8009140:	3b01      	subs	r3, #1
 8009142:	2b02      	cmp	r3, #2
 8009144:	d80b      	bhi.n	800915e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d10c      	bne.n	8009168 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fa1d 	bl	8009596 <USBD_CtlSendStatus>
      }
      break;
 800915c:	e004      	b.n	8009168 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f840 	bl	80091e6 <USBD_CtlError>
      break;
 8009166:	e000      	b.n	800916a <USBD_ClrFeature+0x3c>
      break;
 8009168:	bf00      	nop
  }
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	781a      	ldrb	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	781a      	ldrb	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fa40 	bl	8008622 <SWAPBYTE>
 80091a2:	4603      	mov	r3, r0
 80091a4:	461a      	mov	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3301      	adds	r3, #1
 80091ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3301      	adds	r3, #1
 80091b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff fa33 	bl	8008622 <SWAPBYTE>
 80091bc:	4603      	mov	r3, r0
 80091be:	461a      	mov	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3301      	adds	r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3301      	adds	r3, #1
 80091ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7ff fa26 	bl	8008622 <SWAPBYTE>
 80091d6:	4603      	mov	r3, r0
 80091d8:	461a      	mov	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	80da      	strh	r2, [r3, #6]
}
 80091de:	bf00      	nop
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091f0:	2180      	movs	r1, #128	@ 0x80
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7fe fd98 	bl	8007d28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091f8:	2100      	movs	r1, #0
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7fe fd94 	bl	8007d28 <USBD_LL_StallEP>
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d036      	beq.n	800928c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009222:	6938      	ldr	r0, [r7, #16]
 8009224:	f000 f836 	bl	8009294 <USBD_GetLen>
 8009228:	4603      	mov	r3, r0
 800922a:	3301      	adds	r3, #1
 800922c:	b29b      	uxth	r3, r3
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	4413      	add	r3, r2
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	7812      	ldrb	r2, [r2, #0]
 8009240:	701a      	strb	r2, [r3, #0]
  idx++;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	3301      	adds	r3, #1
 8009246:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	2203      	movs	r2, #3
 8009250:	701a      	strb	r2, [r3, #0]
  idx++;
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	3301      	adds	r3, #1
 8009256:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009258:	e013      	b.n	8009282 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800925a:	7dfb      	ldrb	r3, [r7, #23]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	4413      	add	r3, r2
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	7812      	ldrb	r2, [r2, #0]
 8009264:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	3301      	adds	r3, #1
 800926a:	613b      	str	r3, [r7, #16]
    idx++;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	3301      	adds	r3, #1
 8009270:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009272:	7dfb      	ldrb	r3, [r7, #23]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	4413      	add	r3, r2
 8009278:	2200      	movs	r2, #0
 800927a:	701a      	strb	r2, [r3, #0]
    idx++;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	3301      	adds	r3, #1
 8009280:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e7      	bne.n	800925a <USBD_GetString+0x52>
 800928a:	e000      	b.n	800928e <USBD_GetString+0x86>
    return;
 800928c:	bf00      	nop
  }
}
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800929c:	2300      	movs	r3, #0
 800929e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092a4:	e005      	b.n	80092b2 <USBD_GetLen+0x1e>
  {
    len++;
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	3301      	adds	r3, #1
 80092aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	3301      	adds	r3, #1
 80092b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1f5      	bne.n	80092a6 <USBD_GetLen+0x12>
  }

  return len;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2212      	movs	r2, #18
 80092d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 80092da:	4b03      	ldr	r3, [pc, #12]	@ (80092e8 <USBD_Class_DeviceDescriptor+0x20>)
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	200000e0 	.word	0x200000e0

080092ec <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2204      	movs	r2, #4
 80092fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 80092fe:	4b03      	ldr	r3, [pc, #12]	@ (800930c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	200000f4 	.word	0x200000f4

08009310 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d105      	bne.n	800932e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	4907      	ldr	r1, [pc, #28]	@ (8009344 <USBD_Class_ProductStrDescriptor+0x34>)
 8009326:	4808      	ldr	r0, [pc, #32]	@ (8009348 <USBD_Class_ProductStrDescriptor+0x38>)
 8009328:	f7ff ff6e 	bl	8009208 <USBD_GetString>
 800932c:	e004      	b.n	8009338 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	4904      	ldr	r1, [pc, #16]	@ (8009344 <USBD_Class_ProductStrDescriptor+0x34>)
 8009332:	4805      	ldr	r0, [pc, #20]	@ (8009348 <USBD_Class_ProductStrDescriptor+0x38>)
 8009334:	f7ff ff68 	bl	8009208 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009338:	4b02      	ldr	r3, [pc, #8]	@ (8009344 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000d90 	.word	0x20000d90
 8009348:	0800a548 	.word	0x0800a548

0800934c <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	6039      	str	r1, [r7, #0]
 8009356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	4904      	ldr	r1, [pc, #16]	@ (800936c <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800935c:	4804      	ldr	r0, [pc, #16]	@ (8009370 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800935e:	f7ff ff53 	bl	8009208 <USBD_GetString>
  return USBD_StrDesc;
 8009362:	4b02      	ldr	r3, [pc, #8]	@ (800936c <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20000d90 	.word	0x20000d90
 8009370:	0800a560 	.word	0x0800a560

08009374 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	221a      	movs	r2, #26
 8009384:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8009386:	f000 f843 	bl	8009410 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800938a:	4b02      	ldr	r3, [pc, #8]	@ (8009394 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	200000f8 	.word	0x200000f8

08009398 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d105      	bne.n	80093b6 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4907      	ldr	r1, [pc, #28]	@ (80093cc <USBD_Class_ConfigStrDescriptor+0x34>)
 80093ae:	4808      	ldr	r0, [pc, #32]	@ (80093d0 <USBD_Class_ConfigStrDescriptor+0x38>)
 80093b0:	f7ff ff2a 	bl	8009208 <USBD_GetString>
 80093b4:	e004      	b.n	80093c0 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4904      	ldr	r1, [pc, #16]	@ (80093cc <USBD_Class_ConfigStrDescriptor+0x34>)
 80093ba:	4805      	ldr	r0, [pc, #20]	@ (80093d0 <USBD_Class_ConfigStrDescriptor+0x38>)
 80093bc:	f7ff ff24 	bl	8009208 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c0:	4b02      	ldr	r3, [pc, #8]	@ (80093cc <USBD_Class_ConfigStrDescriptor+0x34>)
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000d90 	.word	0x20000d90
 80093d0:	0800a574 	.word	0x0800a574

080093d4 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d105      	bne.n	80093f2 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4907      	ldr	r1, [pc, #28]	@ (8009408 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80093ea:	4808      	ldr	r0, [pc, #32]	@ (800940c <USBD_Class_InterfaceStrDescriptor+0x38>)
 80093ec:	f7ff ff0c 	bl	8009208 <USBD_GetString>
 80093f0:	e004      	b.n	80093fc <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4904      	ldr	r1, [pc, #16]	@ (8009408 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80093f6:	4805      	ldr	r0, [pc, #20]	@ (800940c <USBD_Class_InterfaceStrDescriptor+0x38>)
 80093f8:	f7ff ff06 	bl	8009208 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093fc:	4b02      	ldr	r3, [pc, #8]	@ (8009408 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000d90 	.word	0x20000d90
 800940c:	0800a580 	.word	0x0800a580

08009410 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8009416:	4b0f      	ldr	r3, [pc, #60]	@ (8009454 <Get_SerialNum+0x44>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800941c:	4b0e      	ldr	r3, [pc, #56]	@ (8009458 <Get_SerialNum+0x48>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8009422:	4b0e      	ldr	r3, [pc, #56]	@ (800945c <Get_SerialNum+0x4c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d009      	beq.n	800944a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8009436:	2208      	movs	r2, #8
 8009438:	4909      	ldr	r1, [pc, #36]	@ (8009460 <Get_SerialNum+0x50>)
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f814 	bl	8009468 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8009440:	2204      	movs	r2, #4
 8009442:	4908      	ldr	r1, [pc, #32]	@ (8009464 <Get_SerialNum+0x54>)
 8009444:	68b8      	ldr	r0, [r7, #8]
 8009446:	f000 f80f 	bl	8009468 <IntToUnicode>
  }
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	0bfa0700 	.word	0x0bfa0700
 8009458:	0bfa0704 	.word	0x0bfa0704
 800945c:	0bfa0708 	.word	0x0bfa0708
 8009460:	200000fa 	.word	0x200000fa
 8009464:	2000010a 	.word	0x2000010a

08009468 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800947a:	2300      	movs	r3, #0
 800947c:	75fb      	strb	r3, [r7, #23]
 800947e:	e025      	b.n	80094cc <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	0f1b      	lsrs	r3, r3, #28
 8009484:	2b09      	cmp	r3, #9
 8009486:	d80a      	bhi.n	800949e <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	0f1b      	lsrs	r3, r3, #28
 800948c:	b2da      	uxtb	r2, r3
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	440b      	add	r3, r1
 8009496:	3230      	adds	r2, #48	@ 0x30
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	701a      	strb	r2, [r3, #0]
 800949c:	e009      	b.n	80094b2 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	0f1b      	lsrs	r3, r3, #28
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	440b      	add	r3, r1
 80094ac:	3237      	adds	r2, #55	@ 0x37
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	011b      	lsls	r3, r3, #4
 80094b6:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	3301      	adds	r3, #1
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	4413      	add	r3, r2
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	3301      	adds	r3, #1
 80094ca:	75fb      	strb	r3, [r7, #23]
 80094cc:	7dfa      	ldrb	r2, [r7, #23]
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d3d5      	bcc.n	8009480 <IntToUnicode+0x18>
  }
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2202      	movs	r2, #2
 80094f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	2100      	movs	r1, #0
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7fe fc84 	bl	8007e16 <USBD_LL_Transmit>

  return USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	2100      	movs	r1, #0
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f7fe fc73 	bl	8007e16 <USBD_LL_Transmit>

  return USBD_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2203      	movs	r2, #3
 800954a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	2100      	movs	r1, #0
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7fe fc71 	bl	8007e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	2100      	movs	r1, #0
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7fe fc60 	bl	8007e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2204      	movs	r2, #4
 80095a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095a6:	2300      	movs	r3, #0
 80095a8:	2200      	movs	r2, #0
 80095aa:	2100      	movs	r1, #0
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7fe fc32 	bl	8007e16 <USBD_LL_Transmit>

  return USBD_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2205      	movs	r2, #5
 80095c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095cc:	2300      	movs	r3, #0
 80095ce:	2200      	movs	r2, #0
 80095d0:	2100      	movs	r1, #0
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7fe fc3a 	bl	8007e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <std>:
 80095e4:	2300      	movs	r3, #0
 80095e6:	b510      	push	{r4, lr}
 80095e8:	4604      	mov	r4, r0
 80095ea:	6083      	str	r3, [r0, #8]
 80095ec:	8181      	strh	r1, [r0, #12]
 80095ee:	4619      	mov	r1, r3
 80095f0:	6643      	str	r3, [r0, #100]	@ 0x64
 80095f2:	81c2      	strh	r2, [r0, #14]
 80095f4:	2208      	movs	r2, #8
 80095f6:	6183      	str	r3, [r0, #24]
 80095f8:	e9c0 3300 	strd	r3, r3, [r0]
 80095fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009600:	305c      	adds	r0, #92	@ 0x5c
 8009602:	f000 f90e 	bl	8009822 <memset>
 8009606:	4b0d      	ldr	r3, [pc, #52]	@ (800963c <std+0x58>)
 8009608:	6224      	str	r4, [r4, #32]
 800960a:	6263      	str	r3, [r4, #36]	@ 0x24
 800960c:	4b0c      	ldr	r3, [pc, #48]	@ (8009640 <std+0x5c>)
 800960e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009610:	4b0c      	ldr	r3, [pc, #48]	@ (8009644 <std+0x60>)
 8009612:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009614:	4b0c      	ldr	r3, [pc, #48]	@ (8009648 <std+0x64>)
 8009616:	6323      	str	r3, [r4, #48]	@ 0x30
 8009618:	4b0c      	ldr	r3, [pc, #48]	@ (800964c <std+0x68>)
 800961a:	429c      	cmp	r4, r3
 800961c:	d006      	beq.n	800962c <std+0x48>
 800961e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009622:	4294      	cmp	r4, r2
 8009624:	d002      	beq.n	800962c <std+0x48>
 8009626:	33d0      	adds	r3, #208	@ 0xd0
 8009628:	429c      	cmp	r4, r3
 800962a:	d105      	bne.n	8009638 <std+0x54>
 800962c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009634:	f000 b96e 	b.w	8009914 <__retarget_lock_init_recursive>
 8009638:	bd10      	pop	{r4, pc}
 800963a:	bf00      	nop
 800963c:	0800979d 	.word	0x0800979d
 8009640:	080097bf 	.word	0x080097bf
 8009644:	080097f7 	.word	0x080097f7
 8009648:	0800981b 	.word	0x0800981b
 800964c:	20000e90 	.word	0x20000e90

08009650 <stdio_exit_handler>:
 8009650:	4a02      	ldr	r2, [pc, #8]	@ (800965c <stdio_exit_handler+0xc>)
 8009652:	4903      	ldr	r1, [pc, #12]	@ (8009660 <stdio_exit_handler+0x10>)
 8009654:	4803      	ldr	r0, [pc, #12]	@ (8009664 <stdio_exit_handler+0x14>)
 8009656:	f000 b869 	b.w	800972c <_fwalk_sglue>
 800965a:	bf00      	nop
 800965c:	20000114 	.word	0x20000114
 8009660:	0800a1bd 	.word	0x0800a1bd
 8009664:	20000124 	.word	0x20000124

08009668 <cleanup_stdio>:
 8009668:	6841      	ldr	r1, [r0, #4]
 800966a:	4b0c      	ldr	r3, [pc, #48]	@ (800969c <cleanup_stdio+0x34>)
 800966c:	4299      	cmp	r1, r3
 800966e:	b510      	push	{r4, lr}
 8009670:	4604      	mov	r4, r0
 8009672:	d001      	beq.n	8009678 <cleanup_stdio+0x10>
 8009674:	f000 fda2 	bl	800a1bc <_fflush_r>
 8009678:	68a1      	ldr	r1, [r4, #8]
 800967a:	4b09      	ldr	r3, [pc, #36]	@ (80096a0 <cleanup_stdio+0x38>)
 800967c:	4299      	cmp	r1, r3
 800967e:	d002      	beq.n	8009686 <cleanup_stdio+0x1e>
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fd9b 	bl	800a1bc <_fflush_r>
 8009686:	68e1      	ldr	r1, [r4, #12]
 8009688:	4b06      	ldr	r3, [pc, #24]	@ (80096a4 <cleanup_stdio+0x3c>)
 800968a:	4299      	cmp	r1, r3
 800968c:	d004      	beq.n	8009698 <cleanup_stdio+0x30>
 800968e:	4620      	mov	r0, r4
 8009690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009694:	f000 bd92 	b.w	800a1bc <_fflush_r>
 8009698:	bd10      	pop	{r4, pc}
 800969a:	bf00      	nop
 800969c:	20000e90 	.word	0x20000e90
 80096a0:	20000ef8 	.word	0x20000ef8
 80096a4:	20000f60 	.word	0x20000f60

080096a8 <global_stdio_init.part.0>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	4b0b      	ldr	r3, [pc, #44]	@ (80096d8 <global_stdio_init.part.0+0x30>)
 80096ac:	2104      	movs	r1, #4
 80096ae:	4c0b      	ldr	r4, [pc, #44]	@ (80096dc <global_stdio_init.part.0+0x34>)
 80096b0:	4a0b      	ldr	r2, [pc, #44]	@ (80096e0 <global_stdio_init.part.0+0x38>)
 80096b2:	4620      	mov	r0, r4
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f7ff ff94 	bl	80095e4 <std>
 80096bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096c0:	2201      	movs	r2, #1
 80096c2:	2109      	movs	r1, #9
 80096c4:	f7ff ff8e 	bl	80095e4 <std>
 80096c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096cc:	2202      	movs	r2, #2
 80096ce:	2112      	movs	r1, #18
 80096d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d4:	f7ff bf86 	b.w	80095e4 <std>
 80096d8:	20000fc8 	.word	0x20000fc8
 80096dc:	20000e90 	.word	0x20000e90
 80096e0:	08009651 	.word	0x08009651

080096e4 <__sfp_lock_acquire>:
 80096e4:	4801      	ldr	r0, [pc, #4]	@ (80096ec <__sfp_lock_acquire+0x8>)
 80096e6:	f000 b916 	b.w	8009916 <__retarget_lock_acquire_recursive>
 80096ea:	bf00      	nop
 80096ec:	20000fd1 	.word	0x20000fd1

080096f0 <__sfp_lock_release>:
 80096f0:	4801      	ldr	r0, [pc, #4]	@ (80096f8 <__sfp_lock_release+0x8>)
 80096f2:	f000 b911 	b.w	8009918 <__retarget_lock_release_recursive>
 80096f6:	bf00      	nop
 80096f8:	20000fd1 	.word	0x20000fd1

080096fc <__sinit>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	4604      	mov	r4, r0
 8009700:	f7ff fff0 	bl	80096e4 <__sfp_lock_acquire>
 8009704:	6a23      	ldr	r3, [r4, #32]
 8009706:	b11b      	cbz	r3, 8009710 <__sinit+0x14>
 8009708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800970c:	f7ff bff0 	b.w	80096f0 <__sfp_lock_release>
 8009710:	4b04      	ldr	r3, [pc, #16]	@ (8009724 <__sinit+0x28>)
 8009712:	6223      	str	r3, [r4, #32]
 8009714:	4b04      	ldr	r3, [pc, #16]	@ (8009728 <__sinit+0x2c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1f5      	bne.n	8009708 <__sinit+0xc>
 800971c:	f7ff ffc4 	bl	80096a8 <global_stdio_init.part.0>
 8009720:	e7f2      	b.n	8009708 <__sinit+0xc>
 8009722:	bf00      	nop
 8009724:	08009669 	.word	0x08009669
 8009728:	20000fc8 	.word	0x20000fc8

0800972c <_fwalk_sglue>:
 800972c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009730:	4607      	mov	r7, r0
 8009732:	4688      	mov	r8, r1
 8009734:	4614      	mov	r4, r2
 8009736:	2600      	movs	r6, #0
 8009738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800973c:	f1b9 0901 	subs.w	r9, r9, #1
 8009740:	d505      	bpl.n	800974e <_fwalk_sglue+0x22>
 8009742:	6824      	ldr	r4, [r4, #0]
 8009744:	2c00      	cmp	r4, #0
 8009746:	d1f7      	bne.n	8009738 <_fwalk_sglue+0xc>
 8009748:	4630      	mov	r0, r6
 800974a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974e:	89ab      	ldrh	r3, [r5, #12]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d907      	bls.n	8009764 <_fwalk_sglue+0x38>
 8009754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009758:	3301      	adds	r3, #1
 800975a:	d003      	beq.n	8009764 <_fwalk_sglue+0x38>
 800975c:	4629      	mov	r1, r5
 800975e:	4638      	mov	r0, r7
 8009760:	47c0      	blx	r8
 8009762:	4306      	orrs	r6, r0
 8009764:	3568      	adds	r5, #104	@ 0x68
 8009766:	e7e9      	b.n	800973c <_fwalk_sglue+0x10>

08009768 <iprintf>:
 8009768:	b40f      	push	{r0, r1, r2, r3}
 800976a:	b507      	push	{r0, r1, r2, lr}
 800976c:	4906      	ldr	r1, [pc, #24]	@ (8009788 <iprintf+0x20>)
 800976e:	ab04      	add	r3, sp, #16
 8009770:	6808      	ldr	r0, [r1, #0]
 8009772:	f853 2b04 	ldr.w	r2, [r3], #4
 8009776:	6881      	ldr	r1, [r0, #8]
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	f000 f9f1 	bl	8009b60 <_vfiprintf_r>
 800977e:	b003      	add	sp, #12
 8009780:	f85d eb04 	ldr.w	lr, [sp], #4
 8009784:	b004      	add	sp, #16
 8009786:	4770      	bx	lr
 8009788:	20000120 	.word	0x20000120

0800978c <putchar>:
 800978c:	4b02      	ldr	r3, [pc, #8]	@ (8009798 <putchar+0xc>)
 800978e:	4601      	mov	r1, r0
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	6882      	ldr	r2, [r0, #8]
 8009794:	f000 bd3a 	b.w	800a20c <_putc_r>
 8009798:	20000120 	.word	0x20000120

0800979c <__sread>:
 800979c:	b510      	push	{r4, lr}
 800979e:	460c      	mov	r4, r1
 80097a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a4:	f000 f868 	bl	8009878 <_read_r>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	bfab      	itete	ge
 80097ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097ae:	89a3      	ldrhlt	r3, [r4, #12]
 80097b0:	181b      	addge	r3, r3, r0
 80097b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097b6:	bfac      	ite	ge
 80097b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097ba:	81a3      	strhlt	r3, [r4, #12]
 80097bc:	bd10      	pop	{r4, pc}

080097be <__swrite>:
 80097be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c2:	461f      	mov	r7, r3
 80097c4:	898b      	ldrh	r3, [r1, #12]
 80097c6:	4605      	mov	r5, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	05db      	lsls	r3, r3, #23
 80097cc:	4616      	mov	r6, r2
 80097ce:	d505      	bpl.n	80097dc <__swrite+0x1e>
 80097d0:	2302      	movs	r3, #2
 80097d2:	2200      	movs	r2, #0
 80097d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d8:	f000 f83c 	bl	8009854 <_lseek_r>
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	4632      	mov	r2, r6
 80097e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097e4:	4628      	mov	r0, r5
 80097e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	463b      	mov	r3, r7
 80097ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	f000 b853 	b.w	800989c <_write_r>

080097f6 <__sseek>:
 80097f6:	b510      	push	{r4, lr}
 80097f8:	460c      	mov	r4, r1
 80097fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fe:	f000 f829 	bl	8009854 <_lseek_r>
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	bf15      	itete	ne
 8009808:	6560      	strne	r0, [r4, #84]	@ 0x54
 800980a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800980e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009812:	81a3      	strheq	r3, [r4, #12]
 8009814:	bf18      	it	ne
 8009816:	81a3      	strhne	r3, [r4, #12]
 8009818:	bd10      	pop	{r4, pc}

0800981a <__sclose>:
 800981a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981e:	f000 b809 	b.w	8009834 <_close_r>

08009822 <memset>:
 8009822:	4402      	add	r2, r0
 8009824:	4603      	mov	r3, r0
 8009826:	4293      	cmp	r3, r2
 8009828:	d100      	bne.n	800982c <memset+0xa>
 800982a:	4770      	bx	lr
 800982c:	f803 1b01 	strb.w	r1, [r3], #1
 8009830:	e7f9      	b.n	8009826 <memset+0x4>
	...

08009834 <_close_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	2300      	movs	r3, #0
 8009838:	4d05      	ldr	r5, [pc, #20]	@ (8009850 <_close_r+0x1c>)
 800983a:	4604      	mov	r4, r0
 800983c:	4608      	mov	r0, r1
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	f7f6 ff8b 	bl	800075a <_close>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_close_r+0x1a>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	b103      	cbz	r3, 800984e <_close_r+0x1a>
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	20000fcc 	.word	0x20000fcc

08009854 <_lseek_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4604      	mov	r4, r0
 8009858:	4d06      	ldr	r5, [pc, #24]	@ (8009874 <_lseek_r+0x20>)
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	2200      	movs	r2, #0
 8009860:	602a      	str	r2, [r5, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f6 ffa0 	bl	80007a8 <_lseek>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_lseek_r+0x1e>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_lseek_r+0x1e>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20000fcc 	.word	0x20000fcc

08009878 <_read_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4604      	mov	r4, r0
 800987c:	4d06      	ldr	r5, [pc, #24]	@ (8009898 <_read_r+0x20>)
 800987e:	4608      	mov	r0, r1
 8009880:	4611      	mov	r1, r2
 8009882:	2200      	movs	r2, #0
 8009884:	602a      	str	r2, [r5, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	f7f6 ff2e 	bl	80006e8 <_read>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_read_r+0x1e>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_read_r+0x1e>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20000fcc 	.word	0x20000fcc

0800989c <_write_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4604      	mov	r4, r0
 80098a0:	4d06      	ldr	r5, [pc, #24]	@ (80098bc <_write_r+0x20>)
 80098a2:	4608      	mov	r0, r1
 80098a4:	4611      	mov	r1, r2
 80098a6:	2200      	movs	r2, #0
 80098a8:	602a      	str	r2, [r5, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f7f6 ff39 	bl	8000722 <_write>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_write_r+0x1e>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_write_r+0x1e>
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	20000fcc 	.word	0x20000fcc

080098c0 <__errno>:
 80098c0:	4b01      	ldr	r3, [pc, #4]	@ (80098c8 <__errno+0x8>)
 80098c2:	6818      	ldr	r0, [r3, #0]
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	20000120 	.word	0x20000120

080098cc <__libc_init_array>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009904 <__libc_init_array+0x38>)
 80098d0:	2600      	movs	r6, #0
 80098d2:	4c0d      	ldr	r4, [pc, #52]	@ (8009908 <__libc_init_array+0x3c>)
 80098d4:	1b64      	subs	r4, r4, r5
 80098d6:	10a4      	asrs	r4, r4, #2
 80098d8:	42a6      	cmp	r6, r4
 80098da:	d109      	bne.n	80098f0 <__libc_init_array+0x24>
 80098dc:	4d0b      	ldr	r5, [pc, #44]	@ (800990c <__libc_init_array+0x40>)
 80098de:	2600      	movs	r6, #0
 80098e0:	4c0b      	ldr	r4, [pc, #44]	@ (8009910 <__libc_init_array+0x44>)
 80098e2:	f000 fdfd 	bl	800a4e0 <_init>
 80098e6:	1b64      	subs	r4, r4, r5
 80098e8:	10a4      	asrs	r4, r4, #2
 80098ea:	42a6      	cmp	r6, r4
 80098ec:	d105      	bne.n	80098fa <__libc_init_array+0x2e>
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f4:	3601      	adds	r6, #1
 80098f6:	4798      	blx	r3
 80098f8:	e7ee      	b.n	80098d8 <__libc_init_array+0xc>
 80098fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80098fe:	3601      	adds	r6, #1
 8009900:	4798      	blx	r3
 8009902:	e7f2      	b.n	80098ea <__libc_init_array+0x1e>
 8009904:	0800a697 	.word	0x0800a697
 8009908:	0800a697 	.word	0x0800a697
 800990c:	0800a698 	.word	0x0800a698
 8009910:	0800a69c 	.word	0x0800a69c

08009914 <__retarget_lock_init_recursive>:
 8009914:	4770      	bx	lr

08009916 <__retarget_lock_acquire_recursive>:
 8009916:	4770      	bx	lr

08009918 <__retarget_lock_release_recursive>:
 8009918:	4770      	bx	lr
	...

0800991c <_free_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4605      	mov	r5, r0
 8009920:	2900      	cmp	r1, #0
 8009922:	d041      	beq.n	80099a8 <_free_r+0x8c>
 8009924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009928:	1f0c      	subs	r4, r1, #4
 800992a:	2b00      	cmp	r3, #0
 800992c:	bfb8      	it	lt
 800992e:	18e4      	addlt	r4, r4, r3
 8009930:	f000 f8e0 	bl	8009af4 <__malloc_lock>
 8009934:	4a1d      	ldr	r2, [pc, #116]	@ (80099ac <_free_r+0x90>)
 8009936:	6813      	ldr	r3, [r2, #0]
 8009938:	b933      	cbnz	r3, 8009948 <_free_r+0x2c>
 800993a:	6063      	str	r3, [r4, #4]
 800993c:	6014      	str	r4, [r2, #0]
 800993e:	4628      	mov	r0, r5
 8009940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009944:	f000 b8dc 	b.w	8009b00 <__malloc_unlock>
 8009948:	42a3      	cmp	r3, r4
 800994a:	d908      	bls.n	800995e <_free_r+0x42>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	1821      	adds	r1, r4, r0
 8009950:	428b      	cmp	r3, r1
 8009952:	bf01      	itttt	eq
 8009954:	6819      	ldreq	r1, [r3, #0]
 8009956:	685b      	ldreq	r3, [r3, #4]
 8009958:	1809      	addeq	r1, r1, r0
 800995a:	6021      	streq	r1, [r4, #0]
 800995c:	e7ed      	b.n	800993a <_free_r+0x1e>
 800995e:	461a      	mov	r2, r3
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	b10b      	cbz	r3, 8009968 <_free_r+0x4c>
 8009964:	42a3      	cmp	r3, r4
 8009966:	d9fa      	bls.n	800995e <_free_r+0x42>
 8009968:	6811      	ldr	r1, [r2, #0]
 800996a:	1850      	adds	r0, r2, r1
 800996c:	42a0      	cmp	r0, r4
 800996e:	d10b      	bne.n	8009988 <_free_r+0x6c>
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	4401      	add	r1, r0
 8009974:	1850      	adds	r0, r2, r1
 8009976:	6011      	str	r1, [r2, #0]
 8009978:	4283      	cmp	r3, r0
 800997a:	d1e0      	bne.n	800993e <_free_r+0x22>
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	4408      	add	r0, r1
 8009982:	6053      	str	r3, [r2, #4]
 8009984:	6010      	str	r0, [r2, #0]
 8009986:	e7da      	b.n	800993e <_free_r+0x22>
 8009988:	d902      	bls.n	8009990 <_free_r+0x74>
 800998a:	230c      	movs	r3, #12
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	e7d6      	b.n	800993e <_free_r+0x22>
 8009990:	6820      	ldr	r0, [r4, #0]
 8009992:	1821      	adds	r1, r4, r0
 8009994:	428b      	cmp	r3, r1
 8009996:	bf02      	ittt	eq
 8009998:	6819      	ldreq	r1, [r3, #0]
 800999a:	685b      	ldreq	r3, [r3, #4]
 800999c:	1809      	addeq	r1, r1, r0
 800999e:	6063      	str	r3, [r4, #4]
 80099a0:	bf08      	it	eq
 80099a2:	6021      	streq	r1, [r4, #0]
 80099a4:	6054      	str	r4, [r2, #4]
 80099a6:	e7ca      	b.n	800993e <_free_r+0x22>
 80099a8:	bd38      	pop	{r3, r4, r5, pc}
 80099aa:	bf00      	nop
 80099ac:	20000fd8 	.word	0x20000fd8

080099b0 <sbrk_aligned>:
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	4e0f      	ldr	r6, [pc, #60]	@ (80099f0 <sbrk_aligned+0x40>)
 80099b4:	460c      	mov	r4, r1
 80099b6:	4605      	mov	r5, r0
 80099b8:	6831      	ldr	r1, [r6, #0]
 80099ba:	b911      	cbnz	r1, 80099c2 <sbrk_aligned+0x12>
 80099bc:	f000 fcee 	bl	800a39c <_sbrk_r>
 80099c0:	6030      	str	r0, [r6, #0]
 80099c2:	4621      	mov	r1, r4
 80099c4:	4628      	mov	r0, r5
 80099c6:	f000 fce9 	bl	800a39c <_sbrk_r>
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	d103      	bne.n	80099d6 <sbrk_aligned+0x26>
 80099ce:	f04f 34ff 	mov.w	r4, #4294967295
 80099d2:	4620      	mov	r0, r4
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	1cc4      	adds	r4, r0, #3
 80099d8:	f024 0403 	bic.w	r4, r4, #3
 80099dc:	42a0      	cmp	r0, r4
 80099de:	d0f8      	beq.n	80099d2 <sbrk_aligned+0x22>
 80099e0:	1a21      	subs	r1, r4, r0
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 fcda 	bl	800a39c <_sbrk_r>
 80099e8:	3001      	adds	r0, #1
 80099ea:	d1f2      	bne.n	80099d2 <sbrk_aligned+0x22>
 80099ec:	e7ef      	b.n	80099ce <sbrk_aligned+0x1e>
 80099ee:	bf00      	nop
 80099f0:	20000fd4 	.word	0x20000fd4

080099f4 <_malloc_r>:
 80099f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f8:	1ccd      	adds	r5, r1, #3
 80099fa:	4606      	mov	r6, r0
 80099fc:	f025 0503 	bic.w	r5, r5, #3
 8009a00:	3508      	adds	r5, #8
 8009a02:	2d0c      	cmp	r5, #12
 8009a04:	bf38      	it	cc
 8009a06:	250c      	movcc	r5, #12
 8009a08:	2d00      	cmp	r5, #0
 8009a0a:	db01      	blt.n	8009a10 <_malloc_r+0x1c>
 8009a0c:	42a9      	cmp	r1, r5
 8009a0e:	d904      	bls.n	8009a1a <_malloc_r+0x26>
 8009a10:	230c      	movs	r3, #12
 8009a12:	6033      	str	r3, [r6, #0]
 8009a14:	2000      	movs	r0, #0
 8009a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009af0 <_malloc_r+0xfc>
 8009a1e:	f000 f869 	bl	8009af4 <__malloc_lock>
 8009a22:	f8d8 3000 	ldr.w	r3, [r8]
 8009a26:	461c      	mov	r4, r3
 8009a28:	bb44      	cbnz	r4, 8009a7c <_malloc_r+0x88>
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ffbf 	bl	80099b0 <sbrk_aligned>
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	4604      	mov	r4, r0
 8009a36:	d158      	bne.n	8009aea <_malloc_r+0xf6>
 8009a38:	f8d8 4000 	ldr.w	r4, [r8]
 8009a3c:	4627      	mov	r7, r4
 8009a3e:	2f00      	cmp	r7, #0
 8009a40:	d143      	bne.n	8009aca <_malloc_r+0xd6>
 8009a42:	2c00      	cmp	r4, #0
 8009a44:	d04b      	beq.n	8009ade <_malloc_r+0xea>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	4639      	mov	r1, r7
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	eb04 0903 	add.w	r9, r4, r3
 8009a50:	f000 fca4 	bl	800a39c <_sbrk_r>
 8009a54:	4581      	cmp	r9, r0
 8009a56:	d142      	bne.n	8009ade <_malloc_r+0xea>
 8009a58:	6821      	ldr	r1, [r4, #0]
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	1a6d      	subs	r5, r5, r1
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7ff ffa6 	bl	80099b0 <sbrk_aligned>
 8009a64:	3001      	adds	r0, #1
 8009a66:	d03a      	beq.n	8009ade <_malloc_r+0xea>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	442b      	add	r3, r5
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	bb62      	cbnz	r2, 8009ad0 <_malloc_r+0xdc>
 8009a76:	f8c8 7000 	str.w	r7, [r8]
 8009a7a:	e00f      	b.n	8009a9c <_malloc_r+0xa8>
 8009a7c:	6822      	ldr	r2, [r4, #0]
 8009a7e:	1b52      	subs	r2, r2, r5
 8009a80:	d420      	bmi.n	8009ac4 <_malloc_r+0xd0>
 8009a82:	2a0b      	cmp	r2, #11
 8009a84:	d917      	bls.n	8009ab6 <_malloc_r+0xc2>
 8009a86:	1961      	adds	r1, r4, r5
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	6025      	str	r5, [r4, #0]
 8009a8c:	bf18      	it	ne
 8009a8e:	6059      	strne	r1, [r3, #4]
 8009a90:	6863      	ldr	r3, [r4, #4]
 8009a92:	bf08      	it	eq
 8009a94:	f8c8 1000 	streq.w	r1, [r8]
 8009a98:	5162      	str	r2, [r4, r5]
 8009a9a:	604b      	str	r3, [r1, #4]
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f000 f82f 	bl	8009b00 <__malloc_unlock>
 8009aa2:	f104 000b 	add.w	r0, r4, #11
 8009aa6:	1d23      	adds	r3, r4, #4
 8009aa8:	f020 0007 	bic.w	r0, r0, #7
 8009aac:	1ac2      	subs	r2, r0, r3
 8009aae:	bf1c      	itt	ne
 8009ab0:	1a1b      	subne	r3, r3, r0
 8009ab2:	50a3      	strne	r3, [r4, r2]
 8009ab4:	e7af      	b.n	8009a16 <_malloc_r+0x22>
 8009ab6:	6862      	ldr	r2, [r4, #4]
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	bf0c      	ite	eq
 8009abc:	f8c8 2000 	streq.w	r2, [r8]
 8009ac0:	605a      	strne	r2, [r3, #4]
 8009ac2:	e7eb      	b.n	8009a9c <_malloc_r+0xa8>
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	6864      	ldr	r4, [r4, #4]
 8009ac8:	e7ae      	b.n	8009a28 <_malloc_r+0x34>
 8009aca:	463c      	mov	r4, r7
 8009acc:	687f      	ldr	r7, [r7, #4]
 8009ace:	e7b6      	b.n	8009a3e <_malloc_r+0x4a>
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d1fb      	bne.n	8009ad0 <_malloc_r+0xdc>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	6053      	str	r3, [r2, #4]
 8009adc:	e7de      	b.n	8009a9c <_malloc_r+0xa8>
 8009ade:	230c      	movs	r3, #12
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	6033      	str	r3, [r6, #0]
 8009ae4:	f000 f80c 	bl	8009b00 <__malloc_unlock>
 8009ae8:	e794      	b.n	8009a14 <_malloc_r+0x20>
 8009aea:	6005      	str	r5, [r0, #0]
 8009aec:	e7d6      	b.n	8009a9c <_malloc_r+0xa8>
 8009aee:	bf00      	nop
 8009af0:	20000fd8 	.word	0x20000fd8

08009af4 <__malloc_lock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	@ (8009afc <__malloc_lock+0x8>)
 8009af6:	f7ff bf0e 	b.w	8009916 <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	20000fd0 	.word	0x20000fd0

08009b00 <__malloc_unlock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	@ (8009b08 <__malloc_unlock+0x8>)
 8009b02:	f7ff bf09 	b.w	8009918 <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	20000fd0 	.word	0x20000fd0

08009b0c <__sfputc_r>:
 8009b0c:	6893      	ldr	r3, [r2, #8]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	6093      	str	r3, [r2, #8]
 8009b14:	b410      	push	{r4}
 8009b16:	da08      	bge.n	8009b2a <__sfputc_r+0x1e>
 8009b18:	6994      	ldr	r4, [r2, #24]
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	db01      	blt.n	8009b22 <__sfputc_r+0x16>
 8009b1e:	290a      	cmp	r1, #10
 8009b20:	d103      	bne.n	8009b2a <__sfputc_r+0x1e>
 8009b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b26:	f000 bba5 	b.w	800a274 <__swbuf_r>
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	1c58      	adds	r0, r3, #1
 8009b2e:	6010      	str	r0, [r2, #0]
 8009b30:	4608      	mov	r0, r1
 8009b32:	7019      	strb	r1, [r3, #0]
 8009b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <__sfputs_r>:
 8009b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460f      	mov	r7, r1
 8009b40:	4614      	mov	r4, r2
 8009b42:	18d5      	adds	r5, r2, r3
 8009b44:	42ac      	cmp	r4, r5
 8009b46:	d101      	bne.n	8009b4c <__sfputs_r+0x12>
 8009b48:	2000      	movs	r0, #0
 8009b4a:	e007      	b.n	8009b5c <__sfputs_r+0x22>
 8009b4c:	463a      	mov	r2, r7
 8009b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7ff ffda 	bl	8009b0c <__sfputc_r>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d1f3      	bne.n	8009b44 <__sfputs_r+0xa>
 8009b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b60 <_vfiprintf_r>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	460d      	mov	r5, r1
 8009b66:	b09d      	sub	sp, #116	@ 0x74
 8009b68:	4614      	mov	r4, r2
 8009b6a:	4698      	mov	r8, r3
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	b118      	cbz	r0, 8009b78 <_vfiprintf_r+0x18>
 8009b70:	6a03      	ldr	r3, [r0, #32]
 8009b72:	b90b      	cbnz	r3, 8009b78 <_vfiprintf_r+0x18>
 8009b74:	f7ff fdc2 	bl	80096fc <__sinit>
 8009b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b7a:	07d9      	lsls	r1, r3, #31
 8009b7c:	d405      	bmi.n	8009b8a <_vfiprintf_r+0x2a>
 8009b7e:	89ab      	ldrh	r3, [r5, #12]
 8009b80:	059a      	lsls	r2, r3, #22
 8009b82:	d402      	bmi.n	8009b8a <_vfiprintf_r+0x2a>
 8009b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b86:	f7ff fec6 	bl	8009916 <__retarget_lock_acquire_recursive>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	071b      	lsls	r3, r3, #28
 8009b8e:	d501      	bpl.n	8009b94 <_vfiprintf_r+0x34>
 8009b90:	692b      	ldr	r3, [r5, #16]
 8009b92:	b99b      	cbnz	r3, 8009bbc <_vfiprintf_r+0x5c>
 8009b94:	4629      	mov	r1, r5
 8009b96:	4630      	mov	r0, r6
 8009b98:	f000 fbaa 	bl	800a2f0 <__swsetup_r>
 8009b9c:	b170      	cbz	r0, 8009bbc <_vfiprintf_r+0x5c>
 8009b9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ba0:	07dc      	lsls	r4, r3, #31
 8009ba2:	d504      	bpl.n	8009bae <_vfiprintf_r+0x4e>
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	b01d      	add	sp, #116	@ 0x74
 8009baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bae:	89ab      	ldrh	r3, [r5, #12]
 8009bb0:	0598      	lsls	r0, r3, #22
 8009bb2:	d4f7      	bmi.n	8009ba4 <_vfiprintf_r+0x44>
 8009bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bb6:	f7ff feaf 	bl	8009918 <__retarget_lock_release_recursive>
 8009bba:	e7f3      	b.n	8009ba4 <_vfiprintf_r+0x44>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bc2:	f04f 0901 	mov.w	r9, #1
 8009bc6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009d7c <_vfiprintf_r+0x21c>
 8009bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bd2:	2330      	movs	r3, #48	@ 0x30
 8009bd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bd8:	4623      	mov	r3, r4
 8009bda:	469a      	mov	sl, r3
 8009bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be0:	b10a      	cbz	r2, 8009be6 <_vfiprintf_r+0x86>
 8009be2:	2a25      	cmp	r2, #37	@ 0x25
 8009be4:	d1f9      	bne.n	8009bda <_vfiprintf_r+0x7a>
 8009be6:	ebba 0b04 	subs.w	fp, sl, r4
 8009bea:	d00b      	beq.n	8009c04 <_vfiprintf_r+0xa4>
 8009bec:	465b      	mov	r3, fp
 8009bee:	4622      	mov	r2, r4
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7ff ffa1 	bl	8009b3a <__sfputs_r>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f000 80a7 	beq.w	8009d4c <_vfiprintf_r+0x1ec>
 8009bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c00:	445a      	add	r2, fp
 8009c02:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c04:	f89a 3000 	ldrb.w	r3, [sl]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 809f 	beq.w	8009d4c <_vfiprintf_r+0x1ec>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f04f 32ff 	mov.w	r2, #4294967295
 8009c14:	f10a 0a01 	add.w	sl, sl, #1
 8009c18:	9304      	str	r3, [sp, #16]
 8009c1a:	9307      	str	r3, [sp, #28]
 8009c1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c20:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c26:	4654      	mov	r4, sl
 8009c28:	2205      	movs	r2, #5
 8009c2a:	4854      	ldr	r0, [pc, #336]	@ (8009d7c <_vfiprintf_r+0x21c>)
 8009c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c30:	f000 fbc4 	bl	800a3bc <memchr>
 8009c34:	9a04      	ldr	r2, [sp, #16]
 8009c36:	b9d8      	cbnz	r0, 8009c70 <_vfiprintf_r+0x110>
 8009c38:	06d1      	lsls	r1, r2, #27
 8009c3a:	bf44      	itt	mi
 8009c3c:	2320      	movmi	r3, #32
 8009c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c42:	0713      	lsls	r3, r2, #28
 8009c44:	bf44      	itt	mi
 8009c46:	232b      	movmi	r3, #43	@ 0x2b
 8009c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c52:	d015      	beq.n	8009c80 <_vfiprintf_r+0x120>
 8009c54:	9a07      	ldr	r2, [sp, #28]
 8009c56:	4654      	mov	r4, sl
 8009c58:	2000      	movs	r0, #0
 8009c5a:	f04f 0c0a 	mov.w	ip, #10
 8009c5e:	4621      	mov	r1, r4
 8009c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c64:	3b30      	subs	r3, #48	@ 0x30
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	d94b      	bls.n	8009d02 <_vfiprintf_r+0x1a2>
 8009c6a:	b1b0      	cbz	r0, 8009c9a <_vfiprintf_r+0x13a>
 8009c6c:	9207      	str	r2, [sp, #28]
 8009c6e:	e014      	b.n	8009c9a <_vfiprintf_r+0x13a>
 8009c70:	eba0 0308 	sub.w	r3, r0, r8
 8009c74:	46a2      	mov	sl, r4
 8009c76:	fa09 f303 	lsl.w	r3, r9, r3
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	9304      	str	r3, [sp, #16]
 8009c7e:	e7d2      	b.n	8009c26 <_vfiprintf_r+0xc6>
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	1d19      	adds	r1, r3, #4
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	9103      	str	r1, [sp, #12]
 8009c8a:	bfbb      	ittet	lt
 8009c8c:	425b      	neglt	r3, r3
 8009c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c92:	9307      	strge	r3, [sp, #28]
 8009c94:	9307      	strlt	r3, [sp, #28]
 8009c96:	bfb8      	it	lt
 8009c98:	9204      	strlt	r2, [sp, #16]
 8009c9a:	7823      	ldrb	r3, [r4, #0]
 8009c9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c9e:	d10a      	bne.n	8009cb6 <_vfiprintf_r+0x156>
 8009ca0:	7863      	ldrb	r3, [r4, #1]
 8009ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca4:	d132      	bne.n	8009d0c <_vfiprintf_r+0x1ac>
 8009ca6:	9b03      	ldr	r3, [sp, #12]
 8009ca8:	3402      	adds	r4, #2
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cb2:	9203      	str	r2, [sp, #12]
 8009cb4:	9305      	str	r3, [sp, #20]
 8009cb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d8c <_vfiprintf_r+0x22c>
 8009cba:	2203      	movs	r2, #3
 8009cbc:	7821      	ldrb	r1, [r4, #0]
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	f000 fb7c 	bl	800a3bc <memchr>
 8009cc4:	b138      	cbz	r0, 8009cd6 <_vfiprintf_r+0x176>
 8009cc6:	eba0 000a 	sub.w	r0, r0, sl
 8009cca:	2240      	movs	r2, #64	@ 0x40
 8009ccc:	9b04      	ldr	r3, [sp, #16]
 8009cce:	3401      	adds	r4, #1
 8009cd0:	4082      	lsls	r2, r0
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cda:	2206      	movs	r2, #6
 8009cdc:	4828      	ldr	r0, [pc, #160]	@ (8009d80 <_vfiprintf_r+0x220>)
 8009cde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ce2:	f000 fb6b 	bl	800a3bc <memchr>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d03f      	beq.n	8009d6a <_vfiprintf_r+0x20a>
 8009cea:	4b26      	ldr	r3, [pc, #152]	@ (8009d84 <_vfiprintf_r+0x224>)
 8009cec:	bb1b      	cbnz	r3, 8009d36 <_vfiprintf_r+0x1d6>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	3307      	adds	r3, #7
 8009cf2:	f023 0307 	bic.w	r3, r3, #7
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	9303      	str	r3, [sp, #12]
 8009cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfc:	443b      	add	r3, r7
 8009cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d00:	e76a      	b.n	8009bd8 <_vfiprintf_r+0x78>
 8009d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d06:	460c      	mov	r4, r1
 8009d08:	2001      	movs	r0, #1
 8009d0a:	e7a8      	b.n	8009c5e <_vfiprintf_r+0xfe>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	3401      	adds	r4, #1
 8009d10:	f04f 0c0a 	mov.w	ip, #10
 8009d14:	4619      	mov	r1, r3
 8009d16:	9305      	str	r3, [sp, #20]
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d1e:	3a30      	subs	r2, #48	@ 0x30
 8009d20:	2a09      	cmp	r2, #9
 8009d22:	d903      	bls.n	8009d2c <_vfiprintf_r+0x1cc>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0c6      	beq.n	8009cb6 <_vfiprintf_r+0x156>
 8009d28:	9105      	str	r1, [sp, #20]
 8009d2a:	e7c4      	b.n	8009cb6 <_vfiprintf_r+0x156>
 8009d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d30:	4604      	mov	r4, r0
 8009d32:	2301      	movs	r3, #1
 8009d34:	e7f0      	b.n	8009d18 <_vfiprintf_r+0x1b8>
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	462a      	mov	r2, r5
 8009d3a:	a904      	add	r1, sp, #16
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	4b11      	ldr	r3, [pc, #68]	@ (8009d88 <_vfiprintf_r+0x228>)
 8009d42:	f3af 8000 	nop.w
 8009d46:	4607      	mov	r7, r0
 8009d48:	1c78      	adds	r0, r7, #1
 8009d4a:	d1d6      	bne.n	8009cfa <_vfiprintf_r+0x19a>
 8009d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d4e:	07d9      	lsls	r1, r3, #31
 8009d50:	d405      	bmi.n	8009d5e <_vfiprintf_r+0x1fe>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	059a      	lsls	r2, r3, #22
 8009d56:	d402      	bmi.n	8009d5e <_vfiprintf_r+0x1fe>
 8009d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d5a:	f7ff fddd 	bl	8009918 <__retarget_lock_release_recursive>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	065b      	lsls	r3, r3, #25
 8009d62:	f53f af1f 	bmi.w	8009ba4 <_vfiprintf_r+0x44>
 8009d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d68:	e71e      	b.n	8009ba8 <_vfiprintf_r+0x48>
 8009d6a:	ab03      	add	r3, sp, #12
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	a904      	add	r1, sp, #16
 8009d70:	4630      	mov	r0, r6
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	4b04      	ldr	r3, [pc, #16]	@ (8009d88 <_vfiprintf_r+0x228>)
 8009d76:	f000 f87d 	bl	8009e74 <_printf_i>
 8009d7a:	e7e4      	b.n	8009d46 <_vfiprintf_r+0x1e6>
 8009d7c:	0800a664 	.word	0x0800a664
 8009d80:	0800a66e 	.word	0x0800a66e
 8009d84:	00000000 	.word	0x00000000
 8009d88:	08009b3b 	.word	0x08009b3b
 8009d8c:	0800a66a 	.word	0x0800a66a

08009d90 <_printf_common>:
 8009d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	4616      	mov	r6, r2
 8009d96:	4698      	mov	r8, r3
 8009d98:	688a      	ldr	r2, [r1, #8]
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	690b      	ldr	r3, [r1, #16]
 8009d9e:	460c      	mov	r4, r1
 8009da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	bfb8      	it	lt
 8009da8:	4613      	movlt	r3, r2
 8009daa:	6033      	str	r3, [r6, #0]
 8009dac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009db0:	b10a      	cbz	r2, 8009db6 <_printf_common+0x26>
 8009db2:	3301      	adds	r3, #1
 8009db4:	6033      	str	r3, [r6, #0]
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	0699      	lsls	r1, r3, #26
 8009dba:	bf42      	ittt	mi
 8009dbc:	6833      	ldrmi	r3, [r6, #0]
 8009dbe:	3302      	addmi	r3, #2
 8009dc0:	6033      	strmi	r3, [r6, #0]
 8009dc2:	6825      	ldr	r5, [r4, #0]
 8009dc4:	f015 0506 	ands.w	r5, r5, #6
 8009dc8:	d106      	bne.n	8009dd8 <_printf_common+0x48>
 8009dca:	f104 0a19 	add.w	sl, r4, #25
 8009dce:	68e3      	ldr	r3, [r4, #12]
 8009dd0:	6832      	ldr	r2, [r6, #0]
 8009dd2:	1a9b      	subs	r3, r3, r2
 8009dd4:	42ab      	cmp	r3, r5
 8009dd6:	dc2b      	bgt.n	8009e30 <_printf_common+0xa0>
 8009dd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ddc:	6822      	ldr	r2, [r4, #0]
 8009dde:	3b00      	subs	r3, #0
 8009de0:	bf18      	it	ne
 8009de2:	2301      	movne	r3, #1
 8009de4:	0692      	lsls	r2, r2, #26
 8009de6:	d430      	bmi.n	8009e4a <_printf_common+0xba>
 8009de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dec:	4641      	mov	r1, r8
 8009dee:	4638      	mov	r0, r7
 8009df0:	47c8      	blx	r9
 8009df2:	3001      	adds	r0, #1
 8009df4:	d023      	beq.n	8009e3e <_printf_common+0xae>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	341a      	adds	r4, #26
 8009dfa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009dfe:	f003 0306 	and.w	r3, r3, #6
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	bf0a      	itet	eq
 8009e06:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009e0a:	2500      	movne	r5, #0
 8009e0c:	6833      	ldreq	r3, [r6, #0]
 8009e0e:	f04f 0600 	mov.w	r6, #0
 8009e12:	bf08      	it	eq
 8009e14:	1aed      	subeq	r5, r5, r3
 8009e16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e1a:	bf08      	it	eq
 8009e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e20:	4293      	cmp	r3, r2
 8009e22:	bfc4      	itt	gt
 8009e24:	1a9b      	subgt	r3, r3, r2
 8009e26:	18ed      	addgt	r5, r5, r3
 8009e28:	42b5      	cmp	r5, r6
 8009e2a:	d11a      	bne.n	8009e62 <_printf_common+0xd2>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e008      	b.n	8009e42 <_printf_common+0xb2>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4652      	mov	r2, sl
 8009e34:	4641      	mov	r1, r8
 8009e36:	4638      	mov	r0, r7
 8009e38:	47c8      	blx	r9
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d103      	bne.n	8009e46 <_printf_common+0xb6>
 8009e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e46:	3501      	adds	r5, #1
 8009e48:	e7c1      	b.n	8009dce <_printf_common+0x3e>
 8009e4a:	18e1      	adds	r1, r4, r3
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	2030      	movs	r0, #48	@ 0x30
 8009e50:	3302      	adds	r3, #2
 8009e52:	4422      	add	r2, r4
 8009e54:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e60:	e7c2      	b.n	8009de8 <_printf_common+0x58>
 8009e62:	2301      	movs	r3, #1
 8009e64:	4622      	mov	r2, r4
 8009e66:	4641      	mov	r1, r8
 8009e68:	4638      	mov	r0, r7
 8009e6a:	47c8      	blx	r9
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	d0e6      	beq.n	8009e3e <_printf_common+0xae>
 8009e70:	3601      	adds	r6, #1
 8009e72:	e7d9      	b.n	8009e28 <_printf_common+0x98>

08009e74 <_printf_i>:
 8009e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	7e0f      	ldrb	r7, [r1, #24]
 8009e7a:	4691      	mov	r9, r2
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	2f78      	cmp	r7, #120	@ 0x78
 8009e82:	469a      	mov	sl, r3
 8009e84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e8a:	d807      	bhi.n	8009e9c <_printf_i+0x28>
 8009e8c:	2f62      	cmp	r7, #98	@ 0x62
 8009e8e:	d80a      	bhi.n	8009ea6 <_printf_i+0x32>
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	f000 80d2 	beq.w	800a03a <_printf_i+0x1c6>
 8009e96:	2f58      	cmp	r7, #88	@ 0x58
 8009e98:	f000 80b9 	beq.w	800a00e <_printf_i+0x19a>
 8009e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ea0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ea4:	e03a      	b.n	8009f1c <_printf_i+0xa8>
 8009ea6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009eaa:	2b15      	cmp	r3, #21
 8009eac:	d8f6      	bhi.n	8009e9c <_printf_i+0x28>
 8009eae:	a101      	add	r1, pc, #4	@ (adr r1, 8009eb4 <_printf_i+0x40>)
 8009eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eb4:	08009f0d 	.word	0x08009f0d
 8009eb8:	08009f21 	.word	0x08009f21
 8009ebc:	08009e9d 	.word	0x08009e9d
 8009ec0:	08009e9d 	.word	0x08009e9d
 8009ec4:	08009e9d 	.word	0x08009e9d
 8009ec8:	08009e9d 	.word	0x08009e9d
 8009ecc:	08009f21 	.word	0x08009f21
 8009ed0:	08009e9d 	.word	0x08009e9d
 8009ed4:	08009e9d 	.word	0x08009e9d
 8009ed8:	08009e9d 	.word	0x08009e9d
 8009edc:	08009e9d 	.word	0x08009e9d
 8009ee0:	0800a021 	.word	0x0800a021
 8009ee4:	08009f4b 	.word	0x08009f4b
 8009ee8:	08009fdb 	.word	0x08009fdb
 8009eec:	08009e9d 	.word	0x08009e9d
 8009ef0:	08009e9d 	.word	0x08009e9d
 8009ef4:	0800a043 	.word	0x0800a043
 8009ef8:	08009e9d 	.word	0x08009e9d
 8009efc:	08009f4b 	.word	0x08009f4b
 8009f00:	08009e9d 	.word	0x08009e9d
 8009f04:	08009e9d 	.word	0x08009e9d
 8009f08:	08009fe3 	.word	0x08009fe3
 8009f0c:	6833      	ldr	r3, [r6, #0]
 8009f0e:	1d1a      	adds	r2, r3, #4
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6032      	str	r2, [r6, #0]
 8009f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e09d      	b.n	800a05c <_printf_i+0x1e8>
 8009f20:	6833      	ldr	r3, [r6, #0]
 8009f22:	6820      	ldr	r0, [r4, #0]
 8009f24:	1d19      	adds	r1, r3, #4
 8009f26:	6031      	str	r1, [r6, #0]
 8009f28:	0606      	lsls	r6, r0, #24
 8009f2a:	d501      	bpl.n	8009f30 <_printf_i+0xbc>
 8009f2c:	681d      	ldr	r5, [r3, #0]
 8009f2e:	e003      	b.n	8009f38 <_printf_i+0xc4>
 8009f30:	0645      	lsls	r5, r0, #25
 8009f32:	d5fb      	bpl.n	8009f2c <_printf_i+0xb8>
 8009f34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f38:	2d00      	cmp	r5, #0
 8009f3a:	da03      	bge.n	8009f44 <_printf_i+0xd0>
 8009f3c:	232d      	movs	r3, #45	@ 0x2d
 8009f3e:	426d      	negs	r5, r5
 8009f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f44:	4859      	ldr	r0, [pc, #356]	@ (800a0ac <_printf_i+0x238>)
 8009f46:	230a      	movs	r3, #10
 8009f48:	e011      	b.n	8009f6e <_printf_i+0xfa>
 8009f4a:	6821      	ldr	r1, [r4, #0]
 8009f4c:	6833      	ldr	r3, [r6, #0]
 8009f4e:	0608      	lsls	r0, r1, #24
 8009f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f54:	d402      	bmi.n	8009f5c <_printf_i+0xe8>
 8009f56:	0649      	lsls	r1, r1, #25
 8009f58:	bf48      	it	mi
 8009f5a:	b2ad      	uxthmi	r5, r5
 8009f5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	4852      	ldr	r0, [pc, #328]	@ (800a0ac <_printf_i+0x238>)
 8009f62:	bf14      	ite	ne
 8009f64:	230a      	movne	r3, #10
 8009f66:	2308      	moveq	r3, #8
 8009f68:	2100      	movs	r1, #0
 8009f6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f6e:	6866      	ldr	r6, [r4, #4]
 8009f70:	2e00      	cmp	r6, #0
 8009f72:	60a6      	str	r6, [r4, #8]
 8009f74:	bfa2      	ittt	ge
 8009f76:	6821      	ldrge	r1, [r4, #0]
 8009f78:	f021 0104 	bicge.w	r1, r1, #4
 8009f7c:	6021      	strge	r1, [r4, #0]
 8009f7e:	b90d      	cbnz	r5, 8009f84 <_printf_i+0x110>
 8009f80:	2e00      	cmp	r6, #0
 8009f82:	d04b      	beq.n	800a01c <_printf_i+0x1a8>
 8009f84:	4616      	mov	r6, r2
 8009f86:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f8a:	fb03 5711 	mls	r7, r3, r1, r5
 8009f8e:	5dc7      	ldrb	r7, [r0, r7]
 8009f90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f94:	462f      	mov	r7, r5
 8009f96:	460d      	mov	r5, r1
 8009f98:	42bb      	cmp	r3, r7
 8009f9a:	d9f4      	bls.n	8009f86 <_printf_i+0x112>
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d10b      	bne.n	8009fb8 <_printf_i+0x144>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	07df      	lsls	r7, r3, #31
 8009fa4:	d508      	bpl.n	8009fb8 <_printf_i+0x144>
 8009fa6:	6923      	ldr	r3, [r4, #16]
 8009fa8:	6861      	ldr	r1, [r4, #4]
 8009faa:	4299      	cmp	r1, r3
 8009fac:	bfde      	ittt	le
 8009fae:	2330      	movle	r3, #48	@ 0x30
 8009fb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fb8:	1b92      	subs	r2, r2, r6
 8009fba:	6122      	str	r2, [r4, #16]
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	aa03      	add	r2, sp, #12
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	f8cd a000 	str.w	sl, [sp]
 8009fc8:	f7ff fee2 	bl	8009d90 <_printf_common>
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d14a      	bne.n	800a066 <_printf_i+0x1f2>
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd4:	b004      	add	sp, #16
 8009fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	f043 0320 	orr.w	r3, r3, #32
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	2778      	movs	r7, #120	@ 0x78
 8009fe4:	4832      	ldr	r0, [pc, #200]	@ (800a0b0 <_printf_i+0x23c>)
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fec:	061f      	lsls	r7, r3, #24
 8009fee:	6831      	ldr	r1, [r6, #0]
 8009ff0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ff4:	d402      	bmi.n	8009ffc <_printf_i+0x188>
 8009ff6:	065f      	lsls	r7, r3, #25
 8009ff8:	bf48      	it	mi
 8009ffa:	b2ad      	uxthmi	r5, r5
 8009ffc:	6031      	str	r1, [r6, #0]
 8009ffe:	07d9      	lsls	r1, r3, #31
 800a000:	bf44      	itt	mi
 800a002:	f043 0320 	orrmi.w	r3, r3, #32
 800a006:	6023      	strmi	r3, [r4, #0]
 800a008:	b11d      	cbz	r5, 800a012 <_printf_i+0x19e>
 800a00a:	2310      	movs	r3, #16
 800a00c:	e7ac      	b.n	8009f68 <_printf_i+0xf4>
 800a00e:	4827      	ldr	r0, [pc, #156]	@ (800a0ac <_printf_i+0x238>)
 800a010:	e7e9      	b.n	8009fe6 <_printf_i+0x172>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	f023 0320 	bic.w	r3, r3, #32
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	e7f6      	b.n	800a00a <_printf_i+0x196>
 800a01c:	4616      	mov	r6, r2
 800a01e:	e7bd      	b.n	8009f9c <_printf_i+0x128>
 800a020:	6833      	ldr	r3, [r6, #0]
 800a022:	6825      	ldr	r5, [r4, #0]
 800a024:	1d18      	adds	r0, r3, #4
 800a026:	6961      	ldr	r1, [r4, #20]
 800a028:	6030      	str	r0, [r6, #0]
 800a02a:	062e      	lsls	r6, r5, #24
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	d501      	bpl.n	800a034 <_printf_i+0x1c0>
 800a030:	6019      	str	r1, [r3, #0]
 800a032:	e002      	b.n	800a03a <_printf_i+0x1c6>
 800a034:	0668      	lsls	r0, r5, #25
 800a036:	d5fb      	bpl.n	800a030 <_printf_i+0x1bc>
 800a038:	8019      	strh	r1, [r3, #0]
 800a03a:	2300      	movs	r3, #0
 800a03c:	4616      	mov	r6, r2
 800a03e:	6123      	str	r3, [r4, #16]
 800a040:	e7bc      	b.n	8009fbc <_printf_i+0x148>
 800a042:	6833      	ldr	r3, [r6, #0]
 800a044:	2100      	movs	r1, #0
 800a046:	1d1a      	adds	r2, r3, #4
 800a048:	6032      	str	r2, [r6, #0]
 800a04a:	681e      	ldr	r6, [r3, #0]
 800a04c:	6862      	ldr	r2, [r4, #4]
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 f9b4 	bl	800a3bc <memchr>
 800a054:	b108      	cbz	r0, 800a05a <_printf_i+0x1e6>
 800a056:	1b80      	subs	r0, r0, r6
 800a058:	6060      	str	r0, [r4, #4]
 800a05a:	6863      	ldr	r3, [r4, #4]
 800a05c:	6123      	str	r3, [r4, #16]
 800a05e:	2300      	movs	r3, #0
 800a060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a064:	e7aa      	b.n	8009fbc <_printf_i+0x148>
 800a066:	6923      	ldr	r3, [r4, #16]
 800a068:	4632      	mov	r2, r6
 800a06a:	4649      	mov	r1, r9
 800a06c:	4640      	mov	r0, r8
 800a06e:	47d0      	blx	sl
 800a070:	3001      	adds	r0, #1
 800a072:	d0ad      	beq.n	8009fd0 <_printf_i+0x15c>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	079b      	lsls	r3, r3, #30
 800a078:	d413      	bmi.n	800a0a2 <_printf_i+0x22e>
 800a07a:	68e0      	ldr	r0, [r4, #12]
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	4298      	cmp	r0, r3
 800a080:	bfb8      	it	lt
 800a082:	4618      	movlt	r0, r3
 800a084:	e7a6      	b.n	8009fd4 <_printf_i+0x160>
 800a086:	2301      	movs	r3, #1
 800a088:	4632      	mov	r2, r6
 800a08a:	4649      	mov	r1, r9
 800a08c:	4640      	mov	r0, r8
 800a08e:	47d0      	blx	sl
 800a090:	3001      	adds	r0, #1
 800a092:	d09d      	beq.n	8009fd0 <_printf_i+0x15c>
 800a094:	3501      	adds	r5, #1
 800a096:	68e3      	ldr	r3, [r4, #12]
 800a098:	9903      	ldr	r1, [sp, #12]
 800a09a:	1a5b      	subs	r3, r3, r1
 800a09c:	42ab      	cmp	r3, r5
 800a09e:	dcf2      	bgt.n	800a086 <_printf_i+0x212>
 800a0a0:	e7eb      	b.n	800a07a <_printf_i+0x206>
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	f104 0619 	add.w	r6, r4, #25
 800a0a8:	e7f5      	b.n	800a096 <_printf_i+0x222>
 800a0aa:	bf00      	nop
 800a0ac:	0800a675 	.word	0x0800a675
 800a0b0:	0800a686 	.word	0x0800a686

0800a0b4 <__sflush_r>:
 800a0b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0bc:	0716      	lsls	r6, r2, #28
 800a0be:	4605      	mov	r5, r0
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	d454      	bmi.n	800a16e <__sflush_r+0xba>
 800a0c4:	684b      	ldr	r3, [r1, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	dc02      	bgt.n	800a0d0 <__sflush_r+0x1c>
 800a0ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dd48      	ble.n	800a162 <__sflush_r+0xae>
 800a0d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0d2:	2e00      	cmp	r6, #0
 800a0d4:	d045      	beq.n	800a162 <__sflush_r+0xae>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0dc:	682f      	ldr	r7, [r5, #0]
 800a0de:	6a21      	ldr	r1, [r4, #32]
 800a0e0:	602b      	str	r3, [r5, #0]
 800a0e2:	d030      	beq.n	800a146 <__sflush_r+0x92>
 800a0e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	0759      	lsls	r1, r3, #29
 800a0ea:	d505      	bpl.n	800a0f8 <__sflush_r+0x44>
 800a0ec:	6863      	ldr	r3, [r4, #4]
 800a0ee:	1ad2      	subs	r2, r2, r3
 800a0f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0f2:	b10b      	cbz	r3, 800a0f8 <__sflush_r+0x44>
 800a0f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0f6:	1ad2      	subs	r2, r2, r3
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0fc:	6a21      	ldr	r1, [r4, #32]
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b0      	blx	r6
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	d106      	bne.n	800a116 <__sflush_r+0x62>
 800a108:	6829      	ldr	r1, [r5, #0]
 800a10a:	291d      	cmp	r1, #29
 800a10c:	d82b      	bhi.n	800a166 <__sflush_r+0xb2>
 800a10e:	4a2a      	ldr	r2, [pc, #168]	@ (800a1b8 <__sflush_r+0x104>)
 800a110:	410a      	asrs	r2, r1
 800a112:	07d6      	lsls	r6, r2, #31
 800a114:	d427      	bmi.n	800a166 <__sflush_r+0xb2>
 800a116:	2200      	movs	r2, #0
 800a118:	04d9      	lsls	r1, r3, #19
 800a11a:	6062      	str	r2, [r4, #4]
 800a11c:	6922      	ldr	r2, [r4, #16]
 800a11e:	6022      	str	r2, [r4, #0]
 800a120:	d504      	bpl.n	800a12c <__sflush_r+0x78>
 800a122:	1c42      	adds	r2, r0, #1
 800a124:	d101      	bne.n	800a12a <__sflush_r+0x76>
 800a126:	682b      	ldr	r3, [r5, #0]
 800a128:	b903      	cbnz	r3, 800a12c <__sflush_r+0x78>
 800a12a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a12c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a12e:	602f      	str	r7, [r5, #0]
 800a130:	b1b9      	cbz	r1, 800a162 <__sflush_r+0xae>
 800a132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a136:	4299      	cmp	r1, r3
 800a138:	d002      	beq.n	800a140 <__sflush_r+0x8c>
 800a13a:	4628      	mov	r0, r5
 800a13c:	f7ff fbee 	bl	800991c <_free_r>
 800a140:	2300      	movs	r3, #0
 800a142:	6363      	str	r3, [r4, #52]	@ 0x34
 800a144:	e00d      	b.n	800a162 <__sflush_r+0xae>
 800a146:	2301      	movs	r3, #1
 800a148:	4628      	mov	r0, r5
 800a14a:	47b0      	blx	r6
 800a14c:	4602      	mov	r2, r0
 800a14e:	1c50      	adds	r0, r2, #1
 800a150:	d1c9      	bne.n	800a0e6 <__sflush_r+0x32>
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d0c6      	beq.n	800a0e6 <__sflush_r+0x32>
 800a158:	2b1d      	cmp	r3, #29
 800a15a:	d001      	beq.n	800a160 <__sflush_r+0xac>
 800a15c:	2b16      	cmp	r3, #22
 800a15e:	d11d      	bne.n	800a19c <__sflush_r+0xe8>
 800a160:	602f      	str	r7, [r5, #0]
 800a162:	2000      	movs	r0, #0
 800a164:	e021      	b.n	800a1aa <__sflush_r+0xf6>
 800a166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a16a:	b21b      	sxth	r3, r3
 800a16c:	e01a      	b.n	800a1a4 <__sflush_r+0xf0>
 800a16e:	690f      	ldr	r7, [r1, #16]
 800a170:	2f00      	cmp	r7, #0
 800a172:	d0f6      	beq.n	800a162 <__sflush_r+0xae>
 800a174:	0793      	lsls	r3, r2, #30
 800a176:	680e      	ldr	r6, [r1, #0]
 800a178:	600f      	str	r7, [r1, #0]
 800a17a:	bf0c      	ite	eq
 800a17c:	694b      	ldreq	r3, [r1, #20]
 800a17e:	2300      	movne	r3, #0
 800a180:	eba6 0807 	sub.w	r8, r6, r7
 800a184:	608b      	str	r3, [r1, #8]
 800a186:	f1b8 0f00 	cmp.w	r8, #0
 800a18a:	ddea      	ble.n	800a162 <__sflush_r+0xae>
 800a18c:	4643      	mov	r3, r8
 800a18e:	463a      	mov	r2, r7
 800a190:	6a21      	ldr	r1, [r4, #32]
 800a192:	4628      	mov	r0, r5
 800a194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a196:	47b0      	blx	r6
 800a198:	2800      	cmp	r0, #0
 800a19a:	dc08      	bgt.n	800a1ae <__sflush_r+0xfa>
 800a19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ae:	4407      	add	r7, r0
 800a1b0:	eba8 0800 	sub.w	r8, r8, r0
 800a1b4:	e7e7      	b.n	800a186 <__sflush_r+0xd2>
 800a1b6:	bf00      	nop
 800a1b8:	dfbffffe 	.word	0xdfbffffe

0800a1bc <_fflush_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	690b      	ldr	r3, [r1, #16]
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	b913      	cbnz	r3, 800a1cc <_fflush_r+0x10>
 800a1c6:	2500      	movs	r5, #0
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	b118      	cbz	r0, 800a1d6 <_fflush_r+0x1a>
 800a1ce:	6a03      	ldr	r3, [r0, #32]
 800a1d0:	b90b      	cbnz	r3, 800a1d6 <_fflush_r+0x1a>
 800a1d2:	f7ff fa93 	bl	80096fc <__sinit>
 800a1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0f3      	beq.n	800a1c6 <_fflush_r+0xa>
 800a1de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1e0:	07d0      	lsls	r0, r2, #31
 800a1e2:	d404      	bmi.n	800a1ee <_fflush_r+0x32>
 800a1e4:	0599      	lsls	r1, r3, #22
 800a1e6:	d402      	bmi.n	800a1ee <_fflush_r+0x32>
 800a1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ea:	f7ff fb94 	bl	8009916 <__retarget_lock_acquire_recursive>
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	f7ff ff5f 	bl	800a0b4 <__sflush_r>
 800a1f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	07da      	lsls	r2, r3, #31
 800a1fc:	d4e4      	bmi.n	800a1c8 <_fflush_r+0xc>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	059b      	lsls	r3, r3, #22
 800a202:	d4e1      	bmi.n	800a1c8 <_fflush_r+0xc>
 800a204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a206:	f7ff fb87 	bl	8009918 <__retarget_lock_release_recursive>
 800a20a:	e7dd      	b.n	800a1c8 <_fflush_r+0xc>

0800a20c <_putc_r>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	460d      	mov	r5, r1
 800a210:	4614      	mov	r4, r2
 800a212:	4606      	mov	r6, r0
 800a214:	b118      	cbz	r0, 800a21e <_putc_r+0x12>
 800a216:	6a03      	ldr	r3, [r0, #32]
 800a218:	b90b      	cbnz	r3, 800a21e <_putc_r+0x12>
 800a21a:	f7ff fa6f 	bl	80096fc <__sinit>
 800a21e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a220:	07d8      	lsls	r0, r3, #31
 800a222:	d405      	bmi.n	800a230 <_putc_r+0x24>
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	0599      	lsls	r1, r3, #22
 800a228:	d402      	bmi.n	800a230 <_putc_r+0x24>
 800a22a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a22c:	f7ff fb73 	bl	8009916 <__retarget_lock_acquire_recursive>
 800a230:	68a3      	ldr	r3, [r4, #8]
 800a232:	3b01      	subs	r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	60a3      	str	r3, [r4, #8]
 800a238:	da05      	bge.n	800a246 <_putc_r+0x3a>
 800a23a:	69a2      	ldr	r2, [r4, #24]
 800a23c:	4293      	cmp	r3, r2
 800a23e:	db12      	blt.n	800a266 <_putc_r+0x5a>
 800a240:	b2eb      	uxtb	r3, r5
 800a242:	2b0a      	cmp	r3, #10
 800a244:	d00f      	beq.n	800a266 <_putc_r+0x5a>
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	6022      	str	r2, [r4, #0]
 800a24c:	701d      	strb	r5, [r3, #0]
 800a24e:	b2ed      	uxtb	r5, r5
 800a250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a252:	07da      	lsls	r2, r3, #31
 800a254:	d405      	bmi.n	800a262 <_putc_r+0x56>
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	059b      	lsls	r3, r3, #22
 800a25a:	d402      	bmi.n	800a262 <_putc_r+0x56>
 800a25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a25e:	f7ff fb5b 	bl	8009918 <__retarget_lock_release_recursive>
 800a262:	4628      	mov	r0, r5
 800a264:	bd70      	pop	{r4, r5, r6, pc}
 800a266:	4629      	mov	r1, r5
 800a268:	4622      	mov	r2, r4
 800a26a:	4630      	mov	r0, r6
 800a26c:	f000 f802 	bl	800a274 <__swbuf_r>
 800a270:	4605      	mov	r5, r0
 800a272:	e7ed      	b.n	800a250 <_putc_r+0x44>

0800a274 <__swbuf_r>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	460e      	mov	r6, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	4605      	mov	r5, r0
 800a27c:	b118      	cbz	r0, 800a286 <__swbuf_r+0x12>
 800a27e:	6a03      	ldr	r3, [r0, #32]
 800a280:	b90b      	cbnz	r3, 800a286 <__swbuf_r+0x12>
 800a282:	f7ff fa3b 	bl	80096fc <__sinit>
 800a286:	69a3      	ldr	r3, [r4, #24]
 800a288:	60a3      	str	r3, [r4, #8]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	071a      	lsls	r2, r3, #28
 800a28e:	d501      	bpl.n	800a294 <__swbuf_r+0x20>
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	b943      	cbnz	r3, 800a2a6 <__swbuf_r+0x32>
 800a294:	4621      	mov	r1, r4
 800a296:	4628      	mov	r0, r5
 800a298:	f000 f82a 	bl	800a2f0 <__swsetup_r>
 800a29c:	b118      	cbz	r0, 800a2a6 <__swbuf_r+0x32>
 800a29e:	f04f 37ff 	mov.w	r7, #4294967295
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	b2f6      	uxtb	r6, r6
 800a2aa:	6922      	ldr	r2, [r4, #16]
 800a2ac:	4637      	mov	r7, r6
 800a2ae:	1a98      	subs	r0, r3, r2
 800a2b0:	6963      	ldr	r3, [r4, #20]
 800a2b2:	4283      	cmp	r3, r0
 800a2b4:	dc05      	bgt.n	800a2c2 <__swbuf_r+0x4e>
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f7ff ff7f 	bl	800a1bc <_fflush_r>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d1ed      	bne.n	800a29e <__swbuf_r+0x2a>
 800a2c2:	68a3      	ldr	r3, [r4, #8]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	60a3      	str	r3, [r4, #8]
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	6022      	str	r2, [r4, #0]
 800a2ce:	701e      	strb	r6, [r3, #0]
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	6962      	ldr	r2, [r4, #20]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d004      	beq.n	800a2e2 <__swbuf_r+0x6e>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	07db      	lsls	r3, r3, #31
 800a2dc:	d5e1      	bpl.n	800a2a2 <__swbuf_r+0x2e>
 800a2de:	2e0a      	cmp	r6, #10
 800a2e0:	d1df      	bne.n	800a2a2 <__swbuf_r+0x2e>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f7ff ff69 	bl	800a1bc <_fflush_r>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d0d9      	beq.n	800a2a2 <__swbuf_r+0x2e>
 800a2ee:	e7d6      	b.n	800a29e <__swbuf_r+0x2a>

0800a2f0 <__swsetup_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4b29      	ldr	r3, [pc, #164]	@ (800a398 <__swsetup_r+0xa8>)
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	6818      	ldr	r0, [r3, #0]
 800a2fa:	b118      	cbz	r0, 800a304 <__swsetup_r+0x14>
 800a2fc:	6a03      	ldr	r3, [r0, #32]
 800a2fe:	b90b      	cbnz	r3, 800a304 <__swsetup_r+0x14>
 800a300:	f7ff f9fc 	bl	80096fc <__sinit>
 800a304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a308:	0719      	lsls	r1, r3, #28
 800a30a:	d422      	bmi.n	800a352 <__swsetup_r+0x62>
 800a30c:	06da      	lsls	r2, r3, #27
 800a30e:	d407      	bmi.n	800a320 <__swsetup_r+0x30>
 800a310:	2209      	movs	r2, #9
 800a312:	602a      	str	r2, [r5, #0]
 800a314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a318:	f04f 30ff 	mov.w	r0, #4294967295
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	e033      	b.n	800a388 <__swsetup_r+0x98>
 800a320:	0758      	lsls	r0, r3, #29
 800a322:	d512      	bpl.n	800a34a <__swsetup_r+0x5a>
 800a324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a326:	b141      	cbz	r1, 800a33a <__swsetup_r+0x4a>
 800a328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a32c:	4299      	cmp	r1, r3
 800a32e:	d002      	beq.n	800a336 <__swsetup_r+0x46>
 800a330:	4628      	mov	r0, r5
 800a332:	f7ff faf3 	bl	800991c <_free_r>
 800a336:	2300      	movs	r3, #0
 800a338:	6363      	str	r3, [r4, #52]	@ 0x34
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	2300      	movs	r3, #0
 800a344:	6063      	str	r3, [r4, #4]
 800a346:	6923      	ldr	r3, [r4, #16]
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f043 0308 	orr.w	r3, r3, #8
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	b94b      	cbnz	r3, 800a36a <__swsetup_r+0x7a>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a35c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a360:	d003      	beq.n	800a36a <__swsetup_r+0x7a>
 800a362:	4621      	mov	r1, r4
 800a364:	4628      	mov	r0, r5
 800a366:	f000 f85c 	bl	800a422 <__smakebuf_r>
 800a36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36e:	f013 0201 	ands.w	r2, r3, #1
 800a372:	d00a      	beq.n	800a38a <__swsetup_r+0x9a>
 800a374:	2200      	movs	r2, #0
 800a376:	60a2      	str	r2, [r4, #8]
 800a378:	6962      	ldr	r2, [r4, #20]
 800a37a:	4252      	negs	r2, r2
 800a37c:	61a2      	str	r2, [r4, #24]
 800a37e:	6922      	ldr	r2, [r4, #16]
 800a380:	b942      	cbnz	r2, 800a394 <__swsetup_r+0xa4>
 800a382:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a386:	d1c5      	bne.n	800a314 <__swsetup_r+0x24>
 800a388:	bd38      	pop	{r3, r4, r5, pc}
 800a38a:	0799      	lsls	r1, r3, #30
 800a38c:	bf58      	it	pl
 800a38e:	6962      	ldrpl	r2, [r4, #20]
 800a390:	60a2      	str	r2, [r4, #8]
 800a392:	e7f4      	b.n	800a37e <__swsetup_r+0x8e>
 800a394:	2000      	movs	r0, #0
 800a396:	e7f7      	b.n	800a388 <__swsetup_r+0x98>
 800a398:	20000120 	.word	0x20000120

0800a39c <_sbrk_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	2300      	movs	r3, #0
 800a3a0:	4d05      	ldr	r5, [pc, #20]	@ (800a3b8 <_sbrk_r+0x1c>)
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	602b      	str	r3, [r5, #0]
 800a3a8:	f7f6 fa0c 	bl	80007c4 <_sbrk>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_sbrk_r+0x1a>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_sbrk_r+0x1a>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20000fcc 	.word	0x20000fcc

0800a3bc <memchr>:
 800a3bc:	b2c9      	uxtb	r1, r1
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4402      	add	r2, r0
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	d101      	bne.n	800a3ce <memchr+0x12>
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	e003      	b.n	800a3d6 <memchr+0x1a>
 800a3ce:	7804      	ldrb	r4, [r0, #0]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	428c      	cmp	r4, r1
 800a3d4:	d1f6      	bne.n	800a3c4 <memchr+0x8>
 800a3d6:	bd10      	pop	{r4, pc}

0800a3d8 <__swhatbuf_r>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	460c      	mov	r4, r1
 800a3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e0:	b096      	sub	sp, #88	@ 0x58
 800a3e2:	4615      	mov	r5, r2
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	461e      	mov	r6, r3
 800a3e8:	da0c      	bge.n	800a404 <__swhatbuf_r+0x2c>
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3f2:	bf14      	ite	ne
 800a3f4:	2340      	movne	r3, #64	@ 0x40
 800a3f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	6031      	str	r1, [r6, #0]
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	b016      	add	sp, #88	@ 0x58
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	466a      	mov	r2, sp
 800a406:	f000 f849 	bl	800a49c <_fstat_r>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	dbed      	blt.n	800a3ea <__swhatbuf_r+0x12>
 800a40e:	9901      	ldr	r1, [sp, #4]
 800a410:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a414:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a418:	4259      	negs	r1, r3
 800a41a:	4159      	adcs	r1, r3
 800a41c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a420:	e7eb      	b.n	800a3fa <__swhatbuf_r+0x22>

0800a422 <__smakebuf_r>:
 800a422:	898b      	ldrh	r3, [r1, #12]
 800a424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a426:	079d      	lsls	r5, r3, #30
 800a428:	4606      	mov	r6, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	d507      	bpl.n	800a43e <__smakebuf_r+0x1c>
 800a42e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	6123      	str	r3, [r4, #16]
 800a436:	2301      	movs	r3, #1
 800a438:	6163      	str	r3, [r4, #20]
 800a43a:	b003      	add	sp, #12
 800a43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a43e:	ab01      	add	r3, sp, #4
 800a440:	466a      	mov	r2, sp
 800a442:	f7ff ffc9 	bl	800a3d8 <__swhatbuf_r>
 800a446:	9f00      	ldr	r7, [sp, #0]
 800a448:	4605      	mov	r5, r0
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7ff fad1 	bl	80099f4 <_malloc_r>
 800a452:	b948      	cbnz	r0, 800a468 <__smakebuf_r+0x46>
 800a454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a458:	059a      	lsls	r2, r3, #22
 800a45a:	d4ee      	bmi.n	800a43a <__smakebuf_r+0x18>
 800a45c:	f023 0303 	bic.w	r3, r3, #3
 800a460:	f043 0302 	orr.w	r3, r3, #2
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	e7e2      	b.n	800a42e <__smakebuf_r+0xc>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	6020      	str	r0, [r4, #0]
 800a46c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	9b01      	ldr	r3, [sp, #4]
 800a474:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a478:	b15b      	cbz	r3, 800a492 <__smakebuf_r+0x70>
 800a47a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a47e:	4630      	mov	r0, r6
 800a480:	f000 f81e 	bl	800a4c0 <_isatty_r>
 800a484:	b128      	cbz	r0, 800a492 <__smakebuf_r+0x70>
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f023 0303 	bic.w	r3, r3, #3
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	431d      	orrs	r5, r3
 800a496:	81a5      	strh	r5, [r4, #12]
 800a498:	e7cf      	b.n	800a43a <__smakebuf_r+0x18>
	...

0800a49c <_fstat_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	2300      	movs	r3, #0
 800a4a0:	4d06      	ldr	r5, [pc, #24]	@ (800a4bc <_fstat_r+0x20>)
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	f7f6 f962 	bl	8000772 <_fstat>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	d102      	bne.n	800a4b8 <_fstat_r+0x1c>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	b103      	cbz	r3, 800a4b8 <_fstat_r+0x1c>
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000fcc 	.word	0x20000fcc

0800a4c0 <_isatty_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	4d05      	ldr	r5, [pc, #20]	@ (800a4dc <_isatty_r+0x1c>)
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f6 f961 	bl	8000792 <_isatty>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_isatty_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_isatty_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	20000fcc 	.word	0x20000fcc

0800a4e0 <_init>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr

0800a4ec <_fini>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr
