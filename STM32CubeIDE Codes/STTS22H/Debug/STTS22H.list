
STTS22H.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001559c  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000629  080157d8  080157d8  000167d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015e04  08015e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015e0c  08015e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015e10  08015e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000338  20000000  08015e14  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006fc  20000338  0801614c  00017338  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000a34  0801614c  00017a34  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00017338  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039a27  00000000  00000000  0001736e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000547e  00000000  00000000  00050d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e98  00000000  00000000  00056218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002429  00000000  00000000  000590b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d5bb  00000000  00000000  0005b4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031706  00000000  00000000  00098a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f5a1  00000000  00000000  000ca19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0024973b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000de40  00000000  00000000  00249780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  002575c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000338 	.word	0x20000338
 8000254:	00000000 	.word	0x00000000
 8000258:	080157bc 	.word	0x080157bc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000033c 	.word	0x2000033c
 8000274:	080157bc 	.word	0x080157bc

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001080:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001084:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d013      	beq.n	80010b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001090:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001094:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001098:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010a0:	e000      	b.n	80010a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f9      	beq.n	80010a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010ae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f007 fe49 	bl	8008d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f925 	bl	8001320 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize ICache */
  MX_ICACHE_Init();
 80010d6:	f000 fa44 	bl	8001562 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED_GREEN);
 80010da:	2003      	movs	r0, #3
 80010dc:	f006 fb12 	bl	8007704 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f006 fb0f 	bl	8007704 <BSP_LED_Init>
  /* RED is activated by default */
  BSP_LED_Off(LED_RED);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f006 fb1e 	bl	8007728 <BSP_LED_Off>

  /* Enable Button in Interrupt mode */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010ec:	2101      	movs	r1, #1
 80010ee:	2000      	movs	r0, #0
 80010f0:	f006 fc4a 	bl	8007988 <BSP_PB_Init>

  /* Init UART for printf */
  BSP_COM_Init(COM1);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f006 fd03 	bl	8007b00 <BSP_COM_Init>

  /* Init Mems Sensors */
  InitMemsSensors();
 80010fa:	f000 f82b 	bl	8001154 <InitMemsSensors>
  if (BSP_ENV_SENSOR_Init(STTS22H_0, ENV_TEMPERATURE) != BSP_ERROR_NONE)
 80010fe:	2101      	movs	r1, #1
 8001100:	2000      	movs	r0, #0
 8001102:	f007 f823 	bl	800814c <BSP_ENV_SENSOR_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <main+0x48>
  {
      Error_Handler(); // Handle init failure
 800110c:	f000 fa3c 	bl	8001588 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      float temperature = 0.0f;
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	607b      	str	r3, [r7, #4]

      if (BSP_ENV_SENSOR_GetValue(STTS22H_0, ENV_TEMPERATURE, &temperature) == BSP_ERROR_NONE)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	461a      	mov	r2, r3
 800111a:	2101      	movs	r1, #1
 800111c:	2000      	movs	r0, #0
 800111e:	f007 f909 	bl	8008334 <BSP_ENV_SENSOR_GetValue>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <main+0x74>
      {
          printf("Temperature: %.2f °C\r\n", temperature);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa10 	bl	8000550 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4805      	ldr	r0, [pc, #20]	@ (800114c <main+0x84>)
 8001136:	f010 fe6d 	bl	8011e14 <iprintf>
 800113a:	e002      	b.n	8001142 <main+0x7a>
      }
      else
      {
          printf("Error reading temperature\r\n");
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <main+0x88>)
 800113e:	f010 fed1 	bl	8011ee4 <puts>
      }

      HAL_Delay(1000); // Wait 1 second
 8001142:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001146:	f007 fed3 	bl	8008ef0 <HAL_Delay>
  {
 800114a:	e7e1      	b.n	8001110 <main+0x48>
 800114c:	080157d8 	.word	0x080157d8
 8001150:	080157f0 	.word	0x080157f0

08001154 <InitMemsSensors>:
* @brief  Init Mems Sensors
* @param  None
* @retval None
*/
static void InitMemsSensors(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001168:	4b61      	ldr	r3, [pc, #388]	@ (80012f0 <InitMemsSensors+0x19c>)
 800116a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800116e:	4a60      	ldr	r2, [pc, #384]	@ (80012f0 <InitMemsSensors+0x19c>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001174:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001178:	4b5d      	ldr	r3, [pc, #372]	@ (80012f0 <InitMemsSensors+0x19c>)
 800117a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800117e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level 5-> BSP_LSM6DSV16X_CS_PIN */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_5, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2120      	movs	r1, #32
 800118a:	485a      	ldr	r0, [pc, #360]	@ (80012f4 <InitMemsSensors+0x1a0>)
 800118c:	f009 fa18 	bl	800a5c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001190:	2320      	movs	r3, #32
 8001192:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4853      	ldr	r0, [pc, #332]	@ (80012f4 <InitMemsSensors+0x1a0>)
 80011a6:	f008 ff4d 	bl	800a044 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
#endif

  /* Magneto */
  if(BSP_MOTION_SENSOR_Init(LIS2MDL_0, MOTION_MAGNETO)==BSP_ERROR_NONE) {
 80011aa:	2104      	movs	r1, #4
 80011ac:	2000      	movs	r0, #0
 80011ae:	f007 fa4d 	bl	800864c <BSP_MOTION_SENSOR_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d11c      	bne.n	80011f2 <InitMemsSensors+0x9e>
    if(BSP_MOTION_SENSOR_SetOutputDataRate(LIS2MDL_0, MOTION_MAGNETO, LIS2MDL_MAG_ODR)==BSP_ERROR_NONE) {
 80011b8:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 80012f8 <InitMemsSensors+0x1a4>
 80011bc:	2104      	movs	r1, #4
 80011be:	2000      	movs	r0, #0
 80011c0:	f007 fb40 	bl	8008844 <BSP_MOTION_SENSOR_SetOutputDataRate>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <InitMemsSensors+0x96>
      if(BSP_MOTION_SENSOR_SetFullScale(LIS2MDL_0, MOTION_MAGNETO, LIS2MDL_MAG_FS)==BSP_ERROR_NONE) {
 80011ca:	2232      	movs	r2, #50	@ 0x32
 80011cc:	2104      	movs	r1, #4
 80011ce:	2000      	movs	r0, #0
 80011d0:	f007 fb7e 	bl	80088d0 <BSP_MOTION_SENSOR_SetFullScale>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <InitMemsSensors+0x8e>
        printf("LIS2MDL_0 OK\r\n");
 80011da:	4848      	ldr	r0, [pc, #288]	@ (80012fc <InitMemsSensors+0x1a8>)
 80011dc:	f010 fe82 	bl	8011ee4 <puts>
 80011e0:	e00a      	b.n	80011f8 <InitMemsSensors+0xa4>
      } else {
    	  printf("Error: LIS2MDL_0 KO\r\n");
 80011e2:	4847      	ldr	r0, [pc, #284]	@ (8001300 <InitMemsSensors+0x1ac>)
 80011e4:	f010 fe7e 	bl	8011ee4 <puts>
 80011e8:	e006      	b.n	80011f8 <InitMemsSensors+0xa4>
      }
    }else {
    	printf("Error: LIS2MDL_0 KO\r\n");
 80011ea:	4845      	ldr	r0, [pc, #276]	@ (8001300 <InitMemsSensors+0x1ac>)
 80011ec:	f010 fe7a 	bl	8011ee4 <puts>
 80011f0:	e002      	b.n	80011f8 <InitMemsSensors+0xa4>
    }
  } else {
	  printf("Error: LIS2MDL_0 KO\r\n");
 80011f2:	4843      	ldr	r0, [pc, #268]	@ (8001300 <InitMemsSensors+0x1ac>)
 80011f4:	f010 fe76 	bl	8011ee4 <puts>
  }

  /* Acc/Gyro */
  if(BSP_MOTION_SENSOR_Init(LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO)==BSP_ERROR_NONE) {
 80011f8:	2103      	movs	r1, #3
 80011fa:	2002      	movs	r0, #2
 80011fc:	f007 fa26 	bl	800864c <BSP_MOTION_SENSOR_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d136      	bne.n	8001274 <InitMemsSensors+0x120>
    if(BSP_MOTION_SENSOR_SetOutputDataRate(LSM6DSV16X_0, MOTION_ACCELERO, LSM6DSV16X_ACC_ODR)==BSP_ERROR_NONE) {
 8001206:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8001304 <InitMemsSensors+0x1b0>
 800120a:	2102      	movs	r1, #2
 800120c:	2002      	movs	r0, #2
 800120e:	f007 fb19 	bl	8008844 <BSP_MOTION_SENSOR_SetOutputDataRate>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d129      	bne.n	800126c <InitMemsSensors+0x118>
      if(BSP_MOTION_SENSOR_SetFullScale(LSM6DSV16X_0, MOTION_ACCELERO, LSM6DSV16X_ACC_FS)==BSP_ERROR_NONE) {
 8001218:	2204      	movs	r2, #4
 800121a:	2102      	movs	r1, #2
 800121c:	2002      	movs	r0, #2
 800121e:	f007 fb57 	bl	80088d0 <BSP_MOTION_SENSOR_SetFullScale>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d11d      	bne.n	8001264 <InitMemsSensors+0x110>
        if(BSP_MOTION_SENSOR_SetOutputDataRate(LSM6DSV16X_0, MOTION_GYRO, LSM6DSV16X_GYRO_ODR)==BSP_ERROR_NONE) {
 8001228:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8001304 <InitMemsSensors+0x1b0>
 800122c:	2101      	movs	r1, #1
 800122e:	2002      	movs	r0, #2
 8001230:	f007 fb08 	bl	8008844 <BSP_MOTION_SENSOR_SetOutputDataRate>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d110      	bne.n	800125c <InitMemsSensors+0x108>
          if(BSP_MOTION_SENSOR_SetFullScale(LSM6DSV16X_0, MOTION_GYRO, LSM6DSV16X_GYRO_FS)==BSP_ERROR_NONE) {
 800123a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800123e:	2101      	movs	r1, #1
 8001240:	2002      	movs	r0, #2
 8001242:	f007 fb45 	bl	80088d0 <BSP_MOTION_SENSOR_SetFullScale>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d103      	bne.n	8001254 <InitMemsSensors+0x100>
        	  printf("LSM6DSV16X_0 OK\r\n");
 800124c:	482e      	ldr	r0, [pc, #184]	@ (8001308 <InitMemsSensors+0x1b4>)
 800124e:	f010 fe49 	bl	8011ee4 <puts>
 8001252:	e012      	b.n	800127a <InitMemsSensors+0x126>
          } else {
        	  printf("Error: LSM6DSV16X_0 KO\r\n");
 8001254:	482d      	ldr	r0, [pc, #180]	@ (800130c <InitMemsSensors+0x1b8>)
 8001256:	f010 fe45 	bl	8011ee4 <puts>
 800125a:	e00e      	b.n	800127a <InitMemsSensors+0x126>
          }
        } else {
        	printf("Error: LSM6DSV16X_0 KO\r\n");
 800125c:	482b      	ldr	r0, [pc, #172]	@ (800130c <InitMemsSensors+0x1b8>)
 800125e:	f010 fe41 	bl	8011ee4 <puts>
 8001262:	e00a      	b.n	800127a <InitMemsSensors+0x126>
        }
      } else {
    	  printf("Error: LSM6DSV16X_0 KO\r\n");
 8001264:	4829      	ldr	r0, [pc, #164]	@ (800130c <InitMemsSensors+0x1b8>)
 8001266:	f010 fe3d 	bl	8011ee4 <puts>
 800126a:	e006      	b.n	800127a <InitMemsSensors+0x126>
      }
    } else {
    	printf("Error: LSM6DSV16X_0 KO\r\n");
 800126c:	4827      	ldr	r0, [pc, #156]	@ (800130c <InitMemsSensors+0x1b8>)
 800126e:	f010 fe39 	bl	8011ee4 <puts>
 8001272:	e002      	b.n	800127a <InitMemsSensors+0x126>
    }
  } else {
	  printf("Error: LSM6DSV16X_0 KO\r\n");
 8001274:	4825      	ldr	r0, [pc, #148]	@ (800130c <InitMemsSensors+0x1b8>)
 8001276:	f010 fe35 	bl	8011ee4 <puts>
  }

  /* Pressure */
  if(BSP_ENV_SENSOR_Init(LPS22DF_0, ENV_PRESSURE)==BSP_ERROR_NONE) {
 800127a:	2102      	movs	r1, #2
 800127c:	2001      	movs	r0, #1
 800127e:	f006 ff65 	bl	800814c <BSP_ENV_SENSOR_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d110      	bne.n	80012aa <InitMemsSensors+0x156>
    if(BSP_ENV_SENSOR_SetOutputDataRate(LPS22DF_0, ENV_PRESSURE, LPS22DF_ODR)==BSP_ERROR_NONE) {
 8001288:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800128c:	2102      	movs	r1, #2
 800128e:	2001      	movs	r0, #1
 8001290:	f007 f80c 	bl	80082ac <BSP_ENV_SENSOR_SetOutputDataRate>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <InitMemsSensors+0x14e>
    	printf("LPS22DF_0 OK\r\n");
 800129a:	481d      	ldr	r0, [pc, #116]	@ (8001310 <InitMemsSensors+0x1bc>)
 800129c:	f010 fe22 	bl	8011ee4 <puts>
 80012a0:	e006      	b.n	80012b0 <InitMemsSensors+0x15c>
    } else {
    	printf("Error: LPS22DF_0 KO\r\n");
 80012a2:	481c      	ldr	r0, [pc, #112]	@ (8001314 <InitMemsSensors+0x1c0>)
 80012a4:	f010 fe1e 	bl	8011ee4 <puts>
 80012a8:	e002      	b.n	80012b0 <InitMemsSensors+0x15c>
    }
  } else {
	  printf("Error: LPS22DF_0 KO\r\n");
 80012aa:	481a      	ldr	r0, [pc, #104]	@ (8001314 <InitMemsSensors+0x1c0>)
 80012ac:	f010 fe1a 	bl	8011ee4 <puts>
  }

  /* Temperature  */
  if(BSP_ENV_SENSOR_Init(STTS22H_0, ENV_TEMPERATURE)==BSP_ERROR_NONE) {
 80012b0:	2101      	movs	r1, #1
 80012b2:	2000      	movs	r0, #0
 80012b4:	f006 ff4a 	bl	800814c <BSP_ENV_SENSOR_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d110      	bne.n	80012e0 <InitMemsSensors+0x18c>
    if(BSP_ENV_SENSOR_SetOutputDataRate(STTS22H_0, ENV_TEMPERATURE, STTS22H_ODR)==BSP_ERROR_NONE) {
 80012be:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80012c2:	2101      	movs	r1, #1
 80012c4:	2000      	movs	r0, #0
 80012c6:	f006 fff1 	bl	80082ac <BSP_ENV_SENSOR_SetOutputDataRate>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d103      	bne.n	80012d8 <InitMemsSensors+0x184>
    	printf("STTS22H_0 OK\r\n");
 80012d0:	4811      	ldr	r0, [pc, #68]	@ (8001318 <InitMemsSensors+0x1c4>)
 80012d2:	f010 fe07 	bl	8011ee4 <puts>
    	printf("Error: STTS22H_0 KO\r\n");
    }
  } else {
	  printf("Error: STTS22H_0 KO\r\n");
  }
}
 80012d6:	e006      	b.n	80012e6 <InitMemsSensors+0x192>
    	printf("Error: STTS22H_0 KO\r\n");
 80012d8:	4810      	ldr	r0, [pc, #64]	@ (800131c <InitMemsSensors+0x1c8>)
 80012da:	f010 fe03 	bl	8011ee4 <puts>
}
 80012de:	e002      	b.n	80012e6 <InitMemsSensors+0x192>
	  printf("Error: STTS22H_0 KO\r\n");
 80012e0:	480e      	ldr	r0, [pc, #56]	@ (800131c <InitMemsSensors+0x1c8>)
 80012e2:	f010 fdff 	bl	8011ee4 <puts>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	46020c00 	.word	0x46020c00
 80012f4:	42022000 	.word	0x42022000
 80012f8:	42c80000 	.word	0x42c80000
 80012fc:	0801580c 	.word	0x0801580c
 8001300:	0801581c 	.word	0x0801581c
 8001304:	42f00000 	.word	0x42f00000
 8001308:	08015834 	.word	0x08015834
 800130c:	08015848 	.word	0x08015848
 8001310:	08015860 	.word	0x08015860
 8001314:	08015870 	.word	0x08015870
 8001318:	08015888 	.word	0x08015888
 800131c:	08015898 	.word	0x08015898

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0d0      	sub	sp, #320	@ 0x140
 8001324:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800132a:	2260      	movs	r2, #96	@ 0x60
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f010 feda 	bl	80120e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001346:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800134a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800134e:	4618      	mov	r0, r3
 8001350:	23c8      	movs	r3, #200	@ 0xc8
 8001352:	461a      	mov	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	f010 fec7 	bl	80120e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800135a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800135e:	f00a fe25 	bl	800bfac <HAL_PWREx_ControlVoltageScaling>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8001368:	f000 f90e 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800136c:	232b      	movs	r3, #43	@ 0x2b
 800136e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800137e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001382:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001386:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138a:	2310      	movs	r3, #16
 800138c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001390:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001394:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013b6:	230a      	movs	r3, #10
 80013b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_OscInitStruct.PLL.PLLP = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  RCC_OscInitStruct.PLL.PLLR = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80013ce:	230c      	movs	r3, #12
 80013d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80013de:	4618      	mov	r0, r3
 80013e0:	f00a fe90 	bl	800c104 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xce>
  {
	  Error_Handler();
 80013ea:	f000 f8cd 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	231f      	movs	r3, #31
 80013f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001412:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001416:	2104      	movs	r1, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f00b fd4f 	bl	800cebc <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x108>
  {
	  Error_Handler();
 8001424:	f000 f8b0 	bl	8001588 <Error_Handler>
  }

    /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_MDF1|RCC_PERIPHCLK_ADF1
 8001428:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800142c:	f5a3 71a0 	sub.w	r1, r3, #320	@ 0x140
 8001430:	f44f 3260 	mov.w	r2, #229376	@ 0x38000
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c1 2300 	strd	r2, r3, [r1]
                              |RCC_PERIPHCLK_ADCDAC;
  PeriphClkInit.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_PLL3;
 800143c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001440:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001444:	2202      	movs	r2, #2
 8001446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_PLL3;
 800144a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800144e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001452:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 800145a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800145e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001462:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001466:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 800146a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800146e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001472:	2203      	movs	r2, #3
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit.PLL3.PLL3M = 2;
 8001476:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800147a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800147e:	2202      	movs	r2, #2
 8001480:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit.PLL3.PLL3N = 48;
 8001482:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001486:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800148a:	2230      	movs	r2, #48	@ 0x30
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit.PLL3.PLL3P = 2;
 800148e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001492:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001496:	2202      	movs	r2, #2
 8001498:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit.PLL3.PLL3Q = 25;
 800149a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800149e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014a2:	2219      	movs	r2, #25
 80014a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  PeriphClkInit.PLL3.PLL3R = 2;
 80014a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014ae:	2202      	movs	r2, #2
 80014b0:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_1;
 80014b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014b6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014ba:	220c      	movs	r2, #12
 80014bc:	645a      	str	r2, [r3, #68]	@ 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 80014be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014c2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014c6:	2200      	movs	r2, #0
 80014c8:	649a      	str	r2, [r3, #72]	@ 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVQ;
 80014ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014ce:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80014d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014e0:	2203      	movs	r2, #3
 80014e2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.PLL2.PLL2M = 2;
 80014e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014ec:	2202      	movs	r2, #2
 80014ee:	60da      	str	r2, [r3, #12]
  PeriphClkInit.PLL2.PLL2N = 48;
 80014f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014f8:	2230      	movs	r2, #48	@ 0x30
 80014fa:	611a      	str	r2, [r3, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80014fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001500:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001504:	2202      	movs	r2, #2
 8001506:	615a      	str	r2, [r3, #20]
  PeriphClkInit.PLL2.PLL2Q = 7;
 8001508:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800150c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001510:	2207      	movs	r2, #7
 8001512:	619a      	str	r2, [r3, #24]
  PeriphClkInit.PLL2.PLL2R = 25;
 8001514:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001518:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800151c:	2219      	movs	r2, #25
 800151e:	61da      	str	r2, [r3, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001520:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001524:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001528:	220c      	movs	r2, #12
 800152a:	621a      	str	r2, [r3, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 800152c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001530:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8001538:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800153c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001540:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4618      	mov	r0, r3
 800154a:	f00c f887 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x238>
  {
	  Error_Handler();
 8001554:	f000 f818 	bl	8001588 <Error_Handler>
  }
}
 8001558:	bf00      	nop
 800155a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001566:	2000      	movs	r0, #0
 8001568:	f00a fcf0 	bl	800bf4c <HAL_ICACHE_ConfigAssociativityMode>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ICACHE_Init+0x14>
  {
	  Error_Handler();
 8001572:	f000 f809 	bl	8001588 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001576:	f00a fd09 	bl	800bf8c <HAL_ICACHE_Enable>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ICACHE_Init+0x22>
  {
	  Error_Handler();
 8001580:	f000 f802 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <Error_Handler>:
  * @param char *File Name
  * @param int32_t Line number
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <Error_Handler+0x8>

08001594 <_write>:
  return FinishGood;
}


int _write(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e009      	b.n	80015ba <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	60ba      	str	r2, [r7, #8]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd62 	bl	8001078 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbf1      	blt.n	80015a6 <_write+0x12>

  }
  return len;
 80015c2:	687b      	ldr	r3, [r7, #4]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <HAL_MspInit+0x34>)
 80015d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d8:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <HAL_MspInit+0x34>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <HAL_MspInit+0x34>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 80015f0:	f00a fd68 	bl	800c0c4 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 80015f4:	f00a fd76 	bl	800c0e4 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	46020c00 	.word	0x46020c00

08001604 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b0c2      	sub	sp, #264	@ 0x108
 8001608:	af00      	add	r7, sp, #0
 800160a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800160e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001612:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001628:	22c8      	movs	r2, #200	@ 0xc8
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f010 fd5b 	bl	80120e8 <memset>
  if(hi2c->Instance==I2C1)
 8001632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4aa8      	ldr	r2, [pc, #672]	@ (80018e0 <HAL_I2C_MspInit+0x2dc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f040 80eb 	bne.w	800181c <HAL_I2C_MspInit+0x218>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001646:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001658:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165c:	4618      	mov	r0, r3
 800165e:	f00b fffd 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_I2C_MspInit+0x68>
    {
      Error_Handler();
 8001668:	f7ff ff8e 	bl	8001588 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b9d      	ldr	r3, [pc, #628]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 800166e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001672:	4a9c      	ldr	r2, [pc, #624]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800167c:	4b99      	ldr	r3, [pc, #612]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 800167e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800168a:	23c0      	movs	r3, #192	@ 0xc0
 800168c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001690:	2312      	movs	r3, #18
 8001692:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a2:	2304      	movs	r3, #4
 80016a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80016ac:	4619      	mov	r1, r3
 80016ae:	488e      	ldr	r0, [pc, #568]	@ (80018e8 <HAL_I2C_MspInit+0x2e4>)
 80016b0:	f008 fcc8 	bl	800a044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b4:	4b8b      	ldr	r3, [pc, #556]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 80016b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016ba:	4a8a      	ldr	r2, [pc, #552]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 80016bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016c4:	4b87      	ldr	r3, [pc, #540]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 80016c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	6a3b      	ldr	r3, [r7, #32]

    /* I2C1 DMA Init */
    /* GPDMA1_REQUEST_I2C1_TX Init */
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80016d2:	4b86      	ldr	r3, [pc, #536]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 80016d4:	4a86      	ldr	r2, [pc, #536]	@ (80018f0 <HAL_I2C_MspInit+0x2ec>)
 80016d6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C1_TX;
 80016d8:	4b84      	ldr	r3, [pc, #528]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 80016da:	220d      	movs	r2, #13
 80016dc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80016de:	4b83      	ldr	r3, [pc, #524]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e4:	4b81      	ldr	r3, [pc, #516]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ea:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 80016ec:	4b7f      	ldr	r3, [pc, #508]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 80016ee:	2208      	movs	r2, #8
 80016f0:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 80016f2:	4b7e      	ldr	r3, [pc, #504]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80016f8:	4b7c      	ldr	r3, [pc, #496]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80016fe:	4b7b      	ldr	r3, [pc, #492]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001704:	4b79      	ldr	r3, [pc, #484]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 800170a:	4b78      	ldr	r3, [pc, #480]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 800170c:	2201      	movs	r2, #1
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001710:	4b76      	ldr	r3, [pc, #472]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 8001712:	2201      	movs	r2, #1
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001716:	4b75      	ldr	r3, [pc, #468]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800171c:	4b73      	ldr	r3, [pc, #460]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 800171e:	2200      	movs	r2, #0
 8001720:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001722:	4b72      	ldr	r3, [pc, #456]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 8001724:	2200      	movs	r2, #0
 8001726:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001728:	4870      	ldr	r0, [pc, #448]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 800172a:	f007 fdcb 	bl	80092c4 <HAL_DMA_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_I2C_MspInit+0x134>
    {
      Error_Handler();
 8001734:	f7ff ff28 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 8001738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800173c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6a      	ldr	r2, [pc, #424]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38
 8001746:	4a69      	ldr	r2, [pc, #420]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 8001748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800174c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001754:	2110      	movs	r1, #16
 8001756:	4865      	ldr	r0, [pc, #404]	@ (80018ec <HAL_I2C_MspInit+0x2e8>)
 8001758:	f008 f968 	bl	8009a2c <HAL_DMA_ConfigChannelAttributes>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_MspInit+0x162>
    {
      Error_Handler();
 8001762:	f7ff ff11 	bl	8001588 <Error_Handler>
    }

    /* GPDMA1_REQUEST_I2C1_RX Init */
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001766:	4b63      	ldr	r3, [pc, #396]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 8001768:	4a63      	ldr	r2, [pc, #396]	@ (80018f8 <HAL_I2C_MspInit+0x2f4>)
 800176a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C1_RX;
 800176c:	4b61      	ldr	r3, [pc, #388]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 800176e:	220c      	movs	r2, #12
 8001770:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001772:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001778:	4b5e      	ldr	r3, [pc, #376]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800177e:	4b5d      	ldr	r3, [pc, #372]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001784:	4b5b      	ldr	r3, [pc, #364]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 8001786:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800178a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800178c:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001792:	4b58      	ldr	r3, [pc, #352]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001798:	4b56      	ldr	r3, [pc, #344]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 800179e:	4b55      	ldr	r3, [pc, #340]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80017a4:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80017aa:	4b52      	ldr	r3, [pc, #328]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017b0:	4b50      	ldr	r3, [pc, #320]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80017b6:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80017bc:	484d      	ldr	r0, [pc, #308]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017be:	f007 fd81 	bl	80092c4 <HAL_DMA_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2C_MspInit+0x1c8>
    {
      Error_Handler();
 80017c8:	f7ff fede 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 80017cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80017d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a47      	ldr	r2, [pc, #284]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017da:	4a46      	ldr	r2, [pc, #280]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80017e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80017e8:	2110      	movs	r1, #16
 80017ea:	4842      	ldr	r0, [pc, #264]	@ (80018f4 <HAL_I2C_MspInit+0x2f0>)
 80017ec:	f008 f91e 	bl	8009a2c <HAL_DMA_ConfigChannelAttributes>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_MspInit+0x1f6>
    {
      Error_Handler();
 80017f6:	f7ff fec7 	bl	8001588 <Error_Handler>
    }

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2037      	movs	r0, #55	@ 0x37
 8001800:	f007 fc76 	bl	80090f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001804:	2037      	movs	r0, #55	@ 0x37
 8001806:	f007 fc8d 	bl	8009124 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2038      	movs	r0, #56	@ 0x38
 8001810:	f007 fc6e 	bl	80090f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001814:	2038      	movs	r0, #56	@ 0x38
 8001816:	f007 fc85 	bl	8009124 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 800181a:	e12a      	b.n	8001a72 <HAL_I2C_MspInit+0x46e>
  else if(hi2c->Instance==I2C2)
 800181c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a34      	ldr	r2, [pc, #208]	@ (80018fc <HAL_I2C_MspInit+0x2f8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d168      	bne.n	8001900 <HAL_I2C_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800182e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001844:	4618      	mov	r0, r3
 8001846:	f00b ff09 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_MspInit+0x250>
      Error_Handler();
 8001850:	f7ff fe9a 	bl	8001588 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 8001856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185a:	4a22      	ldr	r2, [pc, #136]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 8001866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001872:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001876:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187a:	2312      	movs	r3, #18
 800187c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800188c:	2304      	movs	r3, #4
 800188e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001896:	4619      	mov	r1, r3
 8001898:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <HAL_I2C_MspInit+0x2e4>)
 800189a:	f008 fbd3 	bl	800a044 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 80018a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018a4:	4a0f      	ldr	r2, [pc, #60]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 80018a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <HAL_I2C_MspInit+0x2e0>)
 80018b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2039      	movs	r0, #57	@ 0x39
 80018c2:	f007 fc15 	bl	80090f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80018c6:	2039      	movs	r0, #57	@ 0x39
 80018c8:	f007 fc2c 	bl	8009124 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	203a      	movs	r0, #58	@ 0x3a
 80018d2:	f007 fc0d 	bl	80090f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80018d6:	203a      	movs	r0, #58	@ 0x3a
 80018d8:	f007 fc24 	bl	8009124 <HAL_NVIC_EnableIRQ>
}
 80018dc:	e0c9      	b.n	8001a72 <HAL_I2C_MspInit+0x46e>
 80018de:	bf00      	nop
 80018e0:	40005400 	.word	0x40005400
 80018e4:	46020c00 	.word	0x46020c00
 80018e8:	42020400 	.word	0x42020400
 80018ec:	2000066c 	.word	0x2000066c
 80018f0:	400201d0 	.word	0x400201d0
 80018f4:	200006e4 	.word	0x200006e4
 80018f8:	40020150 	.word	0x40020150
 80018fc:	40005800 	.word	0x40005800
  else if(hi2c->Instance==I2C3)
 8001900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a5b      	ldr	r2, [pc, #364]	@ (8001a7c <HAL_I2C_MspInit+0x478>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d147      	bne.n	80019a2 <HAL_I2C_MspInit+0x39e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001912:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001924:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001928:	4618      	mov	r0, r3
 800192a:	f00b fe97 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_MspInit+0x334>
      Error_Handler();
 8001934:	f7ff fe28 	bl	8001588 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001938:	4b51      	ldr	r3, [pc, #324]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 800193a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193e:	4a50      	ldr	r2, [pc, #320]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 8001940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001944:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001948:	4b4d      	ldr	r3, [pc, #308]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 800194a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001956:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800195a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195e:	2312      	movs	r3, #18
 8001960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001970:	2304      	movs	r3, #4
 8001972:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001976:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800197a:	4619      	mov	r1, r3
 800197c:	4841      	ldr	r0, [pc, #260]	@ (8001a84 <HAL_I2C_MspInit+0x480>)
 800197e:	f008 fb61 	bl	800a044 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001982:	4b3f      	ldr	r3, [pc, #252]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 8001984:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001988:	4a3d      	ldr	r2, [pc, #244]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 800198a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 8001994:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
}
 80019a0:	e067      	b.n	8001a72 <HAL_I2C_MspInit+0x46e>
  else if(hi2c->Instance==I2C4)
 80019a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80019a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a36      	ldr	r2, [pc, #216]	@ (8001a88 <HAL_I2C_MspInit+0x484>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d15e      	bne.n	8001a72 <HAL_I2C_MspInit+0x46e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80019b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00b fe46 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_MspInit+0x3d6>
      Error_Handler();
 80019d6:	f7ff fdd7 	bl	8001588 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019da:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 80019dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019e0:	4a27      	ldr	r2, [pc, #156]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019ea:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 80019ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a00:	2312      	movs	r3, #18
 8001a02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a12:	2304      	movs	r3, #4
 8001a14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a18:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481b      	ldr	r0, [pc, #108]	@ (8001a8c <HAL_I2C_MspInit+0x488>)
 8001a20:	f008 fb10 	bl	800a044 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 8001a26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a2a:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_I2C_MspInit+0x47c>)
 8001a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a3a:	f003 0202 	and.w	r2, r3, #2
 8001a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a42:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a50:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2065      	movs	r0, #101	@ 0x65
 8001a58:	f007 fb4a 	bl	80090f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001a5c:	2065      	movs	r0, #101	@ 0x65
 8001a5e:	f007 fb61 	bl	8009124 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2064      	movs	r0, #100	@ 0x64
 8001a68:	f007 fb42 	bl	80090f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001a6c:	2064      	movs	r0, #100	@ 0x64
 8001a6e:	f007 fb59 	bl	8009124 <HAL_NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	46002800 	.word	0x46002800
 8001a80:	46020c00 	.word	0x46020c00
 8001a84:	42021800 	.word	0x42021800
 8001a88:	40008400 	.word	0x40008400
 8001a8c:	42020c00 	.word	0x42020c00

08001a90 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b90 <HAL_I2C_MspDeInit+0x100>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d120      	bne.n	8001ae4 <HAL_I2C_MspDeInit+0x54>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001b94 <HAL_I2C_MspDeInit+0x104>)
 8001aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001aa8:	4a3a      	ldr	r2, [pc, #232]	@ (8001b94 <HAL_I2C_MspDeInit+0x104>)
 8001aaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001aae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001ab2:	2140      	movs	r1, #64	@ 0x40
 8001ab4:	4838      	ldr	r0, [pc, #224]	@ (8001b98 <HAL_I2C_MspDeInit+0x108>)
 8001ab6:	f008 fca5 	bl	800a404 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	4836      	ldr	r0, [pc, #216]	@ (8001b98 <HAL_I2C_MspDeInit+0x108>)
 8001abe:	f008 fca1 	bl	800a404 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f007 fd3e 	bl	8009548 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f007 fd39 	bl	8009548 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001ad6:	2037      	movs	r0, #55	@ 0x37
 8001ad8:	f007 fb32 	bl	8009140 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001adc:	2038      	movs	r0, #56	@ 0x38
 8001ade:	f007 fb2f 	bl	8009140 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001ae2:	e051      	b.n	8001b88 <HAL_I2C_MspDeInit+0xf8>
  else if(hi2c->Instance==I2C2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b9c <HAL_I2C_MspDeInit+0x10c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d118      	bne.n	8001b20 <HAL_I2C_MspDeInit+0x90>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001aee:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <HAL_I2C_MspDeInit+0x104>)
 8001af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001af4:	4a27      	ldr	r2, [pc, #156]	@ (8001b94 <HAL_I2C_MspDeInit+0x104>)
 8001af6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001afa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 8001afe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b02:	4825      	ldr	r0, [pc, #148]	@ (8001b98 <HAL_I2C_MspDeInit+0x108>)
 8001b04:	f008 fc7e 	bl	800a404 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 8001b08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b0c:	4822      	ldr	r0, [pc, #136]	@ (8001b98 <HAL_I2C_MspDeInit+0x108>)
 8001b0e:	f008 fc79 	bl	800a404 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8001b12:	2039      	movs	r0, #57	@ 0x39
 8001b14:	f007 fb14 	bl	8009140 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8001b18:	203a      	movs	r0, #58	@ 0x3a
 8001b1a:	f007 fb11 	bl	8009140 <HAL_NVIC_DisableIRQ>
}
 8001b1e:	e033      	b.n	8001b88 <HAL_I2C_MspDeInit+0xf8>
  else if(hi2c->Instance==I2C3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba0 <HAL_I2C_MspDeInit+0x110>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d111      	bne.n	8001b4e <HAL_I2C_MspDeInit+0xbe>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <HAL_I2C_MspDeInit+0x104>)
 8001b2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001b30:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_I2C_MspDeInit+0x104>)
 8001b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b36:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_7);
 8001b3a:	2180      	movs	r1, #128	@ 0x80
 8001b3c:	4819      	ldr	r0, [pc, #100]	@ (8001ba4 <HAL_I2C_MspDeInit+0x114>)
 8001b3e:	f008 fc61 	bl	800a404 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_8);
 8001b42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b46:	4817      	ldr	r0, [pc, #92]	@ (8001ba4 <HAL_I2C_MspDeInit+0x114>)
 8001b48:	f008 fc5c 	bl	800a404 <HAL_GPIO_DeInit>
}
 8001b4c:	e01c      	b.n	8001b88 <HAL_I2C_MspDeInit+0xf8>
  else if(hi2c->Instance==I2C4)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a15      	ldr	r2, [pc, #84]	@ (8001ba8 <HAL_I2C_MspDeInit+0x118>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d117      	bne.n	8001b88 <HAL_I2C_MspDeInit+0xf8>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_I2C_MspDeInit+0x104>)
 8001b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <HAL_I2C_MspDeInit+0x104>)
 8001b60:	f023 0302 	bic.w	r3, r3, #2
 8001b64:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001b68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b6c:	480f      	ldr	r0, [pc, #60]	@ (8001bac <HAL_I2C_MspDeInit+0x11c>)
 8001b6e:	f008 fc49 	bl	800a404 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8001b72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b76:	480d      	ldr	r0, [pc, #52]	@ (8001bac <HAL_I2C_MspDeInit+0x11c>)
 8001b78:	f008 fc44 	bl	800a404 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8001b7c:	2065      	movs	r0, #101	@ 0x65
 8001b7e:	f007 fadf 	bl	8009140 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 8001b82:	2064      	movs	r0, #100	@ 0x64
 8001b84:	f007 fadc 	bl	8009140 <HAL_NVIC_DisableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40005400 	.word	0x40005400
 8001b94:	46020c00 	.word	0x46020c00
 8001b98:	42020400 	.word	0x42020400
 8001b9c:	40005800 	.word	0x40005800
 8001ba0:	46002800 	.word	0x46002800
 8001ba4:	42021800 	.word	0x42021800
 8001ba8:	40008400 	.word	0x40008400
 8001bac:	42020c00 	.word	0x42020c00

08001bb0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0be      	sub	sp, #248	@ 0xf8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	22c8      	movs	r2, #200	@ 0xc8
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f010 fa89 	bl	80120e8 <memset>
  if(huart->Instance==UART4)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a4b      	ldr	r2, [pc, #300]	@ (8001d08 <HAL_UART_MspInit+0x158>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d145      	bne.n	8001c6c <HAL_UART_MspInit+0xbc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001be0:	f04f 0208 	mov.w	r2, #8
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00b fd31 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001c00:	f7ff fcc2 	bl	8001588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c04:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c0a:	4a40      	ldr	r2, [pc, #256]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001c0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c10:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c14:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b3a      	ldr	r3, [pc, #232]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c28:	4a38      	ldr	r2, [pc, #224]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c32:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c40:	2303      	movs	r3, #3
 8001c42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c62:	4619      	mov	r1, r3
 8001c64:	482a      	ldr	r0, [pc, #168]	@ (8001d10 <HAL_UART_MspInit+0x160>)
 8001c66:	f008 f9ed 	bl	800a044 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c6a:	e049      	b.n	8001d00 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <HAL_UART_MspInit+0x164>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d144      	bne.n	8001d00 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c76:	f04f 0202 	mov.w	r2, #2
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00b fce6 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_UART_MspInit+0xea>
      Error_Handler();
 8001c96:	f7ff fc77 	bl	8001588 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cbe:	4a13      	ldr	r2, [pc, #76]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cc8:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <HAL_UART_MspInit+0x15c>)
 8001cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001cd6:	2360      	movs	r3, #96	@ 0x60
 8001cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4807      	ldr	r0, [pc, #28]	@ (8001d18 <HAL_UART_MspInit+0x168>)
 8001cfc:	f008 f9a2 	bl	800a044 <HAL_GPIO_Init>
}
 8001d00:	bf00      	nop
 8001d02:	37f8      	adds	r7, #248	@ 0xf8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40004c00 	.word	0x40004c00
 8001d0c:	46020c00 	.word	0x46020c00
 8001d10:	42020000 	.word	0x42020000
 8001d14:	40004400 	.word	0x40004400
 8001d18:	42020c00 	.word	0x42020c00

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <NMI_Handler+0x4>

08001d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <MemManage_Handler+0x4>

08001d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d72:	f007 f89d 	bl	8008eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f008 fc36 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f008 fc2f 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8001d9a:	2004      	movs	r0, #4
 8001d9c:	f008 fc28 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WC_INTB_Pin);
 8001da8:	2008      	movs	r0, #8
 8001daa:	f008 fc21 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8001db6:	2010      	movs	r0, #16
 8001db8:	f008 fc1a 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_Pin);
 8001dc4:	2020      	movs	r0, #32
 8001dc6:	f008 fc13 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 8001dd2:	2040      	movs	r0, #64	@ 0x40
 8001dd4:	f008 fc0c 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PRESS_INT_Pin);
 8001de0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001de4:	f008 fc04 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001df0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001df4:	f008 fbfc 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8001e00:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e04:	f008 fbf4 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 8001e10:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001e14:	f008 fbec 	bl	800a5f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */

  /* USER CODE END EXTI15_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001e22:	f007 fc94 	bl	800974e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200005f4 	.word	0x200005f4

08001e30 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001e36:	f007 fc8a 	bl	800974e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000057c 	.word	0x2000057c

08001e44 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001e4a:	f007 fc80 	bl	800974e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200006e4 	.word	0x200006e4

08001e58 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <GPDMA1_Channel3_IRQHandler+0x10>)
 8001e5e:	f007 fc76 	bl	800974e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000066c 	.word	0x2000066c

08001e6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <I2C1_EV_IRQHandler+0x10>)
 8001e72:	f008 fef1 	bl	800ac58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000524 	.word	0x20000524

08001e80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <I2C1_ER_IRQHandler+0x10>)
 8001e86:	f008 ff01 	bl	800ac8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000524 	.word	0x20000524

08001e94 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <I2C2_EV_IRQHandler+0x10>)
 8001e9a:	f008 fedd 	bl	800ac58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200003ec 	.word	0x200003ec

08001ea8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <I2C2_ER_IRQHandler+0x10>)
 8001eae:	f008 feed 	bl	800ac8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200003ec 	.word	0x200003ec

08001ebc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ec0:	4802      	ldr	r0, [pc, #8]	@ (8001ecc <SPI2_IRQHandler+0x10>)
 8001ec2:	f00e f8ab 	bl	801001c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000494 	.word	0x20000494

08001ed0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 Event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <I2C4_EV_IRQHandler+0x10>)
 8001ed6:	f008 febf 	bl	800ac58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000440 	.word	0x20000440

08001ee4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 Error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <I2C4_ER_IRQHandler+0x10>)
 8001eea:	f008 fecf 	bl	800ac8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000440 	.word	0x20000440

08001ef8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_kill>:

int _kill(int pid, int sig)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f12:	f010 f93b 	bl	801218c <__errno>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2216      	movs	r2, #22
 8001f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_exit>:

void _exit (int status)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffe7 	bl	8001f08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f3a:	bf00      	nop
 8001f3c:	e7fd      	b.n	8001f3a <_exit+0x12>

08001f3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e00a      	b.n	8001f66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f50:	f3af 8000 	nop.w
 8001f54:	4601      	mov	r1, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	60ba      	str	r2, [r7, #8]
 8001f5c:	b2ca      	uxtb	r2, r1
 8001f5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbf0      	blt.n	8001f50 <_read+0x12>
  }

  return len;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_isatty>:

int _isatty(int file)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f010 f8bc 	bl	801218c <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200c0000 	.word	0x200c0000
 8002040:	00000400 	.word	0x00000400
 8002044:	20000354 	.word	0x20000354
 8002048:	20000a38 	.word	0x20000a38

0800204c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002050:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <SystemInit+0x68>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	4a17      	ldr	r2, [pc, #92]	@ (80020b4 <SystemInit+0x68>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <SystemInit+0x6c>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <SystemInit+0x6c>)
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <SystemInit+0x6c>)
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <SystemInit+0x6c>)
 8002074:	2200      	movs	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <SystemInit+0x6c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0e      	ldr	r2, [pc, #56]	@ (80020b8 <SystemInit+0x6c>)
 800207e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002082:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002086:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <SystemInit+0x6c>)
 800208a:	2200      	movs	r2, #0
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <SystemInit+0x6c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <SystemInit+0x6c>)
 8002094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002098:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <SystemInit+0x6c>)
 800209c:	2200      	movs	r2, #0
 800209e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SystemInit+0x68>)
 80020a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020a6:	609a      	str	r2, [r3, #8]
  #endif
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00
 80020b8:	46020c00 	.word	0x46020c00

080020bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020c0:	f7ff ffc4 	bl	800204c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020c6:	e003      	b.n	80020d0 <LoopCopyDataInit>

080020c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ce:	3104      	adds	r1, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020d0:	480a      	ldr	r0, [pc, #40]	@ (80020fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020d8:	d3f6      	bcc.n	80020c8 <CopyDataInit>
	ldr	r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020dc:	e002      	b.n	80020e4 <LoopFillZerobss>

080020de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020e0:	f842 3b04 	str.w	r3, [r2], #4

080020e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <LoopForever+0x16>)
	cmp	r2, r3
 80020e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020e8:	d3f9      	bcc.n	80020de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ea:	f010 f855 	bl	8012198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ee:	f7fe ffeb 	bl	80010c8 <main>

080020f2 <LoopForever>:

LoopForever:
    b LoopForever
 80020f2:	e7fe      	b.n	80020f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80020f4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80020f8:	08015e14 	.word	0x08015e14
	ldr	r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002100:	20000338 	.word	0x20000338
	ldr	r2, =_sbss
 8002104:	20000338 	.word	0x20000338
	ldr	r3, = _ebss
 8002108:	20000a34 	.word	0x20000a34

0800210c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC1_IRQHandler>
	...

08002110 <LIS2DU12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_RegisterBusIO(LIS2DU12_Object_t *pObj, LIS2DU12_IO_t *pIO)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DU12_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d103      	bne.n	800212c <LIS2DU12_RegisterBusIO+0x1c>
  {
    ret = LIS2DU12_ERROR;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e051      	b.n	80021d0 <LIS2DU12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	7b1a      	ldrb	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <LIS2DU12_RegisterBusIO+0xcc>)
 8002168:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <LIS2DU12_RegisterBusIO+0xd0>)
 800216e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	69da      	ldr	r2, [r3, #28]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <LIS2DU12_RegisterBusIO+0x7e>
    {
      ret = LIS2DU12_ERROR;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e020      	b.n	80021d0 <LIS2DU12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DU12_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4798      	blx	r3
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <LIS2DU12_RegisterBusIO+0x92>
    {
      ret = LIS2DU12_ERROR;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e016      	b.n	80021d0 <LIS2DU12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DU12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d112      	bne.n	80021d0 <LIS2DU12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <LIS2DU12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 80021b4:	2350      	movs	r3, #80	@ 0x50
 80021b6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DU12_Write_Reg(pObj, LIS2DU12_CTRL1, data) != LIS2DU12_OK)
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	461a      	mov	r2, r3
 80021bc:	2110      	movs	r1, #16
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fb1b 	bl	80027fa <LIS2DU12_Write_Reg>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <LIS2DU12_RegisterBusIO+0xc0>
          {
            ret = LIS2DU12_ERROR;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80021d0:	68fb      	ldr	r3, [r7, #12]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	08002b61 	.word	0x08002b61
 80021e0:	08002b97 	.word	0x08002b97

080021e4 <LIS2DU12_Init>:
  * @brief  Initialize the LIS2DU12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_Init(LIS2DU12_Object_t *pObj)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LIS2DU12_I3C_BUS)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d00b      	beq.n	800220c <LIS2DU12_Init+0x28>
  {
    /* Disable I3C */
    if (lis2du12_bus_mode_set(&(pObj->Ctx), LIS2DU12_I3C_DISABLE) != LIS2DU12_OK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3320      	adds	r3, #32
 80021f8:	2101      	movs	r1, #1
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fdbd 	bl	8002d7a <lis2du12_bus_mode_set>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <LIS2DU12_Init+0x28>
    {
      return LIS2DU12_ERROR;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e040      	b.n	800228e <LIS2DU12_Init+0xaa>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2du12_init_set(&(pObj->Ctx), LIS2DU12_DRV_RDY) != LIS2DU12_OK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3320      	adds	r3, #32
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fdff 	bl	8002e16 <lis2du12_init_set>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <LIS2DU12_Init+0x40>
  {
    return LIS2DU12_ERROR;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	e034      	b.n	800228e <LIS2DU12_Init+0xaa>
  }

  /* FIFO mode selection */
  lis2du12_fifo_md_t fifo_mode =
 8002224:	2300      	movs	r3, #0
 8002226:	733b      	strb	r3, [r7, #12]
 8002228:	2301      	movs	r3, #1
 800222a:	737b      	strb	r3, [r7, #13]
 800222c:	2300      	movs	r3, #0
 800222e:	73bb      	strb	r3, [r7, #14]
    .operation = LIS2DU12_BYPASS,
    .store     = LIS2DU12_16_BIT,
    .watermark = 0,
  };

  if (lis2du12_fifo_mode_set(&(pObj->Ctx), &fifo_mode) != LIS2DU12_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3320      	adds	r3, #32
 8002234:	f107 020c 	add.w	r2, r7, #12
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f001 f820 	bl	8003280 <lis2du12_fifo_mode_set>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <LIS2DU12_Init+0x68>
  {
    return LIS2DU12_ERROR;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e020      	b.n	800228e <LIS2DU12_Init+0xaa>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <LIS2DU12_Init+0xb4>)
 8002250:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default ultra low power (disabled). */
  pObj->acc_ultra_low_power = LIS2DU12_ULTRA_LOW_POWER_DISABLE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2du12_md_t mode =
 800225a:	f107 0308 	add.w	r3, r7, #8
 800225e:	2100      	movs	r1, #0
 8002260:	460a      	mov	r2, r1
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	460a      	mov	r2, r1
 8002266:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DU12_OFF,
    .fs  = LIS2DU12_2g,
  };

  if (lis2du12_mode_set(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3320      	adds	r3, #32
 800226c:	f107 0208 	add.w	r2, r7, #8
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fe37 	bl	8002ee6 <lis2du12_mode_set>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <LIS2DU12_Init+0xa0>
  {
    return LIS2DU12_ERROR;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e004      	b.n	800228e <LIS2DU12_Init+0xaa>
  }

  pObj->is_initialized = 1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DU12_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	42c80000 	.word	0x42c80000

0800229c <LIS2DU12_DeInit>:
  * @brief  Deinitialize the LIS2DU12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_DeInit(LIS2DU12_Object_t *pObj)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DU12_ACC_Disable(pObj) != LIS2DU12_OK)
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f887 	bl	80023b8 <LIS2DU12_ACC_Disable>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <LIS2DU12_DeInit+0x1a>
  {
    return LIS2DU12_ERROR;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	e00c      	b.n	80022d0 <LIS2DU12_DeInit+0x34>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset ultra low power to default value (disabled). */
  pObj->acc_ultra_low_power = LIS2DU12_ULTRA_LOW_POWER_DISABLE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DU12_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <LIS2DU12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ReadID(LIS2DU12_Object_t *pObj, uint8_t *Id)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  lis2du12_id_t val;

  if (lis2du12_id_get(&(pObj->Ctx), &val) != LIS2DU12_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3320      	adds	r3, #32
 80022e6:	f107 020c 	add.w	r2, r7, #12
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fd2f 	bl	8002d50 <lis2du12_id_get>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <LIS2DU12_ReadID+0x26>
  {
    return LIS2DU12_ERROR;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	e003      	b.n	8002306 <LIS2DU12_ReadID+0x2e>
  }

  *Id = val.whoami;
 80022fe:	7b3a      	ldrb	r2, [r7, #12]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	701a      	strb	r2, [r3, #0]

  return LIS2DU12_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <LIS2DU12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DU12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_GetCapabilities(LIS2DU12_Object_t *pObj, LIS2DU12_Capabilities_t *Capabilities)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2200      	movs	r2, #0
 800232a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2210      	movs	r2, #16
 800233c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4a06      	ldr	r2, [pc, #24]	@ (8002368 <LIS2DU12_GetCapabilities+0x58>)
 8002350:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
  return LIS2DU12_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	44480000 	.word	0x44480000

0800236c <LIS2DU12_ACC_Enable>:
  * @brief  Enable the LIS2DU12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_Enable(LIS2DU12_Object_t *pObj)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <LIS2DU12_ACC_Enable+0x16>
  {
    return LIS2DU12_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e016      	b.n	80023b0 <LIS2DU12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DU12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_ultra_low_power) != LIS2DU12_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800238e:	4619      	mov	r1, r3
 8002390:	eeb0 0a67 	vmov.f32	s0, s15
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fa4b 	bl	8002830 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <LIS2DU12_ACC_Enable+0x3a>
  {
    return LIS2DU12_ERROR;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	e004      	b.n	80023b0 <LIS2DU12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DU12_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <LIS2DU12_ACC_Disable>:
  * @brief  Disable the LIS2DU12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_Disable(LIS2DU12_Object_t *pObj)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <LIS2DU12_ACC_Disable+0x16>
  {
    return LIS2DU12_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e022      	b.n	8002414 <LIS2DU12_ACC_Disable+0x5c>
  }

  /* Output data rate selection - power down. */
  lis2du12_md_t mode;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3320      	adds	r3, #32
 80023d2:	f107 020c 	add.w	r2, r7, #12
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fdbd 	bl	8002f58 <lis2du12_mode_get>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <LIS2DU12_ACC_Disable+0x32>
  {
    return LIS2DU12_ERROR;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	e014      	b.n	8002414 <LIS2DU12_ACC_Disable+0x5c>
  }

  mode.odr = LIS2DU12_OFF;
 80023ea:	2300      	movs	r3, #0
 80023ec:	733b      	strb	r3, [r7, #12]

  if (lis2du12_mode_set(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3320      	adds	r3, #32
 80023f2:	f107 020c 	add.w	r2, r7, #12
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fd74 	bl	8002ee6 <lis2du12_mode_set>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <LIS2DU12_ACC_Disable+0x52>
  {
    return LIS2DU12_ERROR;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
 8002408:	e004      	b.n	8002414 <LIS2DU12_ACC_Disable+0x5c>
  }

  pObj->acc_is_enabled = 0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DU12_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <LIS2DU12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetSensitivity(LIS2DU12_Object_t *pObj, float *Sensitivity)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3320      	adds	r3, #32
 800242a:	f107 020c 	add.w	r2, r7, #12
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fd91 	bl	8002f58 <lis2du12_mode_get>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <LIS2DU12_ACC_GetSensitivity+0x26>
  {
    return LIS2DU12_ERROR;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	e025      	b.n	800248e <LIS2DU12_ACC_GetSensitivity+0x72>
  }

  switch (mode.fs)
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d81b      	bhi.n	8002480 <LIS2DU12_ACC_GetSensitivity+0x64>
 8002448:	a201      	add	r2, pc, #4	@ (adr r2, 8002450 <LIS2DU12_ACC_GetSensitivity+0x34>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	08002461 	.word	0x08002461
 8002454:	08002469 	.word	0x08002469
 8002458:	08002471 	.word	0x08002471
 800245c:	08002479 	.word	0x08002479
  {
    case LIS2DU12_2g:
      *Sensitivity = LIS2DU12_ACC_SENSITIVITY_FOR_FS_2G;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4a0d      	ldr	r2, [pc, #52]	@ (8002498 <LIS2DU12_ACC_GetSensitivity+0x7c>)
 8002464:	601a      	str	r2, [r3, #0]
      break;
 8002466:	e011      	b.n	800248c <LIS2DU12_ACC_GetSensitivity+0x70>

    case LIS2DU12_4g:
      *Sensitivity = LIS2DU12_ACC_SENSITIVITY_FOR_FS_4G;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4a0c      	ldr	r2, [pc, #48]	@ (800249c <LIS2DU12_ACC_GetSensitivity+0x80>)
 800246c:	601a      	str	r2, [r3, #0]
      break;
 800246e:	e00d      	b.n	800248c <LIS2DU12_ACC_GetSensitivity+0x70>

    case LIS2DU12_8g:
      *Sensitivity = LIS2DU12_ACC_SENSITIVITY_FOR_FS_8G;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4a0b      	ldr	r2, [pc, #44]	@ (80024a0 <LIS2DU12_ACC_GetSensitivity+0x84>)
 8002474:	601a      	str	r2, [r3, #0]
      break;
 8002476:	e009      	b.n	800248c <LIS2DU12_ACC_GetSensitivity+0x70>

    case LIS2DU12_16g:
      *Sensitivity = LIS2DU12_ACC_SENSITIVITY_FOR_FS_16G;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <LIS2DU12_ACC_GetSensitivity+0x88>)
 800247c:	601a      	str	r2, [r3, #0]
      break;
 800247e:	e005      	b.n	800248c <LIS2DU12_ACC_GetSensitivity+0x70>

    default:
      *Sensitivity = -1.0f;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4a09      	ldr	r2, [pc, #36]	@ (80024a8 <LIS2DU12_ACC_GetSensitivity+0x8c>)
 8002484:	601a      	str	r2, [r3, #0]
      return LIS2DU12_ERROR;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e000      	b.n	800248e <LIS2DU12_ACC_GetSensitivity+0x72>
  }

  return LIS2DU12_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	3f79db23 	.word	0x3f79db23
 800249c:	3ff9db23 	.word	0x3ff9db23
 80024a0:	4079db23 	.word	0x4079db23
 80024a4:	40f9db23 	.word	0x40f9db23
 80024a8:	bf800000 	.word	0xbf800000

080024ac <LIS2DU12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetOutputDataRate(LIS2DU12_Object_t *pObj, float *Odr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3320      	adds	r3, #32
 80024ba:	f107 020c 	add.w	r2, r7, #12
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fd49 	bl	8002f58 <lis2du12_mode_get>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <LIS2DU12_ACC_GetOutputDataRate+0x26>
  {
    return LIS2DU12_ERROR;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	e05b      	b.n	800258a <LIS2DU12_ACC_GetOutputDataRate+0xde>
  }

  switch (mode.odr)
 80024d2:	7b3b      	ldrb	r3, [r7, #12]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d851      	bhi.n	800257c <LIS2DU12_ACC_GetOutputDataRate+0xd0>
 80024d8:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <LIS2DU12_ACC_GetOutputDataRate+0x34>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	08002521 	.word	0x08002521
 80024e4:	0800252b 	.word	0x0800252b
 80024e8:	08002535 	.word	0x08002535
 80024ec:	0800253d 	.word	0x0800253d
 80024f0:	0800253d 	.word	0x0800253d
 80024f4:	08002545 	.word	0x08002545
 80024f8:	0800254d 	.word	0x0800254d
 80024fc:	08002555 	.word	0x08002555
 8002500:	0800255d 	.word	0x0800255d
 8002504:	08002565 	.word	0x08002565
 8002508:	0800256d 	.word	0x0800256d
 800250c:	08002575 	.word	0x08002575
 8002510:	0800257d 	.word	0x0800257d
 8002514:	0800257d 	.word	0x0800257d
 8002518:	08002521 	.word	0x08002521
 800251c:	08002521 	.word	0x08002521
  {
    case LIS2DU12_OFF:
    case LIS2DU12_TRIG_PIN:
    case LIS2DU12_TRIG_SW:
      *Odr = 0.0f;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
      break;
 8002528:	e02e      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_1Hz5_ULP:
      *Odr = 1.5f;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002530:	601a      	str	r2, [r3, #0]
      break;
 8002532:	e029      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_3Hz_ULP:
      *Odr = 3.0f;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <LIS2DU12_ACC_GetOutputDataRate+0xe8>)
 8002538:	601a      	str	r2, [r3, #0]
      break;
 800253a:	e025      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_6Hz_ULP:
    case LIS2DU12_6Hz:
      *Odr = 6.0f;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4a16      	ldr	r2, [pc, #88]	@ (8002598 <LIS2DU12_ACC_GetOutputDataRate+0xec>)
 8002540:	601a      	str	r2, [r3, #0]
      break;
 8002542:	e021      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_12Hz5:
      *Odr = 12.5f;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4a15      	ldr	r2, [pc, #84]	@ (800259c <LIS2DU12_ACC_GetOutputDataRate+0xf0>)
 8002548:	601a      	str	r2, [r3, #0]
      break;
 800254a:	e01d      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_25Hz:
      *Odr = 25.0f;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4a14      	ldr	r2, [pc, #80]	@ (80025a0 <LIS2DU12_ACC_GetOutputDataRate+0xf4>)
 8002550:	601a      	str	r2, [r3, #0]
      break;
 8002552:	e019      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_50Hz:
      *Odr = 50.0f;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4a13      	ldr	r2, [pc, #76]	@ (80025a4 <LIS2DU12_ACC_GetOutputDataRate+0xf8>)
 8002558:	601a      	str	r2, [r3, #0]
      break;
 800255a:	e015      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_100Hz:
      *Odr = 100.0f;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <LIS2DU12_ACC_GetOutputDataRate+0xfc>)
 8002560:	601a      	str	r2, [r3, #0]
      break;
 8002562:	e011      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_200Hz:
      *Odr = 200.0f;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <LIS2DU12_ACC_GetOutputDataRate+0x100>)
 8002568:	601a      	str	r2, [r3, #0]
      break;
 800256a:	e00d      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_400Hz:
      *Odr = 400.0f;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4a10      	ldr	r2, [pc, #64]	@ (80025b0 <LIS2DU12_ACC_GetOutputDataRate+0x104>)
 8002570:	601a      	str	r2, [r3, #0]
      break;
 8002572:	e009      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_800Hz:
      *Odr = 800.0f;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4a0f      	ldr	r2, [pc, #60]	@ (80025b4 <LIS2DU12_ACC_GetOutputDataRate+0x108>)
 8002578:	601a      	str	r2, [r3, #0]
      break;
 800257a:	e005      	b.n	8002588 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    default:
      *Odr = -1.0f;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4a0e      	ldr	r2, [pc, #56]	@ (80025b8 <LIS2DU12_ACC_GetOutputDataRate+0x10c>)
 8002580:	601a      	str	r2, [r3, #0]
      return LIS2DU12_ERROR;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e000      	b.n	800258a <LIS2DU12_ACC_GetOutputDataRate+0xde>
  }

  return LIS2DU12_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40400000 	.word	0x40400000
 8002598:	40c00000 	.word	0x40c00000
 800259c:	41480000 	.word	0x41480000
 80025a0:	41c80000 	.word	0x41c80000
 80025a4:	42480000 	.word	0x42480000
 80025a8:	42c80000 	.word	0x42c80000
 80025ac:	43480000 	.word	0x43480000
 80025b0:	43c80000 	.word	0x43c80000
 80025b4:	44480000 	.word	0x44480000
 80025b8:	bf800000 	.word	0xbf800000

080025bc <LIS2DU12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_SetOutputDataRate(LIS2DU12_Object_t *pObj, float Odr)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use Ultra Low Power disabled */
  return LIS2DU12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DU12_ULTRA_LOW_POWER_DISABLE);
 80025c8:	2100      	movs	r1, #0
 80025ca:	ed97 0a00 	vldr	s0, [r7]
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f805 	bl	80025de <LIS2DU12_ACC_SetOutputDataRate_With_Mode>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <LIS2DU12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_SetOutputDataRate_With_Mode(LIS2DU12_Object_t *pObj, float Odr, LIS2DU12_Ultra_Low_Power_t Power)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80025ea:	460b      	mov	r3, r1
 80025ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d108      	bne.n	800260a <LIS2DU12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DU12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4619      	mov	r1, r3
 80025fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f915 	bl	8002830 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled>
 8002606:	4603      	mov	r3, r0
 8002608:	e007      	b.n	800261a <LIS2DU12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DU12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4619      	mov	r1, r3
 800260e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fa08 	bl	8002a28 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled>
 8002618:	4603      	mov	r3, r0
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <LIS2DU12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetFullScale(LIS2DU12_Object_t *pObj, int32_t *FullScale)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DU12_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
  lis2du12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3320      	adds	r3, #32
 8002636:	f107 0208 	add.w	r2, r7, #8
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fc8b 	bl	8002f58 <lis2du12_mode_get>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <LIS2DU12_ACC_GetFullScale+0x2a>
  {
    return LIS2DU12_ERROR;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
 800264c:	e027      	b.n	800269e <LIS2DU12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 800264e:	7a7b      	ldrb	r3, [r7, #9]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d81b      	bhi.n	800268c <LIS2DU12_ACC_GetFullScale+0x68>
 8002654:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <LIS2DU12_ACC_GetFullScale+0x38>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	0800266d 	.word	0x0800266d
 8002660:	08002675 	.word	0x08002675
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002685 	.word	0x08002685
  {
    case LIS2DU12_2g:
      *FullScale =  2;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2202      	movs	r2, #2
 8002670:	601a      	str	r2, [r3, #0]
      break;
 8002672:	e013      	b.n	800269c <LIS2DU12_ACC_GetFullScale+0x78>

    case LIS2DU12_4g:
      *FullScale =  4;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2204      	movs	r2, #4
 8002678:	601a      	str	r2, [r3, #0]
      break;
 800267a:	e00f      	b.n	800269c <LIS2DU12_ACC_GetFullScale+0x78>

    case LIS2DU12_8g:
      *FullScale =  8;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2208      	movs	r2, #8
 8002680:	601a      	str	r2, [r3, #0]
      break;
 8002682:	e00b      	b.n	800269c <LIS2DU12_ACC_GetFullScale+0x78>

    case LIS2DU12_16g:
      *FullScale = 16;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2210      	movs	r2, #16
 8002688:	601a      	str	r2, [r3, #0]
      break;
 800268a:	e007      	b.n	800269c <LIS2DU12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f04f 32ff 	mov.w	r2, #4294967295
 8002692:	601a      	str	r2, [r3, #0]
      ret = LIS2DU12_ERROR;
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
 8002698:	60fb      	str	r3, [r7, #12]
      break;
 800269a:	bf00      	nop
  }

  return ret;
 800269c:	68fb      	ldr	r3, [r7, #12]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop

080026a8 <LIS2DU12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_SetFullScale(LIS2DU12_Object_t *pObj, int32_t FullScale)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3320      	adds	r3, #32
 80026b6:	f107 020c 	add.w	r2, r7, #12
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fc4b 	bl	8002f58 <lis2du12_mode_get>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <LIS2DU12_ACC_SetFullScale+0x26>
  {
    return LIS2DU12_ERROR;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	e01f      	b.n	800270e <LIS2DU12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DU12_2g
            : (FullScale <= 4) ? LIS2DU12_4g
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	dd0b      	ble.n	80026ec <LIS2DU12_ACC_SetFullScale+0x44>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	dd06      	ble.n	80026e8 <LIS2DU12_ACC_SetFullScale+0x40>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	dc01      	bgt.n	80026e4 <LIS2DU12_ACC_SetFullScale+0x3c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e004      	b.n	80026ee <LIS2DU12_ACC_SetFullScale+0x46>
 80026e4:	2303      	movs	r3, #3
 80026e6:	e002      	b.n	80026ee <LIS2DU12_ACC_SetFullScale+0x46>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LIS2DU12_ACC_SetFullScale+0x46>
 80026ec:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DU12_2g
 80026ee:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DU12_8g
            :                    LIS2DU12_16g;

  if (lis2du12_mode_set(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3320      	adds	r3, #32
 80026f4:	f107 020c 	add.w	r2, r7, #12
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fbf3 	bl	8002ee6 <lis2du12_mode_set>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <LIS2DU12_ACC_SetFullScale+0x64>
  {
    return LIS2DU12_ERROR;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e000      	b.n	800270e <LIS2DU12_ACC_SetFullScale+0x66>
  }

  return LIS2DU12_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <LIS2DU12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetAxesRaw(LIS2DU12_Object_t *pObj, LIS2DU12_AxesRaw_t *Value)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b08a      	sub	sp, #40	@ 0x28
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;
  lis2du12_data_t data;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3320      	adds	r3, #32
 8002724:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fc14 	bl	8002f58 <lis2du12_mode_get>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <LIS2DU12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DU12_ERROR;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	e01b      	b.n	8002774 <LIS2DU12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2du12_data_get(&(pObj->Ctx), &mode, &data) != LIS2DU12_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3320      	adds	r3, #32
 8002740:	f107 0208 	add.w	r2, r7, #8
 8002744:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fcc9 	bl	80030e0 <lis2du12_data_get>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <LIS2DU12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DU12_ERROR;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	e00c      	b.n	8002774 <LIS2DU12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.xl.raw[0];
 800275a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	801a      	strh	r2, [r3, #0]
  Value->y = data.xl.raw[1];
 8002762:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	805a      	strh	r2, [r3, #2]
  Value->z = data.xl.raw[2];
 800276a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	809a      	strh	r2, [r3, #4]

  return LIS2DU12_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3728      	adds	r7, #40	@ 0x28
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <LIS2DU12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetAxes(LIS2DU12_Object_t *pObj, LIS2DU12_Axes_t *Acceleration)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	@ 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;
  lis2du12_data_t data;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3320      	adds	r3, #32
 800278a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fbe1 	bl	8002f58 <lis2du12_mode_get>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <LIS2DU12_ACC_GetAxes+0x26>
  {
    return LIS2DU12_ERROR;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	e027      	b.n	80027f2 <LIS2DU12_ACC_GetAxes+0x76>
  }

  if (lis2du12_data_get(&(pObj->Ctx), &mode, &data) != LIS2DU12_OK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3320      	adds	r3, #32
 80027a6:	f107 0208 	add.w	r2, r7, #8
 80027aa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fc96 	bl	80030e0 <lis2du12_data_get>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <LIS2DU12_ACC_GetAxes+0x44>
  {
    return LIS2DU12_ERROR;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	e018      	b.n	80027f2 <LIS2DU12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.xl.mg[0];
 80027c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c8:	ee17 2a90 	vmov	r2, s15
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.xl.mg[1];
 80027d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d8:	ee17 2a90 	vmov	r2, s15
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.xl.mg[2];
 80027e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80027e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e8:	ee17 2a90 	vmov	r2, s15
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	609a      	str	r2, [r3, #8]

  return LIS2DU12_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3728      	adds	r7, #40	@ 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <LIS2DU12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_Write_Reg(LIS2DU12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
 8002806:	4613      	mov	r3, r2
 8002808:	70bb      	strb	r3, [r7, #2]
  if (lis2du12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DU12_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f103 0020 	add.w	r0, r3, #32
 8002810:	1cba      	adds	r2, r7, #2
 8002812:	78f9      	ldrb	r1, [r7, #3]
 8002814:	2301      	movs	r3, #1
 8002816:	f000 f9f1 	bl	8002bfc <lis2du12_write_reg>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <LIS2DU12_Write_Reg+0x2c>
  {
    return LIS2DU12_ERROR;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
 8002824:	e000      	b.n	8002828 <LIS2DU12_Write_Reg+0x2e>
  }

  return LIS2DU12_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DU12_ACC_SetOutputDataRate_When_Enabled(LIS2DU12_Object_t *pObj, float Odr,
                                                           LIS2DU12_Ultra_Low_Power_t Power)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	ed87 0a02 	vstr	s0, [r7, #8]
 800283c:	460b      	mov	r3, r1
 800283e:	71fb      	strb	r3, [r7, #7]
  lis2du12_md_t mode;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3320      	adds	r3, #32
 8002844:	f107 0214 	add.w	r2, r7, #20
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fb84 	bl	8002f58 <lis2du12_mode_get>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DU12_ERROR;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e0c5      	b.n	80029e8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1b8>
  }

  if (Power == LIS2DU12_ULTRA_LOW_POWER_ENABLE)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d118      	bne.n	8002894 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.5f) ? LIS2DU12_1Hz5_ULP
               : (Odr <= 3.0f) ? LIS2DU12_3Hz_ULP
 8002862:	edd7 7a02 	vldr	s15, [r7, #8]
 8002866:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800286a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002872:	d801      	bhi.n	8002878 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8002874:	2301      	movs	r3, #1
 8002876:	e00b      	b.n	8002890 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002878:	edd7 7a02 	vldr	s15, [r7, #8]
 800287c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002888:	d801      	bhi.n	800288e <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 800288a:	2302      	movs	r3, #2
 800288c:	e000      	b.n	8002890 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x60>
 800288e:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.5f) ? LIS2DU12_1Hz5_ULP
 8002890:	753b      	strb	r3, [r7, #20]
 8002892:	e04e      	b.n	8002932 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x102>
               :                 LIS2DU12_6Hz_ULP;
  }
  else
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DU12_6Hz
               : (Odr <=  12.5f) ? LIS2DU12_12Hz5
 8002894:	edd7 7a02 	vldr	s15, [r7, #8]
 8002898:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800289c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d801      	bhi.n	80028aa <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e042      	b.n	8002930 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 80028aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ae:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80028b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	d801      	bhi.n	80028c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x90>
 80028bc:	2305      	movs	r3, #5
 80028be:	e037      	b.n	8002930 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 80028c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028c4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80028c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d0:	d801      	bhi.n	80028d6 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80028d2:	2306      	movs	r3, #6
 80028d4:	e02c      	b.n	8002930 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 80028d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028da:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80029f0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80028de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e6:	d801      	bhi.n	80028ec <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80028e8:	2307      	movs	r3, #7
 80028ea:	e021      	b.n	8002930 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 80028ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f0:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80029f4 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
 80028f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	d801      	bhi.n	8002902 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80028fe:	2308      	movs	r3, #8
 8002900:	e016      	b.n	8002930 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002902:	edd7 7a02 	vldr	s15, [r7, #8]
 8002906:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80029f8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1c8>
 800290a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	d801      	bhi.n	8002918 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8002914:	2309      	movs	r3, #9
 8002916:	e00b      	b.n	8002930 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002918:	edd7 7a02 	vldr	s15, [r7, #8]
 800291c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80029fc <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1cc>
 8002920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	d801      	bhi.n	800292e <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xfe>
 800292a:	230a      	movs	r3, #10
 800292c:	e000      	b.n	8002930 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 800292e:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DU12_6Hz
 8002930:	753b      	strb	r3, [r7, #20]
               : (Odr <= 200.0f) ? LIS2DU12_200Hz
               : (Odr <= 400.0f) ? LIS2DU12_400Hz
               :                   LIS2DU12_800Hz;
  }

  if (lis2du12_mode_set(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3320      	adds	r3, #32
 8002936:	f107 0214 	add.w	r2, r7, #20
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fad2 	bl	8002ee6 <lis2du12_mode_set>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x11e>
  {
    return LIS2DU12_ERROR;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	e04c      	b.n	80029e8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1b8>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DU12_1Hz5_ULP) ?   1.5f
 800294e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_3Hz_ULP)  ?   3.0f
 8002950:	2b01      	cmp	r3, #1
 8002952:	d033      	beq.n	80029bc <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 8002954:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_6Hz_ULP)  ?   6.0f
 8002956:	2b02      	cmp	r3, #2
 8002958:	d02e      	beq.n	80029b8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x188>
 800295a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_6Hz)      ?   6.0f
 800295c:	2b03      	cmp	r3, #3
 800295e:	d029      	beq.n	80029b4 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x184>
 8002960:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_12Hz5)    ?  12.5f
 8002962:	2b04      	cmp	r3, #4
 8002964:	d024      	beq.n	80029b0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x180>
 8002966:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_25Hz)     ?  25.0f
 8002968:	2b05      	cmp	r3, #5
 800296a:	d01f      	beq.n	80029ac <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x17c>
 800296c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_50Hz)     ?  50.0f
 800296e:	2b06      	cmp	r3, #6
 8002970:	d01a      	beq.n	80029a8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x178>
 8002972:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_100Hz)    ? 100.0f
 8002974:	2b07      	cmp	r3, #7
 8002976:	d015      	beq.n	80029a4 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x174>
 8002978:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_200Hz)    ? 200.0f
 800297a:	2b08      	cmp	r3, #8
 800297c:	d010      	beq.n	80029a0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x170>
 800297e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_400Hz)    ? 400.0f
 8002980:	2b09      	cmp	r3, #9
 8002982:	d00b      	beq.n	800299c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x16c>
 8002984:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_800Hz)    ? 800.0f
 8002986:	2b0a      	cmp	r3, #10
 8002988:	d006      	beq.n	8002998 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x168>
 800298a:	7d3b      	ldrb	r3, [r7, #20]
                  :                                    -1.0f;
 800298c:	2b0b      	cmp	r3, #11
 800298e:	d101      	bne.n	8002994 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x164>
 8002990:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1d0>)
 8002992:	e015      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8002994:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1d4>)
 8002996:	e013      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_800Hz)    ? 800.0f
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1d8>)
 800299a:	e011      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_400Hz)    ? 400.0f
 800299c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1dc>)
 800299e:	e00f      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_200Hz)    ? 200.0f
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1e0>)
 80029a2:	e00d      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_100Hz)    ? 100.0f
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 80029a6:	e00b      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_50Hz)     ?  50.0f
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80029aa:	e009      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_25Hz)     ?  25.0f
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1ec>)
 80029ae:	e007      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_12Hz5)    ?  12.5f
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 80029b2:	e005      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_6Hz)      ?   6.0f
 80029b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a20 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 80029b6:	e003      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_6Hz_ULP)  ?   6.0f
 80029b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1f4>)
 80029ba:	e001      	b.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_3Hz_ULP)  ?   3.0f
 80029bc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
  pObj->acc_odr = (mode.odr == LIS2DU12_1Hz5_ULP) ?   1.5f
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80029ca:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80029ce:	eef4 7a47 	vcmp.f32	s15, s14
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	d102      	bne.n	80029de <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    return LIS2DU12_ERROR;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295
 80029dc:	e004      	b.n	80029e8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1b8>
  }

  /* Store the current Power value */
  pObj->acc_ultra_low_power = Power;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	79fa      	ldrb	r2, [r7, #7]
 80029e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DU12_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	42480000 	.word	0x42480000
 80029f4:	42c80000 	.word	0x42c80000
 80029f8:	43480000 	.word	0x43480000
 80029fc:	43c80000 	.word	0x43c80000
 8002a00:	44480000 	.word	0x44480000
 8002a04:	bf800000 	.word	0xbf800000
 8002a08:	43c80000 	.word	0x43c80000
 8002a0c:	43480000 	.word	0x43480000
 8002a10:	42c80000 	.word	0x42c80000
 8002a14:	42480000 	.word	0x42480000
 8002a18:	41c80000 	.word	0x41c80000
 8002a1c:	41480000 	.word	0x41480000
 8002a20:	40c00000 	.word	0x40c00000
 8002a24:	40400000 	.word	0x40400000

08002a28 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DU12_ACC_SetOutputDataRate_When_Disabled(LIS2DU12_Object_t *pObj, float Odr,
                                                            LIS2DU12_Ultra_Low_Power_t Power)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a34:	460b      	mov	r3, r1
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DU12_ULTRA_LOW_POWER_ENABLE)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d11a      	bne.n	8002a74 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 8002a3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a42:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4e:	d802      	bhi.n	8002a56 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8002a50:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002a54:	e00b      	b.n	8002a6e <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                 6.0f;
 8002a56:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a5a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	d801      	bhi.n	8002a6c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x44>
 8002a68:	4b30      	ldr	r3, [pc, #192]	@ (8002b2c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002a6a:	e000      	b.n	8002a6e <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x46>
 8002a6c:	4b30      	ldr	r3, [pc, #192]	@ (8002b30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x108>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a72:	e04f      	b.n	8002b14 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xec>
  }
  else
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 8002a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a78:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	d801      	bhi.n	8002a8a <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x62>
 8002a86:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x108>)
 8002a88:	e042      	b.n	8002b10 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <=  25.0f) ?  25.0f
 8002a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a8e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d801      	bhi.n	8002aa0 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x78>
 8002a9c:	4b25      	ldr	r3, [pc, #148]	@ (8002b34 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002a9e:	e037      	b.n	8002b10 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <=  50.0f) ?  50.0f
 8002aa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab0:	d801      	bhi.n	8002ab6 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x8e>
 8002ab2:	4b21      	ldr	r3, [pc, #132]	@ (8002b38 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 8002ab4:	e02c      	b.n	8002b10 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <= 100.0f) ? 100.0f
 8002ab6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aba:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002b3c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x114>
 8002abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d801      	bhi.n	8002acc <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 8002aca:	e021      	b.n	8002b10 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <= 200.0f) ? 200.0f
 8002acc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ad0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002b44 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8002ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d801      	bhi.n	8002ae2 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xba>
 8002ade:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x120>)
 8002ae0:	e016      	b.n	8002b10 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <= 400.0f) ? 400.0f
 8002ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002b4c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x124>
 8002aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	d801      	bhi.n	8002af8 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xd0>
 8002af4:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x128>)
 8002af6:	e00b      	b.n	8002b10 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    :                   800.0f;
 8002af8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002afc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002b54 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8002b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	d801      	bhi.n	8002b0e <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe6>
 8002b0a:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x130>)
 8002b0c:	e000      	b.n	8002b10 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002b0e:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x134>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	6353      	str	r3, [r2, #52]	@ 0x34
  }

  /* Store the new Power value */
  pObj->acc_ultra_low_power = Power;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	79fa      	ldrb	r2, [r7, #7]
 8002b18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DU12_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40400000 	.word	0x40400000
 8002b30:	40c00000 	.word	0x40c00000
 8002b34:	41480000 	.word	0x41480000
 8002b38:	41c80000 	.word	0x41c80000
 8002b3c:	42480000 	.word	0x42480000
 8002b40:	42480000 	.word	0x42480000
 8002b44:	42c80000 	.word	0x42c80000
 8002b48:	42c80000 	.word	0x42c80000
 8002b4c:	43480000 	.word	0x43480000
 8002b50:	43480000 	.word	0x43480000
 8002b54:	43c80000 	.word	0x43c80000
 8002b58:	43c80000 	.word	0x43c80000
 8002b5c:	44480000 	.word	0x44480000

08002b60 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	72fb      	strb	r3, [r7, #11]
 8002b70:	4613      	mov	r3, r2
 8002b72:	813b      	strh	r3, [r7, #8]
  LIS2DU12_Object_t *pObj = (LIS2DU12_Object_t *)Handle;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	695c      	ldr	r4, [r3, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	7b1b      	ldrb	r3, [r3, #12]
 8002b80:	4618      	mov	r0, r3
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	b299      	uxth	r1, r3
 8002b86:	893b      	ldrh	r3, [r7, #8]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	47a0      	blx	r4
 8002b8c:	4603      	mov	r3, r0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}

08002b96 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b96:	b590      	push	{r4, r7, lr}
 8002b98:	b087      	sub	sp, #28
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	72fb      	strb	r3, [r7, #11]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	813b      	strh	r3, [r7, #8]
  LIS2DU12_Object_t *pObj = (LIS2DU12_Object_t *)Handle;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	691c      	ldr	r4, [r3, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	7b1b      	ldrb	r3, [r3, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	b299      	uxth	r1, r3
 8002bbc:	893b      	ldrh	r3, [r7, #8]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	47a0      	blx	r4
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd90      	pop	{r4, r7, pc}

08002bcc <lis2du12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	72fb      	strb	r3, [r7, #11]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685c      	ldr	r4, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68d8      	ldr	r0, [r3, #12]
 8002be8:	893b      	ldrh	r3, [r7, #8]
 8002bea:	7af9      	ldrb	r1, [r7, #11]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	47a0      	blx	r4
 8002bf0:	6178      	str	r0, [r7, #20]
  return ret;
 8002bf2:	697b      	ldr	r3, [r7, #20]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <lis2du12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_write_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                           uint16_t len)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	72fb      	strb	r3, [r7, #11]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681c      	ldr	r4, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68d8      	ldr	r0, [r3, #12]
 8002c18:	893b      	ldrh	r3, [r7, #8]
 8002c1a:	7af9      	ldrb	r1, [r7, #11]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	47a0      	blx	r4
 8002c20:	6178      	str	r0, [r7, #20]
  return ret;
 8002c22:	697b      	ldr	r3, [r7, #20]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}

08002c2c <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <bytecpy+0x1e>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <bytecpy+0x1e>
  {
    *target = *source;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	701a      	strb	r2, [r3, #0]
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <lis2du12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2du12_from_fs2g_to_mg(int16_t lsb)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8002c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002c84 <lis2du12_from_fs2g_to_mg+0x2c>
 8002c72:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002c76:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	3d79db23 	.word	0x3d79db23

08002c88 <lis2du12_from_fs4g_to_mg>:

float_t lis2du12_from_fs4g_to_mg(int16_t lsb)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8002c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002cb4 <lis2du12_from_fs4g_to_mg+0x2c>
 8002ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	3df9db23 	.word	0x3df9db23

08002cb8 <lis2du12_from_fs8g_to_mg>:

float_t lis2du12_from_fs8g_to_mg(int16_t lsb)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8002cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cce:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ce4 <lis2du12_from_fs8g_to_mg+0x2c>
 8002cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	3e79db23 	.word	0x3e79db23

08002ce8 <lis2du12_from_fs16g_to_mg>:

float_t lis2du12_from_fs16g_to_mg(int16_t lsb)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cfe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002d14 <lis2du12_from_fs16g_to_mg+0x2c>
 8002d02:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	3ef9db23 	.word	0x3ef9db23

08002d18 <lis2du12_from_lsb_to_celsius>:

float_t lis2du12_from_lsb_to_celsius(int16_t lsb)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 355.5f) + 25.0f;
 8002d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d2e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002d4c <lis2du12_from_lsb_to_celsius+0x34>
 8002d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d36:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	43b1c000 	.word	0x43b1c000

08002d50 <lis2du12_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_id_get(stmdev_ctx_t *ctx, lis2du12_id_t *val)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_WHO_AM_I, &reg, 1);
 8002d5a:	f107 020b 	add.w	r2, r7, #11
 8002d5e:	2301      	movs	r3, #1
 8002d60:	2143      	movs	r1, #67	@ 0x43
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ff32 	bl	8002bcc <lis2du12_read_reg>
 8002d68:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8002d6a:	7afa      	ldrb	r2, [r7, #11]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	701a      	strb	r2, [r3, #0]

  return ret;
 8002d70:	68fb      	ldr	r3, [r7, #12]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <lis2du12_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_bus_mode_set(stmdev_ctx_t *ctx, lis2du12_bus_mode_t val)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	70fb      	strb	r3, [r7, #3]
  lis2du12_if_ctrl_t if_ctrl;
  lis2du12_ctrl1_t ctrl1;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8002d86:	f107 0210 	add.w	r2, r7, #16
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	210e      	movs	r1, #14
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ff1c 	bl	8002bcc <lis2du12_read_reg>
 8002d94:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d118      	bne.n	8002dce <lis2du12_bus_mode_set+0x54>
  {
    if_ctrl.i3c_disable = (uint8_t)val & 0x01U;
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	7c3b      	ldrb	r3, [r7, #16]
 8002da6:	f362 0341 	bfi	r3, r2, #1, #1
 8002daa:	743b      	strb	r3, [r7, #16]
    if_ctrl.i2c_disable = ((uint8_t)val & 0x02U) >> 1;
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	7c3b      	ldrb	r3, [r7, #16]
 8002db8:	f362 0300 	bfi	r3, r2, #0, #1
 8002dbc:	743b      	strb	r3, [r7, #16]
    ret = lis2du12_write_reg(ctx, LIS2DU12_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8002dbe:	f107 0210 	add.w	r2, r7, #16
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	210e      	movs	r1, #14
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ff18 	bl	8002bfc <lis2du12_write_reg>
 8002dcc:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <lis2du12_bus_mode_set+0x6a>
  {
    ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002dd4:	f107 020c 	add.w	r2, r7, #12
 8002dd8:	2301      	movs	r3, #1
 8002dda:	2110      	movs	r1, #16
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fef5 	bl	8002bcc <lis2du12_read_reg>
 8002de2:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d110      	bne.n	8002e0c <lis2du12_bus_mode_set+0x92>
  {
    ctrl1.sim = ((uint8_t)val & 0x04U) >> 2;
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	f362 1386 	bfi	r3, r2, #6, #1
 8002dfa:	733b      	strb	r3, [r7, #12]
    ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002dfc:	f107 020c 	add.w	r2, r7, #12
 8002e00:	2301      	movs	r3, #1
 8002e02:	2110      	movs	r1, #16
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fef9 	bl	8002bfc <lis2du12_write_reg>
 8002e0a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002e0c:	697b      	ldr	r3, [r7, #20]

}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <lis2du12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_init_set(stmdev_ctx_t *ctx, lis2du12_init_t val)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	70fb      	strb	r3, [r7, #3]
  lis2du12_ctrl1_t ctrl1;
  lis2du12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002e22:	f107 0210 	add.w	r2, r7, #16
 8002e26:	2301      	movs	r3, #1
 8002e28:	2110      	movs	r1, #16
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fece 	bl	8002bcc <lis2du12_read_reg>
 8002e30:	6178      	str	r0, [r7, #20]
  ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002e32:	f107 020c 	add.w	r2, r7, #12
 8002e36:	2301      	movs	r3, #1
 8002e38:	2113      	movs	r1, #19
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fec6 	bl	8002bcc <lis2du12_read_reg>
 8002e40:	6178      	str	r0, [r7, #20]
  switch (val)
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d012      	beq.n	8002e6e <lis2du12_init_set+0x58>
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	dc39      	bgt.n	8002ec0 <lis2du12_init_set+0xaa>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01b      	beq.n	8002e88 <lis2du12_init_set+0x72>
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d135      	bne.n	8002ec0 <lis2du12_init_set+0xaa>
  {
    case LIS2DU12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8002e54:	7b3b      	ldrb	r3, [r7, #12]
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	733b      	strb	r3, [r7, #12]
      ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002e5c:	f107 020c 	add.w	r2, r7, #12
 8002e60:	2301      	movs	r3, #1
 8002e62:	2113      	movs	r1, #19
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff fec9 	bl	8002bfc <lis2du12_write_reg>
 8002e6a:	6178      	str	r0, [r7, #20]
      break;
 8002e6c:	e036      	b.n	8002edc <lis2du12_init_set+0xc6>
    case LIS2DU12_RESET:

      ctrl1.sw_reset = PROPERTY_ENABLE;
 8002e6e:	7c3b      	ldrb	r3, [r7, #16]
 8002e70:	f043 0320 	orr.w	r3, r3, #32
 8002e74:	743b      	strb	r3, [r7, #16]
      ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002e76:	f107 0210 	add.w	r2, r7, #16
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	2110      	movs	r1, #16
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff febc 	bl	8002bfc <lis2du12_write_reg>
 8002e84:	6178      	str	r0, [r7, #20]
      break;
 8002e86:	e029      	b.n	8002edc <lis2du12_init_set+0xc6>
    case LIS2DU12_DRV_RDY:
      ctrl4.bdu = PROPERTY_ENABLE;
 8002e88:	7b3b      	ldrb	r3, [r7, #12]
 8002e8a:	f043 0320 	orr.w	r3, r3, #32
 8002e8e:	733b      	strb	r3, [r7, #12]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8002e90:	7c3b      	ldrb	r3, [r7, #16]
 8002e92:	f043 0310 	orr.w	r3, r3, #16
 8002e96:	743b      	strb	r3, [r7, #16]
      ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002e98:	f107 020c 	add.w	r2, r7, #12
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	2113      	movs	r1, #19
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff feab 	bl	8002bfc <lis2du12_write_reg>
 8002ea6:	6178      	str	r0, [r7, #20]
      if (ret == 0)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d115      	bne.n	8002eda <lis2du12_init_set+0xc4>
      {
        ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002eae:	f107 0210 	add.w	r2, r7, #16
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	2110      	movs	r1, #16
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff fea0 	bl	8002bfc <lis2du12_write_reg>
 8002ebc:	6178      	str	r0, [r7, #20]
      }
      break;
 8002ebe:	e00c      	b.n	8002eda <lis2du12_init_set+0xc4>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8002ec0:	7c3b      	ldrb	r3, [r7, #16]
 8002ec2:	f043 0320 	orr.w	r3, r3, #32
 8002ec6:	743b      	strb	r3, [r7, #16]
      ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002ec8:	f107 0210 	add.w	r2, r7, #16
 8002ecc:	2301      	movs	r3, #1
 8002ece:	2110      	movs	r1, #16
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fe93 	bl	8002bfc <lis2du12_write_reg>
 8002ed6:	6178      	str	r0, [r7, #20]
      break;
 8002ed8:	e000      	b.n	8002edc <lis2du12_init_set+0xc6>
      break;
 8002eda:	bf00      	nop
  }
  return ret;
 8002edc:	697b      	ldr	r3, [r7, #20]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <lis2du12_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_mode_set(stmdev_ctx_t *ctx, lis2du12_md_t *val)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  lis2du12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002ef0:	f107 0208 	add.w	r2, r7, #8
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	2114      	movs	r1, #20
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff fe67 	bl	8002bcc <lis2du12_read_reg>
 8002efe:	60f8      	str	r0, [r7, #12]

  ctrl5.odr = (uint8_t)val->odr;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	7a3b      	ldrb	r3, [r7, #8]
 8002f0c:	f362 1307 	bfi	r3, r2, #4, #4
 8002f10:	723b      	strb	r3, [r7, #8]
  ctrl5.fs = (uint8_t)val->fs;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	7a3b      	ldrb	r3, [r7, #8]
 8002f1e:	f362 0301 	bfi	r3, r2, #0, #2
 8002f22:	723b      	strb	r3, [r7, #8]
  ctrl5.bw = (uint8_t)val->bw;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	789b      	ldrb	r3, [r3, #2]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	7a3b      	ldrb	r3, [r7, #8]
 8002f30:	f362 0383 	bfi	r3, r2, #2, #2
 8002f34:	723b      	strb	r3, [r7, #8]

  if (ret == 0)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <lis2du12_mode_set+0x66>
  {
    ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002f3c:	f107 0208 	add.w	r2, r7, #8
 8002f40:	2301      	movs	r3, #1
 8002f42:	2114      	movs	r1, #20
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff fe59 	bl	8002bfc <lis2du12_write_reg>
 8002f4a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <lis2du12_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_mode_get(stmdev_ctx_t *ctx, lis2du12_md_t *val)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  lis2du12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002f62:	f107 0208 	add.w	r2, r7, #8
 8002f66:	2301      	movs	r3, #1
 8002f68:	2114      	movs	r1, #20
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fe2e 	bl	8002bcc <lis2du12_read_reg>
 8002f70:	60f8      	str	r0, [r7, #12]

  switch (ctrl5.odr)
 8002f72:	7a3b      	ldrb	r3, [r7, #8]
 8002f74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d85a      	bhi.n	8003034 <lis2du12_mode_get+0xdc>
 8002f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <lis2du12_mode_get+0x2c>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002fc5 	.word	0x08002fc5
 8002f88:	08002fcd 	.word	0x08002fcd
 8002f8c:	08002fd5 	.word	0x08002fd5
 8002f90:	08002fdd 	.word	0x08002fdd
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	08002fed 	.word	0x08002fed
 8002f9c:	08002ff5 	.word	0x08002ff5
 8002fa0:	08002ffd 	.word	0x08002ffd
 8002fa4:	08003005 	.word	0x08003005
 8002fa8:	0800300d 	.word	0x0800300d
 8002fac:	08003015 	.word	0x08003015
 8002fb0:	0800301d 	.word	0x0800301d
 8002fb4:	08003035 	.word	0x08003035
 8002fb8:	08003035 	.word	0x08003035
 8002fbc:	08003025 	.word	0x08003025
 8002fc0:	0800302d 	.word	0x0800302d
  {
    case LIS2DU12_OFF:
      val->odr = LIS2DU12_OFF;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
      break;
 8002fca:	e037      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_1Hz5_ULP:
      val->odr = LIS2DU12_1Hz5_ULP;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
      break;
 8002fd2:	e033      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_3Hz_ULP:
      val->odr = LIS2DU12_3Hz_ULP;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	701a      	strb	r2, [r3, #0]
      break;
 8002fda:	e02f      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_6Hz_ULP:
      val->odr = LIS2DU12_6Hz_ULP;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	701a      	strb	r2, [r3, #0]
      break;
 8002fe2:	e02b      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_6Hz:
      val->odr = LIS2DU12_6Hz;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	701a      	strb	r2, [r3, #0]
      break;
 8002fea:	e027      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_12Hz5:
      val->odr = LIS2DU12_12Hz5;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2205      	movs	r2, #5
 8002ff0:	701a      	strb	r2, [r3, #0]
      break;
 8002ff2:	e023      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_25Hz:
      val->odr = LIS2DU12_25Hz;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2206      	movs	r2, #6
 8002ff8:	701a      	strb	r2, [r3, #0]
      break;
 8002ffa:	e01f      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_50Hz:
      val->odr = LIS2DU12_50Hz;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2207      	movs	r2, #7
 8003000:	701a      	strb	r2, [r3, #0]
      break;
 8003002:	e01b      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_100Hz:
      val->odr = LIS2DU12_100Hz;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2208      	movs	r2, #8
 8003008:	701a      	strb	r2, [r3, #0]
      break;
 800300a:	e017      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_200Hz:
      val->odr = LIS2DU12_200Hz;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2209      	movs	r2, #9
 8003010:	701a      	strb	r2, [r3, #0]
      break;
 8003012:	e013      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_400Hz:
      val->odr = LIS2DU12_400Hz;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	220a      	movs	r2, #10
 8003018:	701a      	strb	r2, [r3, #0]
      break;
 800301a:	e00f      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_800Hz:
      val->odr = LIS2DU12_800Hz;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	220b      	movs	r2, #11
 8003020:	701a      	strb	r2, [r3, #0]
      break;
 8003022:	e00b      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_TRIG_PIN:
      val->odr = LIS2DU12_TRIG_PIN;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	220e      	movs	r2, #14
 8003028:	701a      	strb	r2, [r3, #0]
      break;
 800302a:	e007      	b.n	800303c <lis2du12_mode_get+0xe4>
    case LIS2DU12_TRIG_SW:
      val->odr = LIS2DU12_TRIG_SW;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	220f      	movs	r2, #15
 8003030:	701a      	strb	r2, [r3, #0]
      break;
 8003032:	e003      	b.n	800303c <lis2du12_mode_get+0xe4>
    default:
      val->odr = LIS2DU12_OFF;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
      break;
 800303a:	bf00      	nop
  }

  switch (ctrl5.fs)
 800303c:	7a3b      	ldrb	r3, [r7, #8]
 800303e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b03      	cmp	r3, #3
 8003046:	d81b      	bhi.n	8003080 <lis2du12_mode_get+0x128>
 8003048:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <lis2du12_mode_get+0xf8>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003061 	.word	0x08003061
 8003054:	08003069 	.word	0x08003069
 8003058:	08003071 	.word	0x08003071
 800305c:	08003079 	.word	0x08003079
  {
    case LIS2DU12_2g:
      val->fs = LIS2DU12_2g;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	705a      	strb	r2, [r3, #1]
      break;
 8003066:	e00f      	b.n	8003088 <lis2du12_mode_get+0x130>
    case LIS2DU12_4g:
      val->fs = LIS2DU12_4g;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2201      	movs	r2, #1
 800306c:	705a      	strb	r2, [r3, #1]
      break;
 800306e:	e00b      	b.n	8003088 <lis2du12_mode_get+0x130>
    case LIS2DU12_8g:
      val->fs = LIS2DU12_8g;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2202      	movs	r2, #2
 8003074:	705a      	strb	r2, [r3, #1]
      break;
 8003076:	e007      	b.n	8003088 <lis2du12_mode_get+0x130>
    case LIS2DU12_16g:
      val->fs = LIS2DU12_16g;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2203      	movs	r2, #3
 800307c:	705a      	strb	r2, [r3, #1]
      break;
 800307e:	e003      	b.n	8003088 <lis2du12_mode_get+0x130>
    default:
      val->fs = LIS2DU12_2g;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	705a      	strb	r2, [r3, #1]
      break;
 8003086:	bf00      	nop
  }

  switch (ctrl5.bw)
 8003088:	7a3b      	ldrb	r3, [r7, #8]
 800308a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b03      	cmp	r3, #3
 8003092:	d81b      	bhi.n	80030cc <lis2du12_mode_get+0x174>
 8003094:	a201      	add	r2, pc, #4	@ (adr r2, 800309c <lis2du12_mode_get+0x144>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b5 	.word	0x080030b5
 80030a4:	080030bd 	.word	0x080030bd
 80030a8:	080030c5 	.word	0x080030c5
  {
    case LIS2DU12_ODR_div_2:
      val->bw = LIS2DU12_ODR_div_2;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	709a      	strb	r2, [r3, #2]
      break;
 80030b2:	e00f      	b.n	80030d4 <lis2du12_mode_get+0x17c>
    case LIS2DU12_ODR_div_4:
      val->bw = LIS2DU12_ODR_div_4;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	709a      	strb	r2, [r3, #2]
      break;
 80030ba:	e00b      	b.n	80030d4 <lis2du12_mode_get+0x17c>
    case LIS2DU12_ODR_div_8:
      val->bw = LIS2DU12_ODR_div_8;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2202      	movs	r2, #2
 80030c0:	709a      	strb	r2, [r3, #2]
      break;
 80030c2:	e007      	b.n	80030d4 <lis2du12_mode_get+0x17c>
    case LIS2DU12_ODR_div_16:
      val->bw = LIS2DU12_ODR_div_16;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2203      	movs	r2, #3
 80030c8:	709a      	strb	r2, [r3, #2]
      break;
 80030ca:	e003      	b.n	80030d4 <lis2du12_mode_get+0x17c>
    default:
      val->bw = LIS2DU12_ODR_div_2;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	709a      	strb	r2, [r3, #2]
      break;
 80030d2:	bf00      	nop
  }

  return ret;
 80030d4:	68fb      	ldr	r3, [r7, #12]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop

080030e0 <lis2du12_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_data_get(stmdev_ctx_t *ctx, lis2du12_md_t *md,
                          lis2du12_data_t *data)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b089      	sub	sp, #36	@ 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint8_t buff[8];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2du12_read_reg(ctx, LIS2DU12_OUTX_L, (uint8_t *)&buff, 8);
 80030ec:	f107 0210 	add.w	r2, r7, #16
 80030f0:	2308      	movs	r3, #8
 80030f2:	2128      	movs	r1, #40	@ 0x28
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fd69 	bl	8002bcc <lis2du12_read_reg>
 80030fa:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e08f      	b.n	8003226 <lis2du12_data_get+0x146>
  {
    data->xl.raw[i] = (int16_t)buff[j + 1U];
 8003106:	7fbb      	ldrb	r3, [r7, #30]
 8003108:	3301      	adds	r3, #1
 800310a:	3320      	adds	r3, #32
 800310c:	443b      	add	r3, r7
 800310e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003112:	7ffb      	ldrb	r3, [r7, #31]
 8003114:	b211      	sxth	r1, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	460a      	mov	r2, r1
 8003120:	809a      	strh	r2, [r3, #4]
    data->xl.raw[i] = (data->xl.raw[i] * 256) + (int16_t) buff[j];
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003130:	b29b      	uxth	r3, r3
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	b29b      	uxth	r3, r3
 8003136:	7fba      	ldrb	r2, [r7, #30]
 8003138:	3220      	adds	r2, #32
 800313a:	443a      	add	r2, r7
 800313c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003140:	4413      	add	r3, r2
 8003142:	b29a      	uxth	r2, r3
 8003144:	7ffb      	ldrb	r3, [r7, #31]
 8003146:	b211      	sxth	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	460a      	mov	r2, r1
 8003152:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003154:	7fbb      	ldrb	r3, [r7, #30]
 8003156:	3302      	adds	r3, #2
 8003158:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d856      	bhi.n	8003210 <lis2du12_data_get+0x130>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <lis2du12_data_get+0x88>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003179 	.word	0x08003179
 800316c:	0800319f 	.word	0x0800319f
 8003170:	080031c5 	.word	0x080031c5
 8003174:	080031eb 	.word	0x080031eb
    {
      case LIS2DU12_2g:
        data->xl.mg[i] = lis2du12_from_fs2g_to_mg(data->xl.raw[i]);
 8003178:	7ffb      	ldrb	r3, [r7, #31]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003186:	7ffc      	ldrb	r4, [r7, #31]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fd65 	bl	8002c58 <lis2du12_from_fs2g_to_mg>
 800318e:	eef0 7a40 	vmov.f32	s15, s0
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	00a3      	lsls	r3, r4, #2
 8003196:	4413      	add	r3, r2
 8003198:	edc3 7a00 	vstr	s15, [r3]
        break;
 800319c:	e040      	b.n	8003220 <lis2du12_data_get+0x140>
      case LIS2DU12_4g:
        data->xl.mg[i] = lis2du12_from_fs4g_to_mg(data->xl.raw[i]);
 800319e:	7ffb      	ldrb	r3, [r7, #31]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031ac:	7ffc      	ldrb	r4, [r7, #31]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fd6a 	bl	8002c88 <lis2du12_from_fs4g_to_mg>
 80031b4:	eef0 7a40 	vmov.f32	s15, s0
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	00a3      	lsls	r3, r4, #2
 80031bc:	4413      	add	r3, r2
 80031be:	edc3 7a00 	vstr	s15, [r3]
        break;
 80031c2:	e02d      	b.n	8003220 <lis2du12_data_get+0x140>
      case LIS2DU12_8g:
        data->xl.mg[i] = lis2du12_from_fs8g_to_mg(data->xl.raw[i]);
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031d2:	7ffc      	ldrb	r4, [r7, #31]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fd6f 	bl	8002cb8 <lis2du12_from_fs8g_to_mg>
 80031da:	eef0 7a40 	vmov.f32	s15, s0
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	00a3      	lsls	r3, r4, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	edc3 7a00 	vstr	s15, [r3]
        break;
 80031e8:	e01a      	b.n	8003220 <lis2du12_data_get+0x140>
      case LIS2DU12_16g:
        data->xl.mg[i] = lis2du12_from_fs16g_to_mg(data->xl.raw[i]);
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031f8:	7ffc      	ldrb	r4, [r7, #31]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fd74 	bl	8002ce8 <lis2du12_from_fs16g_to_mg>
 8003200:	eef0 7a40 	vmov.f32	s15, s0
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	00a3      	lsls	r3, r4, #2
 8003208:	4413      	add	r3, r2
 800320a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800320e:	e007      	b.n	8003220 <lis2du12_data_get+0x140>
      default:
        data->xl.mg[i] = 0.0f;
 8003210:	7ffb      	ldrb	r3, [r7, #31]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
        break;
 800321e:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 8003220:	7ffb      	ldrb	r3, [r7, #31]
 8003222:	3301      	adds	r3, #1
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	7ffb      	ldrb	r3, [r7, #31]
 8003228:	2b02      	cmp	r3, #2
 800322a:	f67f af6c 	bls.w	8003106 <lis2du12_data_get+0x26>
    }
  }

  data->heat.raw = (int16_t)buff[j + 1U];
 800322e:	7fbb      	ldrb	r3, [r7, #30]
 8003230:	3301      	adds	r3, #1
 8003232:	3320      	adds	r3, #32
 8003234:	443b      	add	r3, r7
 8003236:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800323a:	b21a      	sxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	831a      	strh	r2, [r3, #24]
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[j];
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003246:	b29b      	uxth	r3, r3
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	b29b      	uxth	r3, r3
 800324c:	7fba      	ldrb	r2, [r7, #30]
 800324e:	3220      	adds	r2, #32
 8003250:	443a      	add	r2, r7
 8003252:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003256:	4413      	add	r3, r2
 8003258:	b29b      	uxth	r3, r3
 800325a:	b21a      	sxth	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	831a      	strh	r2, [r3, #24]
  /* temperature conversion */
  data->heat.deg_c = lis2du12_from_lsb_to_celsius(data->heat.raw);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fd56 	bl	8002d18 <lis2du12_from_lsb_to_celsius>
 800326c:	eef0 7a40 	vmov.f32	s15, s0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edc3 7a05 	vstr	s15, [r3, #20]

  return ret;
 8003276:	69bb      	ldr	r3, [r7, #24]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3724      	adds	r7, #36	@ 0x24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}

08003280 <lis2du12_fifo_mode_set>:
  * @param  val   set the FIFO operation mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_fifo_mode_set(stmdev_ctx_t *ctx, lis2du12_fifo_md_t *val)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  lis2du12_fifo_ctrl_t fifo_ctrl;
  lis2du12_fifo_wtm_t fifo_wtm;
  uint8_t reg[2];
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_FIFO_CTRL, reg, 2);
 800328a:	f107 0208 	add.w	r2, r7, #8
 800328e:	2302      	movs	r3, #2
 8003290:	2115      	movs	r1, #21
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fc9a 	bl	8002bcc <lis2du12_read_reg>
 8003298:	6178      	str	r0, [r7, #20]

  bytecpy((uint8_t *)&fifo_ctrl, &reg[0]);
 800329a:	f107 0208 	add.w	r2, r7, #8
 800329e:	f107 0310 	add.w	r3, r7, #16
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fcc1 	bl	8002c2c <bytecpy>
  bytecpy((uint8_t *)&fifo_wtm, &reg[1]);
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fcb8 	bl	8002c2c <bytecpy>

  fifo_ctrl.f_mode = (uint8_t) val->operation;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	7c3b      	ldrb	r3, [r7, #16]
 80032c8:	f362 0302 	bfi	r3, r2, #0, #3
 80032cc:	743b      	strb	r3, [r7, #16]
  fifo_ctrl.fifo_depth = (uint8_t) val->store;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	7c3b      	ldrb	r3, [r7, #16]
 80032da:	f362 1386 	bfi	r3, r2, #6, #1
 80032de:	743b      	strb	r3, [r7, #16]

  if (val->watermark != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	789b      	ldrb	r3, [r3, #2]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <lis2du12_fifo_mode_set+0x72>
  {
    fifo_ctrl.stop_on_fth = PROPERTY_ENABLE;
 80032e8:	7c3b      	ldrb	r3, [r7, #16]
 80032ea:	f043 0308 	orr.w	r3, r3, #8
 80032ee:	743b      	strb	r3, [r7, #16]
 80032f0:	e003      	b.n	80032fa <lis2du12_fifo_mode_set+0x7a>
  }
  else
  {
    fifo_ctrl.stop_on_fth = PROPERTY_DISABLE;
 80032f2:	7c3b      	ldrb	r3, [r7, #16]
 80032f4:	f023 0308 	bic.w	r3, r3, #8
 80032f8:	743b      	strb	r3, [r7, #16]
  }

  fifo_wtm.fth = val->watermark;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	789b      	ldrb	r3, [r3, #2]
 80032fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003302:	b2da      	uxtb	r2, r3
 8003304:	7b3b      	ldrb	r3, [r7, #12]
 8003306:	f362 0306 	bfi	r3, r2, #0, #7
 800330a:	733b      	strb	r3, [r7, #12]

  bytecpy(&reg[0], (uint8_t *)&fifo_ctrl);
 800330c:	f107 0210 	add.w	r2, r7, #16
 8003310:	f107 0308 	add.w	r3, r7, #8
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fc88 	bl	8002c2c <bytecpy>
  bytecpy(&reg[1], (uint8_t *)&fifo_wtm);
 800331c:	f107 020c 	add.w	r2, r7, #12
 8003320:	f107 0308 	add.w	r3, r7, #8
 8003324:	3301      	adds	r3, #1
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fc7f 	bl	8002c2c <bytecpy>

  ret = lis2du12_write_reg(ctx, LIS2DU12_FIFO_CTRL, reg, 2);
 800332e:	f107 0208 	add.w	r2, r7, #8
 8003332:	2302      	movs	r3, #2
 8003334:	2115      	movs	r1, #21
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fc60 	bl	8002bfc <lis2du12_write_reg>
 800333c:	6178      	str	r0, [r7, #20]

  return ret;
 800333e:	697b      	ldr	r3, [r7, #20]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e067      	b.n	8003434 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	7b1a      	ldrb	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <LIS2MDL_RegisterBusIO+0xf8>)
 80033a0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a27      	ldr	r2, [pc, #156]	@ (8003444 <LIS2MDL_RegisterBusIO+0xfc>)
 80033a6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80033be:	f04f 33ff 	mov.w	r3, #4294967295
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e036      	b.n	8003434 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4798      	blx	r3
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e02c      	b.n	8003434 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d028      	beq.n	8003434 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d123      	bne.n	8003434 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d10d      	bne.n	8003410 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80033f4:	2334      	movs	r3, #52	@ 0x34
 80033f6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80033f8:	7afb      	ldrb	r3, [r7, #11]
 80033fa:	461a      	mov	r2, r3
 80033fc:	2162      	movs	r1, #98	@ 0x62
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fb18 	bl	8003a34 <LIS2MDL_Write_Reg>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d014      	beq.n	8003434 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	e012      	b.n	8003436 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d101      	bne.n	800341c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	e00c      	b.n	8003436 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3320      	adds	r3, #32
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f000 ff69 	bl	80042fa <lis2mdl_i2c_interface_set>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	e000      	b.n	8003436 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003434:	68fb      	ldr	r3, [r7, #12]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	08003a8b 	.word	0x08003a8b
 8003444:	08003b0d 	.word	0x08003b0d

08003448 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d144      	bne.n	80034e2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003458:	f107 0208 	add.w	r2, r7, #8
 800345c:	2301      	movs	r3, #1
 800345e:	2162      	movs	r1, #98	@ 0x62
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fb94 	bl	8003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	e06c      	b.n	800354c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003472:	f107 020c 	add.w	r2, r7, #12
 8003476:	2301      	movs	r3, #1
 8003478:	2160      	movs	r1, #96	@ 0x60
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fb87 	bl	8003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	e05f      	b.n	800354c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800348c:	7a3b      	ldrb	r3, [r7, #8]
 800348e:	f043 0310 	orr.w	r3, r3, #16
 8003492:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003494:	7a3b      	ldrb	r3, [r7, #8]
 8003496:	f023 0302 	bic.w	r3, r3, #2
 800349a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800349c:	7b3b      	ldrb	r3, [r7, #12]
 800349e:	2202      	movs	r2, #2
 80034a0:	f362 0301 	bfi	r3, r2, #0, #2
 80034a4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80034a6:	7b3b      	ldrb	r3, [r7, #12]
 80034a8:	f043 030c 	orr.w	r3, r3, #12
 80034ac:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80034ae:	f107 0208 	add.w	r2, r7, #8
 80034b2:	2301      	movs	r3, #1
 80034b4:	2162      	movs	r1, #98	@ 0x62
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fca8 	bl	8003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	e041      	b.n	800354c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80034c8:	f107 020c 	add.w	r2, r7, #12
 80034cc:	2301      	movs	r3, #1
 80034ce:	2160      	movs	r1, #96	@ 0x60
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fc9b 	bl	8003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d032      	beq.n	8003542 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	e034      	b.n	800354c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3320      	adds	r3, #32
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fe61 	bl	80041b0 <lis2mdl_block_data_update_set>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
 80034f8:	e028      	b.n	800354c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3320      	adds	r3, #32
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fdd1 	bl	80040a8 <lis2mdl_operating_mode_set>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	e01c      	b.n	800354c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3320      	adds	r3, #32
 8003516:	2103      	movs	r1, #3
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fdeb 	bl	80040f4 <lis2mdl_data_rate_set>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	e010      	b.n	800354c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3320      	adds	r3, #32
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f000 febc 	bl	80042ae <lis2mdl_self_test_set>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	e004      	b.n	800354c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f8a5 	bl	80036ac <LIS2MDL_MAG_Disable>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
 800356c:	e004      	b.n	8003578 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d10b      	bne.n	80035aa <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003592:	2301      	movs	r3, #1
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	214f      	movs	r1, #79	@ 0x4f
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 faf8 	bl	8003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	e00c      	b.n	80035c4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3320      	adds	r3, #32
 80035ae:	6839      	ldr	r1, [r7, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fe6b 	bl	800428c <lis2mdl_device_id_get>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	e000      	b.n	80035c4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2200      	movs	r2, #0
 80035f2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2232      	movs	r2, #50	@ 0x32
 80035fe:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <LIS2MDL_GetCapabilities+0x58>)
 8003614:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	42c80000 	.word	0x42c80000

08003628 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e032      	b.n	80036a4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d11d      	bne.n	8003682 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003646:	f107 020c 	add.w	r2, r7, #12
 800364a:	2301      	movs	r3, #1
 800364c:	2160      	movs	r1, #96	@ 0x60
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa9d 	bl	8003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	e021      	b.n	80036a4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003660:	7b3b      	ldrb	r3, [r7, #12]
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003668:	f107 020c 	add.w	r2, r7, #12
 800366c:	2301      	movs	r3, #1
 800366e:	2160      	movs	r1, #96	@ 0x60
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fbcb 	bl	8003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295
 8003680:	e010      	b.n	80036a4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3320      	adds	r3, #32
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fd0d 	bl	80040a8 <lis2mdl_operating_mode_set>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	e004      	b.n	80036a4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e033      	b.n	800372a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d11e      	bne.n	8003708 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036ca:	f107 020c 	add.w	r2, r7, #12
 80036ce:	2301      	movs	r3, #1
 80036d0:	2160      	movs	r1, #96	@ 0x60
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa5b 	bl	8003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e022      	b.n	800372a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80036e4:	7b3b      	ldrb	r3, [r7, #12]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f362 0301 	bfi	r3, r2, #0, #2
 80036ec:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036ee:	f107 020c 	add.w	r2, r7, #12
 80036f2:	2301      	movs	r3, #1
 80036f4:	2160      	movs	r1, #96	@ 0x60
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fb88 	bl	8003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00e      	beq.n	8003720 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	e010      	b.n	800372a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3320      	adds	r3, #32
 800370c:	2102      	movs	r1, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fcca 	bl	80040a8 <lis2mdl_operating_mode_set>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	e004      	b.n	800372a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003742:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3320      	adds	r3, #32
 8003766:	f107 020b 	add.w	r2, r7, #11
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fce7 	bl	8004140 <lis2mdl_data_rate_get>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	e023      	b.n	80037c6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d81b      	bhi.n	80037bc <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003784:	a201      	add	r2, pc, #4	@ (adr r2, 800378c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080037a5 	.word	0x080037a5
 8003794:	080037ad 	.word	0x080037ad
 8003798:	080037b5 	.word	0x080037b5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4a0c      	ldr	r2, [pc, #48]	@ (80037d0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80037a0:	601a      	str	r2, [r3, #0]
      break;
 80037a2:	e00f      	b.n	80037c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80037a8:	601a      	str	r2, [r3, #0]
      break;
 80037aa:	e00b      	b.n	80037c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4a0a      	ldr	r2, [pc, #40]	@ (80037d8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80037b0:	601a      	str	r2, [r3, #0]
      break;
 80037b2:	e007      	b.n	80037c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4a09      	ldr	r2, [pc, #36]	@ (80037dc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80037b8:	601a      	str	r2, [r3, #0]
      break;
 80037ba:	e003      	b.n	80037c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	60fb      	str	r3, [r7, #12]
      break;
 80037c2:	bf00      	nop
  }

  return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	41200000 	.word	0x41200000
 80037d4:	41a00000 	.word	0x41a00000
 80037d8:	42480000 	.word	0x42480000
 80037dc:	42c80000 	.word	0x42c80000

080037e0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80037ec:	edd7 7a00 	vldr	s15, [r7]
 80037f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80037f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fc:	d801      	bhi.n	8003802 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80037fe:	2300      	movs	r3, #0
 8003800:	e016      	b.n	8003830 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003802:	edd7 7a00 	vldr	s15, [r7]
 8003806:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800380a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d801      	bhi.n	8003818 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003814:	2301      	movs	r3, #1
 8003816:	e00b      	b.n	8003830 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003818:	edd7 7a00 	vldr	s15, [r7]
 800381c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80038a4 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003828:	d801      	bhi.n	800382e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800382a:	2302      	movs	r3, #2
 800382c:	e000      	b.n	8003830 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800382e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003830:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d121      	bne.n	800387e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800383a:	f107 020c 	add.w	r2, r7, #12
 800383e:	2301      	movs	r3, #1
 8003840:	2160      	movs	r1, #96	@ 0x60
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9a3 	bl	8003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	e022      	b.n	800389a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	b2da      	uxtb	r2, r3
 800385c:	7b3b      	ldrb	r3, [r7, #12]
 800385e:	f362 0383 	bfi	r3, r2, #2, #2
 8003862:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003864:	f107 020c 	add.w	r2, r7, #12
 8003868:	2301      	movs	r3, #1
 800386a:	2160      	movs	r1, #96	@ 0x60
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 facd 	bl	8003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00f      	beq.n	8003898 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
 800387c:	e00d      	b.n	800389a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3320      	adds	r3, #32
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fc34 	bl	80040f4 <lis2mdl_data_rate_set>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	e000      	b.n	800389a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	42480000 	.word	0x42480000

080038a8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2232      	movs	r2, #50	@ 0x32
 80038b6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3320      	adds	r3, #32
 80038ec:	f107 0208 	add.w	r2, r7, #8
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fc82 	bl	80041fc <lis2mdl_magnetic_raw_get>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	e00c      	b.n	800391e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003904:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800390c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003914:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b088      	sub	sp, #32
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d134      	bne.n	80039a2 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003938:	f107 0218 	add.w	r2, r7, #24
 800393c:	2306      	movs	r3, #6
 800393e:	2168      	movs	r1, #104	@ 0x68
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f924 	bl	8003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	e06c      	b.n	8003a2c <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003952:	7e7b      	ldrb	r3, [r7, #25]
 8003954:	b21b      	sxth	r3, r3
 8003956:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003958:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800395c:	b29b      	uxth	r3, r3
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	b29b      	uxth	r3, r3
 8003962:	7e3a      	ldrb	r2, [r7, #24]
 8003964:	4413      	add	r3, r2
 8003966:	b29b      	uxth	r3, r3
 8003968:	b21b      	sxth	r3, r3
 800396a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800396c:	7efb      	ldrb	r3, [r7, #27]
 800396e:	b21b      	sxth	r3, r3
 8003970:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003972:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003976:	b29b      	uxth	r3, r3
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	b29b      	uxth	r3, r3
 800397c:	7eba      	ldrb	r2, [r7, #26]
 800397e:	4413      	add	r3, r2
 8003980:	b29b      	uxth	r3, r3
 8003982:	b21b      	sxth	r3, r3
 8003984:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003986:	7f7b      	ldrb	r3, [r7, #29]
 8003988:	b21b      	sxth	r3, r3
 800398a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800398c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003990:	b29b      	uxth	r3, r3
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	b29b      	uxth	r3, r3
 8003996:	7f3a      	ldrb	r2, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	b21b      	sxth	r3, r3
 800399e:	82bb      	strh	r3, [r7, #20]
 80039a0:	e00d      	b.n	80039be <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3320      	adds	r3, #32
 80039a6:	f107 0210 	add.w	r2, r7, #16
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fc25 	bl	80041fc <lis2mdl_magnetic_raw_get>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	e036      	b.n	8003a2c <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80039be:	f107 030c 	add.w	r3, r7, #12
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff feb4 	bl	8003732 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80039ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039e2:	ee17 2a90 	vmov	r2, s15
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80039ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a02:	ee17 2a90 	vmov	r2, s15
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003a0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a22:	ee17 2a90 	vmov	r2, s15
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
 8003a40:	4613      	mov	r3, r2
 8003a42:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d10b      	bne.n	8003a64 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003a4c:	1cba      	adds	r2, r7, #2
 8003a4e:	78f9      	ldrb	r1, [r7, #3]
 8003a50:	2301      	movs	r3, #1
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9da 	bl	8003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	e00e      	b.n	8003a82 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f103 0020 	add.w	r0, r3, #32
 8003a6a:	1cba      	adds	r2, r7, #2
 8003a6c:	78f9      	ldrb	r1, [r7, #3]
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f000 fb02 	bl	8004078 <lis2mdl_write_reg>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e000      	b.n	8003a82 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a8a:	b590      	push	{r4, r7, lr}
 8003a8c:	b087      	sub	sp, #28
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	461a      	mov	r2, r3
 8003a96:	460b      	mov	r3, r1
 8003a98:	72fb      	strb	r3, [r7, #11]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10e      	bne.n	8003ac8 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	695c      	ldr	r4, [r3, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	7b1b      	ldrb	r3, [r3, #12]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	4619      	mov	r1, r3
 8003abe:	893b      	ldrh	r3, [r7, #8]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	47a0      	blx	r4
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	e01d      	b.n	8003b04 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d10b      	bne.n	8003ae8 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	695c      	ldr	r4, [r3, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	7b1b      	ldrb	r3, [r3, #12]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	b299      	uxth	r1, r3
 8003ade:	893b      	ldrh	r3, [r7, #8]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	47a0      	blx	r4
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	e00d      	b.n	8003b04 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	695c      	ldr	r4, [r3, #20]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	7b1b      	ldrb	r3, [r3, #12]
 8003af0:	4618      	mov	r0, r3
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	893b      	ldrh	r3, [r7, #8]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	47a0      	blx	r4
 8003b02:	4603      	mov	r3, r0
  }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd90      	pop	{r4, r7, pc}

08003b0c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	461a      	mov	r2, r3
 8003b18:	460b      	mov	r3, r1
 8003b1a:	72fb      	strb	r3, [r7, #11]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10e      	bne.n	8003b4a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	691c      	ldr	r4, [r3, #16]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	7b1b      	ldrb	r3, [r3, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	7afb      	ldrb	r3, [r7, #11]
 8003b38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	4619      	mov	r1, r3
 8003b40:	893b      	ldrh	r3, [r7, #8]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	47a0      	blx	r4
 8003b46:	4603      	mov	r3, r0
 8003b48:	e01d      	b.n	8003b86 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d10b      	bne.n	8003b6a <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	691c      	ldr	r4, [r3, #16]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	7b1b      	ldrb	r3, [r3, #12]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	b299      	uxth	r1, r3
 8003b60:	893b      	ldrh	r3, [r7, #8]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	47a0      	blx	r4
 8003b66:	4603      	mov	r3, r0
 8003b68:	e00d      	b.n	8003b86 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	691c      	ldr	r4, [r3, #16]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	7b1b      	ldrb	r3, [r3, #12]
 8003b72:	4618      	mov	r0, r3
 8003b74:	7afb      	ldrb	r3, [r7, #11]
 8003b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	893b      	ldrh	r3, [r7, #8]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	47a0      	blx	r4
 8003b84:	4603      	mov	r3, r0
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd90      	pop	{r4, r7, pc}

08003b8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b08c      	sub	sp, #48	@ 0x30
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	72fb      	strb	r3, [r7, #11]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003ba8:	2340      	movs	r3, #64	@ 0x40
 8003baa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003bb4:	233d      	movs	r3, #61	@ 0x3d
 8003bb6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003bb8:	2315      	movs	r3, #21
 8003bba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003bbe:	2316      	movs	r3, #22
 8003bc0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8003bc4:	2317      	movs	r3, #23
 8003bc6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8003bca:	2314      	movs	r3, #20
 8003bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003bd0:	2344      	movs	r3, #68	@ 0x44
 8003bd2:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003bda:	2339      	movs	r3, #57	@ 0x39
 8003bdc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003be6:	2329      	movs	r3, #41	@ 0x29
 8003be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003bec:	231e      	movs	r3, #30
 8003bee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003bfe:	2310      	movs	r3, #16
 8003c00:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003c0a:	2340      	movs	r3, #64	@ 0x40
 8003c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f103 0020 	add.w	r0, r3, #32
 8003c16:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003c1a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f000 fa2a 	bl	8004078 <lis2mdl_write_reg>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	e0e9      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f103 0020 	add.w	r0, r3, #32
 8003c36:	f107 021f 	add.w	r2, r7, #31
 8003c3a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f000 fa1a 	bl	8004078 <lis2mdl_write_reg>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	e0d9      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f103 0020 	add.w	r0, r3, #32
 8003c56:	f107 020b 	add.w	r2, r7, #11
 8003c5a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f000 fa0a 	bl	8004078 <lis2mdl_write_reg>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e0c9      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f103 0020 	add.w	r0, r3, #32
 8003c76:	f107 021d 	add.w	r2, r7, #29
 8003c7a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f000 f9fa 	bl	8004078 <lis2mdl_write_reg>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	e0b9      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f103 0020 	add.w	r0, r3, #32
 8003c96:	f107 021e 	add.w	r2, r7, #30
 8003c9a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f000 f9ea 	bl	8004078 <lis2mdl_write_reg>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e0a9      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f103 0020 	add.w	r0, r3, #32
 8003cb6:	f107 0220 	add.w	r2, r7, #32
 8003cba:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f000 f9da 	bl	8004078 <lis2mdl_write_reg>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	e099      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f103 0020 	add.w	r0, r3, #32
 8003cd6:	f107 021c 	add.w	r2, r7, #28
 8003cda:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f000 f9b2 	bl	8004048 <lis2mdl_read_reg>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e089      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003cf0:	7f3b      	ldrb	r3, [r7, #28]
 8003cf2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d102      	bne.n	8003d00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003cfa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003cfe:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f103 0020 	add.w	r0, r3, #32
 8003d06:	f107 021c 	add.w	r2, r7, #28
 8003d0a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f000 f9b2 	bl	8004078 <lis2mdl_write_reg>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1e:	e071      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f103 0020 	add.w	r0, r3, #32
 8003d26:	f107 0214 	add.w	r2, r7, #20
 8003d2a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003d2e:	2306      	movs	r3, #6
 8003d30:	f000 f98a 	bl	8004048 <lis2mdl_read_reg>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	e061      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f103 0020 	add.w	r0, r3, #32
 8003d46:	f107 021b 	add.w	r2, r7, #27
 8003d4a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f000 f97a 	bl	8004048 <lis2mdl_read_reg>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	e051      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003d60:	7efa      	ldrb	r2, [r7, #27]
 8003d62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d66:	4013      	ands	r3, r2
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d1e6      	bne.n	8003d40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f103 0020 	add.w	r0, r3, #32
 8003d78:	f107 021b 	add.w	r2, r7, #27
 8003d7c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8003d80:	2301      	movs	r3, #1
 8003d82:	f000 f961 	bl	8004048 <lis2mdl_read_reg>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	e038      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003d92:	7efa      	ldrb	r2, [r7, #27]
 8003d94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d98:	4013      	ands	r3, r2
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1e6      	bne.n	8003d72 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f103 0020 	add.w	r0, r3, #32
 8003daa:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003dae:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003db2:	2301      	movs	r3, #1
 8003db4:	f000 f960 	bl	8004078 <lis2mdl_write_reg>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	e01f      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f103 0020 	add.w	r0, r3, #32
 8003dca:	893b      	ldrh	r3, [r7, #8]
 8003dcc:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	f000 f939 	bl	8004048 <lis2mdl_read_reg>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8003de0:	e010      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f103 0020 	add.w	r0, r3, #32
 8003de8:	f107 0220 	add.w	r2, r7, #32
 8003dec:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003df0:	2301      	movs	r3, #1
 8003df2:	f000 f941 	bl	8004078 <lis2mdl_write_reg>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003e00:	e000      	b.n	8003e04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3730      	adds	r7, #48	@ 0x30
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	@ 0x30
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	460b      	mov	r3, r1
 8003e1a:	72fb      	strb	r3, [r7, #11]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003e26:	2340      	movs	r3, #64	@ 0x40
 8003e28:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003e32:	233c      	movs	r3, #60	@ 0x3c
 8003e34:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003e36:	2315      	movs	r3, #21
 8003e38:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003e3c:	2316      	movs	r3, #22
 8003e3e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8003e42:	2317      	movs	r3, #23
 8003e44:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003e4c:	2314      	movs	r3, #20
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003e52:	2344      	movs	r3, #68	@ 0x44
 8003e54:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003e56:	2339      	movs	r3, #57	@ 0x39
 8003e58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003e62:	2329      	movs	r3, #41	@ 0x29
 8003e64:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003e68:	231e      	movs	r3, #30
 8003e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003e74:	2310      	movs	r3, #16
 8003e76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003e80:	2340      	movs	r3, #64	@ 0x40
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003e86:	230e      	movs	r3, #14
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f103 0020 	add.w	r0, r3, #32
 8003e92:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003e96:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f000 f8ec 	bl	8004078 <lis2mdl_write_reg>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	e0c9      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f103 0020 	add.w	r0, r3, #32
 8003eb2:	f107 021f 	add.w	r2, r7, #31
 8003eb6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f000 f8dc 	bl	8004078 <lis2mdl_write_reg>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	e0b9      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f103 0020 	add.w	r0, r3, #32
 8003ed2:	f107 020b 	add.w	r2, r7, #11
 8003ed6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003eda:	2301      	movs	r3, #1
 8003edc:	f000 f8cc 	bl	8004078 <lis2mdl_write_reg>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eea:	e0a9      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f103 0020 	add.w	r0, r3, #32
 8003ef2:	f107 021e 	add.w	r2, r7, #30
 8003ef6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003efa:	2301      	movs	r3, #1
 8003efc:	f000 f8bc 	bl	8004078 <lis2mdl_write_reg>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	e099      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f103 0020 	add.w	r0, r3, #32
 8003f12:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8003f16:	2301      	movs	r3, #1
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	f000 f8ad 	bl	8004078 <lis2mdl_write_reg>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003f24:	f04f 33ff 	mov.w	r3, #4294967295
 8003f28:	e08a      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f103 0020 	add.w	r0, r3, #32
 8003f30:	f107 021d 	add.w	r2, r7, #29
 8003f34:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f000 f89d 	bl	8004078 <lis2mdl_write_reg>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	e07a      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f103 0020 	add.w	r0, r3, #32
 8003f50:	f107 0220 	add.w	r2, r7, #32
 8003f54:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f000 f88d 	bl	8004078 <lis2mdl_write_reg>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	e06a      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f103 0020 	add.w	r0, r3, #32
 8003f70:	f107 021c 	add.w	r2, r7, #28
 8003f74:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f000 f865 	bl	8004048 <lis2mdl_read_reg>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
 8003f88:	e05a      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003f8a:	7f3b      	ldrb	r3, [r7, #28]
 8003f8c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d102      	bne.n	8003f9a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003f94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f98:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f103 0020 	add.w	r0, r3, #32
 8003fa0:	f107 021c 	add.w	r2, r7, #28
 8003fa4:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f000 f865 	bl	8004078 <lis2mdl_write_reg>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb8:	e042      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f103 0020 	add.w	r0, r3, #32
 8003fc0:	f107 0214 	add.w	r2, r7, #20
 8003fc4:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8003fc8:	2306      	movs	r3, #6
 8003fca:	f000 f83d 	bl	8004048 <lis2mdl_read_reg>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd8:	e032      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f103 0020 	add.w	r0, r3, #32
 8003fe0:	f107 021b 	add.w	r2, r7, #27
 8003fe4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f000 f82d 	bl	8004048 <lis2mdl_read_reg>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	e022      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003ffa:	7efa      	ldrb	r2, [r7, #27]
 8003ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004000:	4013      	ands	r3, r2
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004008:	429a      	cmp	r2, r3
 800400a:	d1e6      	bne.n	8003fda <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f103 0020 	add.w	r0, r3, #32
 8004012:	f107 021b 	add.w	r2, r7, #27
 8004016:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800401a:	2301      	movs	r3, #1
 800401c:	f000 f814 	bl	8004048 <lis2mdl_read_reg>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e009      	b.n	8004040 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 800402c:	7efa      	ldrb	r2, [r7, #27]
 800402e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004032:	4013      	ands	r3, r2
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800403a:	429a      	cmp	r2, r3
 800403c:	d1e6      	bne.n	800400c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3730      	adds	r7, #48	@ 0x30
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	460b      	mov	r3, r1
 8004056:	72fb      	strb	r3, [r7, #11]
 8004058:	4613      	mov	r3, r2
 800405a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685c      	ldr	r4, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68d8      	ldr	r0, [r3, #12]
 8004064:	893b      	ldrh	r3, [r7, #8]
 8004066:	7af9      	ldrb	r1, [r7, #11]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	47a0      	blx	r4
 800406c:	6178      	str	r0, [r7, #20]

  return ret;
 800406e:	697b      	ldr	r3, [r7, #20]
}
 8004070:	4618      	mov	r0, r3
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}

08004078 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	461a      	mov	r2, r3
 8004084:	460b      	mov	r3, r1
 8004086:	72fb      	strb	r3, [r7, #11]
 8004088:	4613      	mov	r3, r2
 800408a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681c      	ldr	r4, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68d8      	ldr	r0, [r3, #12]
 8004094:	893b      	ldrh	r3, [r7, #8]
 8004096:	7af9      	ldrb	r1, [r7, #11]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	47a0      	blx	r4
 800409c:	6178      	str	r0, [r7, #20]

  return ret;
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd90      	pop	{r4, r7, pc}

080040a8 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040b4:	f107 0208 	add.w	r2, r7, #8
 80040b8:	2301      	movs	r3, #1
 80040ba:	2160      	movs	r1, #96	@ 0x60
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ffc3 	bl	8004048 <lis2mdl_read_reg>
 80040c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	7a3b      	ldrb	r3, [r7, #8]
 80040d4:	f362 0301 	bfi	r3, r2, #0, #2
 80040d8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040da:	f107 0208 	add.w	r2, r7, #8
 80040de:	2301      	movs	r3, #1
 80040e0:	2160      	movs	r1, #96	@ 0x60
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff ffc8 	bl	8004078 <lis2mdl_write_reg>
 80040e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004100:	f107 0208 	add.w	r2, r7, #8
 8004104:	2301      	movs	r3, #1
 8004106:	2160      	movs	r1, #96	@ 0x60
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff9d 	bl	8004048 <lis2mdl_read_reg>
 800410e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	b2da      	uxtb	r2, r3
 800411e:	7a3b      	ldrb	r3, [r7, #8]
 8004120:	f362 0383 	bfi	r3, r2, #2, #2
 8004124:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004126:	f107 0208 	add.w	r2, r7, #8
 800412a:	2301      	movs	r3, #1
 800412c:	2160      	movs	r1, #96	@ 0x60
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ffa2 	bl	8004078 <lis2mdl_write_reg>
 8004134:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800414a:	f107 0208 	add.w	r2, r7, #8
 800414e:	2301      	movs	r3, #1
 8004150:	2160      	movs	r1, #96	@ 0x60
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff ff78 	bl	8004048 <lis2mdl_read_reg>
 8004158:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800415a:	7a3b      	ldrb	r3, [r7, #8]
 800415c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b03      	cmp	r3, #3
 8004164:	d81a      	bhi.n	800419c <lis2mdl_data_rate_get+0x5c>
 8004166:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <lis2mdl_data_rate_get+0x2c>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004185 	.word	0x08004185
 8004174:	0800418d 	.word	0x0800418d
 8004178:	08004195 	.word	0x08004195
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
      break;
 8004182:	e00f      	b.n	80041a4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
      break;
 800418a:	e00b      	b.n	80041a4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2202      	movs	r2, #2
 8004190:	701a      	strb	r2, [r3, #0]
      break;
 8004192:	e007      	b.n	80041a4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2203      	movs	r2, #3
 8004198:	701a      	strb	r2, [r3, #0]
      break;
 800419a:	e003      	b.n	80041a4 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
      break;
 80041a2:	bf00      	nop
  }

  return ret;
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop

080041b0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041bc:	f107 0208 	add.w	r2, r7, #8
 80041c0:	2301      	movs	r3, #1
 80041c2:	2162      	movs	r1, #98	@ 0x62
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff3f 	bl	8004048 <lis2mdl_read_reg>
 80041ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	7a3b      	ldrb	r3, [r7, #8]
 80041dc:	f362 1304 	bfi	r3, r2, #4, #1
 80041e0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041e2:	f107 0208 	add.w	r2, r7, #8
 80041e6:	2301      	movs	r3, #1
 80041e8:	2162      	movs	r1, #98	@ 0x62
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ff44 	bl	8004078 <lis2mdl_write_reg>
 80041f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004206:	f107 020c 	add.w	r2, r7, #12
 800420a:	2306      	movs	r3, #6
 800420c:	2168      	movs	r1, #104	@ 0x68
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ff1a 	bl	8004048 <lis2mdl_read_reg>
 8004214:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004216:	7b7b      	ldrb	r3, [r7, #13]
 8004218:	b21a      	sxth	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004224:	b29b      	uxth	r3, r3
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	b29b      	uxth	r3, r3
 800422a:	7b3a      	ldrb	r2, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	b29b      	uxth	r3, r3
 8004230:	b21a      	sxth	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	3302      	adds	r3, #2
 800423c:	b212      	sxth	r2, r2
 800423e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	3302      	adds	r3, #2
 8004244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004248:	b29b      	uxth	r3, r3
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	b29b      	uxth	r3, r3
 800424e:	7bba      	ldrb	r2, [r7, #14]
 8004250:	4413      	add	r3, r2
 8004252:	b29a      	uxth	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	3302      	adds	r3, #2
 8004258:	b212      	sxth	r2, r2
 800425a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800425c:	7c7a      	ldrb	r2, [r7, #17]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	3304      	adds	r3, #4
 8004262:	b212      	sxth	r2, r2
 8004264:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426e:	b29b      	uxth	r3, r3
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	b29b      	uxth	r3, r3
 8004274:	7c3a      	ldrb	r2, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	b29a      	uxth	r2, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	b212      	sxth	r2, r2
 8004280:	801a      	strh	r2, [r3, #0]

  return ret;
 8004282:	697b      	ldr	r3, [r7, #20]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004296:	2301      	movs	r3, #1
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	214f      	movs	r1, #79	@ 0x4f
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fed3 	bl	8004048 <lis2mdl_read_reg>
 80042a2:	60f8      	str	r0, [r7, #12]

  return ret;
 80042a4:	68fb      	ldr	r3, [r7, #12]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	460b      	mov	r3, r1
 80042b8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80042ba:	f107 0208 	add.w	r2, r7, #8
 80042be:	2301      	movs	r3, #1
 80042c0:	2162      	movs	r1, #98	@ 0x62
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fec0 	bl	8004048 <lis2mdl_read_reg>
 80042c8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10f      	bne.n	80042f0 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	7a3b      	ldrb	r3, [r7, #8]
 80042da:	f362 0341 	bfi	r3, r2, #1, #1
 80042de:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80042e0:	f107 0208 	add.w	r2, r7, #8
 80042e4:	2301      	movs	r3, #1
 80042e6:	2162      	movs	r1, #98	@ 0x62
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff fec5 	bl	8004078 <lis2mdl_write_reg>
 80042ee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042f0:	68fb      	ldr	r3, [r7, #12]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004306:	f107 0208 	add.w	r2, r7, #8
 800430a:	2301      	movs	r3, #1
 800430c:	2162      	movs	r1, #98	@ 0x62
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fe9a 	bl	8004048 <lis2mdl_read_reg>
 8004314:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10f      	bne.n	800433c <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	7a3b      	ldrb	r3, [r7, #8]
 8004326:	f362 1345 	bfi	r3, r2, #5, #1
 800432a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800432c:	f107 0208 	add.w	r2, r7, #8
 8004330:	2301      	movs	r3, #1
 8004332:	2162      	movs	r1, #98	@ 0x62
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fe9f 	bl	8004078 <lis2mdl_write_reg>
 800433a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800433c:	68fb      	ldr	r3, [r7, #12]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e051      	b.n	8004408 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	7b1a      	ldrb	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a1d      	ldr	r2, [pc, #116]	@ (8004414 <LPS22DF_RegisterBusIO+0xcc>)
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004418 <LPS22DF_RegisterBusIO+0xd0>)
 80043a6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e020      	b.n	8004408 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4798      	blx	r3
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e016      	b.n	8004408 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d112      	bne.n	8004408 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10d      	bne.n	8004408 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 80043ec:	2320      	movs	r3, #32
 80043ee:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 80043f0:	7afb      	ldrb	r3, [r7, #11]
 80043f2:	461a      	mov	r2, r3
 80043f4:	210e      	movs	r1, #14
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9e6 	bl	80047c8 <LPS22DF_Write_Reg>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004408:	68fb      	ldr	r3, [r7, #12]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	08004b6d 	.word	0x08004b6d
 8004418:	08004ba3 	.word	0x08004ba3

0800441c <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fb40 	bl	8004ab4 <LPS22DF_Initialize>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295
 800443e:	e004      	b.n	800444a <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004460:	2b01      	cmp	r3, #1
 8004462:	d111      	bne.n	8004488 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f882 	bl	800456e <LPS22DF_PRESS_Disable>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 8004470:	f04f 33ff 	mov.w	r3, #4294967295
 8004474:	e00d      	b.n	8004492 <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f921 	bl	80046be <LPS22DF_TEMP_Disable>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	e004      	b.n	8004492 <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3320      	adds	r3, #32
 80044a8:	f107 020c 	add.w	r2, r7, #12
 80044ac:	4611      	mov	r1, r2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fc0a 	bl	8004cc8 <lps22df_id_get>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
 80044be:	e003      	b.n	80044c8 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 80044c0:	7b3a      	ldrb	r2, [r7, #12]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2200      	movs	r2, #0
 80044de:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4a08      	ldr	r2, [pc, #32]	@ (8004524 <LPS22DF_GetCapabilities+0x54>)
 8004504:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	4a06      	ldr	r2, [pc, #24]	@ (8004524 <LPS22DF_GetCapabilities+0x54>)
 800450a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	43480000 	.word	0x43480000

08004528 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e013      	b.n	8004566 <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f103 0220 	add.w	r2, r3, #32
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3333      	adds	r3, #51	@ 0x33
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 fcac 	bl	8004ea8 <lps22df_mode_set>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
 800455a:	e004      	b.n	8004566 <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e030      	b.n	80045e6 <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d126      	bne.n	80045dc <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3320      	adds	r3, #32
 8004592:	f107 020c 	add.w	r2, r7, #12
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fce3 	bl	8004f64 <lps22df_mode_get>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
 80045a8:	e01d      	b.n	80045e6 <LPS22DF_PRESS_Disable+0x78>
    }

    memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3333      	adds	r3, #51	@ 0x33
 80045ae:	461a      	mov	r2, r3
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	8819      	ldrh	r1, [r3, #0]
 80045b6:	789b      	ldrb	r3, [r3, #2]
 80045b8:	8011      	strh	r1, [r2, #0]
 80045ba:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 80045bc:	2300      	movs	r3, #0
 80045be:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3320      	adds	r3, #32
 80045c4:	f107 020c 	add.w	r2, r7, #12
 80045c8:	4611      	mov	r1, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fc6c 	bl	8004ea8 <lps22df_mode_set>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e004      	b.n	80045e6 <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f900 	bl	8004800 <LPS22DF_GetOutputDataRate>
 8004600:	4603      	mov	r3, r0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float Odr)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004620:	ed97 0a00 	vldr	s0, [r7]
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f955 	bl	80048d4 <LPS22DF_SetOutputDataRate_When_Enabled>
 800462a:	4603      	mov	r3, r0
 800462c:	e005      	b.n	800463a <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800462e:	ed97 0a00 	vldr	s0, [r7]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f9da 	bl	80049ec <LPS22DF_SetOutputDataRate_When_Disabled>
 8004638:	4603      	mov	r3, r0
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float *Value)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  lps22df_data_t data;

  if (lps22df_data_get(&(pObj->Ctx), &data) != LPS22DF_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3320      	adds	r3, #32
 8004650:	f107 0208 	add.w	r2, r7, #8
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fd50 	bl	80050fc <lps22df_data_get>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 8004662:	f04f 33ff 	mov.w	r3, #4294967295
 8004666:	e003      	b.n	8004670 <LPS22DF_PRESS_GetPressure+0x2e>
  }

  *Value = data.pressure.hpa;
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	601a      	str	r2, [r3, #0]

  return LPS22DF_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e013      	b.n	80046b6 <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f103 0220 	add.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3333      	adds	r3, #51	@ 0x33
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f000 fc04 	bl	8004ea8 <lps22df_mode_set>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80046a6:	f04f 33ff 	mov.w	r3, #4294967295
 80046aa:	e004      	b.n	80046b6 <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e030      	b.n	8004736 <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d126      	bne.n	800472c <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3320      	adds	r3, #32
 80046e2:	f107 020c 	add.w	r2, r7, #12
 80046e6:	4611      	mov	r1, r2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fc3b 	bl	8004f64 <lps22df_mode_get>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80046f4:	f04f 33ff 	mov.w	r3, #4294967295
 80046f8:	e01d      	b.n	8004736 <LPS22DF_TEMP_Disable+0x78>
    }

    memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3333      	adds	r3, #51	@ 0x33
 80046fe:	461a      	mov	r2, r3
 8004700:	f107 030c 	add.w	r3, r7, #12
 8004704:	8819      	ldrh	r1, [r3, #0]
 8004706:	789b      	ldrb	r3, [r3, #2]
 8004708:	8011      	strh	r1, [r2, #0]
 800470a:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 800470c:	2300      	movs	r3, #0
 800470e:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3320      	adds	r3, #32
 8004714:	f107 020c 	add.w	r2, r7, #12
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fbc4 	bl	8004ea8 <lps22df_mode_set>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	e004      	b.n	8004736 <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f858 	bl	8004800 <LPS22DF_GetOutputDataRate>
 8004750:	4603      	mov	r3, r0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float Odr)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004770:	ed97 0a00 	vldr	s0, [r7]
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f8ad 	bl	80048d4 <LPS22DF_SetOutputDataRate_When_Enabled>
 800477a:	4603      	mov	r3, r0
 800477c:	e005      	b.n	800478a <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800477e:	ed97 0a00 	vldr	s0, [r7]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f932 	bl	80049ec <LPS22DF_SetOutputDataRate_When_Disabled>
 8004788:	4603      	mov	r3, r0
  }
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float *Value)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
  lps22df_data_t data;

  if (lps22df_data_get(&(pObj->Ctx), &data) != LPS22DF_OK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3320      	adds	r3, #32
 80047a0:	f107 0208 	add.w	r2, r7, #8
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fca8 	bl	80050fc <lps22df_data_get>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	e003      	b.n	80047c0 <LPS22DF_TEMP_GetTemperature+0x2e>
  }

  *Value = data.heat.deg_c;
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	601a      	str	r2, [r3, #0]

  return LPS22DF_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	70fb      	strb	r3, [r7, #3]
 80047d4:	4613      	mov	r3, r2
 80047d6:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f103 0020 	add.w	r0, r3, #32
 80047de:	1cba      	adds	r2, r7, #2
 80047e0:	78f9      	ldrb	r1, [r7, #3]
 80047e2:	2301      	movs	r3, #1
 80047e4:	f000 fa10 	bl	8004c08 <lps22df_write_reg>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 80047ee:	f04f 33ff 	mov.w	r3, #4294967295
 80047f2:	e000      	b.n	80047f6 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3320      	adds	r3, #32
 8004812:	f107 0208 	add.w	r2, r7, #8
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fba3 	bl	8004f64 <lps22df_mode_get>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 8004824:	f04f 33ff 	mov.w	r3, #4294967295
 8004828:	e044      	b.n	80048b4 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 800482a:	7a3b      	ldrb	r3, [r7, #8]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d83c      	bhi.n	80048aa <LPS22DF_GetOutputDataRate+0xaa>
 8004830:	a201      	add	r2, pc, #4	@ (adr r2, 8004838 <LPS22DF_GetOutputDataRate+0x38>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800485d 	.word	0x0800485d
 800483c:	08004867 	.word	0x08004867
 8004840:	08004871 	.word	0x08004871
 8004844:	0800487b 	.word	0x0800487b
 8004848:	08004883 	.word	0x08004883
 800484c:	0800488b 	.word	0x0800488b
 8004850:	08004893 	.word	0x08004893
 8004854:	0800489b 	.word	0x0800489b
 8004858:	080048a3 	.word	0x080048a3
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
      break;
 8004864:	e025      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800486c:	601a      	str	r2, [r3, #0]
      break;
 800486e:	e020      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004876:	601a      	str	r2, [r3, #0]
      break;
 8004878:	e01b      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4a0f      	ldr	r2, [pc, #60]	@ (80048bc <LPS22DF_GetOutputDataRate+0xbc>)
 800487e:	601a      	str	r2, [r3, #0]
      break;
 8004880:	e017      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	4a0e      	ldr	r2, [pc, #56]	@ (80048c0 <LPS22DF_GetOutputDataRate+0xc0>)
 8004886:	601a      	str	r2, [r3, #0]
      break;
 8004888:	e013      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	4a0d      	ldr	r2, [pc, #52]	@ (80048c4 <LPS22DF_GetOutputDataRate+0xc4>)
 800488e:	601a      	str	r2, [r3, #0]
      break;
 8004890:	e00f      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	4a0c      	ldr	r2, [pc, #48]	@ (80048c8 <LPS22DF_GetOutputDataRate+0xc8>)
 8004896:	601a      	str	r2, [r3, #0]
      break;
 8004898:	e00b      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	4a0b      	ldr	r2, [pc, #44]	@ (80048cc <LPS22DF_GetOutputDataRate+0xcc>)
 800489e:	601a      	str	r2, [r3, #0]
      break;
 80048a0:	e007      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	@ (80048d0 <LPS22DF_GetOutputDataRate+0xd0>)
 80048a6:	601a      	str	r2, [r3, #0]
      break;
 80048a8:	e003      	b.n	80048b2 <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295
 80048ae:	60fb      	str	r3, [r7, #12]
      break;
 80048b0:	bf00      	nop
  }

  return ret;
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	41200000 	.word	0x41200000
 80048c0:	41c80000 	.word	0x41c80000
 80048c4:	42480000 	.word	0x42480000
 80048c8:	42960000 	.word	0x42960000
 80048cc:	42c80000 	.word	0x42c80000
 80048d0:	43480000 	.word	0x43480000

080048d4 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float Odr)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3320      	adds	r3, #32
 80048e4:	f107 020c 	add.w	r2, r7, #12
 80048e8:	4611      	mov	r1, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fb3a 	bl	8004f64 <lps22df_mode_get>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	e06c      	b.n	80049d6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 80048fc:	edd7 7a00 	vldr	s15, [r7]
 8004900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490c:	d801      	bhi.n	8004912 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 800490e:	2301      	movs	r3, #1
 8004910:	e042      	b.n	8004998 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004912:	edd7 7a00 	vldr	s15, [r7]
 8004916:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800491a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	d801      	bhi.n	8004928 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8004924:	2302      	movs	r3, #2
 8004926:	e037      	b.n	8004998 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004928:	edd7 7a00 	vldr	s15, [r7]
 800492c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d801      	bhi.n	800493e <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 800493a:	2303      	movs	r3, #3
 800493c:	e02c      	b.n	8004998 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800493e:	edd7 7a00 	vldr	s15, [r7]
 8004942:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494e:	d801      	bhi.n	8004954 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8004950:	2304      	movs	r3, #4
 8004952:	e021      	b.n	8004998 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004954:	edd7 7a00 	vldr	s15, [r7]
 8004958:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80049e0 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 800495c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	d801      	bhi.n	800496a <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8004966:	2305      	movs	r3, #5
 8004968:	e016      	b.n	8004998 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800496a:	edd7 7a00 	vldr	s15, [r7]
 800496e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80049e4 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 8004972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497a:	d801      	bhi.n	8004980 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 800497c:	2306      	movs	r3, #6
 800497e:	e00b      	b.n	8004998 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004980:	edd7 7a00 	vldr	s15, [r7]
 8004984:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80049e8 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8004988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	d801      	bhi.n	8004996 <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 8004992:	2307      	movs	r3, #7
 8004994:	e000      	b.n	8004998 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004996:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8004998:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3320      	adds	r3, #32
 800499e:	f107 020c 	add.w	r2, r7, #12
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fa7f 	bl	8004ea8 <lps22df_mode_set>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	e00f      	b.n	80049d6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f103 0220 	add.w	r2, r3, #32
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3333      	adds	r3, #51	@ 0x33
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f000 face 	bl	8004f64 <lps22df_mode_get>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295
 80049d2:	e000      	b.n	80049d6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	42480000 	.word	0x42480000
 80049e4:	42960000 	.word	0x42960000
 80049e8:	42c80000 	.word	0x42c80000

080049ec <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float Odr)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 80049f8:	edd7 7a00 	vldr	s15, [r7]
 80049fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	d801      	bhi.n	8004a0e <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e042      	b.n	8004a94 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a0e:	edd7 7a00 	vldr	s15, [r7]
 8004a12:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	d801      	bhi.n	8004a24 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e037      	b.n	8004a94 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a24:	edd7 7a00 	vldr	s15, [r7]
 8004a28:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a34:	d801      	bhi.n	8004a3a <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8004a36:	2303      	movs	r3, #3
 8004a38:	e02c      	b.n	8004a94 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a3a:	edd7 7a00 	vldr	s15, [r7]
 8004a3e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	d801      	bhi.n	8004a50 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	e021      	b.n	8004a94 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a50:	edd7 7a00 	vldr	s15, [r7]
 8004a54:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004aa8 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8004a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a60:	d801      	bhi.n	8004a66 <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8004a62:	2305      	movs	r3, #5
 8004a64:	e016      	b.n	8004a94 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a66:	edd7 7a00 	vldr	s15, [r7]
 8004a6a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004aac <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8004a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a76:	d801      	bhi.n	8004a7c <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8004a78:	2306      	movs	r3, #6
 8004a7a:	e00b      	b.n	8004a94 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a7c:	edd7 7a00 	vldr	s15, [r7]
 8004a80:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004ab0 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8004a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	d801      	bhi.n	8004a92 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8004a8e:	2307      	movs	r3, #7
 8004a90:	e000      	b.n	8004a94 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a92:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	42480000 	.word	0x42480000
 8004aac:	42960000 	.word	0x42960000
 8004ab0:	42c80000 	.word	0x42c80000

08004ab4 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3320      	adds	r3, #32
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f977 	bl	8004db6 <lps22df_init_set>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e047      	b.n	8004b64 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d102      	bne.n	8004ae2 <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8004adc:	2303      	movs	r3, #3
 8004ade:	723b      	strb	r3, [r7, #8]
 8004ae0:	e008      	b.n	8004af4 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d102      	bne.n	8004af0 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8004aea:	2302      	movs	r3, #2
 8004aec:	723b      	strb	r3, [r7, #8]
 8004aee:	e001      	b.n	8004af4 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_AUTO;
 8004af4:	2300      	movs	r3, #0
 8004af6:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3320      	adds	r3, #32
 8004afc:	f107 0208 	add.w	r2, r7, #8
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f8f5 	bl	8004cf2 <lps22df_bus_mode_set>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b12:	e027      	b.n	8004b64 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8004b14:	2300      	movs	r3, #0
 8004b16:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3320      	adds	r3, #32
 8004b24:	f107 020c 	add.w	r2, r7, #12
 8004b28:	4611      	mov	r1, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f9bc 	bl	8004ea8 <lps22df_mode_set>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	e013      	b.n	8004b64 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f103 0220 	add.w	r2, r3, #32
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3333      	adds	r3, #51	@ 0x33
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f000 fa0b 	bl	8004f64 <lps22df_mode_get>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	e004      	b.n	8004b64 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	461a      	mov	r2, r3
 8004b78:	460b      	mov	r3, r1
 8004b7a:	72fb      	strb	r3, [r7, #11]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	695c      	ldr	r4, [r3, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	7b1b      	ldrb	r3, [r3, #12]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	b299      	uxth	r1, r3
 8004b92:	893b      	ldrh	r3, [r7, #8]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	47a0      	blx	r4
 8004b98:	4603      	mov	r3, r0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}

08004ba2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ba2:	b590      	push	{r4, r7, lr}
 8004ba4:	b087      	sub	sp, #28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	461a      	mov	r2, r3
 8004bae:	460b      	mov	r3, r1
 8004bb0:	72fb      	strb	r3, [r7, #11]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	691c      	ldr	r4, [r3, #16]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	7b1b      	ldrb	r3, [r3, #12]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	7afb      	ldrb	r3, [r7, #11]
 8004bc6:	b299      	uxth	r1, r3
 8004bc8:	893b      	ldrh	r3, [r7, #8]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	47a0      	blx	r4
 8004bce:	4603      	mov	r3, r0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd90      	pop	{r4, r7, pc}

08004bd8 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	461a      	mov	r2, r3
 8004be4:	460b      	mov	r3, r1
 8004be6:	72fb      	strb	r3, [r7, #11]
 8004be8:	4613      	mov	r3, r2
 8004bea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685c      	ldr	r4, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68d8      	ldr	r0, [r3, #12]
 8004bf4:	893b      	ldrh	r3, [r7, #8]
 8004bf6:	7af9      	ldrb	r1, [r7, #11]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	47a0      	blx	r4
 8004bfc:	6178      	str	r0, [r7, #20]
  return ret;
 8004bfe:	697b      	ldr	r3, [r7, #20]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd90      	pop	{r4, r7, pc}

08004c08 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_write_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	461a      	mov	r2, r3
 8004c14:	460b      	mov	r3, r1
 8004c16:	72fb      	strb	r3, [r7, #11]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681c      	ldr	r4, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68d8      	ldr	r0, [r3, #12]
 8004c24:	893b      	ldrh	r3, [r7, #8]
 8004c26:	7af9      	ldrb	r1, [r7, #11]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	47a0      	blx	r4
 8004c2c:	6178      	str	r0, [r7, #20]
  return ret;
 8004c2e:	697b      	ldr	r3, [r7, #20]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd90      	pop	{r4, r7, pc}

08004c38 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d006      	beq.n	8004c56 <bytecpy+0x1e>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <bytecpy+0x1e>
  {
    *target = *source;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	701a      	strb	r2, [r3, #0]
  }
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c76:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004c90 <lps22df_from_lsb_to_hPa+0x2c>
 8004c7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c7e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c82:	eeb0 0a67 	vmov.f32	s0, s15
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	49800000 	.word	0x49800000

08004c94 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8004c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004caa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004cc4 <lps22df_from_lsb_to_celsius+0x30>
 8004cae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004cb2:	eef0 7a66 	vmov.f32	s15, s13
}
 8004cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	42c80000 	.word	0x42c80000

08004cc8 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8004cd2:	f107 020b 	add.w	r2, r7, #11
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	210f      	movs	r1, #15
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ff7c 	bl	8004bd8 <lps22df_read_reg>
 8004ce0:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8004ce2:	7afa      	ldrb	r2, [r7, #11]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	701a      	strb	r2, [r3, #0]

  return ret;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_add_t i3c_if_ctrl_add;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8004cfc:	f107 020c 	add.w	r2, r7, #12
 8004d00:	2301      	movs	r3, #1
 8004d02:	210e      	movs	r1, #14
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff67 	bl	8004bd8 <lps22df_read_reg>
 8004d0a:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d124      	bne.n	8004d5c <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	7b3b      	ldrb	r3, [r7, #12]
 8004d20:	f362 13c7 	bfi	r3, r2, #7, #1
 8004d24:	733b      	strb	r3, [r7, #12]
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	7b3b      	ldrb	r3, [r7, #12]
 8004d34:	f362 1386 	bfi	r3, r2, #6, #1
 8004d38:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	7b3b      	ldrb	r3, [r7, #12]
 8004d46:	f362 1345 	bfi	r3, r2, #5, #1
 8004d4a:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8004d4c:	f107 020c 	add.w	r2, r7, #12
 8004d50:	2301      	movs	r3, #1
 8004d52:	210e      	movs	r1, #14
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff57 	bl	8004c08 <lps22df_write_reg>
 8004d5a:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL_ADD,
 8004d62:	f107 0210 	add.w	r2, r7, #16
 8004d66:	2301      	movs	r3, #1
 8004d68:	2119      	movs	r1, #25
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ff34 	bl	8004bd8 <lps22df_read_reg>
 8004d70:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl_add, 1);
  }
  if (ret == 0)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d119      	bne.n	8004dac <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl_add.asf_on = (uint8_t)val->filter & 0x01U;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	7c3b      	ldrb	r3, [r7, #16]
 8004d84:	f362 1345 	bfi	r3, r2, #5, #1
 8004d88:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl_add.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	789b      	ldrb	r3, [r3, #2]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	7c3b      	ldrb	r3, [r7, #16]
 8004d96:	f362 0301 	bfi	r3, r2, #0, #2
 8004d9a:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL_ADD,
 8004d9c:	f107 0210 	add.w	r2, r7, #16
 8004da0:	2301      	movs	r3, #1
 8004da2:	2119      	movs	r1, #25
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff2f 	bl	8004c08 <lps22df_write_reg>
 8004daa:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl_add, 1);
  }
  return ret;
 8004dac:	697b      	ldr	r3, [r7, #20]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(stmdev_ctx_t *ctx, lps22df_init_t val)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b086      	sub	sp, #24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8004dc2:	f107 0208 	add.w	r2, r7, #8
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	2111      	movs	r1, #17
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff ff04 	bl	8004bd8 <lps22df_read_reg>
 8004dd0:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d162      	bne.n	8004e9e <lps22df_init_set+0xe8>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8004dd8:	f107 0208 	add.w	r2, r7, #8
 8004ddc:	f107 0310 	add.w	r3, r7, #16
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff ff28 	bl	8004c38 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	f107 030c 	add.w	r3, r7, #12
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff ff1f 	bl	8004c38 <bytecpy>

    switch (val)
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d012      	beq.n	8004e26 <lps22df_init_set+0x70>
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	dc3f      	bgt.n	8004e84 <lps22df_init_set+0xce>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01b      	beq.n	8004e40 <lps22df_init_set+0x8a>
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d13b      	bne.n	8004e84 <lps22df_init_set+0xce>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8004e0c:	7c3b      	ldrb	r3, [r7, #16]
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e12:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004e14:	f107 0210 	add.w	r2, r7, #16
 8004e18:	2301      	movs	r3, #1
 8004e1a:	2111      	movs	r1, #17
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff fef3 	bl	8004c08 <lps22df_write_reg>
 8004e22:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8004e24:	e03b      	b.n	8004e9e <lps22df_init_set+0xe8>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8004e26:	7c3b      	ldrb	r3, [r7, #16]
 8004e28:	f043 0304 	orr.w	r3, r3, #4
 8004e2c:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004e2e:	f107 0210 	add.w	r2, r7, #16
 8004e32:	2301      	movs	r3, #1
 8004e34:	2111      	movs	r1, #17
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff fee6 	bl	8004c08 <lps22df_write_reg>
 8004e3c:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8004e3e:	e02e      	b.n	8004e9e <lps22df_init_set+0xe8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8004e40:	7c3b      	ldrb	r3, [r7, #16]
 8004e42:	f043 0308 	orr.w	r3, r3, #8
 8004e46:	743b      	strb	r3, [r7, #16]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8004e48:	7b3b      	ldrb	r3, [r7, #12]
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	733b      	strb	r3, [r7, #12]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8004e50:	f107 0210 	add.w	r2, r7, #16
 8004e54:	f107 0308 	add.w	r3, r7, #8
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff feec 	bl	8004c38 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8004e60:	f107 020c 	add.w	r2, r7, #12
 8004e64:	f107 0308 	add.w	r3, r7, #8
 8004e68:	3301      	adds	r3, #1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fee3 	bl	8004c38 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8004e72:	f107 0208 	add.w	r2, r7, #8
 8004e76:	2302      	movs	r3, #2
 8004e78:	2111      	movs	r1, #17
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fec4 	bl	8004c08 <lps22df_write_reg>
 8004e80:	6178      	str	r0, [r7, #20]
        break;
 8004e82:	e00c      	b.n	8004e9e <lps22df_init_set+0xe8>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8004e84:	7c3b      	ldrb	r3, [r7, #16]
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004e8c:	f107 0210 	add.w	r2, r7, #16
 8004e90:	2301      	movs	r3, #1
 8004e92:	2111      	movs	r1, #17
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff feb7 	bl	8004c08 <lps22df_write_reg>
 8004e9a:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8004e9c:	bf00      	nop
    }
  }
  return ret;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8004eb2:	f107 0208 	add.w	r2, r7, #8
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	2110      	movs	r1, #16
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fe8c 	bl	8004bd8 <lps22df_read_reg>
 8004ec0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d148      	bne.n	8004f5a <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8004ec8:	f107 0208 	add.w	r2, r7, #8
 8004ecc:	f107 0310 	add.w	r3, r7, #16
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff feb0 	bl	8004c38 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8004ed8:	f107 0308 	add.w	r3, r7, #8
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	f107 030c 	add.w	r3, r7, #12
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fea7 	bl	8004c38 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	7c3b      	ldrb	r3, [r7, #16]
 8004ef6:	f362 03c6 	bfi	r3, r2, #3, #4
 8004efa:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	7c3b      	ldrb	r3, [r7, #16]
 8004f08:	f362 0302 	bfi	r3, r2, #0, #3
 8004f0c:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	789b      	ldrb	r3, [r3, #2]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	7b3b      	ldrb	r3, [r7, #12]
 8004f1a:	f362 1304 	bfi	r3, r2, #4, #1
 8004f1e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 8004f20:	7b3b      	ldrb	r3, [r7, #12]
 8004f22:	f023 0320 	bic.w	r3, r3, #32
 8004f26:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8004f28:	f107 0210 	add.w	r2, r7, #16
 8004f2c:	f107 0308 	add.w	r3, r7, #8
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fe80 	bl	8004c38 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8004f38:	f107 020c 	add.w	r2, r7, #12
 8004f3c:	f107 0308 	add.w	r3, r7, #8
 8004f40:	3301      	adds	r3, #1
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fe77 	bl	8004c38 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8004f4a:	f107 0208 	add.w	r2, r7, #8
 8004f4e:	2302      	movs	r3, #2
 8004f50:	2110      	movs	r1, #16
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fe58 	bl	8004c08 <lps22df_write_reg>
 8004f58:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004f5a:	697b      	ldr	r3, [r7, #20]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8004f6e:	f107 0208 	add.w	r2, r7, #8
 8004f72:	2302      	movs	r3, #2
 8004f74:	2110      	movs	r1, #16
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fe2e 	bl	8004bd8 <lps22df_read_reg>
 8004f7c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 80b6 	bne.w	80050f2 <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8004f86:	f107 0208 	add.w	r2, r7, #8
 8004f8a:	f107 0310 	add.w	r3, r7, #16
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fe51 	bl	8004c38 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8004f96:	f107 0308 	add.w	r3, r7, #8
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fe48 	bl	8004c38 <bytecpy>

    switch (ctrl_reg1.odr)
 8004fa8:	7c3b      	ldrb	r3, [r7, #16]
 8004faa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d839      	bhi.n	8005028 <lps22df_mode_get+0xc4>
 8004fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fbc <lps22df_mode_get+0x58>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08004ff9 	.word	0x08004ff9
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005009 	.word	0x08005009
 8004fd4:	08005011 	.word	0x08005011
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	08005021 	.word	0x08005021
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
        break;
 8004fe6:	e023      	b.n	8005030 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	701a      	strb	r2, [r3, #0]
        break;
 8004fee:	e01f      	b.n	8005030 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	701a      	strb	r2, [r3, #0]
        break;
 8004ff6:	e01b      	b.n	8005030 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	701a      	strb	r2, [r3, #0]
        break;
 8004ffe:	e017      	b.n	8005030 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2204      	movs	r2, #4
 8005004:	701a      	strb	r2, [r3, #0]
        break;
 8005006:	e013      	b.n	8005030 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2205      	movs	r2, #5
 800500c:	701a      	strb	r2, [r3, #0]
        break;
 800500e:	e00f      	b.n	8005030 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2206      	movs	r2, #6
 8005014:	701a      	strb	r2, [r3, #0]
        break;
 8005016:	e00b      	b.n	8005030 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2207      	movs	r2, #7
 800501c:	701a      	strb	r2, [r3, #0]
        break;
 800501e:	e007      	b.n	8005030 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2208      	movs	r2, #8
 8005024:	701a      	strb	r2, [r3, #0]
        break;
 8005026:	e003      	b.n	8005030 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
        break;
 800502e:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 8005030:	7c3b      	ldrb	r3, [r7, #16]
 8005032:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b07      	cmp	r3, #7
 800503a:	d833      	bhi.n	80050a4 <lps22df_mode_get+0x140>
 800503c:	a201      	add	r2, pc, #4	@ (adr r2, 8005044 <lps22df_mode_get+0xe0>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005065 	.word	0x08005065
 8005048:	0800506d 	.word	0x0800506d
 800504c:	08005075 	.word	0x08005075
 8005050:	0800507d 	.word	0x0800507d
 8005054:	08005085 	.word	0x08005085
 8005058:	0800508d 	.word	0x0800508d
 800505c:	08005095 	.word	0x08005095
 8005060:	0800509d 	.word	0x0800509d
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	705a      	strb	r2, [r3, #1]
        break;
 800506a:	e01f      	b.n	80050ac <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2201      	movs	r2, #1
 8005070:	705a      	strb	r2, [r3, #1]
        break;
 8005072:	e01b      	b.n	80050ac <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2202      	movs	r2, #2
 8005078:	705a      	strb	r2, [r3, #1]
        break;
 800507a:	e017      	b.n	80050ac <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2203      	movs	r2, #3
 8005080:	705a      	strb	r2, [r3, #1]
        break;
 8005082:	e013      	b.n	80050ac <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2204      	movs	r2, #4
 8005088:	705a      	strb	r2, [r3, #1]
        break;
 800508a:	e00f      	b.n	80050ac <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2205      	movs	r2, #5
 8005090:	705a      	strb	r2, [r3, #1]
        break;
 8005092:	e00b      	b.n	80050ac <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2206      	movs	r2, #6
 8005098:	705a      	strb	r2, [r3, #1]
        break;
 800509a:	e007      	b.n	80050ac <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2207      	movs	r2, #7
 80050a0:	705a      	strb	r2, [r3, #1]
        break;
 80050a2:	e003      	b.n	80050ac <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	705a      	strb	r2, [r3, #1]
        break;
 80050aa:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 80050ac:	7b3b      	ldrb	r3, [r7, #12]
 80050ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	7b3a      	ldrb	r2, [r7, #12]
 80050b8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	4313      	orrs	r3, r2
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d00e      	beq.n	80050e2 <lps22df_mode_get+0x17e>
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	dc10      	bgt.n	80050ea <lps22df_mode_get+0x186>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <lps22df_mode_get+0x16e>
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d004      	beq.n	80050da <lps22df_mode_get+0x176>
 80050d0:	e00b      	b.n	80050ea <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2200      	movs	r2, #0
 80050d6:	709a      	strb	r2, [r3, #2]
        break;
 80050d8:	e00b      	b.n	80050f2 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2201      	movs	r2, #1
 80050de:	709a      	strb	r2, [r3, #2]
        break;
 80050e0:	e007      	b.n	80050f2 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2203      	movs	r2, #3
 80050e6:	709a      	strb	r2, [r3, #2]
        break;
 80050e8:	e003      	b.n	80050f2 <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2200      	movs	r2, #0
 80050ee:	709a      	strb	r2, [r3, #2]
        break;
 80050f0:	bf00      	nop
    }
  }
  return ret;
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <lps22df_data_get>:
  * @param  data  data retrieved from the sensor.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_data_get(stmdev_ctx_t *ctx, lps22df_data_t *data)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint8_t buff[5];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, buff, 5);
 8005106:	f107 020c 	add.w	r2, r7, #12
 800510a:	2305      	movs	r3, #5
 800510c:	2128      	movs	r1, #40	@ 0x28
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fd62 	bl	8004bd8 <lps22df_read_reg>
 8005114:	6178      	str	r0, [r7, #20]

  /* pressure conversion */
  data->pressure.raw = (int32_t)buff[2];
 8005116:	7bbb      	ldrb	r3, [r7, #14]
 8005118:	461a      	mov	r2, r3
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	605a      	str	r2, [r3, #4]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[1];
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	7b7a      	ldrb	r2, [r7, #13]
 8005126:	441a      	add	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	605a      	str	r2, [r3, #4]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[0];
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	7b3a      	ldrb	r2, [r7, #12]
 8005134:	441a      	add	r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	605a      	str	r2, [r3, #4]
  data->pressure.raw = data->pressure.raw * 256;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	605a      	str	r2, [r3, #4]

  data->pressure.hpa = lps22df_from_lsb_to_hPa(data->pressure.raw);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fd8b 	bl	8004c64 <lps22df_from_lsb_to_hPa>
 800514e:	eef0 7a40 	vmov.f32	s15, s0
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	edc3 7a00 	vstr	s15, [r3]


  /* temperature conversion */
  data->heat.raw = (int16_t)buff[4];
 8005158:	7c3b      	ldrb	r3, [r7, #16]
 800515a:	b21a      	sxth	r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	819a      	strh	r2, [r3, #12]
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[3];
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005166:	b29b      	uxth	r3, r3
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	b29b      	uxth	r3, r3
 800516c:	7bfa      	ldrb	r2, [r7, #15]
 800516e:	4413      	add	r3, r2
 8005170:	b29b      	uxth	r3, r3
 8005172:	b21a      	sxth	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	819a      	strh	r2, [r3, #12]
  data->heat.deg_c = lps22df_from_lsb_to_celsius(data->heat.raw);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fd88 	bl	8004c94 <lps22df_from_lsb_to_celsius>
 8005184:	eef0 7a40 	vmov.f32	s15, s0
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	edc3 7a02 	vstr	s15, [r3, #8]

  return ret;
 800518e:	697b      	ldr	r3, [r7, #20]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d103      	bne.n	80051b4 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	e05d      	b.n	8005270 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b1a      	ldrb	r2, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a23      	ldr	r2, [pc, #140]	@ (800527c <LSM6DSV16X_RegisterBusIO+0xe4>)
 80051f0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a22      	ldr	r2, [pc, #136]	@ (8005280 <LSM6DSV16X_RegisterBusIO+0xe8>)
 80051f6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d103      	bne.n	8005216 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e02c      	b.n	8005270 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4798      	blx	r3
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e022      	b.n	8005270 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d11e      	bne.n	8005270 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005238:	2b00      	cmp	r3, #0
 800523a:	d119      	bne.n	8005270 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 800523c:	2304      	movs	r3, #4
 800523e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8005240:	7afb      	ldrb	r3, [r7, #11]
 8005242:	461a      	mov	r2, r3
 8005244:	2112      	movs	r1, #18
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fd95 	bl	8005d76 <LSM6DSV16X_Write_Reg>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8005252:	f04f 33ff 	mov.w	r3, #4294967295
 8005256:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	461a      	mov	r2, r3
 800525c:	2103      	movs	r1, #3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fd89 	bl	8005d76 <LSM6DSV16X_Write_Reg>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 800526a:	f04f 33ff 	mov.w	r3, #4294967295
 800526e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005270:	68fb      	ldr	r3, [r7, #12]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	08006269 	.word	0x08006269
 8005280:	0800629f 	.word	0x0800629f

08005284 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3320      	adds	r3, #32
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f001 fb20 	bl	80068d8 <lsm6dsv16x_auto_increment_set>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <LSM6DSV16X_Init+0x20>
  {
    return LSM6DSV16X_ERROR;
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	e064      	b.n	800536e <LSM6DSV16X_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3320      	adds	r3, #32
 80052a8:	2101      	movs	r1, #1
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 fb3a 	bl	8006924 <lsm6dsv16x_block_data_update_set>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <LSM6DSV16X_Init+0x38>
  {
    return LSM6DSV16X_ERROR;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	e058      	b.n	800536e <LSM6DSV16X_Init+0xea>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3320      	adds	r3, #32
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fcd0 	bl	8006c68 <lsm6dsv16x_fifo_mode_set>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <LSM6DSV16X_Init+0x50>
  {
    return LSM6DSV16X_ERROR;
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295
 80052d2:	e04c      	b.n	800536e <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2206      	movs	r2, #6
 80052d8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3320      	adds	r3, #32
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 f837 	bl	8006356 <lsm6dsv16x_xl_data_rate_set>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <LSM6DSV16X_Init+0x70>
  {
    return LSM6DSV16X_ERROR;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	e03c      	b.n	800536e <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3320      	adds	r3, #32
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fbb6 	bl	8006a6c <lsm6dsv16x_xl_full_scale_set>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <LSM6DSV16X_Init+0x88>
  {
    return LSM6DSV16X_ERROR;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295
 800530a:	e030      	b.n	800536e <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2206      	movs	r2, #6
 8005310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3320      	adds	r3, #32
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f001 f97c 	bl	8006618 <lsm6dsv16x_gy_data_rate_set>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <LSM6DSV16X_Init+0xa8>
  {
    return LSM6DSV16X_ERROR;
 8005326:	f04f 33ff 	mov.w	r3, #4294967295
 800532a:	e020      	b.n	800536e <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3320      	adds	r3, #32
 8005330:	2104      	movs	r1, #4
 8005332:	4618      	mov	r0, r3
 8005334:	f001 fb1c 	bl	8006970 <lsm6dsv16x_gy_full_scale_set>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <LSM6DSV16X_Init+0xc0>
  {
    return LSM6DSV16X_ERROR;
 800533e:	f04f 33ff 	mov.w	r3, #4294967295
 8005342:	e014      	b.n	800536e <LSM6DSV16X_Init+0xea>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8005344:	7b3b      	ldrb	r3, [r7, #12]
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3320      	adds	r3, #32
 8005350:	7b39      	ldrb	r1, [r7, #12]
 8005352:	4618      	mov	r0, r3
 8005354:	f001 fcae 	bl	8006cb4 <lsm6dsv16x_ah_qvar_mode_set>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <LSM6DSV16X_Init+0xe0>
  {
    return LSM6DSV16X_ERROR;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
 8005362:	e004      	b.n	800536e <LSM6DSV16X_Init+0xea>
  }

  pObj->is_initialized = 1;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f898 	bl	80054b4 <LSM6DSV16X_ACC_Disable>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 800538a:	f04f 33ff 	mov.w	r3, #4294967295
 800538e:	e025      	b.n	80053dc <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fab2 	bl	80058fa <LSM6DSV16X_GYRO_Disable>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800539c:	f04f 33ff 	mov.w	r3, #4294967295
 80053a0:	e01c      	b.n	80053dc <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 80053b2:	7b3b      	ldrb	r3, [r7, #12]
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3320      	adds	r3, #32
 80053be:	7b39      	ldrb	r1, [r7, #12]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 fc77 	bl	8006cb4 <lsm6dsv16x_ah_qvar_mode_set>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295
 80053d0:	e004      	b.n	80053dc <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3320      	adds	r3, #32
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 ff9d 	bl	8006334 <lsm6dsv16x_device_id_get>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8005400:	f04f 33ff 	mov.w	r3, #4294967295
 8005404:	e000      	b.n	8005408 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2201      	movs	r2, #1
 8005424:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2200      	movs	r2, #0
 800542a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2201      	movs	r2, #1
 8005430:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005438:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2210      	movs	r2, #16
 800543e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	4a07      	ldr	r2, [pc, #28]	@ (8005468 <LSM6DSV16X_GetCapabilities+0x58>)
 800544a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4a06      	ldr	r2, [pc, #24]	@ (8005468 <LSM6DSV16X_GetCapabilities+0x58>)
 8005450:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	45f00000 	.word	0x45f00000

0800546c <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e014      	b.n	80054ac <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f103 0220 	add.w	r2, r3, #32
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f000 ff60 	bl	8006356 <lsm6dsv16x_xl_data_rate_set>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295
 80054a0:	e004      	b.n	80054ac <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e01f      	b.n	800550a <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f103 0220 	add.w	r2, r3, #32
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3333      	adds	r3, #51	@ 0x33
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 ff8e 	bl	80063f8 <lsm6dsv16x_xl_data_rate_get>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
 80054e6:	e010      	b.n	800550a <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3320      	adds	r3, #32
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 ff31 	bl	8006356 <lsm6dsv16x_xl_data_rate_set>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80054fa:	f04f 33ff 	mov.w	r3, #4294967295
 80054fe:	e004      	b.n	800550a <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3320      	adds	r3, #32
 8005526:	f107 020b 	add.w	r2, r7, #11
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fac3 	bl	8006ab8 <lsm6dsv16x_xl_full_scale_get>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	e023      	b.n	8005586 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800553e:	7afb      	ldrb	r3, [r7, #11]
 8005540:	2b03      	cmp	r3, #3
 8005542:	d81b      	bhi.n	800557c <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8005544:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	0800555d 	.word	0x0800555d
 8005550:	08005565 	.word	0x08005565
 8005554:	0800556d 	.word	0x0800556d
 8005558:	08005575 	.word	0x08005575
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4a0c      	ldr	r2, [pc, #48]	@ (8005590 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8005560:	601a      	str	r2, [r3, #0]
      break;
 8005562:	e00f      	b.n	8005584 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	4a0b      	ldr	r2, [pc, #44]	@ (8005594 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8005568:	601a      	str	r2, [r3, #0]
      break;
 800556a:	e00b      	b.n	8005584 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	4a0a      	ldr	r2, [pc, #40]	@ (8005598 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8005570:	601a      	str	r2, [r3, #0]
      break;
 8005572:	e007      	b.n	8005584 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	4a09      	ldr	r2, [pc, #36]	@ (800559c <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8005578:	601a      	str	r2, [r3, #0]
      break;
 800557a:	e003      	b.n	8005584 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	60fb      	str	r3, [r7, #12]
      break;
 8005582:	bf00      	nop
  }

  return ret;
 8005584:	68fb      	ldr	r3, [r7, #12]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	3d79db23 	.word	0x3d79db23
 8005594:	3df9db23 	.word	0x3df9db23
 8005598:	3e79db23 	.word	0x3e79db23
 800559c:	3ef9db23 	.word	0x3ef9db23

080055a0 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3320      	adds	r3, #32
 80055b2:	f107 020b 	add.w	r2, r7, #11
 80055b6:	4611      	mov	r1, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 ff1d 	bl	80063f8 <lsm6dsv16x_xl_data_rate_get>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80055c4:	f04f 33ff 	mov.w	r3, #4294967295
 80055c8:	e05a      	b.n	8005680 <LSM6DSV16X_ACC_GetOutputDataRate+0xe0>
  }

  switch (odr_low_level)
 80055ca:	7afb      	ldrb	r3, [r7, #11]
 80055cc:	2b0c      	cmp	r3, #12
 80055ce:	d852      	bhi.n	8005676 <LSM6DSV16X_ACC_GetOutputDataRate+0xd6>
 80055d0:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	08005617 	.word	0x08005617
 80055e0:	0800561f 	.word	0x0800561f
 80055e4:	08005627 	.word	0x08005627
 80055e8:	0800562f 	.word	0x0800562f
 80055ec:	08005637 	.word	0x08005637
 80055f0:	0800563f 	.word	0x0800563f
 80055f4:	08005647 	.word	0x08005647
 80055f8:	0800564f 	.word	0x0800564f
 80055fc:	08005657 	.word	0x08005657
 8005600:	0800565f 	.word	0x0800565f
 8005604:	08005667 	.word	0x08005667
 8005608:	0800566f 	.word	0x0800566f
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
      break;
 8005614:	e033      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	4a1b      	ldr	r2, [pc, #108]	@ (8005688 <LSM6DSV16X_ACC_GetOutputDataRate+0xe8>)
 800561a:	601a      	str	r2, [r3, #0]
      break;
 800561c:	e02f      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	4a1a      	ldr	r2, [pc, #104]	@ (800568c <LSM6DSV16X_ACC_GetOutputDataRate+0xec>)
 8005622:	601a      	str	r2, [r3, #0]
      break;
 8005624:	e02b      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	4a19      	ldr	r2, [pc, #100]	@ (8005690 <LSM6DSV16X_ACC_GetOutputDataRate+0xf0>)
 800562a:	601a      	str	r2, [r3, #0]
      break;
 800562c:	e027      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	4a18      	ldr	r2, [pc, #96]	@ (8005694 <LSM6DSV16X_ACC_GetOutputDataRate+0xf4>)
 8005632:	601a      	str	r2, [r3, #0]
      break;
 8005634:	e023      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	4a17      	ldr	r2, [pc, #92]	@ (8005698 <LSM6DSV16X_ACC_GetOutputDataRate+0xf8>)
 800563a:	601a      	str	r2, [r3, #0]
      break;
 800563c:	e01f      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	4a16      	ldr	r2, [pc, #88]	@ (800569c <LSM6DSV16X_ACC_GetOutputDataRate+0xfc>)
 8005642:	601a      	str	r2, [r3, #0]
      break;
 8005644:	e01b      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	4a15      	ldr	r2, [pc, #84]	@ (80056a0 <LSM6DSV16X_ACC_GetOutputDataRate+0x100>)
 800564a:	601a      	str	r2, [r3, #0]
      break;
 800564c:	e017      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	4a14      	ldr	r2, [pc, #80]	@ (80056a4 <LSM6DSV16X_ACC_GetOutputDataRate+0x104>)
 8005652:	601a      	str	r2, [r3, #0]
      break;
 8005654:	e013      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <LSM6DSV16X_ACC_GetOutputDataRate+0x108>)
 800565a:	601a      	str	r2, [r3, #0]
      break;
 800565c:	e00f      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	4a12      	ldr	r2, [pc, #72]	@ (80056ac <LSM6DSV16X_ACC_GetOutputDataRate+0x10c>)
 8005662:	601a      	str	r2, [r3, #0]
      break;
 8005664:	e00b      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	4a11      	ldr	r2, [pc, #68]	@ (80056b0 <LSM6DSV16X_ACC_GetOutputDataRate+0x110>)
 800566a:	601a      	str	r2, [r3, #0]
      break;
 800566c:	e007      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	4a10      	ldr	r2, [pc, #64]	@ (80056b4 <LSM6DSV16X_ACC_GetOutputDataRate+0x114>)
 8005672:	601a      	str	r2, [r3, #0]
      break;
 8005674:	e003      	b.n	800567e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    default:
      ret = LSM6DSV16X_ERROR;
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	60fb      	str	r3, [r7, #12]
      break;
 800567c:	bf00      	nop
  }

  return ret;
 800567e:	68fb      	ldr	r3, [r7, #12]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	3ff00000 	.word	0x3ff00000
 800568c:	40f00000 	.word	0x40f00000
 8005690:	41700000 	.word	0x41700000
 8005694:	41f00000 	.word	0x41f00000
 8005698:	42700000 	.word	0x42700000
 800569c:	42f00000 	.word	0x42f00000
 80056a0:	43700000 	.word	0x43700000
 80056a4:	43f00000 	.word	0x43f00000
 80056a8:	44700000 	.word	0x44700000
 80056ac:	44f00000 	.word	0x44f00000
 80056b0:	45700000 	.word	0x45700000
 80056b4:	45f00000 	.word	0x45f00000

080056b8 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d106      	bne.n	80056dc <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80056ce:	ed97 0a00 	vldr	s0, [r7]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fb6a 	bl	8005dac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 80056d8:	4603      	mov	r3, r0
 80056da:	e005      	b.n	80056e8 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80056dc:	ed97 0a00 	vldr	s0, [r7]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fc05 	bl	8005ef0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 80056e6:	4603      	mov	r3, r0
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3320      	adds	r3, #32
 8005702:	f107 020b 	add.w	r2, r7, #11
 8005706:	4611      	mov	r1, r2
 8005708:	4618      	mov	r0, r3
 800570a:	f001 f9d5 	bl	8006ab8 <lsm6dsv16x_xl_full_scale_get>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8005714:	f04f 33ff 	mov.w	r3, #4294967295
 8005718:	e023      	b.n	8005762 <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d81b      	bhi.n	8005758 <LSM6DSV16X_ACC_GetFullScale+0x68>
 8005720:	a201      	add	r2, pc, #4	@ (adr r2, 8005728 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	08005739 	.word	0x08005739
 800572c:	08005741 	.word	0x08005741
 8005730:	08005749 	.word	0x08005749
 8005734:	08005751 	.word	0x08005751
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2202      	movs	r2, #2
 800573c:	601a      	str	r2, [r3, #0]
      break;
 800573e:	e00f      	b.n	8005760 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2204      	movs	r2, #4
 8005744:	601a      	str	r2, [r3, #0]
      break;
 8005746:	e00b      	b.n	8005760 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2208      	movs	r2, #8
 800574c:	601a      	str	r2, [r3, #0]
      break;
 800574e:	e007      	b.n	8005760 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2210      	movs	r2, #16
 8005754:	601a      	str	r2, [r3, #0]
      break;
 8005756:	e003      	b.n	8005760 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8005758:	f04f 33ff 	mov.w	r3, #4294967295
 800575c:	60fb      	str	r3, [r7, #12]
      break;
 800575e:	bf00      	nop
  }

  return ret;
 8005760:	68fb      	ldr	r3, [r7, #12]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop

0800576c <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b02      	cmp	r3, #2
 800577a:	dd0b      	ble.n	8005794 <LSM6DSV16X_ACC_SetFullScale+0x28>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b04      	cmp	r3, #4
 8005780:	dd06      	ble.n	8005790 <LSM6DSV16X_ACC_SetFullScale+0x24>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b08      	cmp	r3, #8
 8005786:	dc01      	bgt.n	800578c <LSM6DSV16X_ACC_SetFullScale+0x20>
 8005788:	2302      	movs	r3, #2
 800578a:	e004      	b.n	8005796 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800578c:	2303      	movs	r3, #3
 800578e:	e002      	b.n	8005796 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8005794:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 8005796:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3320      	adds	r3, #32
 800579c:	7bfa      	ldrb	r2, [r7, #15]
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 f963 	bl	8006a6c <lsm6dsv16x_xl_full_scale_set>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295
 80057b0:	e000      	b.n	80057b4 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3320      	adds	r3, #32
 80057ca:	f107 0208 	add.w	r2, r7, #8
 80057ce:	4611      	mov	r1, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 f9fc 	bl	8006bce <lsm6dsv16x_acceleration_raw_get>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295
 80057e0:	e00c      	b.n	80057fc <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 80057e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80057ea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80057f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3320      	adds	r3, #32
 8005818:	f107 0210 	add.w	r2, r7, #16
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f001 f9d5 	bl	8006bce <lsm6dsv16x_acceleration_raw_get>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295
 800582e:	e03c      	b.n	80058aa <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8005830:	f107 030c 	add.w	r3, r7, #12
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fe6c 	bl	8005514 <LSM6DSV16X_ACC_GetSensitivity>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	e030      	b.n	80058aa <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005848:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800584c:	ee07 3a90 	vmov	s15, r3
 8005850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005854:	edd7 7a03 	vldr	s15, [r7, #12]
 8005858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005860:	ee17 2a90 	vmov	r2, s15
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005868:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800586c:	ee07 3a90 	vmov	s15, r3
 8005870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005874:	edd7 7a03 	vldr	s15, [r7, #12]
 8005878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005880:	ee17 2a90 	vmov	r2, s15
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005888:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005894:	edd7 7a03 	vldr	s15, [r7, #12]
 8005898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a0:	ee17 2a90 	vmov	r2, s15
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e014      	b.n	80058f2 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f103 0220 	add.w	r2, r3, #32
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f000 fe9e 	bl	8006618 <lsm6dsv16x_gy_data_rate_set>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295
 80058e6:	e004      	b.n	80058f2 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	e01f      	b.n	8005950 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f103 0220 	add.w	r2, r3, #32
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3334      	adds	r3, #52	@ 0x34
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f000 fecb 	bl	80066b8 <lsm6dsv16x_gy_data_rate_get>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	e010      	b.n	8005950 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3320      	adds	r3, #32
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fe6f 	bl	8006618 <lsm6dsv16x_gy_data_rate_set>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	e004      	b.n	8005950 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3320      	adds	r3, #32
 800596a:	f107 020b 	add.w	r2, r7, #11
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f001 f823 	bl	80069bc <lsm6dsv16x_gy_full_scale_get>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295
 8005980:	e03d      	b.n	80059fe <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 8005982:	7afb      	ldrb	r3, [r7, #11]
 8005984:	2b0c      	cmp	r3, #12
 8005986:	d835      	bhi.n	80059f4 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8005988:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059c5 	.word	0x080059c5
 8005994:	080059cd 	.word	0x080059cd
 8005998:	080059d5 	.word	0x080059d5
 800599c:	080059dd 	.word	0x080059dd
 80059a0:	080059e5 	.word	0x080059e5
 80059a4:	080059f5 	.word	0x080059f5
 80059a8:	080059f5 	.word	0x080059f5
 80059ac:	080059f5 	.word	0x080059f5
 80059b0:	080059f5 	.word	0x080059f5
 80059b4:	080059f5 	.word	0x080059f5
 80059b8:	080059f5 	.word	0x080059f5
 80059bc:	080059f5 	.word	0x080059f5
 80059c0:	080059ed 	.word	0x080059ed
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4a10      	ldr	r2, [pc, #64]	@ (8005a08 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 80059c8:	601a      	str	r2, [r3, #0]
      break;
 80059ca:	e017      	b.n	80059fc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	4a0f      	ldr	r2, [pc, #60]	@ (8005a0c <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 80059d0:	601a      	str	r2, [r3, #0]
      break;
 80059d2:	e013      	b.n	80059fc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a10 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 80059d8:	601a      	str	r2, [r3, #0]
      break;
 80059da:	e00f      	b.n	80059fc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4a0d      	ldr	r2, [pc, #52]	@ (8005a14 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 80059e0:	601a      	str	r2, [r3, #0]
      break;
 80059e2:	e00b      	b.n	80059fc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005a18 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 80059e8:	601a      	str	r2, [r3, #0]
      break;
 80059ea:	e007      	b.n	80059fc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	4a0b      	ldr	r2, [pc, #44]	@ (8005a1c <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 80059f0:	601a      	str	r2, [r3, #0]
      break;
 80059f2:	e003      	b.n	80059fc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 80059f4:	f04f 33ff 	mov.w	r3, #4294967295
 80059f8:	60fb      	str	r3, [r7, #12]
      break;
 80059fa:	bf00      	nop
  }

  return ret;
 80059fc:	68fb      	ldr	r3, [r7, #12]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	408c0000 	.word	0x408c0000
 8005a0c:	410c0000 	.word	0x410c0000
 8005a10:	418c0000 	.word	0x418c0000
 8005a14:	420c0000 	.word	0x420c0000
 8005a18:	428c0000 	.word	0x428c0000
 8005a1c:	430c0000 	.word	0x430c0000

08005a20 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3320      	adds	r3, #32
 8005a32:	f107 020b 	add.w	r2, r7, #11
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fe3d 	bl	80066b8 <lsm6dsv16x_gy_data_rate_get>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	e056      	b.n	8005af8 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd8>
  }

  switch (odr_low_level)
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	d84e      	bhi.n	8005aee <LSM6DSV16X_GYRO_GetOutputDataRate+0xce>
 8005a50:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a8d 	.word	0x08005a8d
 8005a5c:	08005aef 	.word	0x08005aef
 8005a60:	08005a97 	.word	0x08005a97
 8005a64:	08005a9f 	.word	0x08005a9f
 8005a68:	08005aa7 	.word	0x08005aa7
 8005a6c:	08005aaf 	.word	0x08005aaf
 8005a70:	08005ab7 	.word	0x08005ab7
 8005a74:	08005abf 	.word	0x08005abf
 8005a78:	08005ac7 	.word	0x08005ac7
 8005a7c:	08005acf 	.word	0x08005acf
 8005a80:	08005ad7 	.word	0x08005ad7
 8005a84:	08005adf 	.word	0x08005adf
 8005a88:	08005ae7 	.word	0x08005ae7
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
      break;
 8005a94:	e02f      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	4a19      	ldr	r2, [pc, #100]	@ (8005b00 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe0>)
 8005a9a:	601a      	str	r2, [r3, #0]
      break;
 8005a9c:	e02b      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	4a18      	ldr	r2, [pc, #96]	@ (8005b04 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe4>)
 8005aa2:	601a      	str	r2, [r3, #0]
      break;
 8005aa4:	e027      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	4a17      	ldr	r2, [pc, #92]	@ (8005b08 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe8>)
 8005aaa:	601a      	str	r2, [r3, #0]
      break;
 8005aac:	e023      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	4a16      	ldr	r2, [pc, #88]	@ (8005b0c <LSM6DSV16X_GYRO_GetOutputDataRate+0xec>)
 8005ab2:	601a      	str	r2, [r3, #0]
      break;
 8005ab4:	e01f      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	4a15      	ldr	r2, [pc, #84]	@ (8005b10 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf0>)
 8005aba:	601a      	str	r2, [r3, #0]
      break;
 8005abc:	e01b      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	4a14      	ldr	r2, [pc, #80]	@ (8005b14 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf4>)
 8005ac2:	601a      	str	r2, [r3, #0]
      break;
 8005ac4:	e017      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf8>)
 8005aca:	601a      	str	r2, [r3, #0]
      break;
 8005acc:	e013      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	4a12      	ldr	r2, [pc, #72]	@ (8005b1c <LSM6DSV16X_GYRO_GetOutputDataRate+0xfc>)
 8005ad2:	601a      	str	r2, [r3, #0]
      break;
 8005ad4:	e00f      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	4a11      	ldr	r2, [pc, #68]	@ (8005b20 <LSM6DSV16X_GYRO_GetOutputDataRate+0x100>)
 8005ada:	601a      	str	r2, [r3, #0]
      break;
 8005adc:	e00b      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	4a10      	ldr	r2, [pc, #64]	@ (8005b24 <LSM6DSV16X_GYRO_GetOutputDataRate+0x104>)
 8005ae2:	601a      	str	r2, [r3, #0]
      break;
 8005ae4:	e007      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8005b28 <LSM6DSV16X_GYRO_GetOutputDataRate+0x108>)
 8005aea:	601a      	str	r2, [r3, #0]
      break;
 8005aec:	e003      	b.n	8005af6 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    default:
      ret = LSM6DSV16X_ERROR;
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295
 8005af2:	60fb      	str	r3, [r7, #12]
      break;
 8005af4:	bf00      	nop
  }

  return ret;
 8005af6:	68fb      	ldr	r3, [r7, #12]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40f00000 	.word	0x40f00000
 8005b04:	41700000 	.word	0x41700000
 8005b08:	41f00000 	.word	0x41f00000
 8005b0c:	42700000 	.word	0x42700000
 8005b10:	42f00000 	.word	0x42f00000
 8005b14:	43700000 	.word	0x43700000
 8005b18:	43f00000 	.word	0x43f00000
 8005b1c:	44700000 	.word	0x44700000
 8005b20:	44f00000 	.word	0x44f00000
 8005b24:	45700000 	.word	0x45700000
 8005b28:	45f00000 	.word	0x45f00000

08005b2c <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d106      	bne.n	8005b50 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005b42:	ed97 0a00 	vldr	s0, [r7]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa6a 	bl	8006020 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	e005      	b.n	8005b5c <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005b50:	ed97 0a00 	vldr	s0, [r7]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 faf9 	bl	800614c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8005b5a:	4603      	mov	r3, r0
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3320      	adds	r3, #32
 8005b76:	f107 020b 	add.w	r2, r7, #11
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 ff1d 	bl	80069bc <lsm6dsv16x_gy_full_scale_get>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8005b88:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8c:	e041      	b.n	8005c12 <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	d839      	bhi.n	8005c08 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8005b94:	a201      	add	r2, pc, #4	@ (adr r2, 8005b9c <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005bd9 	.word	0x08005bd9
 8005ba4:	08005be1 	.word	0x08005be1
 8005ba8:	08005beb 	.word	0x08005beb
 8005bac:	08005bf5 	.word	0x08005bf5
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005c09 	.word	0x08005c09
 8005bb8:	08005c09 	.word	0x08005c09
 8005bbc:	08005c09 	.word	0x08005c09
 8005bc0:	08005c09 	.word	0x08005c09
 8005bc4:	08005c09 	.word	0x08005c09
 8005bc8:	08005c09 	.word	0x08005c09
 8005bcc:	08005bff 	.word	0x08005bff
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	227d      	movs	r2, #125	@ 0x7d
 8005bd4:	601a      	str	r2, [r3, #0]
      break;
 8005bd6:	e01b      	b.n	8005c10 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	22fa      	movs	r2, #250	@ 0xfa
 8005bdc:	601a      	str	r2, [r3, #0]
      break;
 8005bde:	e017      	b.n	8005c10 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005be6:	601a      	str	r2, [r3, #0]
      break;
 8005be8:	e012      	b.n	8005c10 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005bf0:	601a      	str	r2, [r3, #0]
      break;
 8005bf2:	e00d      	b.n	8005c10 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005bfa:	601a      	str	r2, [r3, #0]
      break;
 8005bfc:	e008      	b.n	8005c10 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005c04:	601a      	str	r2, [r3, #0]
      break;
 8005c06:	e003      	b.n	8005c10 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	60fb      	str	r3, [r7, #12]
      break;
 8005c0e:	bf00      	nop
  }

  return ret;
 8005c10:	68fb      	ldr	r3, [r7, #12]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop

08005c1c <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b7d      	cmp	r3, #125	@ 0x7d
 8005c2a:	dd18      	ble.n	8005c5e <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2bfa      	cmp	r3, #250	@ 0xfa
 8005c30:	dd13      	ble.n	8005c5a <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005c38:	dd0d      	ble.n	8005c56 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c40:	dd07      	ble.n	8005c52 <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005c48:	dc01      	bgt.n	8005c4e <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8005c4a:	2304      	movs	r3, #4
 8005c4c:	e008      	b.n	8005c60 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	e006      	b.n	8005c60 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005c52:	2303      	movs	r3, #3
 8005c54:	e004      	b.n	8005c60 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e002      	b.n	8005c60 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005c5e:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8005c60:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3320      	adds	r3, #32
 8005c66:	7bfa      	ldrb	r2, [r7, #15]
 8005c68:	4611      	mov	r1, r2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fe80 	bl	8006970 <lsm6dsv16x_gy_full_scale_set>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8005c76:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7a:	e000      	b.n	8005c7e <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3320      	adds	r3, #32
 8005c94:	f107 0208 	add.w	r2, r7, #8
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 ff4a 	bl	8006b34 <lsm6dsv16x_angular_rate_raw_get>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8005caa:	e00c      	b.n	8005cc6 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8005cac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005cb4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005cbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3320      	adds	r3, #32
 8005cdc:	f107 0210 	add.w	r2, r7, #16
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ff26 	bl	8006b34 <lsm6dsv16x_angular_rate_raw_get>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <LSM6DSV16X_GYRO_GetAxes+0x26>
  {
    return LSM6DSV16X_ERROR;
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf2:	e03c      	b.n	8005d6e <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fe2c 	bl	8005958 <LSM6DSV16X_GYRO_GetSensitivity>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <LSM6DSV16X_GYRO_GetAxes+0x3e>
  {
    return LSM6DSV16X_ERROR;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0a:	e030      	b.n	8005d6e <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005d0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d24:	ee17 2a90 	vmov	r2, s15
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d44:	ee17 2a90 	vmov	r2, s15
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005d4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d64:	ee17 2a90 	vmov	r2, s15
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	70fb      	strb	r3, [r7, #3]
 8005d82:	4613      	mov	r3, r2
 8005d84:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f103 0020 	add.w	r0, r3, #32
 8005d8c:	1cba      	adds	r2, r7, #2
 8005d8e:	78f9      	ldrb	r1, [r7, #3]
 8005d90:	2301      	movs	r3, #1
 8005d92:	f000 fab7 	bl	8006304 <lsm6dsv16x_write_reg>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	e000      	b.n	8005da4 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8005db8:	edd7 7a00 	vldr	s15, [r7]
 8005dbc:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8005dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc8:	d801      	bhi.n	8005dce <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e06e      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005dce:	edd7 7a00 	vldr	s15, [r7]
 8005dd2:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8005dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dde:	d801      	bhi.n	8005de4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e063      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005de4:	edd7 7a00 	vldr	s15, [r7]
 8005de8:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8005dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df4:	d801      	bhi.n	8005dfa <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005df6:	2303      	movs	r3, #3
 8005df8:	e058      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005dfa:	edd7 7a00 	vldr	s15, [r7]
 8005dfe:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0a:	d801      	bhi.n	8005e10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	e04d      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005e10:	edd7 7a00 	vldr	s15, [r7]
 8005e14:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005ed4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8005e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e20:	d801      	bhi.n	8005e26 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005e22:	2305      	movs	r3, #5
 8005e24:	e042      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005e26:	edd7 7a00 	vldr	s15, [r7]
 8005e2a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005ed8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8005e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e36:	d801      	bhi.n	8005e3c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005e38:	2306      	movs	r3, #6
 8005e3a:	e037      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005e3c:	edd7 7a00 	vldr	s15, [r7]
 8005e40:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005edc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8005e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	d801      	bhi.n	8005e52 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005e4e:	2307      	movs	r3, #7
 8005e50:	e02c      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005e52:	edd7 7a00 	vldr	s15, [r7]
 8005e56:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8005ee0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8005e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	d801      	bhi.n	8005e68 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005e64:	2308      	movs	r3, #8
 8005e66:	e021      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005e68:	edd7 7a00 	vldr	s15, [r7]
 8005e6c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005ee4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8005e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e78:	d801      	bhi.n	8005e7e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005e7a:	2309      	movs	r3, #9
 8005e7c:	e016      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005e7e:	edd7 7a00 	vldr	s15, [r7]
 8005e82:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005ee8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8005e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8e:	d801      	bhi.n	8005e94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005e90:	230a      	movs	r3, #10
 8005e92:	e00b      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005e94:	edd7 7a00 	vldr	s15, [r7]
 8005e98:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005eec <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8005e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	d801      	bhi.n	8005eaa <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8005ea6:	230b      	movs	r3, #11
 8005ea8:	e000      	b.n	8005eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005eaa:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8005eac:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3320      	adds	r3, #32
 8005eb2:	7bfa      	ldrb	r2, [r7, #15]
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fa4d 	bl	8006356 <lsm6dsv16x_xl_data_rate_set>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	e000      	b.n	8005eca <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	42700000 	.word	0x42700000
 8005ed8:	42f00000 	.word	0x42f00000
 8005edc:	43700000 	.word	0x43700000
 8005ee0:	43f00000 	.word	0x43f00000
 8005ee4:	44700000 	.word	0x44700000
 8005ee8:	44f00000 	.word	0x44f00000
 8005eec:	45700000 	.word	0x45700000

08005ef0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8005efc:	edd7 7a00 	vldr	s15, [r7]
 8005f00:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8005f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0c:	d801      	bhi.n	8005f12 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e06e      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005f12:	edd7 7a00 	vldr	s15, [r7]
 8005f16:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8005f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f22:	d801      	bhi.n	8005f28 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e063      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005f28:	edd7 7a00 	vldr	s15, [r7]
 8005f2c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8005f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f38:	d801      	bhi.n	8005f3e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e058      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005f3e:	edd7 7a00 	vldr	s15, [r7]
 8005f42:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4e:	d801      	bhi.n	8005f54 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005f50:	2304      	movs	r3, #4
 8005f52:	e04d      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005f54:	edd7 7a00 	vldr	s15, [r7]
 8005f58:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006004 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8005f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	d801      	bhi.n	8005f6a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005f66:	2305      	movs	r3, #5
 8005f68:	e042      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005f6a:	edd7 7a00 	vldr	s15, [r7]
 8005f6e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006008 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7a:	d801      	bhi.n	8005f80 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f7c:	2306      	movs	r3, #6
 8005f7e:	e037      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005f80:	edd7 7a00 	vldr	s15, [r7]
 8005f84:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800600c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8005f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f90:	d801      	bhi.n	8005f96 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005f92:	2307      	movs	r3, #7
 8005f94:	e02c      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005f96:	edd7 7a00 	vldr	s15, [r7]
 8005f9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006010 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8005f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa6:	d801      	bhi.n	8005fac <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005fa8:	2308      	movs	r3, #8
 8005faa:	e021      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005fac:	edd7 7a00 	vldr	s15, [r7]
 8005fb0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006014 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8005fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fbc:	d801      	bhi.n	8005fc2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005fbe:	2309      	movs	r3, #9
 8005fc0:	e016      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005fc2:	edd7 7a00 	vldr	s15, [r7]
 8005fc6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006018 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8005fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd2:	d801      	bhi.n	8005fd8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005fd4:	230a      	movs	r3, #10
 8005fd6:	e00b      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005fd8:	edd7 7a00 	vldr	s15, [r7]
 8005fdc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800601c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8005fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe8:	d801      	bhi.n	8005fee <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8005fea:	230b      	movs	r3, #11
 8005fec:	e000      	b.n	8005ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005fee:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	42700000 	.word	0x42700000
 8006008:	42f00000 	.word	0x42f00000
 800600c:	43700000 	.word	0x43700000
 8006010:	43f00000 	.word	0x43f00000
 8006014:	44700000 	.word	0x44700000
 8006018:	44f00000 	.word	0x44f00000
 800601c:	45700000 	.word	0x45700000

08006020 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 800602c:	edd7 7a00 	vldr	s15, [r7]
 8006030:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8006034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603c:	d801      	bhi.n	8006042 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800603e:	2302      	movs	r3, #2
 8006040:	e063      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8006042:	edd7 7a00 	vldr	s15, [r7]
 8006046:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800604a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800604e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006052:	d801      	bhi.n	8006058 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006054:	2303      	movs	r3, #3
 8006056:	e058      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8006058:	edd7 7a00 	vldr	s15, [r7]
 800605c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8006060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006068:	d801      	bhi.n	800606e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800606a:	2304      	movs	r3, #4
 800606c:	e04d      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800606e:	edd7 7a00 	vldr	s15, [r7]
 8006072:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006130 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800607a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607e:	d801      	bhi.n	8006084 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006080:	2305      	movs	r3, #5
 8006082:	e042      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8006084:	edd7 7a00 	vldr	s15, [r7]
 8006088:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006134 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800608c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006094:	d801      	bhi.n	800609a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006096:	2306      	movs	r3, #6
 8006098:	e037      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800609a:	edd7 7a00 	vldr	s15, [r7]
 800609e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006138 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 80060a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060aa:	d801      	bhi.n	80060b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80060ac:	2307      	movs	r3, #7
 80060ae:	e02c      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80060b0:	edd7 7a00 	vldr	s15, [r7]
 80060b4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800613c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 80060b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c0:	d801      	bhi.n	80060c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80060c2:	2308      	movs	r3, #8
 80060c4:	e021      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80060c6:	edd7 7a00 	vldr	s15, [r7]
 80060ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006140 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 80060ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d6:	d801      	bhi.n	80060dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80060d8:	2309      	movs	r3, #9
 80060da:	e016      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80060dc:	edd7 7a00 	vldr	s15, [r7]
 80060e0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006144 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 80060e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ec:	d801      	bhi.n	80060f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80060ee:	230a      	movs	r3, #10
 80060f0:	e00b      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80060f2:	edd7 7a00 	vldr	s15, [r7]
 80060f6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006148 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 80060fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	d801      	bhi.n	8006108 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8006104:	230b      	movs	r3, #11
 8006106:	e000      	b.n	800610a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8006108:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800610a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3320      	adds	r3, #32
 8006110:	7bfa      	ldrb	r2, [r7, #15]
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fa7f 	bl	8006618 <lsm6dsv16x_gy_data_rate_set>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	e000      	b.n	8006128 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	42700000 	.word	0x42700000
 8006134:	42f00000 	.word	0x42f00000
 8006138:	43700000 	.word	0x43700000
 800613c:	43f00000 	.word	0x43f00000
 8006140:	44700000 	.word	0x44700000
 8006144:	44f00000 	.word	0x44f00000
 8006148:	45700000 	.word	0x45700000

0800614c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8006158:	edd7 7a00 	vldr	s15, [r7]
 800615c:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8006160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006168:	d801      	bhi.n	800616e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800616a:	2302      	movs	r3, #2
 800616c:	e063      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800616e:	edd7 7a00 	vldr	s15, [r7]
 8006172:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8006176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	d801      	bhi.n	8006184 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006180:	2303      	movs	r3, #3
 8006182:	e058      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8006184:	edd7 7a00 	vldr	s15, [r7]
 8006188:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800618c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006194:	d801      	bhi.n	800619a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006196:	2304      	movs	r3, #4
 8006198:	e04d      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800619a:	edd7 7a00 	vldr	s15, [r7]
 800619e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800624c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80061a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061aa:	d801      	bhi.n	80061b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80061ac:	2305      	movs	r3, #5
 80061ae:	e042      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80061b0:	edd7 7a00 	vldr	s15, [r7]
 80061b4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006250 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 80061b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	d801      	bhi.n	80061c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80061c2:	2306      	movs	r3, #6
 80061c4:	e037      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80061c6:	edd7 7a00 	vldr	s15, [r7]
 80061ca:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006254 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 80061ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d6:	d801      	bhi.n	80061dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80061d8:	2307      	movs	r3, #7
 80061da:	e02c      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80061dc:	edd7 7a00 	vldr	s15, [r7]
 80061e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006258 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 80061e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	d801      	bhi.n	80061f2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80061ee:	2308      	movs	r3, #8
 80061f0:	e021      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80061f2:	edd7 7a00 	vldr	s15, [r7]
 80061f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800625c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 80061fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006202:	d801      	bhi.n	8006208 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006204:	2309      	movs	r3, #9
 8006206:	e016      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8006208:	edd7 7a00 	vldr	s15, [r7]
 800620c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006260 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 8006210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	d801      	bhi.n	800621e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800621a:	230a      	movs	r3, #10
 800621c:	e00b      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800621e:	edd7 7a00 	vldr	s15, [r7]
 8006222:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8006264 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 8006226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	d801      	bhi.n	8006234 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006230:	230b      	movs	r3, #11
 8006232:	e000      	b.n	8006236 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8006234:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	42700000 	.word	0x42700000
 8006250:	42f00000 	.word	0x42f00000
 8006254:	43700000 	.word	0x43700000
 8006258:	43f00000 	.word	0x43f00000
 800625c:	44700000 	.word	0x44700000
 8006260:	44f00000 	.word	0x44f00000
 8006264:	45700000 	.word	0x45700000

08006268 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	461a      	mov	r2, r3
 8006274:	460b      	mov	r3, r1
 8006276:	72fb      	strb	r3, [r7, #11]
 8006278:	4613      	mov	r3, r2
 800627a:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	695c      	ldr	r4, [r3, #20]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	7b1b      	ldrb	r3, [r3, #12]
 8006288:	4618      	mov	r0, r3
 800628a:	7afb      	ldrb	r3, [r7, #11]
 800628c:	b299      	uxth	r1, r3
 800628e:	893b      	ldrh	r3, [r7, #8]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	47a0      	blx	r4
 8006294:	4603      	mov	r3, r0
}
 8006296:	4618      	mov	r0, r3
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}

0800629e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800629e:	b590      	push	{r4, r7, lr}
 80062a0:	b087      	sub	sp, #28
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	461a      	mov	r2, r3
 80062aa:	460b      	mov	r3, r1
 80062ac:	72fb      	strb	r3, [r7, #11]
 80062ae:	4613      	mov	r3, r2
 80062b0:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	691c      	ldr	r4, [r3, #16]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	7b1b      	ldrb	r3, [r3, #12]
 80062be:	4618      	mov	r0, r3
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	b299      	uxth	r1, r3
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	47a0      	blx	r4
 80062ca:	4603      	mov	r3, r0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	371c      	adds	r7, #28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd90      	pop	{r4, r7, pc}

080062d4 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	461a      	mov	r2, r3
 80062e0:	460b      	mov	r3, r1
 80062e2:	72fb      	strb	r3, [r7, #11]
 80062e4:	4613      	mov	r3, r2
 80062e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685c      	ldr	r4, [r3, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68d8      	ldr	r0, [r3, #12]
 80062f0:	893b      	ldrh	r3, [r7, #8]
 80062f2:	7af9      	ldrb	r1, [r7, #11]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	47a0      	blx	r4
 80062f8:	6178      	str	r0, [r7, #20]

  return ret;
 80062fa:	697b      	ldr	r3, [r7, #20]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	bd90      	pop	{r4, r7, pc}

08006304 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	461a      	mov	r2, r3
 8006310:	460b      	mov	r3, r1
 8006312:	72fb      	strb	r3, [r7, #11]
 8006314:	4613      	mov	r3, r2
 8006316:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681c      	ldr	r4, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68d8      	ldr	r0, [r3, #12]
 8006320:	893b      	ldrh	r3, [r7, #8]
 8006322:	7af9      	ldrb	r1, [r7, #11]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	47a0      	blx	r4
 8006328:	6178      	str	r0, [r7, #20]

  return ret;
 800632a:	697b      	ldr	r3, [r7, #20]
}
 800632c:	4618      	mov	r0, r3
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	bd90      	pop	{r4, r7, pc}

08006334 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800633e:	2301      	movs	r3, #1
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	210f      	movs	r1, #15
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff ffc5 	bl	80062d4 <lsm6dsv16x_read_reg>
 800634a:	60f8      	str	r0, [r7, #12]

  return ret;
 800634c:	68fb      	ldr	r3, [r7, #12]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b086      	sub	sp, #24
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8006362:	f107 0210 	add.w	r2, r7, #16
 8006366:	2301      	movs	r3, #1
 8006368:	2110      	movs	r1, #16
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff ffb2 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006370:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <lsm6dsv16x_xl_data_rate_set+0x26>
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	e039      	b.n	80063f0 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	b2da      	uxtb	r2, r3
 8006384:	7c3b      	ldrb	r3, [r7, #16]
 8006386:	f362 0303 	bfi	r3, r2, #0, #4
 800638a:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800638c:	f107 0210 	add.w	r2, r7, #16
 8006390:	2301      	movs	r3, #1
 8006392:	2110      	movs	r1, #16
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ffb5 	bl	8006304 <lsm6dsv16x_write_reg>
 800639a:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <lsm6dsv16x_xl_data_rate_set+0x50>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	e024      	b.n	80063f0 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80063ac:	7cfb      	ldrb	r3, [r7, #19]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01d      	beq.n	80063ee <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80063b2:	f107 020c 	add.w	r2, r7, #12
 80063b6:	2301      	movs	r3, #1
 80063b8:	2162      	movs	r1, #98	@ 0x62
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff ff8a 	bl	80062d4 <lsm6dsv16x_read_reg>
 80063c0:	4602      	mov	r2, r0
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	4413      	add	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80063c8:	7cfb      	ldrb	r3, [r7, #19]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	7b3b      	ldrb	r3, [r7, #12]
 80063d2:	f362 0301 	bfi	r3, r2, #0, #2
 80063d6:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80063d8:	f107 020c 	add.w	r2, r7, #12
 80063dc:	2301      	movs	r3, #1
 80063de:	2162      	movs	r1, #98	@ 0x62
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff ff8f 	bl	8006304 <lsm6dsv16x_write_reg>
 80063e6:	4602      	mov	r2, r0
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	4413      	add	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80063ee:	697b      	ldr	r3, [r7, #20]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8006402:	f107 0210 	add.w	r2, r7, #16
 8006406:	2301      	movs	r3, #1
 8006408:	2110      	movs	r1, #16
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff ff62 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006410:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8006412:	f107 020c 	add.w	r2, r7, #12
 8006416:	2301      	movs	r3, #1
 8006418:	2162      	movs	r1, #98	@ 0x62
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff ff5a 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006420:	4602      	mov	r2, r0
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <lsm6dsv16x_xl_data_rate_get+0x3a>
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	e0ed      	b.n	800660e <lsm6dsv16x_xl_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 8006432:	7b3b      	ldrb	r3, [r7, #12]
 8006434:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006438:	b2db      	uxtb	r3, r3
 800643a:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 800643c:	7c3b      	ldrb	r3, [r7, #16]
 800643e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b0c      	cmp	r3, #12
 8006446:	f200 80dd 	bhi.w	8006604 <lsm6dsv16x_xl_data_rate_get+0x20c>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <lsm6dsv16x_xl_data_rate_get+0x58>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006485 	.word	0x08006485
 8006454:	0800648d 	.word	0x0800648d
 8006458:	08006495 	.word	0x08006495
 800645c:	0800649d 	.word	0x0800649d
 8006460:	080064c1 	.word	0x080064c1
 8006464:	080064e5 	.word	0x080064e5
 8006468:	08006509 	.word	0x08006509
 800646c:	0800652d 	.word	0x0800652d
 8006470:	08006551 	.word	0x08006551
 8006474:	08006575 	.word	0x08006575
 8006478:	08006599 	.word	0x08006599
 800647c:	080065bd 	.word	0x080065bd
 8006480:	080065e1 	.word	0x080065e1
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
      break;
 800648a:	e0bf      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2201      	movs	r2, #1
 8006490:	701a      	strb	r2, [r3, #0]
      break;
 8006492:	e0bb      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2202      	movs	r2, #2
 8006498:	701a      	strb	r2, [r3, #0]
      break;
 800649a:	e0b7      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d005      	beq.n	80064ae <lsm6dsv16x_xl_data_rate_get+0xb6>
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d007      	beq.n	80064b6 <lsm6dsv16x_xl_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2203      	movs	r2, #3
 80064aa:	701a      	strb	r2, [r3, #0]
        break;
 80064ac:	e007      	b.n	80064be <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2213      	movs	r2, #19
 80064b2:	701a      	strb	r2, [r3, #0]
        break;
 80064b4:	e003      	b.n	80064be <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2223      	movs	r2, #35	@ 0x23
 80064ba:	701a      	strb	r2, [r3, #0]
        break;
 80064bc:	bf00      	nop
      }
      break;
 80064be:	e0a5      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 80064c0:	7cfb      	ldrb	r3, [r7, #19]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d005      	beq.n	80064d2 <lsm6dsv16x_xl_data_rate_get+0xda>
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d007      	beq.n	80064da <lsm6dsv16x_xl_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2204      	movs	r2, #4
 80064ce:	701a      	strb	r2, [r3, #0]
        break;
 80064d0:	e007      	b.n	80064e2 <lsm6dsv16x_xl_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2214      	movs	r2, #20
 80064d6:	701a      	strb	r2, [r3, #0]
        break;
 80064d8:	e003      	b.n	80064e2 <lsm6dsv16x_xl_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2224      	movs	r2, #36	@ 0x24
 80064de:	701a      	strb	r2, [r3, #0]
        break;
 80064e0:	bf00      	nop
      }
      break;
 80064e2:	e093      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d005      	beq.n	80064f6 <lsm6dsv16x_xl_data_rate_get+0xfe>
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d007      	beq.n	80064fe <lsm6dsv16x_xl_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2205      	movs	r2, #5
 80064f2:	701a      	strb	r2, [r3, #0]
        break;
 80064f4:	e007      	b.n	8006506 <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2215      	movs	r2, #21
 80064fa:	701a      	strb	r2, [r3, #0]
        break;
 80064fc:	e003      	b.n	8006506 <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2225      	movs	r2, #37	@ 0x25
 8006502:	701a      	strb	r2, [r3, #0]
        break;
 8006504:	bf00      	nop
      }
      break;
 8006506:	e081      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 8006508:	7cfb      	ldrb	r3, [r7, #19]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d005      	beq.n	800651a <lsm6dsv16x_xl_data_rate_get+0x122>
 800650e:	2b02      	cmp	r3, #2
 8006510:	d007      	beq.n	8006522 <lsm6dsv16x_xl_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2206      	movs	r2, #6
 8006516:	701a      	strb	r2, [r3, #0]
        break;
 8006518:	e007      	b.n	800652a <lsm6dsv16x_xl_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2216      	movs	r2, #22
 800651e:	701a      	strb	r2, [r3, #0]
        break;
 8006520:	e003      	b.n	800652a <lsm6dsv16x_xl_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2226      	movs	r2, #38	@ 0x26
 8006526:	701a      	strb	r2, [r3, #0]
        break;
 8006528:	bf00      	nop
      }
      break;
 800652a:	e06f      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d005      	beq.n	800653e <lsm6dsv16x_xl_data_rate_get+0x146>
 8006532:	2b02      	cmp	r3, #2
 8006534:	d007      	beq.n	8006546 <lsm6dsv16x_xl_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2207      	movs	r2, #7
 800653a:	701a      	strb	r2, [r3, #0]
        break;
 800653c:	e007      	b.n	800654e <lsm6dsv16x_xl_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2217      	movs	r2, #23
 8006542:	701a      	strb	r2, [r3, #0]
        break;
 8006544:	e003      	b.n	800654e <lsm6dsv16x_xl_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2227      	movs	r2, #39	@ 0x27
 800654a:	701a      	strb	r2, [r3, #0]
        break;
 800654c:	bf00      	nop
      }
      break;
 800654e:	e05d      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 8006550:	7cfb      	ldrb	r3, [r7, #19]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d005      	beq.n	8006562 <lsm6dsv16x_xl_data_rate_get+0x16a>
 8006556:	2b02      	cmp	r3, #2
 8006558:	d007      	beq.n	800656a <lsm6dsv16x_xl_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2208      	movs	r2, #8
 800655e:	701a      	strb	r2, [r3, #0]
        break;
 8006560:	e007      	b.n	8006572 <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2218      	movs	r2, #24
 8006566:	701a      	strb	r2, [r3, #0]
        break;
 8006568:	e003      	b.n	8006572 <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2228      	movs	r2, #40	@ 0x28
 800656e:	701a      	strb	r2, [r3, #0]
        break;
 8006570:	bf00      	nop
      }
      break;
 8006572:	e04b      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d005      	beq.n	8006586 <lsm6dsv16x_xl_data_rate_get+0x18e>
 800657a:	2b02      	cmp	r3, #2
 800657c:	d007      	beq.n	800658e <lsm6dsv16x_xl_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2209      	movs	r2, #9
 8006582:	701a      	strb	r2, [r3, #0]
        break;
 8006584:	e007      	b.n	8006596 <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2219      	movs	r2, #25
 800658a:	701a      	strb	r2, [r3, #0]
        break;
 800658c:	e003      	b.n	8006596 <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2229      	movs	r2, #41	@ 0x29
 8006592:	701a      	strb	r2, [r3, #0]
        break;
 8006594:	bf00      	nop
      }
      break;
 8006596:	e039      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 8006598:	7cfb      	ldrb	r3, [r7, #19]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d005      	beq.n	80065aa <lsm6dsv16x_xl_data_rate_get+0x1b2>
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d007      	beq.n	80065b2 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	220a      	movs	r2, #10
 80065a6:	701a      	strb	r2, [r3, #0]
        break;
 80065a8:	e007      	b.n	80065ba <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	221a      	movs	r2, #26
 80065ae:	701a      	strb	r2, [r3, #0]
        break;
 80065b0:	e003      	b.n	80065ba <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	222a      	movs	r2, #42	@ 0x2a
 80065b6:	701a      	strb	r2, [r3, #0]
        break;
 80065b8:	bf00      	nop
      }
      break;
 80065ba:	e027      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 80065bc:	7cfb      	ldrb	r3, [r7, #19]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d005      	beq.n	80065ce <lsm6dsv16x_xl_data_rate_get+0x1d6>
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d007      	beq.n	80065d6 <lsm6dsv16x_xl_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	220b      	movs	r2, #11
 80065ca:	701a      	strb	r2, [r3, #0]
        break;
 80065cc:	e007      	b.n	80065de <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	221b      	movs	r2, #27
 80065d2:	701a      	strb	r2, [r3, #0]
        break;
 80065d4:	e003      	b.n	80065de <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	222b      	movs	r2, #43	@ 0x2b
 80065da:	701a      	strb	r2, [r3, #0]
        break;
 80065dc:	bf00      	nop
      }
      break;
 80065de:	e015      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 80065e0:	7cfb      	ldrb	r3, [r7, #19]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d005      	beq.n	80065f2 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d007      	beq.n	80065fa <lsm6dsv16x_xl_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	220c      	movs	r2, #12
 80065ee:	701a      	strb	r2, [r3, #0]
        break;
 80065f0:	e007      	b.n	8006602 <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	221c      	movs	r2, #28
 80065f6:	701a      	strb	r2, [r3, #0]
        break;
 80065f8:	e003      	b.n	8006602 <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	222c      	movs	r2, #44	@ 0x2c
 80065fe:	701a      	strb	r2, [r3, #0]
        break;
 8006600:	bf00      	nop
      }
      break;
 8006602:	e003      	b.n	800660c <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
      break;
 800660a:	bf00      	nop
  }

  return ret;
 800660c:	697b      	ldr	r3, [r7, #20]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop

08006618 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8006624:	f107 0210 	add.w	r2, r7, #16
 8006628:	2301      	movs	r3, #1
 800662a:	2111      	movs	r1, #17
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff fe51 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006632:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	b2da      	uxtb	r2, r3
 800663c:	7c3b      	ldrb	r3, [r7, #16]
 800663e:	f362 0303 	bfi	r3, r2, #0, #4
 8006642:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8006644:	f107 0210 	add.w	r2, r7, #16
 8006648:	2301      	movs	r3, #1
 800664a:	2111      	movs	r1, #17
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fe59 	bl	8006304 <lsm6dsv16x_write_reg>
 8006652:	4602      	mov	r2, r0
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4413      	add	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	e024      	b.n	80066ae <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800666a:	7cfb      	ldrb	r3, [r7, #19]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01d      	beq.n	80066ac <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8006670:	f107 020c 	add.w	r2, r7, #12
 8006674:	2301      	movs	r3, #1
 8006676:	2162      	movs	r1, #98	@ 0x62
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fe2b 	bl	80062d4 <lsm6dsv16x_read_reg>
 800667e:	4602      	mov	r2, r0
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4413      	add	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8006686:	7cfb      	ldrb	r3, [r7, #19]
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	b2da      	uxtb	r2, r3
 800668e:	7b3b      	ldrb	r3, [r7, #12]
 8006690:	f362 0301 	bfi	r3, r2, #0, #2
 8006694:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8006696:	f107 020c 	add.w	r2, r7, #12
 800669a:	2301      	movs	r3, #1
 800669c:	2162      	movs	r1, #98	@ 0x62
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fe30 	bl	8006304 <lsm6dsv16x_write_reg>
 80066a4:	4602      	mov	r2, r0
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80066ac:	697b      	ldr	r3, [r7, #20]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80066c2:	f107 0210 	add.w	r2, r7, #16
 80066c6:	2301      	movs	r3, #1
 80066c8:	2111      	movs	r1, #17
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fe02 	bl	80062d4 <lsm6dsv16x_read_reg>
 80066d0:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80066d2:	f107 020c 	add.w	r2, r7, #12
 80066d6:	2301      	movs	r3, #1
 80066d8:	2162      	movs	r1, #98	@ 0x62
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fdfa 	bl	80062d4 <lsm6dsv16x_read_reg>
 80066e0:	4602      	mov	r2, r0
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <lsm6dsv16x_gy_data_rate_get+0x3a>
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	e0ed      	b.n	80068ce <lsm6dsv16x_gy_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 80066f2:	7b3b      	ldrb	r3, [r7, #12]
 80066f4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 80066fc:	7c3b      	ldrb	r3, [r7, #16]
 80066fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b0c      	cmp	r3, #12
 8006706:	f200 80dd 	bhi.w	80068c4 <lsm6dsv16x_gy_data_rate_get+0x20c>
 800670a:	a201      	add	r2, pc, #4	@ (adr r2, 8006710 <lsm6dsv16x_gy_data_rate_get+0x58>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006745 	.word	0x08006745
 8006714:	0800674d 	.word	0x0800674d
 8006718:	08006755 	.word	0x08006755
 800671c:	0800675d 	.word	0x0800675d
 8006720:	08006781 	.word	0x08006781
 8006724:	080067a5 	.word	0x080067a5
 8006728:	080067c9 	.word	0x080067c9
 800672c:	080067ed 	.word	0x080067ed
 8006730:	08006811 	.word	0x08006811
 8006734:	08006835 	.word	0x08006835
 8006738:	08006859 	.word	0x08006859
 800673c:	0800687d 	.word	0x0800687d
 8006740:	080068a1 	.word	0x080068a1
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
      break;
 800674a:	e0bf      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2201      	movs	r2, #1
 8006750:	701a      	strb	r2, [r3, #0]
      break;
 8006752:	e0bb      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2202      	movs	r2, #2
 8006758:	701a      	strb	r2, [r3, #0]
      break;
 800675a:	e0b7      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800675c:	7cfb      	ldrb	r3, [r7, #19]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d005      	beq.n	800676e <lsm6dsv16x_gy_data_rate_get+0xb6>
 8006762:	2b02      	cmp	r3, #2
 8006764:	d007      	beq.n	8006776 <lsm6dsv16x_gy_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2203      	movs	r2, #3
 800676a:	701a      	strb	r2, [r3, #0]
        break;
 800676c:	e007      	b.n	800677e <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2213      	movs	r2, #19
 8006772:	701a      	strb	r2, [r3, #0]
        break;
 8006774:	e003      	b.n	800677e <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2223      	movs	r2, #35	@ 0x23
 800677a:	701a      	strb	r2, [r3, #0]
        break;
 800677c:	bf00      	nop
      }
      break;
 800677e:	e0a5      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 8006780:	7cfb      	ldrb	r3, [r7, #19]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d005      	beq.n	8006792 <lsm6dsv16x_gy_data_rate_get+0xda>
 8006786:	2b02      	cmp	r3, #2
 8006788:	d007      	beq.n	800679a <lsm6dsv16x_gy_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2204      	movs	r2, #4
 800678e:	701a      	strb	r2, [r3, #0]
        break;
 8006790:	e007      	b.n	80067a2 <lsm6dsv16x_gy_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2214      	movs	r2, #20
 8006796:	701a      	strb	r2, [r3, #0]
        break;
 8006798:	e003      	b.n	80067a2 <lsm6dsv16x_gy_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2224      	movs	r2, #36	@ 0x24
 800679e:	701a      	strb	r2, [r3, #0]
        break;
 80067a0:	bf00      	nop
      }
      break;
 80067a2:	e093      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 80067a4:	7cfb      	ldrb	r3, [r7, #19]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d005      	beq.n	80067b6 <lsm6dsv16x_gy_data_rate_get+0xfe>
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d007      	beq.n	80067be <lsm6dsv16x_gy_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2205      	movs	r2, #5
 80067b2:	701a      	strb	r2, [r3, #0]
        break;
 80067b4:	e007      	b.n	80067c6 <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2215      	movs	r2, #21
 80067ba:	701a      	strb	r2, [r3, #0]
        break;
 80067bc:	e003      	b.n	80067c6 <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2225      	movs	r2, #37	@ 0x25
 80067c2:	701a      	strb	r2, [r3, #0]
        break;
 80067c4:	bf00      	nop
      }
      break;
 80067c6:	e081      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 80067c8:	7cfb      	ldrb	r3, [r7, #19]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d005      	beq.n	80067da <lsm6dsv16x_gy_data_rate_get+0x122>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d007      	beq.n	80067e2 <lsm6dsv16x_gy_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2206      	movs	r2, #6
 80067d6:	701a      	strb	r2, [r3, #0]
        break;
 80067d8:	e007      	b.n	80067ea <lsm6dsv16x_gy_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2216      	movs	r2, #22
 80067de:	701a      	strb	r2, [r3, #0]
        break;
 80067e0:	e003      	b.n	80067ea <lsm6dsv16x_gy_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2226      	movs	r2, #38	@ 0x26
 80067e6:	701a      	strb	r2, [r3, #0]
        break;
 80067e8:	bf00      	nop
      }
      break;
 80067ea:	e06f      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 80067ec:	7cfb      	ldrb	r3, [r7, #19]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d005      	beq.n	80067fe <lsm6dsv16x_gy_data_rate_get+0x146>
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d007      	beq.n	8006806 <lsm6dsv16x_gy_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2207      	movs	r2, #7
 80067fa:	701a      	strb	r2, [r3, #0]
        break;
 80067fc:	e007      	b.n	800680e <lsm6dsv16x_gy_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2217      	movs	r2, #23
 8006802:	701a      	strb	r2, [r3, #0]
        break;
 8006804:	e003      	b.n	800680e <lsm6dsv16x_gy_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2227      	movs	r2, #39	@ 0x27
 800680a:	701a      	strb	r2, [r3, #0]
        break;
 800680c:	bf00      	nop
      }
      break;
 800680e:	e05d      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 8006810:	7cfb      	ldrb	r3, [r7, #19]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d005      	beq.n	8006822 <lsm6dsv16x_gy_data_rate_get+0x16a>
 8006816:	2b02      	cmp	r3, #2
 8006818:	d007      	beq.n	800682a <lsm6dsv16x_gy_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2208      	movs	r2, #8
 800681e:	701a      	strb	r2, [r3, #0]
        break;
 8006820:	e007      	b.n	8006832 <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2218      	movs	r2, #24
 8006826:	701a      	strb	r2, [r3, #0]
        break;
 8006828:	e003      	b.n	8006832 <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2228      	movs	r2, #40	@ 0x28
 800682e:	701a      	strb	r2, [r3, #0]
        break;
 8006830:	bf00      	nop
      }
      break;
 8006832:	e04b      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 8006834:	7cfb      	ldrb	r3, [r7, #19]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d005      	beq.n	8006846 <lsm6dsv16x_gy_data_rate_get+0x18e>
 800683a:	2b02      	cmp	r3, #2
 800683c:	d007      	beq.n	800684e <lsm6dsv16x_gy_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2209      	movs	r2, #9
 8006842:	701a      	strb	r2, [r3, #0]
        break;
 8006844:	e007      	b.n	8006856 <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2219      	movs	r2, #25
 800684a:	701a      	strb	r2, [r3, #0]
        break;
 800684c:	e003      	b.n	8006856 <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2229      	movs	r2, #41	@ 0x29
 8006852:	701a      	strb	r2, [r3, #0]
        break;
 8006854:	bf00      	nop
      }
      break;
 8006856:	e039      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 8006858:	7cfb      	ldrb	r3, [r7, #19]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d005      	beq.n	800686a <lsm6dsv16x_gy_data_rate_get+0x1b2>
 800685e:	2b02      	cmp	r3, #2
 8006860:	d007      	beq.n	8006872 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	220a      	movs	r2, #10
 8006866:	701a      	strb	r2, [r3, #0]
        break;
 8006868:	e007      	b.n	800687a <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	221a      	movs	r2, #26
 800686e:	701a      	strb	r2, [r3, #0]
        break;
 8006870:	e003      	b.n	800687a <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	222a      	movs	r2, #42	@ 0x2a
 8006876:	701a      	strb	r2, [r3, #0]
        break;
 8006878:	bf00      	nop
      }
      break;
 800687a:	e027      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 800687c:	7cfb      	ldrb	r3, [r7, #19]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d005      	beq.n	800688e <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8006882:	2b02      	cmp	r3, #2
 8006884:	d007      	beq.n	8006896 <lsm6dsv16x_gy_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	220b      	movs	r2, #11
 800688a:	701a      	strb	r2, [r3, #0]
        break;
 800688c:	e007      	b.n	800689e <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	221b      	movs	r2, #27
 8006892:	701a      	strb	r2, [r3, #0]
        break;
 8006894:	e003      	b.n	800689e <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	222b      	movs	r2, #43	@ 0x2b
 800689a:	701a      	strb	r2, [r3, #0]
        break;
 800689c:	bf00      	nop
      }
      break;
 800689e:	e015      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 80068a0:	7cfb      	ldrb	r3, [r7, #19]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d005      	beq.n	80068b2 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d007      	beq.n	80068ba <lsm6dsv16x_gy_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	220c      	movs	r2, #12
 80068ae:	701a      	strb	r2, [r3, #0]
        break;
 80068b0:	e007      	b.n	80068c2 <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	221c      	movs	r2, #28
 80068b6:	701a      	strb	r2, [r3, #0]
        break;
 80068b8:	e003      	b.n	80068c2 <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	222c      	movs	r2, #44	@ 0x2c
 80068be:	701a      	strb	r2, [r3, #0]
        break;
 80068c0:	bf00      	nop
      }
      break;
 80068c2:	e003      	b.n	80068cc <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
      break;
 80068ca:	bf00      	nop
  }

  return ret;
 80068cc:	697b      	ldr	r3, [r7, #20]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop

080068d8 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80068e4:	f107 0208 	add.w	r2, r7, #8
 80068e8:	2301      	movs	r3, #1
 80068ea:	2112      	movs	r1, #18
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff fcf1 	bl	80062d4 <lsm6dsv16x_read_reg>
 80068f2:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10f      	bne.n	800691a <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	b2da      	uxtb	r2, r3
 8006902:	7a3b      	ldrb	r3, [r7, #8]
 8006904:	f362 0382 	bfi	r3, r2, #2, #1
 8006908:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800690a:	f107 0208 	add.w	r2, r7, #8
 800690e:	2301      	movs	r3, #1
 8006910:	2112      	movs	r1, #18
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff fcf6 	bl	8006304 <lsm6dsv16x_write_reg>
 8006918:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800691a:	68fb      	ldr	r3, [r7, #12]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8006930:	f107 0208 	add.w	r2, r7, #8
 8006934:	2301      	movs	r3, #1
 8006936:	2112      	movs	r1, #18
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff fccb 	bl	80062d4 <lsm6dsv16x_read_reg>
 800693e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10f      	bne.n	8006966 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	7a3b      	ldrb	r3, [r7, #8]
 8006950:	f362 1386 	bfi	r3, r2, #6, #1
 8006954:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8006956:	f107 0208 	add.w	r2, r7, #8
 800695a:	2301      	movs	r3, #1
 800695c:	2112      	movs	r1, #18
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff fcd0 	bl	8006304 <lsm6dsv16x_write_reg>
 8006964:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006966:	68fb      	ldr	r3, [r7, #12]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800697c:	f107 0208 	add.w	r2, r7, #8
 8006980:	2301      	movs	r3, #1
 8006982:	2115      	movs	r1, #21
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff fca5 	bl	80062d4 <lsm6dsv16x_read_reg>
 800698a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10f      	bne.n	80069b2 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	b2da      	uxtb	r2, r3
 800699a:	7a3b      	ldrb	r3, [r7, #8]
 800699c:	f362 0303 	bfi	r3, r2, #0, #4
 80069a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80069a2:	f107 0208 	add.w	r2, r7, #8
 80069a6:	2301      	movs	r3, #1
 80069a8:	2115      	movs	r1, #21
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fcaa 	bl	8006304 <lsm6dsv16x_write_reg>
 80069b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80069c6:	f107 0208 	add.w	r2, r7, #8
 80069ca:	2301      	movs	r3, #1
 80069cc:	2115      	movs	r1, #21
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff fc80 	bl	80062d4 <lsm6dsv16x_read_reg>
 80069d4:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <lsm6dsv16x_gy_full_scale_get+0x24>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	e040      	b.n	8006a62 <lsm6dsv16x_gy_full_scale_get+0xa6>

  switch (ctrl6.fs_g)
 80069e0:	7a3b      	ldrb	r3, [r7, #8]
 80069e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b0c      	cmp	r3, #12
 80069ea:	d835      	bhi.n	8006a58 <lsm6dsv16x_gy_full_scale_get+0x9c>
 80069ec:	a201      	add	r2, pc, #4	@ (adr r2, 80069f4 <lsm6dsv16x_gy_full_scale_get+0x38>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006a29 	.word	0x08006a29
 80069f8:	08006a31 	.word	0x08006a31
 80069fc:	08006a39 	.word	0x08006a39
 8006a00:	08006a41 	.word	0x08006a41
 8006a04:	08006a49 	.word	0x08006a49
 8006a08:	08006a59 	.word	0x08006a59
 8006a0c:	08006a59 	.word	0x08006a59
 8006a10:	08006a59 	.word	0x08006a59
 8006a14:	08006a59 	.word	0x08006a59
 8006a18:	08006a59 	.word	0x08006a59
 8006a1c:	08006a59 	.word	0x08006a59
 8006a20:	08006a59 	.word	0x08006a59
 8006a24:	08006a51 	.word	0x08006a51
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
      break;
 8006a2e:	e017      	b.n	8006a60 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2201      	movs	r2, #1
 8006a34:	701a      	strb	r2, [r3, #0]
      break;
 8006a36:	e013      	b.n	8006a60 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	701a      	strb	r2, [r3, #0]
      break;
 8006a3e:	e00f      	b.n	8006a60 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2203      	movs	r2, #3
 8006a44:	701a      	strb	r2, [r3, #0]
      break;
 8006a46:	e00b      	b.n	8006a60 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	701a      	strb	r2, [r3, #0]
      break;
 8006a4e:	e007      	b.n	8006a60 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	220c      	movs	r2, #12
 8006a54:	701a      	strb	r2, [r3, #0]
      break;
 8006a56:	e003      	b.n	8006a60 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
      break;
 8006a5e:	bf00      	nop
  }

  return ret;
 8006a60:	68fb      	ldr	r3, [r7, #12]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop

08006a6c <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8006a78:	f107 0208 	add.w	r2, r7, #8
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	2117      	movs	r1, #23
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fc27 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006a86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10f      	bne.n	8006aae <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	7a3b      	ldrb	r3, [r7, #8]
 8006a98:	f362 0301 	bfi	r3, r2, #0, #2
 8006a9c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8006a9e:	f107 0208 	add.w	r2, r7, #8
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	2117      	movs	r1, #23
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fc2c 	bl	8006304 <lsm6dsv16x_write_reg>
 8006aac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006aae:	68fb      	ldr	r3, [r7, #12]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8006ac2:	f107 0208 	add.w	r2, r7, #8
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	2117      	movs	r1, #23
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fc02 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006ad0:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <lsm6dsv16x_xl_full_scale_get+0x24>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	e026      	b.n	8006b2a <lsm6dsv16x_xl_full_scale_get+0x72>

  switch (ctrl8.fs_xl)
 8006adc:	7a3b      	ldrb	r3, [r7, #8]
 8006ade:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d81b      	bhi.n	8006b20 <lsm6dsv16x_xl_full_scale_get+0x68>
 8006ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8006af0 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b09 	.word	0x08006b09
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b19 	.word	0x08006b19
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
      break;
 8006b06:	e00f      	b.n	8006b28 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
      break;
 8006b0e:	e00b      	b.n	8006b28 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2202      	movs	r2, #2
 8006b14:	701a      	strb	r2, [r3, #0]
      break;
 8006b16:	e007      	b.n	8006b28 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	701a      	strb	r2, [r3, #0]
      break;
 8006b1e:	e003      	b.n	8006b28 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	701a      	strb	r2, [r3, #0]
      break;
 8006b26:	bf00      	nop
  }

  return ret;
 8006b28:	68fb      	ldr	r3, [r7, #12]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop

08006b34 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8006b3e:	f107 020c 	add.w	r2, r7, #12
 8006b42:	2306      	movs	r3, #6
 8006b44:	2122      	movs	r1, #34	@ 0x22
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fbc4 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006b4c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <lsm6dsv16x_angular_rate_raw_get+0x24>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	e036      	b.n	8006bc6 <lsm6dsv16x_angular_rate_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8006b58:	7b7b      	ldrb	r3, [r7, #13]
 8006b5a:	b21a      	sxth	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	7b3a      	ldrb	r2, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	b21a      	sxth	r2, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006b78:	7bfa      	ldrb	r2, [r7, #15]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	b212      	sxth	r2, r2
 8006b80:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	3302      	adds	r3, #2
 8006b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	7bba      	ldrb	r2, [r7, #14]
 8006b92:	4413      	add	r3, r2
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	3302      	adds	r3, #2
 8006b9a:	b212      	sxth	r2, r2
 8006b9c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006b9e:	7c7a      	ldrb	r2, [r7, #17]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	b212      	sxth	r2, r2
 8006ba6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	3304      	adds	r3, #4
 8006bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	7c3a      	ldrb	r2, [r7, #16]
 8006bb8:	4413      	add	r3, r2
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	b212      	sxth	r2, r2
 8006bc2:	801a      	strh	r2, [r3, #0]

  return ret;
 8006bc4:	697b      	ldr	r3, [r7, #20]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8006bd8:	f107 020c 	add.w	r2, r7, #12
 8006bdc:	2306      	movs	r3, #6
 8006bde:	2128      	movs	r1, #40	@ 0x28
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fb77 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006be6:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <lsm6dsv16x_acceleration_raw_get+0x24>
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	e036      	b.n	8006c60 <lsm6dsv16x_acceleration_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8006bf2:	7b7b      	ldrb	r3, [r7, #13]
 8006bf4:	b21a      	sxth	r2, r3
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	7b3a      	ldrb	r2, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	b21a      	sxth	r2, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006c12:	7bfa      	ldrb	r2, [r7, #15]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	3302      	adds	r3, #2
 8006c18:	b212      	sxth	r2, r2
 8006c1a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	3302      	adds	r3, #2
 8006c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	7bba      	ldrb	r2, [r7, #14]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	3302      	adds	r3, #2
 8006c34:	b212      	sxth	r2, r2
 8006c36:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006c38:	7c7a      	ldrb	r2, [r7, #17]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	b212      	sxth	r2, r2
 8006c40:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	3304      	adds	r3, #4
 8006c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	7c3a      	ldrb	r2, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	b212      	sxth	r2, r2
 8006c5c:	801a      	strh	r2, [r3, #0]

  return ret;
 8006c5e:	697b      	ldr	r3, [r7, #20]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3718      	adds	r7, #24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8006c74:	f107 0208 	add.w	r2, r7, #8
 8006c78:	2301      	movs	r3, #1
 8006c7a:	210a      	movs	r1, #10
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff fb29 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006c82:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10f      	bne.n	8006caa <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	7a3b      	ldrb	r3, [r7, #8]
 8006c94:	f362 0302 	bfi	r3, r2, #0, #3
 8006c98:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8006c9a:	f107 0208 	add.w	r2, r7, #8
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	210a      	movs	r1, #10
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fb2e 	bl	8006304 <lsm6dsv16x_write_reg>
 8006ca8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006caa:	68fb      	ldr	r3, [r7, #12]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8006cbe:	f107 0208 	add.w	r2, r7, #8
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	2116      	movs	r1, #22
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fb04 	bl	80062d4 <lsm6dsv16x_read_reg>
 8006ccc:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10f      	bne.n	8006cf4 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8006cd4:	783b      	ldrb	r3, [r7, #0]
 8006cd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	7a3b      	ldrb	r3, [r7, #8]
 8006cde:	f362 13c7 	bfi	r3, r2, #7, #1
 8006ce2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8006ce4:	f107 0208 	add.w	r2, r7, #8
 8006ce8:	2301      	movs	r3, #1
 8006cea:	2116      	movs	r1, #22
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff fb09 	bl	8006304 <lsm6dsv16x_write_reg>
 8006cf2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d103      	bne.n	8006d18 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	e034      	b.n	8006d82 <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	7b1a      	ldrb	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a0e      	ldr	r2, [pc, #56]	@ (8006d8c <STTS22H_RegisterBusIO+0x8c>)
 8006d54:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a0d      	ldr	r2, [pc, #52]	@ (8006d90 <STTS22H_RegisterBusIO+0x90>)
 8006d5a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d004      	beq.n	8006d7c <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4798      	blx	r3
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	e002      	b.n	8006d82 <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 8006d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d80:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	0800719d 	.word	0x0800719d
 8006d90:	0800720b 	.word	0x0800720b

08006d94 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d127      	bne.n	8006df6 <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006dac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3320      	adds	r3, #32
 8006db2:	2101      	movs	r1, #1
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fc25 	bl	8007604 <stts22h_block_data_update_set>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 8006dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc4:	e01c      	b.n	8006e00 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3320      	adds	r3, #32
 8006dca:	2101      	movs	r1, #1
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fc72 	bl	80076b6 <stts22h_auto_increment_set>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 8006dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ddc:	e010      	b.n	8006e00 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3320      	adds	r3, #32
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fa91 	bl	800730c <stts22h_temp_data_rate_set>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295
 8006df4:	e004      	b.n	8006e00 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d108      	bne.n	8006e2c <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f878 	bl	8006f10 <STTS22H_TEMP_Disable>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	e004      	b.n	8006e36 <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3320      	adds	r3, #32
 8006e4c:	f107 020f 	add.w	r2, r7, #15
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fc1e 	bl	8007694 <stts22h_dev_id_get>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	e003      	b.n	8006e6c <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 8006e64:	7bfa      	ldrb	r2, [r7, #15]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2200      	movs	r2, #0
 8006e82:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2200      	movs	r2, #0
 8006e88:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	4a08      	ldr	r2, [pc, #32]	@ (8006ec8 <STTS22H_GetCapabilities+0x54>)
 8006ea8:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	43480000 	.word	0x43480000

08006ecc <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e012      	b.n	8006f08 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8006ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8e9 	bl	80070c4 <STTS22H_TEMP_SetOutputDataRate>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8006efc:	e004      	b.n	8006f08 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e01c      	b.n	8006f60 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	3334      	adds	r3, #52	@ 0x34
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f81b 	bl	8006f68 <STTS22H_TEMP_GetOutputDataRate>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 8006f38:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3c:	e010      	b.n	8006f60 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3320      	adds	r3, #32
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 f9e1 	bl	800730c <stts22h_temp_data_rate_set>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	e004      	b.n	8006f60 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3320      	adds	r3, #32
 8006f7a:	f107 020b 	add.w	r2, r7, #11
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fa89 	bl	8007498 <stts22h_temp_data_rate_get>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	e08b      	b.n	80070aa <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 8006f92:	7afb      	ldrb	r3, [r7, #11]
 8006f94:	2b32      	cmp	r3, #50	@ 0x32
 8006f96:	f200 8083 	bhi.w	80070a0 <STTS22H_TEMP_GetOutputDataRate+0x138>
 8006f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa0 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	0800706d 	.word	0x0800706d
 8006fa4:	0800706d 	.word	0x0800706d
 8006fa8:	08007081 	.word	0x08007081
 8006fac:	080070a1 	.word	0x080070a1
 8006fb0:	08007077 	.word	0x08007077
 8006fb4:	080070a1 	.word	0x080070a1
 8006fb8:	080070a1 	.word	0x080070a1
 8006fbc:	080070a1 	.word	0x080070a1
 8006fc0:	080070a1 	.word	0x080070a1
 8006fc4:	080070a1 	.word	0x080070a1
 8006fc8:	080070a1 	.word	0x080070a1
 8006fcc:	080070a1 	.word	0x080070a1
 8006fd0:	080070a1 	.word	0x080070a1
 8006fd4:	080070a1 	.word	0x080070a1
 8006fd8:	080070a1 	.word	0x080070a1
 8006fdc:	080070a1 	.word	0x080070a1
 8006fe0:	080070a1 	.word	0x080070a1
 8006fe4:	080070a1 	.word	0x080070a1
 8006fe8:	08007089 	.word	0x08007089
 8006fec:	080070a1 	.word	0x080070a1
 8006ff0:	080070a1 	.word	0x080070a1
 8006ff4:	080070a1 	.word	0x080070a1
 8006ff8:	080070a1 	.word	0x080070a1
 8006ffc:	080070a1 	.word	0x080070a1
 8007000:	080070a1 	.word	0x080070a1
 8007004:	080070a1 	.word	0x080070a1
 8007008:	080070a1 	.word	0x080070a1
 800700c:	080070a1 	.word	0x080070a1
 8007010:	080070a1 	.word	0x080070a1
 8007014:	080070a1 	.word	0x080070a1
 8007018:	080070a1 	.word	0x080070a1
 800701c:	080070a1 	.word	0x080070a1
 8007020:	080070a1 	.word	0x080070a1
 8007024:	080070a1 	.word	0x080070a1
 8007028:	08007091 	.word	0x08007091
 800702c:	080070a1 	.word	0x080070a1
 8007030:	080070a1 	.word	0x080070a1
 8007034:	080070a1 	.word	0x080070a1
 8007038:	080070a1 	.word	0x080070a1
 800703c:	080070a1 	.word	0x080070a1
 8007040:	080070a1 	.word	0x080070a1
 8007044:	080070a1 	.word	0x080070a1
 8007048:	080070a1 	.word	0x080070a1
 800704c:	080070a1 	.word	0x080070a1
 8007050:	080070a1 	.word	0x080070a1
 8007054:	080070a1 	.word	0x080070a1
 8007058:	080070a1 	.word	0x080070a1
 800705c:	080070a1 	.word	0x080070a1
 8007060:	080070a1 	.word	0x080070a1
 8007064:	080070a1 	.word	0x080070a1
 8007068:	08007099 	.word	0x08007099
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
      break;
 8007074:	e018      	b.n	80070a8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800707c:	601a      	str	r2, [r3, #0]
      break;
 800707e:	e013      	b.n	80070a8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4a0c      	ldr	r2, [pc, #48]	@ (80070b4 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 8007084:	601a      	str	r2, [r3, #0]
      break;
 8007086:	e00f      	b.n	80070a8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	4a0b      	ldr	r2, [pc, #44]	@ (80070b8 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800708c:	601a      	str	r2, [r3, #0]
      break;
 800708e:	e00b      	b.n	80070a8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	4a0a      	ldr	r2, [pc, #40]	@ (80070bc <STTS22H_TEMP_GetOutputDataRate+0x154>)
 8007094:	601a      	str	r2, [r3, #0]
      break;
 8007096:	e007      	b.n	80070a8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4a09      	ldr	r2, [pc, #36]	@ (80070c0 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800709c:	601a      	str	r2, [r3, #0]
      break;
 800709e:	e003      	b.n	80070a8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295
 80070a4:	60fb      	str	r3, [r7, #12]
      break;
 80070a6:	bf00      	nop
  }

  return ret;
 80070a8:	68fb      	ldr	r3, [r7, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	41c80000 	.word	0x41c80000
 80070b8:	42480000 	.word	0x42480000
 80070bc:	42c80000 	.word	0x42c80000
 80070c0:	43480000 	.word	0x43480000

080070c4 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 80070d0:	edd7 7a00 	vldr	s15, [r7]
 80070d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e0:	d801      	bhi.n	80070e6 <STTS22H_TEMP_SetOutputDataRate+0x22>
 80070e2:	2304      	movs	r3, #4
 80070e4:	e021      	b.n	800712a <STTS22H_TEMP_SetOutputDataRate+0x66>
 80070e6:	edd7 7a00 	vldr	s15, [r7]
 80070ea:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80070ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f6:	d801      	bhi.n	80070fc <STTS22H_TEMP_SetOutputDataRate+0x38>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e016      	b.n	800712a <STTS22H_TEMP_SetOutputDataRate+0x66>
 80070fc:	edd7 7a00 	vldr	s15, [r7]
 8007100:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8007150 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 8007104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710c:	d801      	bhi.n	8007112 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800710e:	2312      	movs	r3, #18
 8007110:	e00b      	b.n	800712a <STTS22H_TEMP_SetOutputDataRate+0x66>
 8007112:	edd7 7a00 	vldr	s15, [r7]
 8007116:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007154 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800711a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800711e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007122:	d801      	bhi.n	8007128 <STTS22H_TEMP_SetOutputDataRate+0x64>
 8007124:	2322      	movs	r3, #34	@ 0x22
 8007126:	e000      	b.n	800712a <STTS22H_TEMP_SetOutputDataRate+0x66>
 8007128:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800712a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3320      	adds	r3, #32
 8007130:	7bfa      	ldrb	r2, [r7, #15]
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f8e9 	bl	800730c <stts22h_temp_data_rate_set>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 8007140:	f04f 33ff 	mov.w	r3, #4294967295
 8007144:	e000      	b.n	8007148 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	42480000 	.word	0x42480000
 8007154:	42c80000 	.word	0x42c80000

08007158 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3320      	adds	r3, #32
 8007166:	f107 020e 	add.w	r2, r7, #14
 800716a:	4611      	mov	r1, r2
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fa6f 	bl	8007650 <stts22h_temperature_raw_get>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 8007178:	f04f 33ff 	mov.w	r3, #4294967295
 800717c:	e00a      	b.n	8007194 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800717e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f8a8 	bl	80072d8 <stts22h_from_lsb_to_celsius>
 8007188:	eef0 7a40 	vmov.f32	s15, s0
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b089      	sub	sp, #36	@ 0x24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	461a      	mov	r2, r3
 80071a8:	460b      	mov	r3, r1
 80071aa:	72fb      	strb	r3, [r7, #11]
 80071ac:	4613      	mov	r3, r2
 80071ae:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d11f      	bne.n	8007200 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80071c0:	2300      	movs	r3, #0
 80071c2:	83fb      	strh	r3, [r7, #30]
 80071c4:	e018      	b.n	80071f8 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	695c      	ldr	r4, [r3, #20]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	7b1b      	ldrb	r3, [r3, #12]
 80071ce:	4618      	mov	r0, r3
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	8bfb      	ldrh	r3, [r7, #30]
 80071d6:	4413      	add	r3, r2
 80071d8:	b299      	uxth	r1, r3
 80071da:	8bfb      	ldrh	r3, [r7, #30]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	441a      	add	r2, r3
 80071e0:	2301      	movs	r3, #1
 80071e2:	47a0      	blx	r4
 80071e4:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 80071ec:	f04f 33ff 	mov.w	r3, #4294967295
 80071f0:	e007      	b.n	8007202 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80071f2:	8bfb      	ldrh	r3, [r7, #30]
 80071f4:	3301      	adds	r3, #1
 80071f6:	83fb      	strh	r3, [r7, #30]
 80071f8:	8bfa      	ldrh	r2, [r7, #30]
 80071fa:	893b      	ldrh	r3, [r7, #8]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d3e2      	bcc.n	80071c6 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007200:	69bb      	ldr	r3, [r7, #24]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3724      	adds	r7, #36	@ 0x24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd90      	pop	{r4, r7, pc}

0800720a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800720a:	b590      	push	{r4, r7, lr}
 800720c:	b089      	sub	sp, #36	@ 0x24
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	461a      	mov	r2, r3
 8007216:	460b      	mov	r3, r1
 8007218:	72fb      	strb	r3, [r7, #11]
 800721a:	4613      	mov	r3, r2
 800721c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d11f      	bne.n	800726e <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800722e:	2300      	movs	r3, #0
 8007230:	83fb      	strh	r3, [r7, #30]
 8007232:	e018      	b.n	8007266 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	691c      	ldr	r4, [r3, #16]
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	7b1b      	ldrb	r3, [r3, #12]
 800723c:	4618      	mov	r0, r3
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	b29a      	uxth	r2, r3
 8007242:	8bfb      	ldrh	r3, [r7, #30]
 8007244:	4413      	add	r3, r2
 8007246:	b299      	uxth	r1, r3
 8007248:	8bfb      	ldrh	r3, [r7, #30]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	441a      	add	r2, r3
 800724e:	2301      	movs	r3, #1
 8007250:	47a0      	blx	r4
 8007252:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	e007      	b.n	8007270 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007260:	8bfb      	ldrh	r3, [r7, #30]
 8007262:	3301      	adds	r3, #1
 8007264:	83fb      	strh	r3, [r7, #30]
 8007266:	8bfa      	ldrh	r2, [r7, #30]
 8007268:	893b      	ldrh	r3, [r7, #8]
 800726a:	429a      	cmp	r2, r3
 800726c:	d3e2      	bcc.n	8007234 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800726e:	69bb      	ldr	r3, [r7, #24]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3724      	adds	r7, #36	@ 0x24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd90      	pop	{r4, r7, pc}

08007278 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	460b      	mov	r3, r1
 8007286:	72fb      	strb	r3, [r7, #11]
 8007288:	4613      	mov	r3, r2
 800728a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	685c      	ldr	r4, [r3, #4]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68d8      	ldr	r0, [r3, #12]
 8007294:	893b      	ldrh	r3, [r7, #8]
 8007296:	7af9      	ldrb	r1, [r7, #11]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	47a0      	blx	r4
 800729c:	6178      	str	r0, [r7, #20]

  return ret;
 800729e:	697b      	ldr	r3, [r7, #20]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd90      	pop	{r4, r7, pc}

080072a8 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80072a8:	b590      	push	{r4, r7, lr}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	461a      	mov	r2, r3
 80072b4:	460b      	mov	r3, r1
 80072b6:	72fb      	strb	r3, [r7, #11]
 80072b8:	4613      	mov	r3, r2
 80072ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681c      	ldr	r4, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68d8      	ldr	r0, [r3, #12]
 80072c4:	893b      	ldrh	r3, [r7, #8]
 80072c6:	7af9      	ldrb	r1, [r7, #11]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	47a0      	blx	r4
 80072cc:	6178      	str	r0, [r7, #20]

  return ret;
 80072ce:	697b      	ldr	r3, [r7, #20]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd90      	pop	{r4, r7, pc}

080072d8 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 80072e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ee:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007308 <stts22h_from_lsb_to_celsius+0x30>
 80072f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80072f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80072fa:	eeb0 0a67 	vmov.f32	s0, s15
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	42c80000 	.word	0x42c80000

0800730c <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8007318:	f107 020c 	add.w	r2, r7, #12
 800731c:	2301      	movs	r3, #1
 800731e:	2104      	movs	r1, #4
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ffa9 	bl	8007278 <stts22h_read_reg>
 8007326:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <stts22h_temp_data_rate_set+0x32>
  {
    ret = stts22h_read_reg(ctx, STTS22H_SOFTWARE_RESET,
 800732e:	f107 0210 	add.w	r2, r7, #16
 8007332:	2301      	movs	r3, #1
 8007334:	210c      	movs	r1, #12
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff ff9e 	bl	8007278 <stts22h_read_reg>
 800733c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d11d      	bne.n	8007380 <stts22h_temp_data_rate_set+0x74>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11a      	bne.n	8007380 <stts22h_temp_data_rate_set+0x74>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800734a:	7c3b      	ldrb	r3, [r7, #16]
 800734c:	f043 0302 	orr.w	r3, r3, #2
 8007350:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8007352:	f107 0210 	add.w	r2, r7, #16
 8007356:	2301      	movs	r3, #1
 8007358:	210c      	movs	r1, #12
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff ffa4 	bl	80072a8 <stts22h_write_reg>
 8007360:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10b      	bne.n	8007380 <stts22h_temp_data_rate_set+0x74>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8007368:	7c3b      	ldrb	r3, [r7, #16]
 800736a:	f023 0302 	bic.w	r3, r3, #2
 800736e:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8007370:	f107 0210 	add.w	r2, r7, #16
 8007374:	2301      	movs	r3, #1
 8007376:	210c      	movs	r1, #12
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff ff95 	bl	80072a8 <stts22h_write_reg>
 800737e:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d008      	beq.n	8007398 <stts22h_temp_data_rate_set+0x8c>
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	2b12      	cmp	r3, #18
 800738a:	d005      	beq.n	8007398 <stts22h_temp_data_rate_set+0x8c>
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	2b22      	cmp	r3, #34	@ 0x22
 8007390:	d002      	beq.n	8007398 <stts22h_temp_data_rate_set+0x8c>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	2b32      	cmp	r3, #50	@ 0x32
 8007396:	d123      	bne.n	80073e0 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 8007398:	7b3b      	ldrb	r3, [r7, #12]
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11d      	bne.n	80073e0 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d11a      	bne.n	80073e0 <stts22h_temp_data_rate_set+0xd4>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80073aa:	7c3b      	ldrb	r3, [r7, #16]
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 80073b2:	f107 0210 	add.w	r2, r7, #16
 80073b6:	2301      	movs	r3, #1
 80073b8:	210c      	movs	r1, #12
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff ff74 	bl	80072a8 <stts22h_write_reg>
 80073c0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10b      	bne.n	80073e0 <stts22h_temp_data_rate_set+0xd4>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 80073c8:	7c3b      	ldrb	r3, [r7, #16]
 80073ca:	f023 0302 	bic.w	r3, r3, #2
 80073ce:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 80073d0:	f107 0210 	add.w	r2, r7, #16
 80073d4:	2301      	movs	r3, #1
 80073d6:	210c      	movs	r1, #12
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff ff65 	bl	80072a8 <stts22h_write_reg>
 80073de:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d125      	bne.n	8007432 <stts22h_temp_data_rate_set+0x126>
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d122      	bne.n	8007432 <stts22h_temp_data_rate_set+0x126>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80073ec:	7c3b      	ldrb	r3, [r7, #16]
 80073ee:	f043 0302 	orr.w	r3, r3, #2
 80073f2:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 80073f4:	7c3b      	ldrb	r3, [r7, #16]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fa:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 80073fc:	f107 0210 	add.w	r2, r7, #16
 8007400:	2301      	movs	r3, #1
 8007402:	210c      	movs	r1, #12
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff ff4f 	bl	80072a8 <stts22h_write_reg>
 800740a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10f      	bne.n	8007432 <stts22h_temp_data_rate_set+0x126>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8007412:	7c3b      	ldrb	r3, [r7, #16]
 8007414:	f023 0302 	bic.w	r3, r3, #2
 8007418:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 800741a:	7c3b      	ldrb	r3, [r7, #16]
 800741c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007420:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8007422:	f107 0210 	add.w	r2, r7, #16
 8007426:	2301      	movs	r3, #1
 8007428:	210c      	movs	r1, #12
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff ff3c 	bl	80072a8 <stts22h_write_reg>
 8007430:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d12a      	bne.n	800748e <stts22h_temp_data_rate_set+0x182>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	7b3b      	ldrb	r3, [r7, #12]
 8007442:	f362 0300 	bfi	r3, r2, #0, #1
 8007446:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	b2da      	uxtb	r2, r3
 8007452:	7b3b      	ldrb	r3, [r7, #12]
 8007454:	f362 0382 	bfi	r3, r2, #2, #1
 8007458:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	089b      	lsrs	r3, r3, #2
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	7b3b      	ldrb	r3, [r7, #12]
 8007466:	f362 13c7 	bfi	r3, r2, #7, #1
 800746a:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	091b      	lsrs	r3, r3, #4
 8007470:	f003 0303 	and.w	r3, r3, #3
 8007474:	b2da      	uxtb	r2, r3
 8007476:	7b3b      	ldrb	r3, [r7, #12]
 8007478:	f362 1305 	bfi	r3, r2, #4, #2
 800747c:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800747e:	f107 020c 	add.w	r2, r7, #12
 8007482:	2301      	movs	r3, #1
 8007484:	2104      	movs	r1, #4
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff ff0e 	bl	80072a8 <stts22h_write_reg>
 800748c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800748e:	697b      	ldr	r3, [r7, #20]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 80074a2:	f107 0208 	add.w	r2, r7, #8
 80074a6:	2301      	movs	r3, #1
 80074a8:	2104      	movs	r1, #4
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff fee4 	bl	8007278 <stts22h_read_reg>
 80074b0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 80074b2:	7a3b      	ldrb	r3, [r7, #8]
 80074b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	7a3b      	ldrb	r3, [r7, #8]
 80074be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	431a      	orrs	r2, r3
 80074c8:	7a3b      	ldrb	r3, [r7, #8]
 80074ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 80074d4:	7a3b      	ldrb	r3, [r7, #8]
 80074d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	011b      	lsls	r3, r3, #4
                                                 2) |
 80074de:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 80074e0:	2b32      	cmp	r3, #50	@ 0x32
 80074e2:	f200 8085 	bhi.w	80075f0 <stts22h_temp_data_rate_get+0x158>
 80074e6:	a201      	add	r2, pc, #4	@ (adr r2, 80074ec <stts22h_temp_data_rate_get+0x54>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	080075b9 	.word	0x080075b9
 80074f0:	080075c1 	.word	0x080075c1
 80074f4:	080075d1 	.word	0x080075d1
 80074f8:	080075f1 	.word	0x080075f1
 80074fc:	080075c9 	.word	0x080075c9
 8007500:	080075f1 	.word	0x080075f1
 8007504:	080075f1 	.word	0x080075f1
 8007508:	080075f1 	.word	0x080075f1
 800750c:	080075f1 	.word	0x080075f1
 8007510:	080075f1 	.word	0x080075f1
 8007514:	080075f1 	.word	0x080075f1
 8007518:	080075f1 	.word	0x080075f1
 800751c:	080075f1 	.word	0x080075f1
 8007520:	080075f1 	.word	0x080075f1
 8007524:	080075f1 	.word	0x080075f1
 8007528:	080075f1 	.word	0x080075f1
 800752c:	080075f1 	.word	0x080075f1
 8007530:	080075f1 	.word	0x080075f1
 8007534:	080075d9 	.word	0x080075d9
 8007538:	080075f1 	.word	0x080075f1
 800753c:	080075f1 	.word	0x080075f1
 8007540:	080075f1 	.word	0x080075f1
 8007544:	080075f1 	.word	0x080075f1
 8007548:	080075f1 	.word	0x080075f1
 800754c:	080075f1 	.word	0x080075f1
 8007550:	080075f1 	.word	0x080075f1
 8007554:	080075f1 	.word	0x080075f1
 8007558:	080075f1 	.word	0x080075f1
 800755c:	080075f1 	.word	0x080075f1
 8007560:	080075f1 	.word	0x080075f1
 8007564:	080075f1 	.word	0x080075f1
 8007568:	080075f1 	.word	0x080075f1
 800756c:	080075f1 	.word	0x080075f1
 8007570:	080075f1 	.word	0x080075f1
 8007574:	080075e1 	.word	0x080075e1
 8007578:	080075f1 	.word	0x080075f1
 800757c:	080075f1 	.word	0x080075f1
 8007580:	080075f1 	.word	0x080075f1
 8007584:	080075f1 	.word	0x080075f1
 8007588:	080075f1 	.word	0x080075f1
 800758c:	080075f1 	.word	0x080075f1
 8007590:	080075f1 	.word	0x080075f1
 8007594:	080075f1 	.word	0x080075f1
 8007598:	080075f1 	.word	0x080075f1
 800759c:	080075f1 	.word	0x080075f1
 80075a0:	080075f1 	.word	0x080075f1
 80075a4:	080075f1 	.word	0x080075f1
 80075a8:	080075f1 	.word	0x080075f1
 80075ac:	080075f1 	.word	0x080075f1
 80075b0:	080075f1 	.word	0x080075f1
 80075b4:	080075e9 	.word	0x080075e9
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
      break;
 80075be:	e01b      	b.n	80075f8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	701a      	strb	r2, [r3, #0]
      break;
 80075c6:	e017      	b.n	80075f8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2204      	movs	r2, #4
 80075cc:	701a      	strb	r2, [r3, #0]
      break;
 80075ce:	e013      	b.n	80075f8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2202      	movs	r2, #2
 80075d4:	701a      	strb	r2, [r3, #0]
      break;
 80075d6:	e00f      	b.n	80075f8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2212      	movs	r2, #18
 80075dc:	701a      	strb	r2, [r3, #0]
      break;
 80075de:	e00b      	b.n	80075f8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2222      	movs	r2, #34	@ 0x22
 80075e4:	701a      	strb	r2, [r3, #0]
      break;
 80075e6:	e007      	b.n	80075f8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2232      	movs	r2, #50	@ 0x32
 80075ec:	701a      	strb	r2, [r3, #0]
      break;
 80075ee:	e003      	b.n	80075f8 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
      break;
 80075f6:	bf00      	nop
  }

  return ret;
 80075f8:	68fb      	ldr	r3, [r7, #12]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop

08007604 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8007610:	f107 0208 	add.w	r2, r7, #8
 8007614:	2301      	movs	r3, #1
 8007616:	2104      	movs	r1, #4
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff fe2d 	bl	8007278 <stts22h_read_reg>
 800761e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10f      	bne.n	8007646 <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	b2da      	uxtb	r2, r3
 800762e:	7a3b      	ldrb	r3, [r7, #8]
 8007630:	f362 1386 	bfi	r3, r2, #6, #1
 8007634:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8007636:	f107 0208 	add.w	r2, r7, #8
 800763a:	2301      	movs	r3, #1
 800763c:	2104      	movs	r1, #4
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff fe32 	bl	80072a8 <stts22h_write_reg>
 8007644:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007646:	68fb      	ldr	r3, [r7, #12]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800765a:	f107 0208 	add.w	r2, r7, #8
 800765e:	2302      	movs	r3, #2
 8007660:	2106      	movs	r1, #6
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff fe08 	bl	8007278 <stts22h_read_reg>
 8007668:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800766a:	7a7b      	ldrb	r3, [r7, #9]
 800766c:	b21a      	sxth	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007678:	b29b      	uxth	r3, r3
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	b29b      	uxth	r3, r3
 800767e:	7a3a      	ldrb	r2, [r7, #8]
 8007680:	4413      	add	r3, r2
 8007682:	b29b      	uxth	r3, r3
 8007684:	b21a      	sxth	r2, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	801a      	strh	r2, [r3, #0]

  return ret;
 800768a:	68fb      	ldr	r3, [r7, #12]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800769e:	2301      	movs	r3, #1
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	2101      	movs	r1, #1
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff fde7 	bl	8007278 <stts22h_read_reg>
 80076aa:	60f8      	str	r0, [r7, #12]

  return ret;
 80076ac:	68fb      	ldr	r3, [r7, #12]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80076c2:	f107 0208 	add.w	r2, r7, #8
 80076c6:	2301      	movs	r3, #1
 80076c8:	2104      	movs	r1, #4
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff fdd4 	bl	8007278 <stts22h_read_reg>
 80076d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10f      	bne.n	80076f8 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	7a3b      	ldrb	r3, [r7, #8]
 80076e2:	f362 03c3 	bfi	r3, r2, #3, #1
 80076e6:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80076e8:	f107 0208 	add.w	r2, r7, #8
 80076ec:	2301      	movs	r3, #1
 80076ee:	2104      	movs	r1, #4
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff fdd9 	bl	80072a8 <stts22h_write_reg>
 80076f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80076f8:	68fb      	ldr	r3, [r7, #12]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER__BLUE_GPIO_Init,LED_USER__RED_GPIO_Init,LED_USER__YELLOW_GPIO_Init,LED_USER__GREEN_GPIO_Init,};
  LedGpioInit[Led]();
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	4a04      	ldr	r2, [pc, #16]	@ (8007724 <BSP_LED_Init+0x20>)
 8007712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007716:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	08015910 	.word	0x08015910

08007728 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	4a07      	ldr	r2, [pc, #28]	@ (8007754 <BSP_LED_Off+0x2c>)
 8007736:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4a06      	ldr	r2, [pc, #24]	@ (8007758 <BSP_LED_Off+0x30>)
 800773e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007742:	2200      	movs	r2, #0
 8007744:	4619      	mov	r1, r3
 8007746:	f002 ff3b 	bl	800a5c0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000120 	.word	0x20000120
 8007758:	08015908 	.word	0x08015908

0800775c <LED_USER__BLUE_GPIO_Init>:
  */
/**
  * @brief
  * @retval None
  */
static void LED_USER__BLUE_GPIO_Init(void) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007762:	4b1f      	ldr	r3, [pc, #124]	@ (80077e0 <LED_USER__BLUE_GPIO_Init+0x84>)
 8007764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007768:	4a1d      	ldr	r2, [pc, #116]	@ (80077e0 <LED_USER__BLUE_GPIO_Init+0x84>)
 800776a:	f043 0320 	orr.w	r3, r3, #32
 800776e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007772:	4b1b      	ldr	r3, [pc, #108]	@ (80077e0 <LED_USER__BLUE_GPIO_Init+0x84>)
 8007774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007780:	f107 030c 	add.w	r3, r7, #12
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	609a      	str	r2, [r3, #8]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007790:	4b13      	ldr	r3, [pc, #76]	@ (80077e0 <LED_USER__BLUE_GPIO_Init+0x84>)
 8007792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007796:	4a12      	ldr	r2, [pc, #72]	@ (80077e0 <LED_USER__BLUE_GPIO_Init+0x84>)
 8007798:	f043 0320 	orr.w	r3, r3, #32
 800779c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80077a0:	4b0f      	ldr	r3, [pc, #60]	@ (80077e0 <LED_USER__BLUE_GPIO_Init+0x84>)
 80077a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	607b      	str	r3, [r7, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED__BLUE_GPIO_PORT, BUS_BSP_LED__BLUE_GPIO_PIN, GPIO_PIN_RESET);
 80077ae:	2200      	movs	r2, #0
 80077b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80077b4:	480b      	ldr	r0, [pc, #44]	@ (80077e4 <LED_USER__BLUE_GPIO_Init+0x88>)
 80077b6:	f002 ff03 	bl	800a5c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED__BLUE_GPIO_PIN;
 80077ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077c0:	2301      	movs	r3, #1
 80077c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED__BLUE_GPIO_PORT, &GPIO_InitStruct);
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	4619      	mov	r1, r3
 80077d2:	4804      	ldr	r0, [pc, #16]	@ (80077e4 <LED_USER__BLUE_GPIO_Init+0x88>)
 80077d4:	f002 fc36 	bl	800a044 <HAL_GPIO_Init>

}
 80077d8:	bf00      	nop
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	46020c00 	.word	0x46020c00
 80077e4:	42021400 	.word	0x42021400

080077e8 <LED_USER__RED_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void LED_USER__RED_GPIO_Init(void) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80077ee:	4b1f      	ldr	r3, [pc, #124]	@ (800786c <LED_USER__RED_GPIO_Init+0x84>)
 80077f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077f4:	4a1d      	ldr	r2, [pc, #116]	@ (800786c <LED_USER__RED_GPIO_Init+0x84>)
 80077f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80077fe:	4b1b      	ldr	r3, [pc, #108]	@ (800786c <LED_USER__RED_GPIO_Init+0x84>)
 8007800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800780c:	f107 030c 	add.w	r3, r7, #12
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	60da      	str	r2, [r3, #12]
 800781a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800781c:	4b13      	ldr	r3, [pc, #76]	@ (800786c <LED_USER__RED_GPIO_Init+0x84>)
 800781e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007822:	4a12      	ldr	r2, [pc, #72]	@ (800786c <LED_USER__RED_GPIO_Init+0x84>)
 8007824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007828:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800782c:	4b0f      	ldr	r3, [pc, #60]	@ (800786c <LED_USER__RED_GPIO_Init+0x84>)
 800782e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007836:	607b      	str	r3, [r7, #4]
 8007838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED__RED_GPIO_PORT, BUS_BSP_LED__RED_GPIO_PIN, GPIO_PIN_RESET);
 800783a:	2200      	movs	r2, #0
 800783c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007840:	480b      	ldr	r0, [pc, #44]	@ (8007870 <LED_USER__RED_GPIO_Init+0x88>)
 8007842:	f002 febd 	bl	800a5c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED__RED_GPIO_PIN;
 8007846:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800784a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800784c:	2301      	movs	r3, #1
 800784e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007854:	2300      	movs	r3, #0
 8007856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED__RED_GPIO_PORT, &GPIO_InitStruct);
 8007858:	f107 030c 	add.w	r3, r7, #12
 800785c:	4619      	mov	r1, r3
 800785e:	4804      	ldr	r0, [pc, #16]	@ (8007870 <LED_USER__RED_GPIO_Init+0x88>)
 8007860:	f002 fbf0 	bl	800a044 <HAL_GPIO_Init>

}
 8007864:	bf00      	nop
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	46020c00 	.word	0x46020c00
 8007870:	42021c00 	.word	0x42021c00

08007874 <LED_USER__YELLOW_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void LED_USER__YELLOW_GPIO_Init(void) {
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800787a:	4b1f      	ldr	r3, [pc, #124]	@ (80078f8 <LED_USER__YELLOW_GPIO_Init+0x84>)
 800787c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007880:	4a1d      	ldr	r2, [pc, #116]	@ (80078f8 <LED_USER__YELLOW_GPIO_Init+0x84>)
 8007882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007886:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800788a:	4b1b      	ldr	r3, [pc, #108]	@ (80078f8 <LED_USER__YELLOW_GPIO_Init+0x84>)
 800788c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007898:	f107 030c 	add.w	r3, r7, #12
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	605a      	str	r2, [r3, #4]
 80078a2:	609a      	str	r2, [r3, #8]
 80078a4:	60da      	str	r2, [r3, #12]
 80078a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80078a8:	4b13      	ldr	r3, [pc, #76]	@ (80078f8 <LED_USER__YELLOW_GPIO_Init+0x84>)
 80078aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ae:	4a12      	ldr	r2, [pc, #72]	@ (80078f8 <LED_USER__YELLOW_GPIO_Init+0x84>)
 80078b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80078b8:	4b0f      	ldr	r3, [pc, #60]	@ (80078f8 <LED_USER__YELLOW_GPIO_Init+0x84>)
 80078ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c2:	607b      	str	r3, [r7, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED__YELLOW_GPIO_PORT, BUS_BSP_LED__YELLOW_GPIO_PIN, GPIO_PIN_RESET);
 80078c6:	2200      	movs	r2, #0
 80078c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80078cc:	480b      	ldr	r0, [pc, #44]	@ (80078fc <LED_USER__YELLOW_GPIO_Init+0x88>)
 80078ce:	f002 fe77 	bl	800a5c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED__YELLOW_GPIO_PIN;
 80078d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078d8:	2301      	movs	r3, #1
 80078da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED__YELLOW_GPIO_PORT, &GPIO_InitStruct);
 80078e4:	f107 030c 	add.w	r3, r7, #12
 80078e8:	4619      	mov	r1, r3
 80078ea:	4804      	ldr	r0, [pc, #16]	@ (80078fc <LED_USER__YELLOW_GPIO_Init+0x88>)
 80078ec:	f002 fbaa 	bl	800a044 <HAL_GPIO_Init>

}
 80078f0:	bf00      	nop
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	46020c00 	.word	0x46020c00
 80078fc:	42021c00 	.word	0x42021c00

08007900 <LED_USER__GREEN_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void LED_USER__GREEN_GPIO_Init(void) {
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007906:	4b1e      	ldr	r3, [pc, #120]	@ (8007980 <LED_USER__GREEN_GPIO_Init+0x80>)
 8007908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800790c:	4a1c      	ldr	r2, [pc, #112]	@ (8007980 <LED_USER__GREEN_GPIO_Init+0x80>)
 800790e:	f043 0320 	orr.w	r3, r3, #32
 8007912:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007916:	4b1a      	ldr	r3, [pc, #104]	@ (8007980 <LED_USER__GREEN_GPIO_Init+0x80>)
 8007918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007924:	f107 030c 	add.w	r3, r7, #12
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	605a      	str	r2, [r3, #4]
 800792e:	609a      	str	r2, [r3, #8]
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007934:	4b12      	ldr	r3, [pc, #72]	@ (8007980 <LED_USER__GREEN_GPIO_Init+0x80>)
 8007936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800793a:	4a11      	ldr	r2, [pc, #68]	@ (8007980 <LED_USER__GREEN_GPIO_Init+0x80>)
 800793c:	f043 0320 	orr.w	r3, r3, #32
 8007940:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007944:	4b0e      	ldr	r3, [pc, #56]	@ (8007980 <LED_USER__GREEN_GPIO_Init+0x80>)
 8007946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	607b      	str	r3, [r7, #4]
 8007950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED__GREEN_GPIO_PORT, BUS_BSP_LED__GREEN_GPIO_PIN, GPIO_PIN_RESET);
 8007952:	2200      	movs	r2, #0
 8007954:	2140      	movs	r1, #64	@ 0x40
 8007956:	480b      	ldr	r0, [pc, #44]	@ (8007984 <LED_USER__GREEN_GPIO_Init+0x84>)
 8007958:	f002 fe32 	bl	800a5c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED__GREEN_GPIO_PIN;
 800795c:	2340      	movs	r3, #64	@ 0x40
 800795e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007960:	2301      	movs	r3, #1
 8007962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007968:	2300      	movs	r3, #0
 800796a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED__GREEN_GPIO_PORT, &GPIO_InitStruct);
 800796c:	f107 030c 	add.w	r3, r7, #12
 8007970:	4619      	mov	r1, r3
 8007972:	4804      	ldr	r0, [pc, #16]	@ (8007984 <LED_USER__GREEN_GPIO_Init+0x84>)
 8007974:	f002 fb66 	bl	800a044 <HAL_GPIO_Init>

}
 8007978:	bf00      	nop
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	46020c00 	.word	0x46020c00
 8007984:	42021400 	.word	0x42021400

08007988 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	460a      	mov	r2, r1
 8007992:	71fb      	strb	r3, [r7, #7]
 8007994:	4613      	mov	r3, r2
 8007996:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	4a22      	ldr	r2, [pc, #136]	@ (8007a28 <BSP_PB_Init+0xa0>)
 80079a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80079a6:	79bb      	ldrb	r3, [r7, #6]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d138      	bne.n	8007a1e <BSP_PB_Init+0x96>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80079ac:	79fa      	ldrb	r2, [r7, #7]
 80079ae:	4613      	mov	r3, r2
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4a1d      	ldr	r2, [pc, #116]	@ (8007a2c <BSP_PB_Init+0xa4>)
 80079b8:	441a      	add	r2, r3
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	491c      	ldr	r1, [pc, #112]	@ (8007a30 <BSP_PB_Init+0xa8>)
 80079be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f002 fb28 	bl	800a01a <HAL_EXTI_GetHandle>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <BSP_PB_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80079d0:	f06f 0303 	mvn.w	r3, #3
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	e022      	b.n	8007a1e <BSP_PB_Init+0x96>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80079d8:	79fa      	ldrb	r2, [r7, #7]
 80079da:	4613      	mov	r3, r2
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4a12      	ldr	r2, [pc, #72]	@ (8007a2c <BSP_PB_Init+0xa4>)
 80079e4:	1898      	adds	r0, r3, r2
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	4a12      	ldr	r2, [pc, #72]	@ (8007a34 <BSP_PB_Init+0xac>)
 80079ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ee:	461a      	mov	r2, r3
 80079f0:	2100      	movs	r1, #0
 80079f2:	f002 fae6 	bl	8009fc2 <HAL_EXTI_RegisterCallback>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <BSP_PB_Init+0x7c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80079fc:	f06f 0303 	mvn.w	r3, #3
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e00c      	b.n	8007a1e <BSP_PB_Init+0x96>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8007a04:	2018      	movs	r0, #24
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	4a0b      	ldr	r2, [pc, #44]	@ (8007a38 <BSP_PB_Init+0xb0>)
 8007a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	4619      	mov	r1, r3
 8007a12:	f001 fb6d 	bl	80090f0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8007a16:	2318      	movs	r3, #24
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 fb83 	bl	8009124 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	08015920 	.word	0x08015920
 8007a2c:	20000130 	.word	0x20000130
 8007a30:	08015924 	.word	0x08015924
 8007a34:	08015928 	.word	0x08015928
 8007a38:	0801592c 	.word	0x0801592c

08007a3c <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8007a56:	2000      	movs	r0, #0
 8007a58:	f7ff fff0 	bl	8007a3c <BSP_PB_Callback>
}
 8007a5c:	bf00      	nop
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a66:	4b23      	ldr	r3, [pc, #140]	@ (8007af4 <BUTTON_USER_GPIO_Init+0x94>)
 8007a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a6c:	4a21      	ldr	r2, [pc, #132]	@ (8007af4 <BUTTON_USER_GPIO_Init+0x94>)
 8007a6e:	f043 0304 	orr.w	r3, r3, #4
 8007a72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007a76:	4b1f      	ldr	r3, [pc, #124]	@ (8007af4 <BUTTON_USER_GPIO_Init+0x94>)
 8007a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	60bb      	str	r3, [r7, #8]
 8007a82:	68bb      	ldr	r3, [r7, #8]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8007a84:	2200      	movs	r2, #0
 8007a86:	2100      	movs	r1, #0
 8007a88:	2018      	movs	r0, #24
 8007a8a:	f001 fb31 	bl	80090f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8007a8e:	2018      	movs	r0, #24
 8007a90:	f001 fb48 	bl	8009124 <HAL_NVIC_EnableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a94:	f107 030c 	add.w	r3, r7, #12
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	605a      	str	r2, [r3, #4]
 8007a9e:	609a      	str	r2, [r3, #8]
 8007aa0:	60da      	str	r2, [r3, #12]
 8007aa2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007aa4:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <BUTTON_USER_GPIO_Init+0x94>)
 8007aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aaa:	4a12      	ldr	r2, [pc, #72]	@ (8007af4 <BUTTON_USER_GPIO_Init+0x94>)
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8007af4 <BUTTON_USER_GPIO_Init+0x94>)
 8007ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8007ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8007af8 <BUTTON_USER_GPIO_Init+0x98>)
 8007aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8007ad0:	f107 030c 	add.w	r3, r7, #12
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4809      	ldr	r0, [pc, #36]	@ (8007afc <BUTTON_USER_GPIO_Init+0x9c>)
 8007ad8:	f002 fab4 	bl	800a044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8007adc:	2200      	movs	r2, #0
 8007ade:	2100      	movs	r1, #0
 8007ae0:	2018      	movs	r0, #24
 8007ae2:	f001 fb05 	bl	80090f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8007ae6:	2018      	movs	r0, #24
 8007ae8:	f001 fb1c 	bl	8009124 <HAL_NVIC_EnableIRQ>

}
 8007aec:	bf00      	nop
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	46020c00 	.word	0x46020c00
 8007af8:	10110000 	.word	0x10110000
 8007afc:	42020800 	.word	0x42020800

08007b00 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d903      	bls.n	8007b1c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007b14:	f06f 0301 	mvn.w	r3, #1
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	e022      	b.n	8007b62 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8007b1c:	79fa      	ldrb	r2, [r7, #7]
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	4912      	ldr	r1, [pc, #72]	@ (8007b6c <BSP_COM_Init+0x6c>)
 8007b22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b26:	4912      	ldr	r1, [pc, #72]	@ (8007b70 <BSP_COM_Init+0x70>)
 8007b28:	2094      	movs	r0, #148	@ 0x94
 8007b2a:	fb00 f303 	mul.w	r3, r0, r3
 8007b2e:	440b      	add	r3, r1
 8007b30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    UART4_MspInit(&hcom_uart[COM]);
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	2294      	movs	r2, #148	@ 0x94
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b70 <BSP_COM_Init+0x70>)
 8007b3c:	4413      	add	r3, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 f86a 	bl	8007c18 <UART4_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_UART4_Init(&hcom_uart[COM]))
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2294      	movs	r2, #148	@ 0x94
 8007b48:	fb02 f303 	mul.w	r3, r2, r3
 8007b4c:	4a08      	ldr	r2, [pc, #32]	@ (8007b70 <BSP_COM_Init+0x70>)
 8007b4e:	4413      	add	r3, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 f80f 	bl	8007b74 <MX_UART4_Init>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007b5c:	f06f 0303 	mvn.w	r3, #3
 8007b60:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007b62:	68fb      	ldr	r3, [r7, #12]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	2000013c 	.word	0x2000013c
 8007b70:	20000358 	.word	0x20000358

08007b74 <MX_UART4_Init>:
 */

/* UART4 init function */

__weak HAL_StatusTypeDef MX_UART4_Init(UART_HandleTypeDef* huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = BUS_UART4_INSTANCE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a24      	ldr	r2, [pc, #144]	@ (8007c14 <MX_UART4_Init+0xa0>)
 8007b84:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007b8c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	220c      	movs	r2, #12
 8007ba4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f008 fce9 	bl	801059c <HAL_UART_Init>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <MX_UART4_Init+0x60>
  {
    ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f009 f92a 	bl	8010e30 <HAL_UARTEx_SetTxFifoThreshold>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <MX_UART4_Init+0x72>
  {
    ret = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007be6:	2100      	movs	r1, #0
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f009 f95f 	bl	8010eac <HAL_UARTEx_SetRxFifoThreshold>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <MX_UART4_Init+0x84>
  {
    ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f009 f8e0 	bl	8010dbe <HAL_UARTEx_DisableFifoMode>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <MX_UART4_Init+0x94>
  {
    ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40004c00 	.word	0x40004c00

08007c18 <UART4_MspInit>:
 * @param  huart UART4 handle
 * @retval None
 */

static void UART4_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b0bc      	sub	sp, #240	@ 0xf0
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007c20:	f107 0310 	add.w	r3, r7, #16
 8007c24:	22c8      	movs	r2, #200	@ 0xc8
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f00a fa5d 	bl	80120e8 <memset>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007c2e:	f04f 0208 	mov.w	r2, #8
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8007c3e:	f107 0310 	add.w	r3, r7, #16
 8007c42:	4618      	mov	r0, r3
 8007c44:	f005 fd0a 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007c48:	4b25      	ldr	r3, [pc, #148]	@ (8007ce0 <UART4_MspInit+0xc8>)
 8007c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c4e:	4a24      	ldr	r2, [pc, #144]	@ (8007ce0 <UART4_MspInit+0xc8>)
 8007c50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c54:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007c58:	4b21      	ldr	r3, [pc, #132]	@ (8007ce0 <UART4_MspInit+0xc8>)
 8007c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce0 <UART4_MspInit+0xc8>)
 8007c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce0 <UART4_MspInit+0xc8>)
 8007c6e:	f043 0301 	orr.w	r3, r3, #1
 8007c72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007c76:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce0 <UART4_MspInit+0xc8>)
 8007c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = BUS_UART4_TX_GPIO_PIN;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c96:	2300      	movs	r3, #0
 8007c98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_UART4_TX_GPIO_AF;
 8007c9c:	2308      	movs	r3, #8
 8007c9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_UART4_TX_GPIO_PORT, &GPIO_InitStruct);
 8007ca2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	480e      	ldr	r0, [pc, #56]	@ (8007ce4 <UART4_MspInit+0xcc>)
 8007caa:	f002 f9cb 	bl	800a044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_UART4_RX_GPIO_PIN;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_UART4_RX_GPIO_AF;
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_UART4_RX_GPIO_PORT, &GPIO_InitStruct);
 8007ccc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4804      	ldr	r0, [pc, #16]	@ (8007ce4 <UART4_MspInit+0xcc>)
 8007cd4:	f002 f9b6 	bl	800a044 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
}
 8007cd8:	bf00      	nop
 8007cda:	37f0      	adds	r7, #240	@ 0xf0
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	46020c00 	.word	0x46020c00
 8007ce4:	42020000 	.word	0x42020000

08007ce8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8007cf2:	4b19      	ldr	r3, [pc, #100]	@ (8007d58 <BSP_I2C1_Init+0x70>)
 8007cf4:	4a19      	ldr	r2, [pc, #100]	@ (8007d5c <BSP_I2C1_Init+0x74>)
 8007cf6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8007cf8:	4b19      	ldr	r3, [pc, #100]	@ (8007d60 <BSP_I2C1_Init+0x78>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	4918      	ldr	r1, [pc, #96]	@ (8007d60 <BSP_I2C1_Init+0x78>)
 8007d00:	600a      	str	r2, [r1, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d122      	bne.n	8007d4c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8007d06:	4814      	ldr	r0, [pc, #80]	@ (8007d58 <BSP_I2C1_Init+0x70>)
 8007d08:	f003 f861 	bl	800adce <HAL_I2C_GetState>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d11c      	bne.n	8007d4c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8007d12:	4811      	ldr	r0, [pc, #68]	@ (8007d58 <BSP_I2C1_Init+0x70>)
 8007d14:	f000 f8fe 	bl	8007f14 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d116      	bne.n	8007d4c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8007d1e:	480e      	ldr	r0, [pc, #56]	@ (8007d58 <BSP_I2C1_Init+0x70>)
 8007d20:	f000 f8b4 	bl	8007e8c <MX_I2C1_Init>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8007d2a:	f06f 0307 	mvn.w	r3, #7
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	e00c      	b.n	8007d4c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007d32:	2100      	movs	r1, #0
 8007d34:	4808      	ldr	r0, [pc, #32]	@ (8007d58 <BSP_I2C1_Init+0x70>)
 8007d36:	f004 f871 	bl	800be1c <HAL_I2CEx_ConfigAnalogFilter>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8007d40:	f06f 0307 	mvn.w	r3, #7
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	e001      	b.n	8007d4c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8007d4c:	687b      	ldr	r3, [r7, #4]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000524 	.word	0x20000524
 8007d5c:	40005400 	.word	0x40005400
 8007d60:	20000578 	.word	0x20000578

08007d64 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007dac <BSP_I2C1_DeInit+0x48>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d014      	beq.n	8007da0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <BSP_I2C1_DeInit+0x48>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8007dac <BSP_I2C1_DeInit+0x48>)
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <BSP_I2C1_DeInit+0x48>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10b      	bne.n	8007da0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8007d88:	4809      	ldr	r0, [pc, #36]	@ (8007db0 <BSP_I2C1_DeInit+0x4c>)
 8007d8a:	f000 f9b3 	bl	80080f4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8007d8e:	4808      	ldr	r0, [pc, #32]	@ (8007db0 <BSP_I2C1_DeInit+0x4c>)
 8007d90:	f002 fd05 	bl	800a79e <HAL_I2C_DeInit>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8007d9a:	f06f 0307 	mvn.w	r3, #7
 8007d9e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8007da0:	687b      	ldr	r3, [r7, #4]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000578 	.word	0x20000578
 8007db0:	20000524 	.word	0x20000524

08007db4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	@ 0x28
 8007db8:	af04      	add	r7, sp, #16
 8007dba:	60ba      	str	r2, [r7, #8]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	81fb      	strh	r3, [r7, #14]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	81bb      	strh	r3, [r7, #12]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8007dce:	89ba      	ldrh	r2, [r7, #12]
 8007dd0:	89f9      	ldrh	r1, [r7, #14]
 8007dd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007dd6:	9302      	str	r3, [sp, #8]
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	2301      	movs	r3, #1
 8007de2:	480c      	ldr	r0, [pc, #48]	@ (8007e14 <BSP_I2C1_WriteReg+0x60>)
 8007de4:	f002 fd0a 	bl	800a7fc <HAL_I2C_Mem_Write>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8007dee:	4809      	ldr	r0, [pc, #36]	@ (8007e14 <BSP_I2C1_WriteReg+0x60>)
 8007df0:	f002 fffb 	bl	800adea <HAL_I2C_GetError>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d103      	bne.n	8007e02 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007dfa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e002      	b.n	8007e08 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8007e02:	f06f 0303 	mvn.w	r3, #3
 8007e06:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8007e08:	697b      	ldr	r3, [r7, #20]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000524 	.word	0x20000524

08007e18 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af04      	add	r7, sp, #16
 8007e1e:	60ba      	str	r2, [r7, #8]
 8007e20:	461a      	mov	r2, r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	81fb      	strh	r3, [r7, #14]
 8007e26:	460b      	mov	r3, r1
 8007e28:	81bb      	strh	r3, [r7, #12]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8007e32:	89ba      	ldrh	r2, [r7, #12]
 8007e34:	89f9      	ldrh	r1, [r7, #14]
 8007e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e3a:	9302      	str	r3, [sp, #8]
 8007e3c:	88fb      	ldrh	r3, [r7, #6]
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	2301      	movs	r3, #1
 8007e46:	480c      	ldr	r0, [pc, #48]	@ (8007e78 <BSP_I2C1_ReadReg+0x60>)
 8007e48:	f002 fdec 	bl	800aa24 <HAL_I2C_Mem_Read>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00c      	beq.n	8007e6c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8007e52:	4809      	ldr	r0, [pc, #36]	@ (8007e78 <BSP_I2C1_ReadReg+0x60>)
 8007e54:	f002 ffc9 	bl	800adea <HAL_I2C_GetError>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d103      	bne.n	8007e66 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007e5e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	e002      	b.n	8007e6c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007e66:	f06f 0303 	mvn.w	r3, #3
 8007e6a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8007e6c:	697b      	ldr	r3, [r7, #20]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000524 	.word	0x20000524

08007e7c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007e80:	f001 f82a 	bl	8008ed8 <HAL_GetTick>
 8007e84:	4603      	mov	r3, r0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8007f0c <MX_I2C1_Init+0x80>)
 8007e9c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F07BFF;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8007f10 <MX_I2C1_Init+0x84>)
 8007ea2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f002 fbca 	bl	800a668 <HAL_I2C_Init>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f003 ff9b 	bl	800be1c <HAL_I2CEx_ConfigAnalogFilter>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f003 ffdd 	bl	800beb2 <HAL_I2CEx_ConfigDigitalFilter>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40005400 	.word	0x40005400
 8007f10:	00f07bff 	.word	0x00f07bff

08007f14 <I2C1_MspInit>:
DMA_HandleTypeDef handle_GPDMA1_Channel3;
DMA_HandleTypeDef handle_GPDMA1_Channel2;

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b0bc      	sub	sp, #240	@ 0xf0
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	22c8      	movs	r2, #200	@ 0xc8
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f00a f8df 	bl	80120e8 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007f2a:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007f36:	2300      	movs	r3, #0
 8007f38:	67bb      	str	r3, [r7, #120]	@ 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8007f3a:	f107 0310 	add.w	r3, r7, #16
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f005 fb8c 	bl	800d65c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f44:	4b65      	ldr	r3, [pc, #404]	@ (80080dc <I2C1_MspInit+0x1c8>)
 8007f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f4a:	4a64      	ldr	r2, [pc, #400]	@ (80080dc <I2C1_MspInit+0x1c8>)
 8007f4c:	f043 0302 	orr.w	r3, r3, #2
 8007f50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007f54:	4b61      	ldr	r3, [pc, #388]	@ (80080dc <I2C1_MspInit+0x1c8>)
 8007f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8007f62:	2340      	movs	r3, #64	@ 0x40
 8007f64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f68:	2312      	movs	r3, #18
 8007f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f74:	2300      	movs	r3, #0
 8007f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8007f7a:	2304      	movs	r3, #4
 8007f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007f80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007f84:	4619      	mov	r1, r3
 8007f86:	4856      	ldr	r0, [pc, #344]	@ (80080e0 <I2C1_MspInit+0x1cc>)
 8007f88:	f002 f85c 	bl	800a044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8007f8c:	2380      	movs	r3, #128	@ 0x80
 8007f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f92:	2312      	movs	r3, #18
 8007f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007faa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007fae:	4619      	mov	r1, r3
 8007fb0:	484b      	ldr	r0, [pc, #300]	@ (80080e0 <I2C1_MspInit+0x1cc>)
 8007fb2:	f002 f847 	bl	800a044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007fb6:	4b49      	ldr	r3, [pc, #292]	@ (80080dc <I2C1_MspInit+0x1c8>)
 8007fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fbc:	4a47      	ldr	r2, [pc, #284]	@ (80080dc <I2C1_MspInit+0x1c8>)
 8007fbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007fc2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007fc6:	4b45      	ldr	r3, [pc, #276]	@ (80080dc <I2C1_MspInit+0x1c8>)
 8007fc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8007fd4:	4b43      	ldr	r3, [pc, #268]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8007fd6:	4a44      	ldr	r2, [pc, #272]	@ (80080e8 <I2C1_MspInit+0x1d4>)
 8007fd8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C1_TX;
 8007fda:	4b42      	ldr	r3, [pc, #264]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8007fdc:	220d      	movs	r2, #13
 8007fde:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8007fe0:	4b40      	ldr	r3, [pc, #256]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8007fe8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007fec:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8007fee:	4b3d      	ldr	r3, [pc, #244]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8007ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8007ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8008000:	4b38      	ldr	r3, [pc, #224]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8008002:	2200      	movs	r2, #0
 8008004:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8008006:	4b37      	ldr	r3, [pc, #220]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8008008:	2200      	movs	r2, #0
 800800a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 800800c:	4b35      	ldr	r3, [pc, #212]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 800800e:	2201      	movs	r2, #1
 8008010:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8008012:	4b34      	ldr	r3, [pc, #208]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8008014:	2201      	movs	r2, #1
 8008016:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8008018:	4b32      	ldr	r3, [pc, #200]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 800801a:	2200      	movs	r2, #0
 800801c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800801e:	4b31      	ldr	r3, [pc, #196]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8008020:	2200      	movs	r2, #0
 8008022:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8008024:	4b2f      	ldr	r3, [pc, #188]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8008026:	2200      	movs	r2, #0
 8008028:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_DMA_Init(&handle_GPDMA1_Channel3);
 800802a:	482e      	ldr	r0, [pc, #184]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 800802c:	f001 f94a 	bl	80092c4 <HAL_DMA_Init>

    __HAL_LINKDMA(i2cHandle, hdmatx, handle_GPDMA1_Channel3);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a2c      	ldr	r2, [pc, #176]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8008034:	639a      	str	r2, [r3, #56]	@ 0x38
 8008036:	4a2b      	ldr	r2, [pc, #172]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV);
 800803c:	2110      	movs	r1, #16
 800803e:	4829      	ldr	r0, [pc, #164]	@ (80080e4 <I2C1_MspInit+0x1d0>)
 8008040:	f001 fcf4 	bl	8009a2c <HAL_DMA_ConfigChannelAttributes>

    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8008044:	4b29      	ldr	r3, [pc, #164]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008046:	4a2a      	ldr	r2, [pc, #168]	@ (80080f0 <I2C1_MspInit+0x1dc>)
 8008048:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C1_RX;
 800804a:	4b28      	ldr	r3, [pc, #160]	@ (80080ec <I2C1_MspInit+0x1d8>)
 800804c:	220c      	movs	r2, #12
 800804e:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8008050:	4b26      	ldr	r3, [pc, #152]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008052:	2200      	movs	r2, #0
 8008054:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008056:	4b25      	ldr	r3, [pc, #148]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008058:	2200      	movs	r2, #0
 800805a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800805c:	4b23      	ldr	r3, [pc, #140]	@ (80080ec <I2C1_MspInit+0x1d8>)
 800805e:	2200      	movs	r2, #0
 8008060:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8008062:	4b22      	ldr	r3, [pc, #136]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008064:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8008068:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800806a:	4b20      	ldr	r3, [pc, #128]	@ (80080ec <I2C1_MspInit+0x1d8>)
 800806c:	2200      	movs	r2, #0
 800806e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8008070:	4b1e      	ldr	r3, [pc, #120]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008072:	2200      	movs	r2, #0
 8008074:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8008076:	4b1d      	ldr	r3, [pc, #116]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008078:	2200      	movs	r2, #0
 800807a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 800807c:	4b1b      	ldr	r3, [pc, #108]	@ (80080ec <I2C1_MspInit+0x1d8>)
 800807e:	2201      	movs	r2, #1
 8008080:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8008082:	4b1a      	ldr	r3, [pc, #104]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008084:	2201      	movs	r2, #1
 8008086:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8008088:	4b18      	ldr	r3, [pc, #96]	@ (80080ec <I2C1_MspInit+0x1d8>)
 800808a:	2200      	movs	r2, #0
 800808c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800808e:	4b17      	ldr	r3, [pc, #92]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008090:	2200      	movs	r2, #0
 8008092:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8008094:	4b15      	ldr	r3, [pc, #84]	@ (80080ec <I2C1_MspInit+0x1d8>)
 8008096:	2200      	movs	r2, #0
 8008098:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_DMA_Init(&handle_GPDMA1_Channel2);
 800809a:	4814      	ldr	r0, [pc, #80]	@ (80080ec <I2C1_MspInit+0x1d8>)
 800809c:	f001 f912 	bl	80092c4 <HAL_DMA_Init>

    __HAL_LINKDMA(i2cHandle, hdmarx, handle_GPDMA1_Channel2);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a12      	ldr	r2, [pc, #72]	@ (80080ec <I2C1_MspInit+0x1d8>)
 80080a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80080a6:	4a11      	ldr	r2, [pc, #68]	@ (80080ec <I2C1_MspInit+0x1d8>)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	65d3      	str	r3, [r2, #92]	@ 0x5c

    HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV);
 80080ac:	2110      	movs	r1, #16
 80080ae:	480f      	ldr	r0, [pc, #60]	@ (80080ec <I2C1_MspInit+0x1d8>)
 80080b0:	f001 fcbc 	bl	8009a2c <HAL_DMA_ConfigChannelAttributes>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80080b4:	2200      	movs	r2, #0
 80080b6:	2100      	movs	r1, #0
 80080b8:	2037      	movs	r0, #55	@ 0x37
 80080ba:	f001 f819 	bl	80090f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80080be:	2037      	movs	r0, #55	@ 0x37
 80080c0:	f001 f830 	bl	8009124 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80080c4:	2200      	movs	r2, #0
 80080c6:	2100      	movs	r1, #0
 80080c8:	2038      	movs	r0, #56	@ 0x38
 80080ca:	f001 f811 	bl	80090f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80080ce:	2038      	movs	r0, #56	@ 0x38
 80080d0:	f001 f828 	bl	8009124 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80080d4:	bf00      	nop
 80080d6:	37f0      	adds	r7, #240	@ 0xf0
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	46020c00 	.word	0x46020c00
 80080e0:	42020400 	.word	0x42020400
 80080e4:	2000066c 	.word	0x2000066c
 80080e8:	400201d0 	.word	0x400201d0
 80080ec:	200006e4 	.word	0x200006e4
 80080f0:	40020150 	.word	0x40020150

080080f4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80080fc:	4b11      	ldr	r3, [pc, #68]	@ (8008144 <I2C1_MspDeInit+0x50>)
 80080fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008102:	4a10      	ldr	r2, [pc, #64]	@ (8008144 <I2C1_MspDeInit+0x50>)
 8008104:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008108:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800810c:	2140      	movs	r1, #64	@ 0x40
 800810e:	480e      	ldr	r0, [pc, #56]	@ (8008148 <I2C1_MspDeInit+0x54>)
 8008110:	f002 f978 	bl	800a404 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8008114:	2180      	movs	r1, #128	@ 0x80
 8008116:	480c      	ldr	r0, [pc, #48]	@ (8008148 <I2C1_MspDeInit+0x54>)
 8008118:	f002 f974 	bl	800a404 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008120:	4618      	mov	r0, r3
 8008122:	f001 fa11 	bl	8009548 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812a:	4618      	mov	r0, r3
 800812c:	f001 fa0c 	bl	8009548 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8008130:	2037      	movs	r0, #55	@ 0x37
 8008132:	f001 f805 	bl	8009140 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8008136:	2038      	movs	r0, #56	@ 0x38
 8008138:	f001 f802 	bl	8009140 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	46020c00 	.word	0x46020c00
 8008148:	42020400 	.word	0x42020400

0800814c <BSP_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE
  *         - ENV_PRESSURE
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08a      	sub	sp, #40	@ 0x28
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008156:	2300      	movs	r3, #0
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t function = ENV_TEMPERATURE;
 800815a:	2301      	movs	r3, #1
 800815c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	61bb      	str	r3, [r7, #24]
  BSP_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <BSP_ENV_SENSOR_Init+0x24>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d02b      	beq.n	80081c6 <BSP_ENV_SENSOR_Init+0x7a>
 800816e:	e055      	b.n	800821c <BSP_ENV_SENSOR_Init+0xd0>
  {
#if (USE_ENV_SENSOR_STTS22H_0 == 1)
    case STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 8008170:	6838      	ldr	r0, [r7, #0]
 8008172:	f000 f921 	bl	80083b8 <STTS22H_0_Probe>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <BSP_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 800817c:	f04f 33ff 	mov.w	r3, #4294967295
 8008180:	e088      	b.n	8008294 <BSP_ENV_SENSOR_Init+0x148>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008182:	4a46      	ldr	r2, [pc, #280]	@ (800829c <BSP_ENV_SENSOR_Init+0x150>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	4944      	ldr	r1, [pc, #272]	@ (80082a0 <BSP_ENV_SENSOR_Init+0x154>)
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <BSP_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80081a2:	f06f 0306 	mvn.w	r3, #6
 80081a6:	e075      	b.n	8008294 <BSP_ENV_SENSOR_Init+0x148>
      }
      if (cap.Temperature == 1U)
 80081a8:	7a3b      	ldrb	r3, [r7, #8]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d103      	bne.n	80081b6 <BSP_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f043 0301 	orr.w	r3, r3, #1
 80081b4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80081b6:	7a7b      	ldrb	r3, [r7, #9]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d133      	bne.n	8008224 <BSP_ENV_SENSOR_Init+0xd8>
      {
        component_functions |= ENV_PRESSURE;
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	f043 0302 	orr.w	r3, r3, #2
 80081c2:	61bb      	str	r3, [r7, #24]
      }
      break;
 80081c4:	e02e      	b.n	8008224 <BSP_ENV_SENSOR_Init+0xd8>
#endif /* USE_ENV_SENSOR_STTS22H_0 == 1 */
#if (USE_ENV_SENSOR_LPS22DF_0 == 1)
    case LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 80081c6:	6838      	ldr	r0, [r7, #0]
 80081c8:	f000 f98e 	bl	80084e8 <LPS22DF_0_Probe>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <BSP_ENV_SENSOR_Init+0x8c>
      {
        return BSP_ERROR_NO_INIT;
 80081d2:	f04f 33ff 	mov.w	r3, #4294967295
 80081d6:	e05d      	b.n	8008294 <BSP_ENV_SENSOR_Init+0x148>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80081d8:	4a30      	ldr	r2, [pc, #192]	@ (800829c <BSP_ENV_SENSOR_Init+0x150>)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	492f      	ldr	r1, [pc, #188]	@ (80082a0 <BSP_ENV_SENSOR_Init+0x154>)
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80081ea:	f107 0108 	add.w	r1, r7, #8
 80081ee:	4610      	mov	r0, r2
 80081f0:	4798      	blx	r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <BSP_ENV_SENSOR_Init+0xb2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80081f8:	f06f 0306 	mvn.w	r3, #6
 80081fc:	e04a      	b.n	8008294 <BSP_ENV_SENSOR_Init+0x148>
      }
      if (cap.Temperature == 1U)
 80081fe:	7a3b      	ldrb	r3, [r7, #8]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d103      	bne.n	800820c <BSP_ENV_SENSOR_Init+0xc0>
      {
        component_functions |= ENV_TEMPERATURE;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	f043 0301 	orr.w	r3, r3, #1
 800820a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800820c:	7a7b      	ldrb	r3, [r7, #9]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d10a      	bne.n	8008228 <BSP_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_PRESSURE;
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	f043 0302 	orr.w	r3, r3, #2
 8008218:	61bb      	str	r3, [r7, #24]
      }
      break;
 800821a:	e005      	b.n	8008228 <BSP_ENV_SENSOR_Init+0xdc>
#endif /* USE_ENV_SENSOR_LPS22DF_0 == 1 */
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800821c:	f06f 0301 	mvn.w	r3, #1
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008222:	e002      	b.n	800822a <BSP_ENV_SENSOR_Init+0xde>
      break;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <BSP_ENV_SENSOR_Init+0xde>
      break;
 8008228:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <BSP_ENV_SENSOR_Init+0xe8>
  {
    return ret;
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	e02f      	b.n	8008294 <BSP_ENV_SENSOR_Init+0x148>
  }

  for (i = 0; i < BSP_ENV_FUNCTIONS_NBR; i++)
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	e028      	b.n	800828c <BSP_ENV_SENSOR_Init+0x140>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	4013      	ands	r3, r2
 8008240:	6a3a      	ldr	r2, [r7, #32]
 8008242:	429a      	cmp	r2, r3
 8008244:	d11c      	bne.n	8008280 <BSP_ENV_SENSOR_Init+0x134>
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	4013      	ands	r3, r2
 800824c:	6a3a      	ldr	r2, [r7, #32]
 800824e:	429a      	cmp	r2, r3
 8008250:	d116      	bne.n	8008280 <BSP_ENV_SENSOR_Init+0x134>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008252:	4a14      	ldr	r2, [pc, #80]	@ (80082a4 <BSP_ENV_SENSOR_Init+0x158>)
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800825a:	4913      	ldr	r1, [pc, #76]	@ (80082a8 <BSP_ENV_SENSOR_Init+0x15c>)
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	0052      	lsls	r2, r2, #1
 8008260:	4413      	add	r3, r2
 8008262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	490d      	ldr	r1, [pc, #52]	@ (80082a0 <BSP_ENV_SENSOR_Init+0x154>)
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <BSP_ENV_SENSOR_Init+0x134>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800827a:	f06f 0304 	mvn.w	r3, #4
 800827e:	e009      	b.n	8008294 <BSP_ENV_SENSOR_Init+0x148>
      }
    }
    function = function << 1;
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	623b      	str	r3, [r7, #32]
  for (i = 0; i < BSP_ENV_FUNCTIONS_NBR; i++)
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	3301      	adds	r3, #1
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d9d3      	bls.n	800823a <BSP_ENV_SENSOR_Init+0xee>
  }

  return ret;
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008294:	4618      	mov	r0, r3
 8008296:	3728      	adds	r7, #40	@ 0x28
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20000774 	.word	0x20000774
 80082a0:	2000075c 	.word	0x2000075c
 80082a4:	20000140 	.word	0x20000140
 80082a8:	20000764 	.word	0x20000764

080082ac <BSP_ENV_SENSOR_SetOutputDataRate>:
  *         - ENV_PRESSURE
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= BSP_ENV_INSTANCES_NBR)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d903      	bls.n	80082c8 <BSP_ENV_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80082c0:	f06f 0301 	mvn.w	r3, #1
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	e028      	b.n	800831a <BSP_ENV_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80082c8:	4a16      	ldr	r2, [pc, #88]	@ (8008324 <BSP_ENV_SENSOR_SetOutputDataRate+0x78>)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4013      	ands	r3, r2
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d11c      	bne.n	8008314 <BSP_ENV_SENSOR_SetOutputDataRate+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80082da:	4a13      	ldr	r2, [pc, #76]	@ (8008328 <BSP_ENV_SENSOR_SetOutputDataRate+0x7c>)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e2:	4912      	ldr	r1, [pc, #72]	@ (800832c <BSP_ENV_SENSOR_SetOutputDataRate+0x80>)
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	0052      	lsls	r2, r2, #1
 80082e8:	4413      	add	r3, r2
 80082ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	490f      	ldr	r1, [pc, #60]	@ (8008330 <BSP_ENV_SENSOR_SetOutputDataRate+0x84>)
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80082f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <BSP_ENV_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008306:	f06f 0304 	mvn.w	r3, #4
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	e005      	b.n	800831a <BSP_ENV_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	e002      	b.n	800831a <BSP_ENV_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008314:	f06f 0301 	mvn.w	r3, #1
 8008318:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800831a:	697b      	ldr	r3, [r7, #20]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	2000077c 	.word	0x2000077c
 8008328:	20000140 	.word	0x20000140
 800832c:	20000764 	.word	0x20000764
 8008330:	2000075c 	.word	0x2000075c

08008334 <BSP_ENV_SENSOR_GetValue>:
  *         - ENV_PRESSURE
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= BSP_ENV_INSTANCES_NBR)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d903      	bls.n	800834e <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008346:	f06f 0301 	mvn.w	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	e027      	b.n	800839e <BSP_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800834e:	4a16      	ldr	r2, [pc, #88]	@ (80083a8 <BSP_ENV_SENSOR_GetValue+0x74>)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4013      	ands	r3, r2
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	429a      	cmp	r2, r3
 800835e:	d11b      	bne.n	8008398 <BSP_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8008360:	4a12      	ldr	r2, [pc, #72]	@ (80083ac <BSP_ENV_SENSOR_GetValue+0x78>)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008368:	4911      	ldr	r1, [pc, #68]	@ (80083b0 <BSP_ENV_SENSOR_GetValue+0x7c>)
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	0052      	lsls	r2, r2, #1
 800836e:	4413      	add	r3, r2
 8008370:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	490f      	ldr	r1, [pc, #60]	@ (80083b4 <BSP_ENV_SENSOR_GetValue+0x80>)
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <BSP_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800838a:	f06f 0304 	mvn.w	r3, #4
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	e005      	b.n	800839e <BSP_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	e002      	b.n	800839e <BSP_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008398:	f06f 0301 	mvn.w	r3, #1
 800839c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800839e:	697b      	ldr	r3, [r7, #20]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	2000077c 	.word	0x2000077c
 80083ac:	20000140 	.word	0x20000140
 80083b0:	20000764 	.word	0x20000764
 80083b4:	2000075c 	.word	0x2000075c

080083b8 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b092      	sub	sp, #72	@ 0x48
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 80083c4:	2300      	movs	r3, #0
 80083c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H; /* ADDR pin = VDD */
 80083c8:	2371      	movs	r3, #113	@ 0x71
 80083ca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = BSP_STTS22H_0_I2C_INIT;
 80083ce:	4b39      	ldr	r3, [pc, #228]	@ (80084b4 <STTS22H_0_Probe+0xfc>)
 80083d0:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = BSP_STTS22H_0_I2C_DEINIT;
 80083d2:	4b39      	ldr	r3, [pc, #228]	@ (80084b8 <STTS22H_0_Probe+0x100>)
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = BSP_STTS22H_0_I2C_READ_REG;
 80083d6:	4b39      	ldr	r3, [pc, #228]	@ (80084bc <STTS22H_0_Probe+0x104>)
 80083d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = BSP_STTS22H_0_I2C_WRITE_REG;
 80083da:	4b39      	ldr	r3, [pc, #228]	@ (80084c0 <STTS22H_0_Probe+0x108>)
 80083dc:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = BSP_GetTick;
 80083de:	4b39      	ldr	r3, [pc, #228]	@ (80084c4 <STTS22H_0_Probe+0x10c>)
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 80083e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083e6:	4619      	mov	r1, r3
 80083e8:	4837      	ldr	r0, [pc, #220]	@ (80084c8 <STTS22H_0_Probe+0x110>)
 80083ea:	f7fe fc89 	bl	8006d00 <STTS22H_RegisterBusIO>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <STTS22H_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80083f4:	f06f 0306 	mvn.w	r3, #6
 80083f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083fa:	e056      	b.n	80084aa <STTS22H_0_Probe+0xf2>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 80083fc:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8008400:	4619      	mov	r1, r3
 8008402:	4831      	ldr	r0, [pc, #196]	@ (80084c8 <STTS22H_0_Probe+0x110>)
 8008404:	f7fe fd1b 	bl	8006e3e <STTS22H_ReadID>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <STTS22H_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800840e:	f06f 0306 	mvn.w	r3, #6
 8008412:	647b      	str	r3, [r7, #68]	@ 0x44
 8008414:	e049      	b.n	80084aa <STTS22H_0_Probe+0xf2>
  }
  else if (id != STTS22H_ID)
 8008416:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800841a:	2ba0      	cmp	r3, #160	@ 0xa0
 800841c:	d003      	beq.n	8008426 <STTS22H_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800841e:	f06f 0306 	mvn.w	r3, #6
 8008422:	647b      	str	r3, [r7, #68]	@ 0x44
 8008424:	e041      	b.n	80084aa <STTS22H_0_Probe+0xf2>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 8008426:	f107 0308 	add.w	r3, r7, #8
 800842a:	4619      	mov	r1, r3
 800842c:	4826      	ldr	r0, [pc, #152]	@ (80084c8 <STTS22H_0_Probe+0x110>)
 800842e:	f7fe fd21 	bl	8006e74 <STTS22H_GetCapabilities>
    EnvCtx[STTS22H_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008432:	7a3b      	ldrb	r3, [r7, #8]
 8008434:	461a      	mov	r2, r3
 8008436:	7a7b      	ldrb	r3, [r7, #9]
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	431a      	orrs	r2, r3
                                    uint32_t)cap.Humidity << 2);
 800843c:	7abb      	ldrb	r3, [r7, #10]
 800843e:	009b      	lsls	r3, r3, #2
    EnvCtx[STTS22H_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008440:	4313      	orrs	r3, r2
 8008442:	4a22      	ldr	r2, [pc, #136]	@ (80084cc <STTS22H_0_Probe+0x114>)
 8008444:	6013      	str	r3, [r2, #0]

    EnvCompObj[STTS22H_0] = &stts22h_obj_0;
 8008446:	4b22      	ldr	r3, [pc, #136]	@ (80084d0 <STTS22H_0_Probe+0x118>)
 8008448:	4a1f      	ldr	r2, [pc, #124]	@ (80084c8 <STTS22H_0_Probe+0x110>)
 800844a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800844c:	4b21      	ldr	r3, [pc, #132]	@ (80084d4 <STTS22H_0_Probe+0x11c>)
 800844e:	4a22      	ldr	r2, [pc, #136]	@ (80084d8 <STTS22H_0_Probe+0x120>)
 8008450:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008454:	2b00      	cmp	r3, #0
 8008456:	d11d      	bne.n	8008494 <STTS22H_0_Probe+0xdc>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d018      	beq.n	8008494 <STTS22H_0_Probe+0xdc>
 8008462:	7a3b      	ldrb	r3, [r7, #8]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d115      	bne.n	8008494 <STTS22H_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 8008468:	4b1c      	ldr	r3, [pc, #112]	@ (80084dc <STTS22H_0_Probe+0x124>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	4a1c      	ldr	r2, [pc, #112]	@ (80084e0 <STTS22H_0_Probe+0x128>)
 800846e:	491d      	ldr	r1, [pc, #116]	@ (80084e4 <STTS22H_0_Probe+0x12c>)
 8008470:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[STTS22H_0]->Init(EnvCompObj[STTS22H_0]) != STTS22H_OK)
 8008474:	4b17      	ldr	r3, [pc, #92]	@ (80084d4 <STTS22H_0_Probe+0x11c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a15      	ldr	r2, [pc, #84]	@ (80084d0 <STTS22H_0_Probe+0x118>)
 800847c:	6812      	ldr	r2, [r2, #0]
 800847e:	4610      	mov	r0, r2
 8008480:	4798      	blx	r3
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <STTS22H_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008488:	f06f 0304 	mvn.w	r3, #4
 800848c:	647b      	str	r3, [r7, #68]	@ 0x44
 800848e:	e001      	b.n	8008494 <STTS22H_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008490:	2300      	movs	r3, #0
 8008492:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008496:	2b00      	cmp	r3, #0
 8008498:	d107      	bne.n	80084aa <STTS22H_0_Probe+0xf2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <STTS22H_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80084a4:	f06f 0304 	mvn.w	r3, #4
 80084a8:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 80084aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3748      	adds	r7, #72	@ 0x48
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	08007ce9 	.word	0x08007ce9
 80084b8:	08007d65 	.word	0x08007d65
 80084bc:	08007e19 	.word	0x08007e19
 80084c0:	08007db5 	.word	0x08007db5
 80084c4:	08007e7d 	.word	0x08007e7d
 80084c8:	20000784 	.word	0x20000784
 80084cc:	2000077c 	.word	0x2000077c
 80084d0:	2000075c 	.word	0x2000075c
 80084d4:	20000774 	.word	0x20000774
 80084d8:	200000fc 	.word	0x200000fc
 80084dc:	20000140 	.word	0x20000140
 80084e0:	20000764 	.word	0x20000764
 80084e4:	2000010c 	.word	0x2000010c

080084e8 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b092      	sub	sp, #72	@ 0x48
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 80084f4:	2300      	movs	r3, #0
 80084f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H; /* SA0 = VDD */
 80084f8:	23bb      	movs	r3, #187	@ 0xbb
 80084fa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = BSP_LPS22DF_0_I2C_INIT;
 80084fe:	4b45      	ldr	r3, [pc, #276]	@ (8008614 <LPS22DF_0_Probe+0x12c>)
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = BSP_LPS22DF_0_I2C_DEINIT;
 8008502:	4b45      	ldr	r3, [pc, #276]	@ (8008618 <LPS22DF_0_Probe+0x130>)
 8008504:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = BSP_LPS22DF_0_I2C_READ_REG;
 8008506:	4b45      	ldr	r3, [pc, #276]	@ (800861c <LPS22DF_0_Probe+0x134>)
 8008508:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = BSP_LPS22DF_0_I2C_WRITE_REG;
 800850a:	4b45      	ldr	r3, [pc, #276]	@ (8008620 <LPS22DF_0_Probe+0x138>)
 800850c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = BSP_GetTick;
 800850e:	4b45      	ldr	r3, [pc, #276]	@ (8008624 <LPS22DF_0_Probe+0x13c>)
 8008510:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 8008512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008516:	4619      	mov	r1, r3
 8008518:	4843      	ldr	r0, [pc, #268]	@ (8008628 <LPS22DF_0_Probe+0x140>)
 800851a:	f7fb ff15 	bl	8004348 <LPS22DF_RegisterBusIO>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <LPS22DF_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008524:	f06f 0306 	mvn.w	r3, #6
 8008528:	647b      	str	r3, [r7, #68]	@ 0x44
 800852a:	e06e      	b.n	800860a <LPS22DF_0_Probe+0x122>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800852c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8008530:	4619      	mov	r1, r3
 8008532:	483d      	ldr	r0, [pc, #244]	@ (8008628 <LPS22DF_0_Probe+0x140>)
 8008534:	f7fb ffb1 	bl	800449a <LPS22DF_ReadID>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <LPS22DF_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800853e:	f06f 0306 	mvn.w	r3, #6
 8008542:	647b      	str	r3, [r7, #68]	@ 0x44
 8008544:	e061      	b.n	800860a <LPS22DF_0_Probe+0x122>
  }
  else if (id != LPS22DF_ID)
 8008546:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800854a:	2bb4      	cmp	r3, #180	@ 0xb4
 800854c:	d003      	beq.n	8008556 <LPS22DF_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800854e:	f06f 0306 	mvn.w	r3, #6
 8008552:	647b      	str	r3, [r7, #68]	@ 0x44
 8008554:	e059      	b.n	800860a <LPS22DF_0_Probe+0x122>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 8008556:	f107 0308 	add.w	r3, r7, #8
 800855a:	4619      	mov	r1, r3
 800855c:	4832      	ldr	r0, [pc, #200]	@ (8008628 <LPS22DF_0_Probe+0x140>)
 800855e:	f7fb ffb7 	bl	80044d0 <LPS22DF_GetCapabilities>

    EnvCtx[LPS22DF_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008562:	7a3b      	ldrb	r3, [r7, #8]
 8008564:	461a      	mov	r2, r3
 8008566:	7a7b      	ldrb	r3, [r7, #9]
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	431a      	orrs	r2, r3
                                    uint32_t)cap.Humidity << 2);
 800856c:	7abb      	ldrb	r3, [r7, #10]
 800856e:	009b      	lsls	r3, r3, #2
    EnvCtx[LPS22DF_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008570:	4313      	orrs	r3, r2
 8008572:	4a2e      	ldr	r2, [pc, #184]	@ (800862c <LPS22DF_0_Probe+0x144>)
 8008574:	6053      	str	r3, [r2, #4]

    EnvCompObj[LPS22DF_0] = &lps22df_obj_0;
 8008576:	4b2e      	ldr	r3, [pc, #184]	@ (8008630 <LPS22DF_0_Probe+0x148>)
 8008578:	4a2b      	ldr	r2, [pc, #172]	@ (8008628 <LPS22DF_0_Probe+0x140>)
 800857a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800857c:	4b2d      	ldr	r3, [pc, #180]	@ (8008634 <LPS22DF_0_Probe+0x14c>)
 800857e:	4a2e      	ldr	r2, [pc, #184]	@ (8008638 <LPS22DF_0_Probe+0x150>)
 8008580:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008584:	2b00      	cmp	r3, #0
 8008586:	d11e      	bne.n	80085c6 <LPS22DF_0_Probe+0xde>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d019      	beq.n	80085c6 <LPS22DF_0_Probe+0xde>
 8008592:	7a3b      	ldrb	r3, [r7, #8]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d116      	bne.n	80085c6 <LPS22DF_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 8008598:	4b28      	ldr	r3, [pc, #160]	@ (800863c <LPS22DF_0_Probe+0x154>)
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	4a28      	ldr	r2, [pc, #160]	@ (8008640 <LPS22DF_0_Probe+0x158>)
 800859e:	3302      	adds	r3, #2
 80085a0:	4928      	ldr	r1, [pc, #160]	@ (8008644 <LPS22DF_0_Probe+0x15c>)
 80085a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[LPS22DF_0]->Init(EnvCompObj[LPS22DF_0]) != LPS22DF_OK)
 80085a6:	4b23      	ldr	r3, [pc, #140]	@ (8008634 <LPS22DF_0_Probe+0x14c>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a20      	ldr	r2, [pc, #128]	@ (8008630 <LPS22DF_0_Probe+0x148>)
 80085ae:	6852      	ldr	r2, [r2, #4]
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <LPS22DF_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80085ba:	f06f 0304 	mvn.w	r3, #4
 80085be:	647b      	str	r3, [r7, #68]	@ 0x44
 80085c0:	e001      	b.n	80085c6 <LPS22DF_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80085c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d11e      	bne.n	800860a <LPS22DF_0_Probe+0x122>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d019      	beq.n	800860a <LPS22DF_0_Probe+0x122>
 80085d6:	7a7b      	ldrb	r3, [r7, #9]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d116      	bne.n	800860a <LPS22DF_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 80085dc:	4b17      	ldr	r3, [pc, #92]	@ (800863c <LPS22DF_0_Probe+0x154>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	4a17      	ldr	r2, [pc, #92]	@ (8008640 <LPS22DF_0_Probe+0x158>)
 80085e2:	3302      	adds	r3, #2
 80085e4:	4918      	ldr	r1, [pc, #96]	@ (8008648 <LPS22DF_0_Probe+0x160>)
 80085e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[LPS22DF_0]->Init(EnvCompObj[LPS22DF_0]) != LPS22DF_OK)
 80085ea:	4b12      	ldr	r3, [pc, #72]	@ (8008634 <LPS22DF_0_Probe+0x14c>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a0f      	ldr	r2, [pc, #60]	@ (8008630 <LPS22DF_0_Probe+0x148>)
 80085f2:	6852      	ldr	r2, [r2, #4]
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <LPS22DF_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80085fe:	f06f 0304 	mvn.w	r3, #4
 8008602:	647b      	str	r3, [r7, #68]	@ 0x44
 8008604:	e001      	b.n	800860a <LPS22DF_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008606:	2300      	movs	r3, #0
 8008608:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
  }

  return ret;
 800860a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800860c:	4618      	mov	r0, r3
 800860e:	3748      	adds	r7, #72	@ 0x48
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	08007ce9 	.word	0x08007ce9
 8008618:	08007d65 	.word	0x08007d65
 800861c:	08007e19 	.word	0x08007e19
 8008620:	08007db5 	.word	0x08007db5
 8008624:	08007e7d 	.word	0x08007e7d
 8008628:	200007bc 	.word	0x200007bc
 800862c:	2000077c 	.word	0x2000077c
 8008630:	2000075c 	.word	0x2000075c
 8008634:	20000774 	.word	0x20000774
 8008638:	2000006c 	.word	0x2000006c
 800863c:	20000140 	.word	0x20000140
 8008640:	20000764 	.word	0x20000764
 8008644:	20000090 	.word	0x20000090
 8008648:	2000007c 	.word	0x2000007c

0800864c <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08e      	sub	sp, #56	@ 0x38
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008656:	2300      	movs	r3, #0
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800865a:	2301      	movs	r3, #1
 800865c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	62bb      	str	r3, [r7, #40]	@ 0x28
  BSP_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d06e      	beq.n	8008746 <BSP_MOTION_SENSOR_Init+0xfa>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b02      	cmp	r3, #2
 800866c:	f200 809d 	bhi.w	80087aa <BSP_MOTION_SENSOR_Init+0x15e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <BSP_MOTION_SENSOR_Init+0x32>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d032      	beq.n	80086e2 <BSP_MOTION_SENSOR_Init+0x96>
 800867c:	e095      	b.n	80087aa <BSP_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_MOTION_SENSOR_LIS2MDL_0 == 1)
    case LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800867e:	6838      	ldr	r0, [r7, #0]
 8008680:	f000 f96a 	bl	8008958 <LIS2MDL_0_Probe>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <BSP_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800868a:	f04f 33ff 	mov.w	r3, #4294967295
 800868e:	e0cc      	b.n	800882a <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008690:	4a68      	ldr	r2, [pc, #416]	@ (8008834 <BSP_MOTION_SENSOR_Init+0x1e8>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	4967      	ldr	r1, [pc, #412]	@ (8008838 <BSP_MOTION_SENSOR_Init+0x1ec>)
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086a2:	f107 010c 	add.w	r1, r7, #12
 80086a6:	4610      	mov	r0, r2
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <BSP_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80086b0:	f06f 0306 	mvn.w	r3, #6
 80086b4:	e0b9      	b.n	800882a <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80086b6:	7b3b      	ldrb	r3, [r7, #12]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d103      	bne.n	80086c4 <BSP_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086be:	f043 0302 	orr.w	r3, r3, #2
 80086c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80086c4:	7b7b      	ldrb	r3, [r7, #13]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d103      	bne.n	80086d2 <BSP_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80086ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d16c      	bne.n	80087b2 <BSP_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	f043 0304 	orr.w	r3, r3, #4
 80086de:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80086e0:	e067      	b.n	80087b2 <BSP_MOTION_SENSOR_Init+0x166>
#endif /* USE_MOTION_SENSOR_LIS2MDL_0 == 1 */
#if (USE_MOTION_SENSOR_LIS2DU12_0 == 1)
    case LIS2DU12_0:
      if (LIS2DU12_0_Probe(Functions) != BSP_ERROR_NONE)
 80086e2:	6838      	ldr	r0, [r7, #0]
 80086e4:	f000 f9dc 	bl	8008aa0 <LIS2DU12_0_Probe>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <BSP_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80086ee:	f04f 33ff 	mov.w	r3, #4294967295
 80086f2:	e09a      	b.n	800882a <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80086f4:	4a4f      	ldr	r2, [pc, #316]	@ (8008834 <BSP_MOTION_SENSOR_Init+0x1e8>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	494e      	ldr	r1, [pc, #312]	@ (8008838 <BSP_MOTION_SENSOR_Init+0x1ec>)
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008706:	f107 010c 	add.w	r1, r7, #12
 800870a:	4610      	mov	r0, r2
 800870c:	4798      	blx	r3
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <BSP_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008714:	f06f 0306 	mvn.w	r3, #6
 8008718:	e087      	b.n	800882a <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800871a:	7b3b      	ldrb	r3, [r7, #12]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d103      	bne.n	8008728 <BSP_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008722:	f043 0302 	orr.w	r3, r3, #2
 8008726:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8008728:	7b7b      	ldrb	r3, [r7, #13]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d103      	bne.n	8008736 <BSP_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800872e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008730:	f043 0301 	orr.w	r3, r3, #1
 8008734:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d13c      	bne.n	80087b6 <BSP_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	f043 0304 	orr.w	r3, r3, #4
 8008742:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008744:	e037      	b.n	80087b6 <BSP_MOTION_SENSOR_Init+0x16a>
#endif /* USE_MOTION_SENSOR_LIS2DU12_0 == 1 */
#if (USE_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 8008746:	6838      	ldr	r0, [r7, #0]
 8008748:	f000 fa4e 	bl	8008be8 <LSM6DSV16X_0_Probe>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <BSP_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	e068      	b.n	800882a <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008758:	4a36      	ldr	r2, [pc, #216]	@ (8008834 <BSP_MOTION_SENSOR_Init+0x1e8>)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	4935      	ldr	r1, [pc, #212]	@ (8008838 <BSP_MOTION_SENSOR_Init+0x1ec>)
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800876a:	f107 010c 	add.w	r1, r7, #12
 800876e:	4610      	mov	r0, r2
 8008770:	4798      	blx	r3
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <BSP_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008778:	f06f 0306 	mvn.w	r3, #6
 800877c:	e055      	b.n	800882a <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800877e:	7b3b      	ldrb	r3, [r7, #12]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d103      	bne.n	800878c <BSP_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	f043 0302 	orr.w	r3, r3, #2
 800878a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800878c:	7b7b      	ldrb	r3, [r7, #13]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d103      	bne.n	800879a <BSP_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8008792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008794:	f043 0301 	orr.w	r3, r3, #1
 8008798:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10c      	bne.n	80087ba <BSP_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80087a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a2:	f043 0304 	orr.w	r3, r3, #4
 80087a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80087a8:	e007      	b.n	80087ba <BSP_MOTION_SENSOR_Init+0x16e>
#endif /* USE_MOTION_SENSOR_LSM6DSV16X_0 == 1 */
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80087aa:	f06f 0301 	mvn.w	r3, #1
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 80087b0:	e004      	b.n	80087bc <BSP_MOTION_SENSOR_Init+0x170>
      break;
 80087b2:	bf00      	nop
 80087b4:	e002      	b.n	80087bc <BSP_MOTION_SENSOR_Init+0x170>
      break;
 80087b6:	bf00      	nop
 80087b8:	e000      	b.n	80087bc <BSP_MOTION_SENSOR_Init+0x170>
      break;
 80087ba:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80087bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <BSP_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80087c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c4:	e031      	b.n	800882a <BSP_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < BSP_MOTION_FUNCTIONS_NBR; i++)
 80087c6:	2300      	movs	r3, #0
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087ca:	e02a      	b.n	8008822 <BSP_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	4013      	ands	r3, r2
 80087d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d11e      	bne.n	8008816 <BSP_MOTION_SENSOR_Init+0x1ca>
 80087d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	4013      	ands	r3, r2
 80087de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d118      	bne.n	8008816 <BSP_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80087e4:	4a15      	ldr	r2, [pc, #84]	@ (800883c <BSP_MOTION_SENSOR_Init+0x1f0>)
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087ec:	4814      	ldr	r0, [pc, #80]	@ (8008840 <BSP_MOTION_SENSOR_Init+0x1f4>)
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	4613      	mov	r3, r2
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	4413      	add	r3, r2
 80087f6:	440b      	add	r3, r1
 80087f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	490e      	ldr	r1, [pc, #56]	@ (8008838 <BSP_MOTION_SENSOR_Init+0x1ec>)
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008806:	4610      	mov	r0, r2
 8008808:	4798      	blx	r3
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <BSP_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008810:	f06f 0304 	mvn.w	r3, #4
 8008814:	e009      	b.n	800882a <BSP_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < BSP_MOTION_FUNCTIONS_NBR; i++)
 800881c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881e:	3301      	adds	r3, #1
 8008820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008824:	2b02      	cmp	r3, #2
 8008826:	d9d1      	bls.n	80087cc <BSP_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8008828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800882a:	4618      	mov	r0, r3
 800882c:	3738      	adds	r7, #56	@ 0x38
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20000824 	.word	0x20000824
 8008838:	200007f4 	.word	0x200007f4
 800883c:	20000154 	.word	0x20000154
 8008840:	20000800 	.word	0x20000800

08008844 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= BSP_MOTION_INSTANCES_NBR)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d903      	bls.n	8008860 <BSP_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008858:	f06f 0301 	mvn.w	r3, #1
 800885c:	617b      	str	r3, [r7, #20]
 800885e:	e02a      	b.n	80088b6 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008860:	4a17      	ldr	r2, [pc, #92]	@ (80088c0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4013      	ands	r3, r2
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	429a      	cmp	r2, r3
 8008870:	d11e      	bne.n	80088b0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance],
 8008872:	4a14      	ldr	r2, [pc, #80]	@ (80088c4 <BSP_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800887a:	4813      	ldr	r0, [pc, #76]	@ (80088c8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4613      	mov	r3, r2
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	4413      	add	r3, r2
 8008884:	440b      	add	r3, r1
 8008886:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	490f      	ldr	r1, [pc, #60]	@ (80088cc <BSP_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008894:	ed97 0a01 	vldr	s0, [r7, #4]
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <BSP_MOTION_SENSOR_SetOutputDataRate+0x66>
                                                                              Odr) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80088a2:	f06f 0304 	mvn.w	r3, #4
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e005      	b.n	80088b6 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
 80088ae:	e002      	b.n	80088b6 <BSP_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80088b0:	f06f 0301 	mvn.w	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80088b6:	697b      	ldr	r3, [r7, #20]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000830 	.word	0x20000830
 80088c4:	20000154 	.word	0x20000154
 80088c8:	20000800 	.word	0x20000800
 80088cc:	200007f4 	.word	0x200007f4

080088d0 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= BSP_MOTION_INSTANCES_NBR)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d903      	bls.n	80088ea <BSP_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80088e2:	f06f 0301 	mvn.w	r3, #1
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	e029      	b.n	800893e <BSP_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80088ea:	4a17      	ldr	r2, [pc, #92]	@ (8008948 <BSP_MOTION_SENSOR_SetFullScale+0x78>)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	4013      	ands	r3, r2
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d11d      	bne.n	8008938 <BSP_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 80088fc:	4a13      	ldr	r2, [pc, #76]	@ (800894c <BSP_MOTION_SENSOR_SetFullScale+0x7c>)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008904:	4812      	ldr	r0, [pc, #72]	@ (8008950 <BSP_MOTION_SENSOR_SetFullScale+0x80>)
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	4613      	mov	r3, r2
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	4413      	add	r3, r2
 800890e:	440b      	add	r3, r1
 8008910:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	490f      	ldr	r1, [pc, #60]	@ (8008954 <BSP_MOTION_SENSOR_SetFullScale+0x84>)
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <BSP_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800892a:	f06f 0304 	mvn.w	r3, #4
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e005      	b.n	800893e <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008932:	2300      	movs	r3, #0
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	e002      	b.n	800893e <BSP_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008938:	f06f 0301 	mvn.w	r3, #1
 800893c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800893e:	697b      	ldr	r3, [r7, #20]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20000830 	.word	0x20000830
 800894c:	20000154 	.word	0x20000154
 8008950:	20000800 	.word	0x20000800
 8008954:	200007f4 	.word	0x200007f4

08008958 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b094      	sub	sp, #80	@ 0x50
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008960:	2300      	movs	r3, #0
 8008962:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8008964:	2300      	movs	r3, #0
 8008966:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008968:	233d      	movs	r3, #61	@ 0x3d
 800896a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = BSP_LIS2MDL_0_I2C_INIT;
 800896e:	4b3f      	ldr	r3, [pc, #252]	@ (8008a6c <LIS2MDL_0_Probe+0x114>)
 8008970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = BSP_LIS2MDL_0_I2C_DEINIT;
 8008972:	4b3f      	ldr	r3, [pc, #252]	@ (8008a70 <LIS2MDL_0_Probe+0x118>)
 8008974:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = BSP_LIS2MDL_0_I2C_READ_REG;
 8008976:	4b3f      	ldr	r3, [pc, #252]	@ (8008a74 <LIS2MDL_0_Probe+0x11c>)
 8008978:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = BSP_LIS2MDL_0_I2C_WRITE_REG;
 800897a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a78 <LIS2MDL_0_Probe+0x120>)
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 800897e:	4b3f      	ldr	r3, [pc, #252]	@ (8008a7c <LIS2MDL_0_Probe+0x124>)
 8008980:	647b      	str	r3, [r7, #68]	@ 0x44

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8008982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008986:	4619      	mov	r1, r3
 8008988:	483d      	ldr	r0, [pc, #244]	@ (8008a80 <LIS2MDL_0_Probe+0x128>)
 800898a:	f7fa fcdd 	bl	8003348 <LIS2MDL_RegisterBusIO>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008994:	f06f 0306 	mvn.w	r3, #6
 8008998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800899a:	e061      	b.n	8008a60 <LIS2MDL_0_Probe+0x108>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800899c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80089a0:	4619      	mov	r1, r3
 80089a2:	4837      	ldr	r0, [pc, #220]	@ (8008a80 <LIS2MDL_0_Probe+0x128>)
 80089a4:	f7fa fdec 	bl	8003580 <LIS2MDL_ReadID>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80089ae:	f06f 0306 	mvn.w	r3, #6
 80089b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089b4:	e054      	b.n	8008a60 <LIS2MDL_0_Probe+0x108>
  }
  else if (id != (uint8_t)LIS2MDL_ID)
 80089b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089ba:	2b40      	cmp	r3, #64	@ 0x40
 80089bc:	d003      	beq.n	80089c6 <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80089be:	f06f 0306 	mvn.w	r3, #6
 80089c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089c4:	e04c      	b.n	8008a60 <LIS2MDL_0_Probe+0x108>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80089c6:	f107 030c 	add.w	r3, r7, #12
 80089ca:	4619      	mov	r1, r3
 80089cc:	482c      	ldr	r0, [pc, #176]	@ (8008a80 <LIS2MDL_0_Probe+0x128>)
 80089ce:	f7fa fdfd 	bl	80035cc <LIS2MDL_GetCapabilities>
    MotionCtx[LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80089d2:	7b7b      	ldrb	r3, [r7, #13]
 80089d4:	461a      	mov	r2, r3
 80089d6:	7b3b      	ldrb	r3, [r7, #12]
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	431a      	orrs	r2, r3
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4313      	orrs	r3, r2
 80089e2:	4a28      	ldr	r2, [pc, #160]	@ (8008a84 <LIS2MDL_0_Probe+0x12c>)
 80089e4:	6013      	str	r3, [r2, #0]

    MotionCompObj[LIS2MDL_0] = &lis2mdl_obj_0;
 80089e6:	4b28      	ldr	r3, [pc, #160]	@ (8008a88 <LIS2MDL_0_Probe+0x130>)
 80089e8:	4a25      	ldr	r2, [pc, #148]	@ (8008a80 <LIS2MDL_0_Probe+0x128>)
 80089ea:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80089ec:	4b27      	ldr	r3, [pc, #156]	@ (8008a8c <LIS2MDL_0_Probe+0x134>)
 80089ee:	4a28      	ldr	r2, [pc, #160]	@ (8008a90 <LIS2MDL_0_Probe+0x138>)
 80089f0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80089f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d11d      	bne.n	8008a34 <LIS2MDL_0_Probe+0xdc>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d018      	beq.n	8008a34 <LIS2MDL_0_Probe+0xdc>
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d115      	bne.n	8008a34 <LIS2MDL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 8008a08:	4b22      	ldr	r3, [pc, #136]	@ (8008a94 <LIS2MDL_0_Probe+0x13c>)
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	4a22      	ldr	r2, [pc, #136]	@ (8008a98 <LIS2MDL_0_Probe+0x140>)
 8008a0e:	4923      	ldr	r1, [pc, #140]	@ (8008a9c <LIS2MDL_0_Probe+0x144>)
 8008a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LIS2MDL_0]->Init(MotionCompObj[LIS2MDL_0]) != LIS2MDL_OK)
 8008a14:	4b1d      	ldr	r3, [pc, #116]	@ (8008a8c <LIS2MDL_0_Probe+0x134>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8008a88 <LIS2MDL_0_Probe+0x130>)
 8008a1c:	6812      	ldr	r2, [r2, #0]
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4798      	blx	r3
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <LIS2MDL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a28:	f06f 0304 	mvn.w	r3, #4
 8008a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a2e:	e001      	b.n	8008a34 <LIS2MDL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d107      	bne.n	8008a4a <LIS2MDL_0_Probe+0xf2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <LIS2MDL_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a44:	f06f 0304 	mvn.w	r3, #4
 8008a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d107      	bne.n	8008a60 <LIS2MDL_0_Probe+0x108>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <LIS2MDL_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a5a:	f06f 0304 	mvn.w	r3, #4
 8008a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3750      	adds	r7, #80	@ 0x50
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	08007ce9 	.word	0x08007ce9
 8008a70:	08007d65 	.word	0x08007d65
 8008a74:	08007e19 	.word	0x08007e19
 8008a78:	08007db5 	.word	0x08007db5
 8008a7c:	08007e7d 	.word	0x08007e7d
 8008a80:	2000083c 	.word	0x2000083c
 8008a84:	20000830 	.word	0x20000830
 8008a88:	200007f4 	.word	0x200007f4
 8008a8c:	20000824 	.word	0x20000824
 8008a90:	20000038 	.word	0x20000038
 8008a94:	20000154 	.word	0x20000154
 8008a98:	20000800 	.word	0x20000800
 8008a9c:	20000048 	.word	0x20000048

08008aa0 <LIS2DU12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DU12_0_Probe(uint32_t Functions)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b094      	sub	sp, #80	@ 0x50
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  LIS2DU12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DU12_Object_t lis2du12_obj_0;
  LIS2DU12_Capabilities_t  cap;
  int32_t                  ret = BSP_ERROR_NONE;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  io_ctx.Init        = BSP_LIS2DU12_Init;
  io_ctx.DeInit      = BSP_LIS2DU12_DeInit;
  io_ctx.ReadReg     = BSP_LIS2DU12_ReadReg;
  io_ctx.WriteReg    = BSP_LIS2DU12_WriteReg;
#else
  io_ctx.BusType     = LIS2DU12_I2C_BUS; /* I2C */
 8008aac:	2300      	movs	r3, #0
 8008aae:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DU12_I2C_ADD_H;
 8008ab0:	2333      	movs	r3, #51	@ 0x33
 8008ab2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = BSP_LIS2DU12_0_I2C_INIT;
 8008ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bb4 <LIS2DU12_0_Probe+0x114>)
 8008ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = BSP_LIS2DU12_0_I2C_DEINIT;
 8008aba:	4b3f      	ldr	r3, [pc, #252]	@ (8008bb8 <LIS2DU12_0_Probe+0x118>)
 8008abc:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = BSP_LIS2DU12_0_I2C_READ_REG;
 8008abe:	4b3f      	ldr	r3, [pc, #252]	@ (8008bbc <LIS2DU12_0_Probe+0x11c>)
 8008ac0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = BSP_LIS2DU12_0_I2C_WRITE_REG;
 8008ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc0 <LIS2DU12_0_Probe+0x120>)
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* ALL_SENSORS_I2C */
  io_ctx.GetTick     = BSP_GetTick;
 8008ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc4 <LIS2DU12_0_Probe+0x124>)
 8008ac8:	647b      	str	r3, [r7, #68]	@ 0x44

  if (LIS2DU12_RegisterBusIO(&lis2du12_obj_0, &io_ctx) != LIS2DU12_OK)
 8008aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008ace:	4619      	mov	r1, r3
 8008ad0:	483d      	ldr	r0, [pc, #244]	@ (8008bc8 <LIS2DU12_0_Probe+0x128>)
 8008ad2:	f7f9 fb1d 	bl	8002110 <LIS2DU12_RegisterBusIO>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <LIS2DU12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008adc:	f06f 0306 	mvn.w	r3, #6
 8008ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ae2:	e062      	b.n	8008baa <LIS2DU12_0_Probe+0x10a>
  }
  else if (LIS2DU12_ReadID(&lis2du12_obj_0, &id) != LIS2DU12_OK)
 8008ae4:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4837      	ldr	r0, [pc, #220]	@ (8008bc8 <LIS2DU12_0_Probe+0x128>)
 8008aec:	f7f9 fbf4 	bl	80022d8 <LIS2DU12_ReadID>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <LIS2DU12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008af6:	f06f 0306 	mvn.w	r3, #6
 8008afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008afc:	e055      	b.n	8008baa <LIS2DU12_0_Probe+0x10a>
  }
  else if (id != LIS2DU12_ID)
 8008afe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b02:	2b45      	cmp	r3, #69	@ 0x45
 8008b04:	d003      	beq.n	8008b0e <LIS2DU12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b06:	f06f 0306 	mvn.w	r3, #6
 8008b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b0c:	e04d      	b.n	8008baa <LIS2DU12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DU12_GetCapabilities(&lis2du12_obj_0, &cap);
 8008b0e:	f107 030c 	add.w	r3, r7, #12
 8008b12:	4619      	mov	r1, r3
 8008b14:	482c      	ldr	r0, [pc, #176]	@ (8008bc8 <LIS2DU12_0_Probe+0x128>)
 8008b16:	f7f9 fbfb 	bl	8002310 <LIS2DU12_GetCapabilities>
    MotionCtx[LIS2DU12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008b1a:	7b7b      	ldrb	r3, [r7, #13]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	7b3b      	ldrb	r3, [r7, #12]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	431a      	orrs	r2, r3
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	4a28      	ldr	r2, [pc, #160]	@ (8008bcc <LIS2DU12_0_Probe+0x12c>)
 8008b2c:	6053      	str	r3, [r2, #4]

    MotionCompObj[LIS2DU12_0] = &lis2du12_obj_0;
 8008b2e:	4b28      	ldr	r3, [pc, #160]	@ (8008bd0 <LIS2DU12_0_Probe+0x130>)
 8008b30:	4a25      	ldr	r2, [pc, #148]	@ (8008bc8 <LIS2DU12_0_Probe+0x128>)
 8008b32:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LIS2DU12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DU12_COMMON_Driver;
 8008b34:	4b27      	ldr	r3, [pc, #156]	@ (8008bd4 <LIS2DU12_0_Probe+0x134>)
 8008b36:	4a28      	ldr	r2, [pc, #160]	@ (8008bd8 <LIS2DU12_0_Probe+0x138>)
 8008b38:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11e      	bne.n	8008b7e <LIS2DU12_0_Probe+0xde>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d019      	beq.n	8008b7e <LIS2DU12_0_Probe+0xde>
 8008b4a:	7b3b      	ldrb	r3, [r7, #12]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d116      	bne.n	8008b7e <LIS2DU12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LIS2DU12_0][FunctionIndex[MOTION_ACCELERO]] =
 8008b50:	4b22      	ldr	r3, [pc, #136]	@ (8008bdc <LIS2DU12_0_Probe+0x13c>)
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	4a22      	ldr	r2, [pc, #136]	@ (8008be0 <LIS2DU12_0_Probe+0x140>)
 8008b56:	3303      	adds	r3, #3
 8008b58:	4922      	ldr	r1, [pc, #136]	@ (8008be4 <LIS2DU12_0_Probe+0x144>)
 8008b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DU12_ACC_Driver;

      if (MotionDrv[LIS2DU12_0]->Init(MotionCompObj[LIS2DU12_0]) != LIS2DU12_OK)
 8008b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd4 <LIS2DU12_0_Probe+0x134>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1a      	ldr	r2, [pc, #104]	@ (8008bd0 <LIS2DU12_0_Probe+0x130>)
 8008b66:	6852      	ldr	r2, [r2, #4]
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <LIS2DU12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b72:	f06f 0304 	mvn.w	r3, #4
 8008b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b78:	e001      	b.n	8008b7e <LIS2DU12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d107      	bne.n	8008b94 <LIS2DU12_0_Probe+0xf4>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <LIS2DU12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b8e:	f06f 0304 	mvn.w	r3, #4
 8008b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d107      	bne.n	8008baa <LIS2DU12_0_Probe+0x10a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <LIS2DU12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ba4:	f06f 0304 	mvn.w	r3, #4
 8008ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3750      	adds	r7, #80	@ 0x50
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	08007ce9 	.word	0x08007ce9
 8008bb8:	08007d65 	.word	0x08007d65
 8008bbc:	08007e19 	.word	0x08007e19
 8008bc0:	08007db5 	.word	0x08007db5
 8008bc4:	08007e7d 	.word	0x08007e7d
 8008bc8:	20000870 	.word	0x20000870
 8008bcc:	20000830 	.word	0x20000830
 8008bd0:	200007f4 	.word	0x200007f4
 8008bd4:	20000824 	.word	0x20000824
 8008bd8:	20000004 	.word	0x20000004
 8008bdc:	20000154 	.word	0x20000154
 8008be0:	20000800 	.word	0x20000800
 8008be4:	20000014 	.word	0x20000014

08008be8 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b094      	sub	sp, #80	@ 0x50
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  io_ctx.Init        = BSP_LSM6DSV16X_Init;
  io_ctx.DeInit      = BSP_LSM6DSV16X_DeInit;
  io_ctx.ReadReg     = BSP_LSM6DSV16X_ReadReg;
  io_ctx.WriteReg    = BSP_LSM6DSV16X_WriteReg;
#else
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 8008bf8:	23d7      	movs	r3, #215	@ 0xd7
 8008bfa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = BSP_LSM6DSV16X_0_I2C_INIT;
 8008bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8008d2c <LSM6DSV16X_0_Probe+0x144>)
 8008c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = BSP_LSM6DSV16X_0_I2C_DEINIT;
 8008c02:	4b4b      	ldr	r3, [pc, #300]	@ (8008d30 <LSM6DSV16X_0_Probe+0x148>)
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = BSP_LSM6DSV16X_0_I2C_READ_REG;
 8008c06:	4b4b      	ldr	r3, [pc, #300]	@ (8008d34 <LSM6DSV16X_0_Probe+0x14c>)
 8008c08:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = BSP_LSM6DSV16X_0_I2C_WRITE_REG;
 8008c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8008d38 <LSM6DSV16X_0_Probe+0x150>)
 8008c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* ALL_SENSORS_I2C */
  io_ctx.GetTick     = BSP_GetTick;
 8008c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8008d3c <LSM6DSV16X_0_Probe+0x154>)
 8008c10:	647b      	str	r3, [r7, #68]	@ 0x44

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 8008c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008c16:	4619      	mov	r1, r3
 8008c18:	4849      	ldr	r0, [pc, #292]	@ (8008d40 <LSM6DSV16X_0_Probe+0x158>)
 8008c1a:	f7fc fabd 	bl	8005198 <LSM6DSV16X_RegisterBusIO>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <LSM6DSV16X_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c24:	f06f 0306 	mvn.w	r3, #6
 8008c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c2a:	e079      	b.n	8008d20 <LSM6DSV16X_0_Probe+0x138>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 8008c2c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008c30:	4619      	mov	r1, r3
 8008c32:	4843      	ldr	r0, [pc, #268]	@ (8008d40 <LSM6DSV16X_0_Probe+0x158>)
 8008c34:	f7fc fbd6 	bl	80053e4 <LSM6DSV16X_ReadID>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c3e:	f06f 0306 	mvn.w	r3, #6
 8008c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c44:	e06c      	b.n	8008d20 <LSM6DSV16X_0_Probe+0x138>
  }
  else if (id != LSM6DSV16X_ID)
 8008c46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c4a:	2b70      	cmp	r3, #112	@ 0x70
 8008c4c:	d003      	beq.n	8008c56 <LSM6DSV16X_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c4e:	f06f 0306 	mvn.w	r3, #6
 8008c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c54:	e064      	b.n	8008d20 <LSM6DSV16X_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 8008c56:	f107 030c 	add.w	r3, r7, #12
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4838      	ldr	r0, [pc, #224]	@ (8008d40 <LSM6DSV16X_0_Probe+0x158>)
 8008c5e:	f7fc fbd7 	bl	8005410 <LSM6DSV16X_GetCapabilities>
    MotionCtx[LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008c62:	7b7b      	ldrb	r3, [r7, #13]
 8008c64:	461a      	mov	r2, r3
 8008c66:	7b3b      	ldrb	r3, [r7, #12]
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4313      	orrs	r3, r2
 8008c72:	4a34      	ldr	r2, [pc, #208]	@ (8008d44 <LSM6DSV16X_0_Probe+0x15c>)
 8008c74:	6093      	str	r3, [r2, #8]

    MotionCompObj[LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 8008c76:	4b34      	ldr	r3, [pc, #208]	@ (8008d48 <LSM6DSV16X_0_Probe+0x160>)
 8008c78:	4a31      	ldr	r2, [pc, #196]	@ (8008d40 <LSM6DSV16X_0_Probe+0x158>)
 8008c7a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 8008c7c:	4b33      	ldr	r3, [pc, #204]	@ (8008d4c <LSM6DSV16X_0_Probe+0x164>)
 8008c7e:	4a34      	ldr	r2, [pc, #208]	@ (8008d50 <LSM6DSV16X_0_Probe+0x168>)
 8008c80:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d11e      	bne.n	8008cc6 <LSM6DSV16X_0_Probe+0xde>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d019      	beq.n	8008cc6 <LSM6DSV16X_0_Probe+0xde>
 8008c92:	7b7b      	ldrb	r3, [r7, #13]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d116      	bne.n	8008cc6 <LSM6DSV16X_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] =
 8008c98:	4b2e      	ldr	r3, [pc, #184]	@ (8008d54 <LSM6DSV16X_0_Probe+0x16c>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8008d58 <LSM6DSV16X_0_Probe+0x170>)
 8008c9e:	3306      	adds	r3, #6
 8008ca0:	492e      	ldr	r1, [pc, #184]	@ (8008d5c <LSM6DSV16X_0_Probe+0x174>)
 8008ca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[LSM6DSV16X_0]->Init(MotionCompObj[LSM6DSV16X_0]) != LSM6DSV16X_OK)
 8008ca6:	4b29      	ldr	r3, [pc, #164]	@ (8008d4c <LSM6DSV16X_0_Probe+0x164>)
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a26      	ldr	r2, [pc, #152]	@ (8008d48 <LSM6DSV16X_0_Probe+0x160>)
 8008cae:	6892      	ldr	r2, [r2, #8]
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <LSM6DSV16X_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cba:	f06f 0304 	mvn.w	r3, #4
 8008cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cc0:	e001      	b.n	8008cc6 <LSM6DSV16X_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11e      	bne.n	8008d0a <LSM6DSV16X_0_Probe+0x122>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d019      	beq.n	8008d0a <LSM6DSV16X_0_Probe+0x122>
 8008cd6:	7b3b      	ldrb	r3, [r7, #12]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d116      	bne.n	8008d0a <LSM6DSV16X_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] =
 8008cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8008d54 <LSM6DSV16X_0_Probe+0x16c>)
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d58 <LSM6DSV16X_0_Probe+0x170>)
 8008ce2:	3306      	adds	r3, #6
 8008ce4:	491e      	ldr	r1, [pc, #120]	@ (8008d60 <LSM6DSV16X_0_Probe+0x178>)
 8008ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[LSM6DSV16X_0]->Init(MotionCompObj[LSM6DSV16X_0]) != LSM6DSV16X_OK)
 8008cea:	4b18      	ldr	r3, [pc, #96]	@ (8008d4c <LSM6DSV16X_0_Probe+0x164>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a15      	ldr	r2, [pc, #84]	@ (8008d48 <LSM6DSV16X_0_Probe+0x160>)
 8008cf2:	6892      	ldr	r2, [r2, #8]
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <LSM6DSV16X_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cfe:	f06f 0304 	mvn.w	r3, #4
 8008d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d04:	e001      	b.n	8008d0a <LSM6DSV16X_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d107      	bne.n	8008d20 <LSM6DSV16X_0_Probe+0x138>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d002      	beq.n	8008d20 <LSM6DSV16X_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d1a:	f06f 0304 	mvn.w	r3, #4
 8008d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3750      	adds	r7, #80	@ 0x50
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	08007ce9 	.word	0x08007ce9
 8008d30:	08007d65 	.word	0x08007d65
 8008d34:	08007e19 	.word	0x08007e19
 8008d38:	08007db5 	.word	0x08007db5
 8008d3c:	08007e7d 	.word	0x08007e7d
 8008d40:	200008ac 	.word	0x200008ac
 8008d44:	20000830 	.word	0x20000830
 8008d48:	200007f4 	.word	0x200007f4
 8008d4c:	20000824 	.word	0x20000824
 8008d50:	200000a4 	.word	0x200000a4
 8008d54:	20000154 	.word	0x20000154
 8008d58:	20000800 	.word	0x20000800
 8008d5c:	200000d8 	.word	0x200000d8
 8008d60:	200000b4 	.word	0x200000b4

08008d64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d68:	4b12      	ldr	r3, [pc, #72]	@ (8008db4 <HAL_Init+0x50>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a11      	ldr	r2, [pc, #68]	@ (8008db4 <HAL_Init+0x50>)
 8008d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d74:	2003      	movs	r0, #3
 8008d76:	f000 f9b0 	bl	80090da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008d7a:	f004 fa91 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	4b0d      	ldr	r3, [pc, #52]	@ (8008db8 <HAL_Init+0x54>)
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	490c      	ldr	r1, [pc, #48]	@ (8008dbc <HAL_Init+0x58>)
 8008d8a:	5ccb      	ldrb	r3, [r1, r3]
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d90:	4a0b      	ldr	r2, [pc, #44]	@ (8008dc0 <HAL_Init+0x5c>)
 8008d92:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008d94:	2004      	movs	r0, #4
 8008d96:	f000 fa03 	bl	80091a0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008d9a:	200f      	movs	r0, #15
 8008d9c:	f000 f812 	bl	8008dc4 <HAL_InitTick>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e002      	b.n	8008db0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008daa:	f7f8 fc0f 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	40022000 	.word	0x40022000
 8008db8:	46020c00 	.word	0x46020c00
 8008dbc:	080158b0 	.word	0x080158b0
 8008dc0:	20000000 	.word	0x20000000

08008dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8008dd0:	4b33      	ldr	r3, [pc, #204]	@ (8008ea0 <HAL_InitTick+0xdc>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e05c      	b.n	8008e96 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8008ddc:	4b31      	ldr	r3, [pc, #196]	@ (8008ea4 <HAL_InitTick+0xe0>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d10c      	bne.n	8008e02 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8008de8:	4b2f      	ldr	r3, [pc, #188]	@ (8008ea8 <HAL_InitTick+0xe4>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	4b2c      	ldr	r3, [pc, #176]	@ (8008ea0 <HAL_InitTick+0xdc>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	4619      	mov	r1, r3
 8008df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	e037      	b.n	8008e72 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8008e02:	f000 fa25 	bl	8009250 <HAL_SYSTICK_GetCLKSourceConfig>
 8008e06:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d023      	beq.n	8008e56 <HAL_InitTick+0x92>
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d82d      	bhi.n	8008e70 <HAL_InitTick+0xac>
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_InitTick+0x5e>
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d00d      	beq.n	8008e3c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8008e20:	e026      	b.n	8008e70 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8008e22:	4b21      	ldr	r3, [pc, #132]	@ (8008ea8 <HAL_InitTick+0xe4>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea0 <HAL_InitTick+0xdc>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8008e30:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e38:	60fb      	str	r3, [r7, #12]
        break;
 8008e3a:	e01a      	b.n	8008e72 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8008e3c:	4b18      	ldr	r3, [pc, #96]	@ (8008ea0 <HAL_InitTick+0xdc>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e46:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8008e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e52:	60fb      	str	r3, [r7, #12]
        break;
 8008e54:	e00d      	b.n	8008e72 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8008e56:	4b12      	ldr	r3, [pc, #72]	@ (8008ea0 <HAL_InitTick+0xdc>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6c:	60fb      	str	r3, [r7, #12]
        break;
 8008e6e:	e000      	b.n	8008e72 <HAL_InitTick+0xae>
        break;
 8008e70:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f972 	bl	800915c <HAL_SYSTICK_Config>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e009      	b.n	8008e96 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e82:	2200      	movs	r2, #0
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8a:	f000 f931 	bl	80090f0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8008e8e:	4a07      	ldr	r2, [pc, #28]	@ (8008eac <HAL_InitTick+0xe8>)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	2000016c 	.word	0x2000016c
 8008ea4:	e000e010 	.word	0xe000e010
 8008ea8:	20000000 	.word	0x20000000
 8008eac:	20000168 	.word	0x20000168

08008eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008eb4:	4b06      	ldr	r3, [pc, #24]	@ (8008ed0 <HAL_IncTick+0x20>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	4b06      	ldr	r3, [pc, #24]	@ (8008ed4 <HAL_IncTick+0x24>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	4a04      	ldr	r2, [pc, #16]	@ (8008ed4 <HAL_IncTick+0x24>)
 8008ec2:	6013      	str	r3, [r2, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	2000016c 	.word	0x2000016c
 8008ed4:	200008e4 	.word	0x200008e4

08008ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  return uwTick;
 8008edc:	4b03      	ldr	r3, [pc, #12]	@ (8008eec <HAL_GetTick+0x14>)
 8008ede:	681b      	ldr	r3, [r3, #0]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	200008e4 	.word	0x200008e4

08008ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ef8:	f7ff ffee 	bl	8008ed8 <HAL_GetTick>
 8008efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f08:	d005      	beq.n	8008f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f34 <HAL_Delay+0x44>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008f16:	bf00      	nop
 8008f18:	f7ff ffde 	bl	8008ed8 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d8f7      	bhi.n	8008f18 <HAL_Delay+0x28>
  {
  }
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	2000016c 	.word	0x2000016c

08008f38 <__NVIC_SetPriorityGrouping>:
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f48:	4b0c      	ldr	r3, [pc, #48]	@ (8008f7c <__NVIC_SetPriorityGrouping+0x44>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f54:	4013      	ands	r3, r2
 8008f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f6a:	4a04      	ldr	r2, [pc, #16]	@ (8008f7c <__NVIC_SetPriorityGrouping+0x44>)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	60d3      	str	r3, [r2, #12]
}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	e000ed00 	.word	0xe000ed00

08008f80 <__NVIC_GetPriorityGrouping>:
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f84:	4b04      	ldr	r3, [pc, #16]	@ (8008f98 <__NVIC_GetPriorityGrouping+0x18>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	0a1b      	lsrs	r3, r3, #8
 8008f8a:	f003 0307 	and.w	r3, r3, #7
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	e000ed00 	.word	0xe000ed00

08008f9c <__NVIC_EnableIRQ>:
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	db0b      	blt.n	8008fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	f003 021f 	and.w	r2, r3, #31
 8008fb4:	4907      	ldr	r1, [pc, #28]	@ (8008fd4 <__NVIC_EnableIRQ+0x38>)
 8008fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fba:	095b      	lsrs	r3, r3, #5
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8008fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	e000e100 	.word	0xe000e100

08008fd8 <__NVIC_DisableIRQ>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	db12      	blt.n	8009010 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	f003 021f 	and.w	r2, r3, #31
 8008ff0:	490a      	ldr	r1, [pc, #40]	@ (800901c <__NVIC_DisableIRQ+0x44>)
 8008ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ff6:	095b      	lsrs	r3, r3, #5
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8008ffe:	3320      	adds	r3, #32
 8009000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009004:	f3bf 8f4f 	dsb	sy
}
 8009008:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800900a:	f3bf 8f6f 	isb	sy
}
 800900e:	bf00      	nop
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	e000e100 	.word	0xe000e100

08009020 <__NVIC_SetPriority>:
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	6039      	str	r1, [r7, #0]
 800902a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800902c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009030:	2b00      	cmp	r3, #0
 8009032:	db0a      	blt.n	800904a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	b2da      	uxtb	r2, r3
 8009038:	490c      	ldr	r1, [pc, #48]	@ (800906c <__NVIC_SetPriority+0x4c>)
 800903a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800903e:	0112      	lsls	r2, r2, #4
 8009040:	b2d2      	uxtb	r2, r2
 8009042:	440b      	add	r3, r1
 8009044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009048:	e00a      	b.n	8009060 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	b2da      	uxtb	r2, r3
 800904e:	4908      	ldr	r1, [pc, #32]	@ (8009070 <__NVIC_SetPriority+0x50>)
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	f003 030f 	and.w	r3, r3, #15
 8009056:	3b04      	subs	r3, #4
 8009058:	0112      	lsls	r2, r2, #4
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	440b      	add	r3, r1
 800905e:	761a      	strb	r2, [r3, #24]
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	e000e100 	.word	0xe000e100
 8009070:	e000ed00 	.word	0xe000ed00

08009074 <NVIC_EncodePriority>:
{
 8009074:	b480      	push	{r7}
 8009076:	b089      	sub	sp, #36	@ 0x24
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f1c3 0307 	rsb	r3, r3, #7
 800908e:	2b04      	cmp	r3, #4
 8009090:	bf28      	it	cs
 8009092:	2304      	movcs	r3, #4
 8009094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	3304      	adds	r3, #4
 800909a:	2b06      	cmp	r3, #6
 800909c:	d902      	bls.n	80090a4 <NVIC_EncodePriority+0x30>
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	3b03      	subs	r3, #3
 80090a2:	e000      	b.n	80090a6 <NVIC_EncodePriority+0x32>
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090a8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	fa02 f303 	lsl.w	r3, r2, r3
 80090b2:	43da      	mvns	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	401a      	ands	r2, r3
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090bc:	f04f 31ff 	mov.w	r1, #4294967295
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	fa01 f303 	lsl.w	r3, r1, r3
 80090c6:	43d9      	mvns	r1, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090cc:	4313      	orrs	r3, r2
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3724      	adds	r7, #36	@ 0x24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff ff28 	bl	8008f38 <__NVIC_SetPriorityGrouping>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80090fe:	f7ff ff3f 	bl	8008f80 <__NVIC_GetPriorityGrouping>
 8009102:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	6978      	ldr	r0, [r7, #20]
 800910a:	f7ff ffb3 	bl	8009074 <NVIC_EncodePriority>
 800910e:	4602      	mov	r2, r0
 8009110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7ff ff82 	bl	8009020 <__NVIC_SetPriority>
}
 800911c:	bf00      	nop
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800912e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff ff32 	bl	8008f9c <__NVIC_EnableIRQ>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800914a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff ff42 	bl	8008fd8 <__NVIC_DisableIRQ>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3b01      	subs	r3, #1
 8009168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800916c:	d301      	bcc.n	8009172 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800916e:	2301      	movs	r3, #1
 8009170:	e00d      	b.n	800918e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8009172:	4a0a      	ldr	r2, [pc, #40]	@ (800919c <HAL_SYSTICK_Config+0x40>)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3b01      	subs	r3, #1
 8009178:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800917a:	4b08      	ldr	r3, [pc, #32]	@ (800919c <HAL_SYSTICK_Config+0x40>)
 800917c:	2200      	movs	r2, #0
 800917e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8009180:	4b06      	ldr	r3, [pc, #24]	@ (800919c <HAL_SYSTICK_Config+0x40>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a05      	ldr	r2, [pc, #20]	@ (800919c <HAL_SYSTICK_Config+0x40>)
 8009186:	f043 0303 	orr.w	r3, r3, #3
 800918a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	e000e010 	.word	0xe000e010

080091a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d844      	bhi.n	8009238 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80091ae:	a201      	add	r2, pc, #4	@ (adr r2, 80091b4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091d7 	.word	0x080091d7
 80091b8:	080091f5 	.word	0x080091f5
 80091bc:	08009217 	.word	0x08009217
 80091c0:	08009239 	.word	0x08009239
 80091c4:	080091c9 	.word	0x080091c9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80091c8:	4b1f      	ldr	r3, [pc, #124]	@ (8009248 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009248 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80091ce:	f043 0304 	orr.w	r3, r3, #4
 80091d2:	6013      	str	r3, [r2, #0]
      break;
 80091d4:	e031      	b.n	800923a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80091d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009248 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a1b      	ldr	r2, [pc, #108]	@ (8009248 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80091dc:	f023 0304 	bic.w	r3, r3, #4
 80091e0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80091e2:	4b1a      	ldr	r3, [pc, #104]	@ (800924c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80091e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091e8:	4a18      	ldr	r2, [pc, #96]	@ (800924c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80091ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80091ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80091f2:	e022      	b.n	800923a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80091f4:	4b14      	ldr	r3, [pc, #80]	@ (8009248 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a13      	ldr	r2, [pc, #76]	@ (8009248 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80091fa:	f023 0304 	bic.w	r3, r3, #4
 80091fe:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8009200:	4b12      	ldr	r3, [pc, #72]	@ (800924c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8009202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009206:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800920a:	4a10      	ldr	r2, [pc, #64]	@ (800924c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800920c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8009214:	e011      	b.n	800923a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8009216:	4b0c      	ldr	r3, [pc, #48]	@ (8009248 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a0b      	ldr	r2, [pc, #44]	@ (8009248 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800921c:	f023 0304 	bic.w	r3, r3, #4
 8009220:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8009222:	4b0a      	ldr	r3, [pc, #40]	@ (800924c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8009224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009228:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800922c:	4a07      	ldr	r2, [pc, #28]	@ (800924c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800922e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8009236:	e000      	b.n	800923a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8009238:	bf00      	nop
  }
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	e000e010 	.word	0xe000e010
 800924c:	46020c00 	.word	0x46020c00

08009250 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8009256:	4b19      	ldr	r3, [pc, #100]	@ (80092bc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8009262:	2304      	movs	r3, #4
 8009264:	607b      	str	r3, [r7, #4]
 8009266:	e021      	b.n	80092ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8009268:	4b15      	ldr	r3, [pc, #84]	@ (80092c0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800926a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800926e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009272:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800927a:	d011      	beq.n	80092a0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009282:	d810      	bhi.n	80092a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009290:	d003      	beq.n	800929a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8009292:	e008      	b.n	80092a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8009294:	2300      	movs	r3, #0
 8009296:	607b      	str	r3, [r7, #4]
        break;
 8009298:	e008      	b.n	80092ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800929a:	2301      	movs	r3, #1
 800929c:	607b      	str	r3, [r7, #4]
        break;
 800929e:	e005      	b.n	80092ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80092a0:	2302      	movs	r3, #2
 80092a2:	607b      	str	r3, [r7, #4]
        break;
 80092a4:	e002      	b.n	80092ac <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80092a6:	2300      	movs	r3, #0
 80092a8:	607b      	str	r3, [r7, #4]
        break;
 80092aa:	bf00      	nop
    }
  }
  return systick_source;
 80092ac:	687b      	ldr	r3, [r7, #4]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	e000e010 	.word	0xe000e010
 80092c0:	46020c00 	.word	0x46020c00

080092c4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80092cc:	f7ff fe04 	bl	8008ed8 <HAL_GetTick>
 80092d0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e0f0      	b.n	80094be <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a79      	ldr	r2, [pc, #484]	@ (80094c8 <HAL_DMA_Init+0x204>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	f000 809f 	beq.w	8009426 <HAL_DMA_Init+0x162>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a77      	ldr	r2, [pc, #476]	@ (80094cc <HAL_DMA_Init+0x208>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	f000 8099 	beq.w	8009426 <HAL_DMA_Init+0x162>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a75      	ldr	r2, [pc, #468]	@ (80094d0 <HAL_DMA_Init+0x20c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	f000 8093 	beq.w	8009426 <HAL_DMA_Init+0x162>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a73      	ldr	r2, [pc, #460]	@ (80094d4 <HAL_DMA_Init+0x210>)
 8009306:	4293      	cmp	r3, r2
 8009308:	f000 808d 	beq.w	8009426 <HAL_DMA_Init+0x162>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a71      	ldr	r2, [pc, #452]	@ (80094d8 <HAL_DMA_Init+0x214>)
 8009312:	4293      	cmp	r3, r2
 8009314:	f000 8087 	beq.w	8009426 <HAL_DMA_Init+0x162>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a6f      	ldr	r2, [pc, #444]	@ (80094dc <HAL_DMA_Init+0x218>)
 800931e:	4293      	cmp	r3, r2
 8009320:	f000 8081 	beq.w	8009426 <HAL_DMA_Init+0x162>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a6d      	ldr	r2, [pc, #436]	@ (80094e0 <HAL_DMA_Init+0x21c>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d07b      	beq.n	8009426 <HAL_DMA_Init+0x162>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a6c      	ldr	r2, [pc, #432]	@ (80094e4 <HAL_DMA_Init+0x220>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d076      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a6a      	ldr	r2, [pc, #424]	@ (80094e8 <HAL_DMA_Init+0x224>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d071      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a69      	ldr	r2, [pc, #420]	@ (80094ec <HAL_DMA_Init+0x228>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d06c      	beq.n	8009426 <HAL_DMA_Init+0x162>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a67      	ldr	r2, [pc, #412]	@ (80094f0 <HAL_DMA_Init+0x22c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d067      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a66      	ldr	r2, [pc, #408]	@ (80094f4 <HAL_DMA_Init+0x230>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d062      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a64      	ldr	r2, [pc, #400]	@ (80094f8 <HAL_DMA_Init+0x234>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d05d      	beq.n	8009426 <HAL_DMA_Init+0x162>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a63      	ldr	r2, [pc, #396]	@ (80094fc <HAL_DMA_Init+0x238>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d058      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a61      	ldr	r2, [pc, #388]	@ (8009500 <HAL_DMA_Init+0x23c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d053      	beq.n	8009426 <HAL_DMA_Init+0x162>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a60      	ldr	r2, [pc, #384]	@ (8009504 <HAL_DMA_Init+0x240>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d04e      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a5e      	ldr	r2, [pc, #376]	@ (8009508 <HAL_DMA_Init+0x244>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d049      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a5d      	ldr	r2, [pc, #372]	@ (800950c <HAL_DMA_Init+0x248>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d044      	beq.n	8009426 <HAL_DMA_Init+0x162>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a5b      	ldr	r2, [pc, #364]	@ (8009510 <HAL_DMA_Init+0x24c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d03f      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a5a      	ldr	r2, [pc, #360]	@ (8009514 <HAL_DMA_Init+0x250>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d03a      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a58      	ldr	r2, [pc, #352]	@ (8009518 <HAL_DMA_Init+0x254>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d035      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a57      	ldr	r2, [pc, #348]	@ (800951c <HAL_DMA_Init+0x258>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d030      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a55      	ldr	r2, [pc, #340]	@ (8009520 <HAL_DMA_Init+0x25c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d02b      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a54      	ldr	r2, [pc, #336]	@ (8009524 <HAL_DMA_Init+0x260>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d026      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a52      	ldr	r2, [pc, #328]	@ (8009528 <HAL_DMA_Init+0x264>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d021      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a51      	ldr	r2, [pc, #324]	@ (800952c <HAL_DMA_Init+0x268>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d01c      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a4f      	ldr	r2, [pc, #316]	@ (8009530 <HAL_DMA_Init+0x26c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d017      	beq.n	8009426 <HAL_DMA_Init+0x162>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a4e      	ldr	r2, [pc, #312]	@ (8009534 <HAL_DMA_Init+0x270>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d012      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a4c      	ldr	r2, [pc, #304]	@ (8009538 <HAL_DMA_Init+0x274>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d00d      	beq.n	8009426 <HAL_DMA_Init+0x162>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a4b      	ldr	r2, [pc, #300]	@ (800953c <HAL_DMA_Init+0x278>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d008      	beq.n	8009426 <HAL_DMA_Init+0x162>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a49      	ldr	r2, [pc, #292]	@ (8009540 <HAL_DMA_Init+0x27c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d003      	beq.n	8009426 <HAL_DMA_Init+0x162>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a48      	ldr	r2, [pc, #288]	@ (8009544 <HAL_DMA_Init+0x280>)
 8009424:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10e      	bne.n	8009458 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0206 	orr.w	r2, r2, #6
 800946e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8009470:	e00f      	b.n	8009492 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8009472:	f7ff fd31 	bl	8008ed8 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b05      	cmp	r3, #5
 800947e:	d908      	bls.n	8009492 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2210      	movs	r2, #16
 8009484:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2203      	movs	r2, #3
 800948a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e015      	b.n	80094be <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e8      	bne.n	8009472 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 faff 	bl	8009aa4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	40020050 	.word	0x40020050
 80094cc:	50020050 	.word	0x50020050
 80094d0:	400200d0 	.word	0x400200d0
 80094d4:	500200d0 	.word	0x500200d0
 80094d8:	40020150 	.word	0x40020150
 80094dc:	50020150 	.word	0x50020150
 80094e0:	400201d0 	.word	0x400201d0
 80094e4:	500201d0 	.word	0x500201d0
 80094e8:	40020250 	.word	0x40020250
 80094ec:	50020250 	.word	0x50020250
 80094f0:	400202d0 	.word	0x400202d0
 80094f4:	500202d0 	.word	0x500202d0
 80094f8:	40020350 	.word	0x40020350
 80094fc:	50020350 	.word	0x50020350
 8009500:	400203d0 	.word	0x400203d0
 8009504:	500203d0 	.word	0x500203d0
 8009508:	40020450 	.word	0x40020450
 800950c:	50020450 	.word	0x50020450
 8009510:	400204d0 	.word	0x400204d0
 8009514:	500204d0 	.word	0x500204d0
 8009518:	40020550 	.word	0x40020550
 800951c:	50020550 	.word	0x50020550
 8009520:	400205d0 	.word	0x400205d0
 8009524:	500205d0 	.word	0x500205d0
 8009528:	40020650 	.word	0x40020650
 800952c:	50020650 	.word	0x50020650
 8009530:	400206d0 	.word	0x400206d0
 8009534:	500206d0 	.word	0x500206d0
 8009538:	40020750 	.word	0x40020750
 800953c:	50020750 	.word	0x50020750
 8009540:	400207d0 	.word	0x400207d0
 8009544:	500207d0 	.word	0x500207d0

08009548 <HAL_DMA_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *const hdma)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]

  DMA_TypeDef *p_dma_instance;

  uint32_t tickstart = HAL_GetTick();
 8009550:	f7ff fcc2 	bl	8008ed8 <HAL_GetTick>
 8009554:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_DMA_DeInit+0x18>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0b9      	b.n	80096d4 <HAL_DMA_DeInit+0x18c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009568:	f023 030f 	bic.w	r3, r3, #15
 800956c:	60bb      	str	r3, [r7, #8]

  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	695a      	ldr	r2, [r3, #20]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f042 0206 	orr.w	r2, r2, #6
 800957c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800957e:	e00f      	b.n	80095a0 <HAL_DMA_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8009580:	f7ff fcaa 	bl	8008ed8 <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	2b05      	cmp	r3, #5
 800958c:	d908      	bls.n	80095a0 <HAL_DMA_DeInit+0x58>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2210      	movs	r2, #16
 8009592:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2203      	movs	r2, #3
 8009598:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e099      	b.n	80096d4 <HAL_DMA_DeInit+0x18c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e8      	bne.n	8009580 <HAL_DMA_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CLBAR = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2200      	movs	r2, #0
 80095bc:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2200      	movs	r2, #0
 80095c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->Instance->CTR2  = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2200      	movs	r2, #0
 80095cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->Instance->CBR1  = 0U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2200      	movs	r2, #0
 80095d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->Instance->CSAR  = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2200      	movs	r2, #0
 80095dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->Instance->CDAR  = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2200      	movs	r2, #0
 80095e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->Instance->CLLR  = 0U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a3a      	ldr	r2, [pc, #232]	@ (80096dc <HAL_DMA_DeInit+0x194>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d022      	beq.n	800963e <HAL_DMA_DeInit+0xf6>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a38      	ldr	r2, [pc, #224]	@ (80096e0 <HAL_DMA_DeInit+0x198>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d01d      	beq.n	800963e <HAL_DMA_DeInit+0xf6>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a37      	ldr	r2, [pc, #220]	@ (80096e4 <HAL_DMA_DeInit+0x19c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d018      	beq.n	800963e <HAL_DMA_DeInit+0xf6>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a35      	ldr	r2, [pc, #212]	@ (80096e8 <HAL_DMA_DeInit+0x1a0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d013      	beq.n	800963e <HAL_DMA_DeInit+0xf6>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a34      	ldr	r2, [pc, #208]	@ (80096ec <HAL_DMA_DeInit+0x1a4>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00e      	beq.n	800963e <HAL_DMA_DeInit+0xf6>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a32      	ldr	r2, [pc, #200]	@ (80096f0 <HAL_DMA_DeInit+0x1a8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d009      	beq.n	800963e <HAL_DMA_DeInit+0xf6>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a31      	ldr	r2, [pc, #196]	@ (80096f4 <HAL_DMA_DeInit+0x1ac>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d004      	beq.n	800963e <HAL_DMA_DeInit+0xf6>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a2f      	ldr	r2, [pc, #188]	@ (80096f8 <HAL_DMA_DeInit+0x1b0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d101      	bne.n	8009642 <HAL_DMA_DeInit+0xfa>
 800963e:	2301      	movs	r3, #1
 8009640:	e000      	b.n	8009644 <HAL_DMA_DeInit+0xfc>
 8009642:	2300      	movs	r3, #0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d007      	beq.n	8009658 <HAL_DMA_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2200      	movs	r2, #0
 800964e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->Instance->CBR2 = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2200      	movs	r2, #0
 8009656:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009664:	3b50      	subs	r3, #80	@ 0x50
 8009666:	09db      	lsrs	r3, r3, #7
 8009668:	f003 031f 	and.w	r3, r3, #31
 800966c:	2101      	movs	r1, #1
 800966e:	fa01 f303 	lsl.w	r3, r1, r3
 8009672:	43db      	mvns	r3, r3
 8009674:	401a      	ands	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8009682:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	661a      	str	r2, [r3, #96]	@ 0x60
  hdma->XferHalfCpltCallback = NULL;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	665a      	str	r2, [r3, #100]	@ 0x64
  hdma->XferErrorCallback    = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	669a      	str	r2, [r3, #104]	@ 0x68
  hdma->XferAbortCallback    = NULL;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hdma->XferSuspendCallback  = NULL;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Clean DMA queue */
  hdma->LinkedListQueue = NULL;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <HAL_DMA_DeInit+0x16e>
  {
    hdma->Parent = NULL;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	40020650 	.word	0x40020650
 80096e0:	50020650 	.word	0x50020650
 80096e4:	400206d0 	.word	0x400206d0
 80096e8:	500206d0 	.word	0x500206d0
 80096ec:	40020750 	.word	0x40020750
 80096f0:	50020750 	.word	0x50020750
 80096f4:	400207d0 	.word	0x400207d0
 80096f8:	500207d0 	.word	0x500207d0

080096fc <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e019      	b.n	8009742 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b02      	cmp	r3, #2
 8009718:	d004      	beq.n	8009724 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2220      	movs	r2, #32
 800971e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e00e      	b.n	8009742 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2204      	movs	r2, #4
 8009728:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6812      	ldr	r2, [r2, #0]
 8009736:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800973a:	f043 0304 	orr.w	r3, r3, #4
 800973e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b086      	sub	sp, #24
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800975e:	f023 030f 	bic.w	r3, r3, #15
 8009762:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800976c:	3b50      	subs	r3, #80	@ 0x50
 800976e:	09db      	lsrs	r3, r3, #7
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	2201      	movs	r2, #1
 8009776:	fa02 f303 	lsl.w	r3, r2, r3
 800977a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	4013      	ands	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 813b 	beq.w	8009a04 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009798:	2b00      	cmp	r3, #0
 800979a:	d011      	beq.n	80097c0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80097b2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b8:	f043 0201 	orr.w	r2, r3, #1
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d011      	beq.n	80097f2 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097e4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ea:	f043 0202 	orr.w	r2, r3, #2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d011      	beq.n	8009824 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00a      	beq.n	8009824 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009816:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981c:	f043 0204 	orr.w	r2, r3, #4
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d011      	beq.n	8009856 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00a      	beq.n	8009856 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009848:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800984e:	f043 0208 	orr.w	r2, r3, #8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009860:	2b00      	cmp	r3, #0
 8009862:	d013      	beq.n	800988c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00c      	beq.n	800988c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800987a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d04c      	beq.n	8009934 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d045      	beq.n	8009934 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80098b0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d12e      	bne.n	800991c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	695a      	ldr	r2, [r3, #20]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098cc:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695a      	ldr	r2, [r3, #20]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f042 0202 	orr.w	r2, r2, #2
 80098dc:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098f6:	2201      	movs	r2, #1
 80098f8:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2200      	movs	r2, #0
 8009900:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800990e:	2b00      	cmp	r3, #0
 8009910:	d07a      	beq.n	8009a08 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
        }

        return;
 800991a:	e075      	b.n	8009a08 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2205      	movs	r2, #5
 8009920:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800993e:	2b00      	cmp	r3, #0
 8009940:	d039      	beq.n	80099b6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800994c:	2b00      	cmp	r3, #0
 800994e:	d032      	beq.n	80099b6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009958:	2b00      	cmp	r3, #0
 800995a:	d012      	beq.n	8009982 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d116      	bne.n	8009994 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800996c:	2b00      	cmp	r3, #0
 800996e:	d111      	bne.n	8009994 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800997c:	2201      	movs	r2, #1
 800997e:	731a      	strb	r2, [r3, #12]
 8009980:	e008      	b.n	8009994 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009988:	2b00      	cmp	r3, #0
 800998a:	d103      	bne.n	8009994 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800999c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d025      	beq.n	8009a0a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	695a      	ldr	r2, [r3, #20]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f042 0202 	orr.w	r2, r2, #2
 80099cc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099e6:	2201      	movs	r2, #1
 80099e8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d007      	beq.n	8009a0a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
 8009a02:	e002      	b.n	8009a0a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8009a04:	bf00      	nop
 8009a06:	e000      	b.n	8009a0a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8009a08:	bf00      	nop
    }
  }
}
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009a1e:	b2db      	uxtb	r3, r3
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e02b      	b.n	8009a98 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009a48:	f023 030f 	bic.w	r3, r3, #15
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a56:	3b50      	subs	r3, #80	@ 0x50
 8009a58:	09db      	lsrs	r3, r3, #7
 8009a5a:	f003 031f 	and.w	r3, r3, #31
 8009a5e:	2201      	movs	r2, #1
 8009a60:	fa02 f303 	lsl.w	r3, r2, r3
 8009a64:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	f003 0310 	and.w	r3, r3, #16
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d012      	beq.n	8009a96 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	f003 0311 	and.w	r3, r3, #17
 8009a76:	2b11      	cmp	r3, #17
 8009a78:	d106      	bne.n	8009a88 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	431a      	orrs	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	605a      	str	r2, [r3, #4]
 8009a86:	e006      	b.n	8009a96 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	43db      	mvns	r3, r3
 8009a90:	401a      	ands	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a1b      	ldr	r3, [r3, #32]
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695a      	ldr	r2, [r3, #20]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	431a      	orrs	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a53      	ldr	r2, [pc, #332]	@ (8009c30 <DMA_Init+0x18c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	f000 80a0 	beq.w	8009c2a <DMA_Init+0x186>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a51      	ldr	r2, [pc, #324]	@ (8009c34 <DMA_Init+0x190>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	f000 809a 	beq.w	8009c2a <DMA_Init+0x186>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a4f      	ldr	r2, [pc, #316]	@ (8009c38 <DMA_Init+0x194>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	f000 8094 	beq.w	8009c2a <DMA_Init+0x186>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a4d      	ldr	r2, [pc, #308]	@ (8009c3c <DMA_Init+0x198>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	f000 808e 	beq.w	8009c2a <DMA_Init+0x186>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a4b      	ldr	r2, [pc, #300]	@ (8009c40 <DMA_Init+0x19c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	f000 8088 	beq.w	8009c2a <DMA_Init+0x186>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a49      	ldr	r2, [pc, #292]	@ (8009c44 <DMA_Init+0x1a0>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	f000 8082 	beq.w	8009c2a <DMA_Init+0x186>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a47      	ldr	r2, [pc, #284]	@ (8009c48 <DMA_Init+0x1a4>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d07c      	beq.n	8009c2a <DMA_Init+0x186>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a45      	ldr	r2, [pc, #276]	@ (8009c4c <DMA_Init+0x1a8>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d077      	beq.n	8009c2a <DMA_Init+0x186>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a44      	ldr	r2, [pc, #272]	@ (8009c50 <DMA_Init+0x1ac>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d072      	beq.n	8009c2a <DMA_Init+0x186>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a42      	ldr	r2, [pc, #264]	@ (8009c54 <DMA_Init+0x1b0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d06d      	beq.n	8009c2a <DMA_Init+0x186>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a41      	ldr	r2, [pc, #260]	@ (8009c58 <DMA_Init+0x1b4>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d068      	beq.n	8009c2a <DMA_Init+0x186>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c5c <DMA_Init+0x1b8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d063      	beq.n	8009c2a <DMA_Init+0x186>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a3e      	ldr	r2, [pc, #248]	@ (8009c60 <DMA_Init+0x1bc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d05e      	beq.n	8009c2a <DMA_Init+0x186>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a3c      	ldr	r2, [pc, #240]	@ (8009c64 <DMA_Init+0x1c0>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d059      	beq.n	8009c2a <DMA_Init+0x186>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8009c68 <DMA_Init+0x1c4>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d054      	beq.n	8009c2a <DMA_Init+0x186>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a39      	ldr	r2, [pc, #228]	@ (8009c6c <DMA_Init+0x1c8>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d04f      	beq.n	8009c2a <DMA_Init+0x186>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a38      	ldr	r2, [pc, #224]	@ (8009c70 <DMA_Init+0x1cc>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d04a      	beq.n	8009c2a <DMA_Init+0x186>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a36      	ldr	r2, [pc, #216]	@ (8009c74 <DMA_Init+0x1d0>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d045      	beq.n	8009c2a <DMA_Init+0x186>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a35      	ldr	r2, [pc, #212]	@ (8009c78 <DMA_Init+0x1d4>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d040      	beq.n	8009c2a <DMA_Init+0x186>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a33      	ldr	r2, [pc, #204]	@ (8009c7c <DMA_Init+0x1d8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d03b      	beq.n	8009c2a <DMA_Init+0x186>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a32      	ldr	r2, [pc, #200]	@ (8009c80 <DMA_Init+0x1dc>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d036      	beq.n	8009c2a <DMA_Init+0x186>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a30      	ldr	r2, [pc, #192]	@ (8009c84 <DMA_Init+0x1e0>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d031      	beq.n	8009c2a <DMA_Init+0x186>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a2f      	ldr	r2, [pc, #188]	@ (8009c88 <DMA_Init+0x1e4>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d02c      	beq.n	8009c2a <DMA_Init+0x186>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8009c8c <DMA_Init+0x1e8>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d027      	beq.n	8009c2a <DMA_Init+0x186>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a2c      	ldr	r2, [pc, #176]	@ (8009c90 <DMA_Init+0x1ec>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d022      	beq.n	8009c2a <DMA_Init+0x186>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a2a      	ldr	r2, [pc, #168]	@ (8009c94 <DMA_Init+0x1f0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d01d      	beq.n	8009c2a <DMA_Init+0x186>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a29      	ldr	r2, [pc, #164]	@ (8009c98 <DMA_Init+0x1f4>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d018      	beq.n	8009c2a <DMA_Init+0x186>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a27      	ldr	r2, [pc, #156]	@ (8009c9c <DMA_Init+0x1f8>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d013      	beq.n	8009c2a <DMA_Init+0x186>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a26      	ldr	r2, [pc, #152]	@ (8009ca0 <DMA_Init+0x1fc>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00e      	beq.n	8009c2a <DMA_Init+0x186>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a24      	ldr	r2, [pc, #144]	@ (8009ca4 <DMA_Init+0x200>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d009      	beq.n	8009c2a <DMA_Init+0x186>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a23      	ldr	r2, [pc, #140]	@ (8009ca8 <DMA_Init+0x204>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d004      	beq.n	8009c2a <DMA_Init+0x186>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a21      	ldr	r2, [pc, #132]	@ (8009cac <DMA_Init+0x208>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d142      	bne.n	8009cb0 <DMA_Init+0x20c>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e041      	b.n	8009cb2 <DMA_Init+0x20e>
 8009c2e:	bf00      	nop
 8009c30:	40020050 	.word	0x40020050
 8009c34:	50020050 	.word	0x50020050
 8009c38:	400200d0 	.word	0x400200d0
 8009c3c:	500200d0 	.word	0x500200d0
 8009c40:	40020150 	.word	0x40020150
 8009c44:	50020150 	.word	0x50020150
 8009c48:	400201d0 	.word	0x400201d0
 8009c4c:	500201d0 	.word	0x500201d0
 8009c50:	40020250 	.word	0x40020250
 8009c54:	50020250 	.word	0x50020250
 8009c58:	400202d0 	.word	0x400202d0
 8009c5c:	500202d0 	.word	0x500202d0
 8009c60:	40020350 	.word	0x40020350
 8009c64:	50020350 	.word	0x50020350
 8009c68:	400203d0 	.word	0x400203d0
 8009c6c:	500203d0 	.word	0x500203d0
 8009c70:	40020450 	.word	0x40020450
 8009c74:	50020450 	.word	0x50020450
 8009c78:	400204d0 	.word	0x400204d0
 8009c7c:	500204d0 	.word	0x500204d0
 8009c80:	40020550 	.word	0x40020550
 8009c84:	50020550 	.word	0x50020550
 8009c88:	400205d0 	.word	0x400205d0
 8009c8c:	500205d0 	.word	0x500205d0
 8009c90:	40020650 	.word	0x40020650
 8009c94:	50020650 	.word	0x50020650
 8009c98:	400206d0 	.word	0x400206d0
 8009c9c:	500206d0 	.word	0x500206d0
 8009ca0:	40020750 	.word	0x40020750
 8009ca4:	50020750 	.word	0x50020750
 8009ca8:	400207d0 	.word	0x400207d0
 8009cac:	500207d0 	.word	0x500207d0
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d012      	beq.n	8009cdc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	051b      	lsls	r3, r3, #20
 8009cc2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8009cc6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8009cd4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce2:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	430a      	orrs	r2, r1
 8009cee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d0e:	f040 80b0 	bne.w	8009e72 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a82      	ldr	r2, [pc, #520]	@ (8009f20 <DMA_Init+0x47c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	f000 80a0 	beq.w	8009e5e <DMA_Init+0x3ba>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a80      	ldr	r2, [pc, #512]	@ (8009f24 <DMA_Init+0x480>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	f000 809a 	beq.w	8009e5e <DMA_Init+0x3ba>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8009f28 <DMA_Init+0x484>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	f000 8094 	beq.w	8009e5e <DMA_Init+0x3ba>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a7c      	ldr	r2, [pc, #496]	@ (8009f2c <DMA_Init+0x488>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	f000 808e 	beq.w	8009e5e <DMA_Init+0x3ba>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a7a      	ldr	r2, [pc, #488]	@ (8009f30 <DMA_Init+0x48c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	f000 8088 	beq.w	8009e5e <DMA_Init+0x3ba>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a78      	ldr	r2, [pc, #480]	@ (8009f34 <DMA_Init+0x490>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	f000 8082 	beq.w	8009e5e <DMA_Init+0x3ba>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a76      	ldr	r2, [pc, #472]	@ (8009f38 <DMA_Init+0x494>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d07c      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a74      	ldr	r2, [pc, #464]	@ (8009f3c <DMA_Init+0x498>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d077      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a73      	ldr	r2, [pc, #460]	@ (8009f40 <DMA_Init+0x49c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d072      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a71      	ldr	r2, [pc, #452]	@ (8009f44 <DMA_Init+0x4a0>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d06d      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a70      	ldr	r2, [pc, #448]	@ (8009f48 <DMA_Init+0x4a4>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d068      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a6e      	ldr	r2, [pc, #440]	@ (8009f4c <DMA_Init+0x4a8>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d063      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a6d      	ldr	r2, [pc, #436]	@ (8009f50 <DMA_Init+0x4ac>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d05e      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a6b      	ldr	r2, [pc, #428]	@ (8009f54 <DMA_Init+0x4b0>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d059      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a6a      	ldr	r2, [pc, #424]	@ (8009f58 <DMA_Init+0x4b4>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d054      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a68      	ldr	r2, [pc, #416]	@ (8009f5c <DMA_Init+0x4b8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d04f      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a67      	ldr	r2, [pc, #412]	@ (8009f60 <DMA_Init+0x4bc>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d04a      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a65      	ldr	r2, [pc, #404]	@ (8009f64 <DMA_Init+0x4c0>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d045      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a64      	ldr	r2, [pc, #400]	@ (8009f68 <DMA_Init+0x4c4>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d040      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a62      	ldr	r2, [pc, #392]	@ (8009f6c <DMA_Init+0x4c8>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d03b      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a61      	ldr	r2, [pc, #388]	@ (8009f70 <DMA_Init+0x4cc>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d036      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a5f      	ldr	r2, [pc, #380]	@ (8009f74 <DMA_Init+0x4d0>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d031      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8009f78 <DMA_Init+0x4d4>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d02c      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a5c      	ldr	r2, [pc, #368]	@ (8009f7c <DMA_Init+0x4d8>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d027      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a5b      	ldr	r2, [pc, #364]	@ (8009f80 <DMA_Init+0x4dc>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d022      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a59      	ldr	r2, [pc, #356]	@ (8009f84 <DMA_Init+0x4e0>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d01d      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a58      	ldr	r2, [pc, #352]	@ (8009f88 <DMA_Init+0x4e4>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d018      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a56      	ldr	r2, [pc, #344]	@ (8009f8c <DMA_Init+0x4e8>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d013      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a55      	ldr	r2, [pc, #340]	@ (8009f90 <DMA_Init+0x4ec>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d00e      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a53      	ldr	r2, [pc, #332]	@ (8009f94 <DMA_Init+0x4f0>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d009      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a52      	ldr	r2, [pc, #328]	@ (8009f98 <DMA_Init+0x4f4>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d004      	beq.n	8009e5e <DMA_Init+0x3ba>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a50      	ldr	r2, [pc, #320]	@ (8009f9c <DMA_Init+0x4f8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d101      	bne.n	8009e62 <DMA_Init+0x3be>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e000      	b.n	8009e64 <DMA_Init+0x3c0>
 8009e62:	2300      	movs	r3, #0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00d      	beq.n	8009e84 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	e008      	b.n	8009e84 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e7a:	d103      	bne.n	8009e84 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e82:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e8a:	4b45      	ldr	r3, [pc, #276]	@ (8009fa0 <DMA_Init+0x4fc>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	68f9      	ldr	r1, [r7, #12]
 8009e94:	430b      	orrs	r3, r1
 8009e96:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a36      	ldr	r2, [pc, #216]	@ (8009f80 <DMA_Init+0x4dc>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d022      	beq.n	8009ef0 <DMA_Init+0x44c>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a35      	ldr	r2, [pc, #212]	@ (8009f84 <DMA_Init+0x4e0>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d01d      	beq.n	8009ef0 <DMA_Init+0x44c>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a33      	ldr	r2, [pc, #204]	@ (8009f88 <DMA_Init+0x4e4>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d018      	beq.n	8009ef0 <DMA_Init+0x44c>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a32      	ldr	r2, [pc, #200]	@ (8009f8c <DMA_Init+0x4e8>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d013      	beq.n	8009ef0 <DMA_Init+0x44c>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a30      	ldr	r2, [pc, #192]	@ (8009f90 <DMA_Init+0x4ec>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d00e      	beq.n	8009ef0 <DMA_Init+0x44c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8009f94 <DMA_Init+0x4f0>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d009      	beq.n	8009ef0 <DMA_Init+0x44c>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8009f98 <DMA_Init+0x4f4>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d004      	beq.n	8009ef0 <DMA_Init+0x44c>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a2c      	ldr	r2, [pc, #176]	@ (8009f9c <DMA_Init+0x4f8>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d101      	bne.n	8009ef4 <DMA_Init+0x450>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <DMA_Init+0x452>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d007      	beq.n	8009f0a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2200      	movs	r2, #0
 8009f00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2200      	movs	r2, #0
 8009f08:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	40020050 	.word	0x40020050
 8009f24:	50020050 	.word	0x50020050
 8009f28:	400200d0 	.word	0x400200d0
 8009f2c:	500200d0 	.word	0x500200d0
 8009f30:	40020150 	.word	0x40020150
 8009f34:	50020150 	.word	0x50020150
 8009f38:	400201d0 	.word	0x400201d0
 8009f3c:	500201d0 	.word	0x500201d0
 8009f40:	40020250 	.word	0x40020250
 8009f44:	50020250 	.word	0x50020250
 8009f48:	400202d0 	.word	0x400202d0
 8009f4c:	500202d0 	.word	0x500202d0
 8009f50:	40020350 	.word	0x40020350
 8009f54:	50020350 	.word	0x50020350
 8009f58:	400203d0 	.word	0x400203d0
 8009f5c:	500203d0 	.word	0x500203d0
 8009f60:	40020450 	.word	0x40020450
 8009f64:	50020450 	.word	0x50020450
 8009f68:	400204d0 	.word	0x400204d0
 8009f6c:	500204d0 	.word	0x500204d0
 8009f70:	40020550 	.word	0x40020550
 8009f74:	50020550 	.word	0x50020550
 8009f78:	400205d0 	.word	0x400205d0
 8009f7c:	500205d0 	.word	0x500205d0
 8009f80:	40020650 	.word	0x40020650
 8009f84:	50020650 	.word	0x50020650
 8009f88:	400206d0 	.word	0x400206d0
 8009f8c:	500206d0 	.word	0x500206d0
 8009f90:	40020750 	.word	0x40020750
 8009f94:	50020750 	.word	0x50020750
 8009f98:	400207d0 	.word	0x400207d0
 8009f9c:	500207d0 	.word	0x500207d0
 8009fa0:	3cc03180 	.word	0x3cc03180

08009fa4 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	0c1b      	lsrs	r3, r3, #16
 8009fb4:	b2db      	uxtb	r3, r3
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b087      	sub	sp, #28
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	607a      	str	r2, [r7, #4]
 8009fce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d011      	beq.n	8009ffe <HAL_EXTI_RegisterCallback+0x3c>
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	dc13      	bgt.n	800a006 <HAL_EXTI_RegisterCallback+0x44>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <HAL_EXTI_RegisterCallback+0x26>
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d007      	beq.n	8009ff6 <HAL_EXTI_RegisterCallback+0x34>
 8009fe6:	e00e      	b.n	800a006 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	609a      	str	r2, [r3, #8]
      break;
 8009ff4:	e00a      	b.n	800a00c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	605a      	str	r2, [r3, #4]
      break;
 8009ffc:	e006      	b.n	800a00c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	609a      	str	r2, [r3, #8]
      break;
 800a004:	e002      	b.n	800a00c <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	75fb      	strb	r3, [r7, #23]
      break;
 800a00a:	bf00      	nop
  }

  return status;
 800a00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e003      	b.n	800a036 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a034:	2300      	movs	r3, #0
  }
}
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
	...

0800a044 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800a044:	b480      	push	{r7}
 800a046:	b089      	sub	sp, #36	@ 0x24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a056:	e1c2      	b.n	800a3de <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	2101      	movs	r1, #1
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	fa01 f303 	lsl.w	r3, r1, r3
 800a064:	4013      	ands	r3, r2
 800a066:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 81b2 	beq.w	800a3d8 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a55      	ldr	r2, [pc, #340]	@ (800a1cc <HAL_GPIO_Init+0x188>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d15d      	bne.n	800a138 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800a082:	2201      	movs	r2, #1
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	43db      	mvns	r3, r3
 800a08c:	69fa      	ldr	r2, [r7, #28]
 800a08e:	4013      	ands	r3, r2
 800a090:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f003 0201 	and.w	r2, r3, #1
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a0ac:	4a48      	ldr	r2, [pc, #288]	@ (800a1d0 <HAL_GPIO_Init+0x18c>)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0b4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a0b6:	4a46      	ldr	r2, [pc, #280]	@ (800a1d0 <HAL_GPIO_Init+0x18c>)
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	4413      	add	r3, r2
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	08da      	lsrs	r2, r3, #3
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	3208      	adds	r2, #8
 800a0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	220f      	movs	r2, #15
 800a0da:	fa02 f303 	lsl.w	r3, r2, r3
 800a0de:	43db      	mvns	r3, r3
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	220b      	movs	r2, #11
 800a0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f4:	69fa      	ldr	r2, [r7, #28]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	08da      	lsrs	r2, r3, #3
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	3208      	adds	r2, #8
 800a102:	69f9      	ldr	r1, [r7, #28]
 800a104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	2203      	movs	r2, #3
 800a114:	fa02 f303 	lsl.w	r3, r2, r3
 800a118:	43db      	mvns	r3, r3
 800a11a:	69fa      	ldr	r2, [r7, #28]
 800a11c:	4013      	ands	r3, r2
 800a11e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	2202      	movs	r2, #2
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	69fa      	ldr	r2, [r7, #28]
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	e067      	b.n	800a208 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d003      	beq.n	800a148 <HAL_GPIO_Init+0x104>
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2b12      	cmp	r3, #18
 800a146:	d145      	bne.n	800a1d4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	08da      	lsrs	r2, r3, #3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3208      	adds	r2, #8
 800a150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a154:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f003 0307 	and.w	r3, r3, #7
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	220f      	movs	r2, #15
 800a160:	fa02 f303 	lsl.w	r3, r2, r3
 800a164:	43db      	mvns	r3, r3
 800a166:	69fa      	ldr	r2, [r7, #28]
 800a168:	4013      	ands	r3, r2
 800a16a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	f003 020f 	and.w	r2, r3, #15
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	fa02 f303 	lsl.w	r3, r2, r3
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	4313      	orrs	r3, r2
 800a184:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	08da      	lsrs	r2, r3, #3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3208      	adds	r2, #8
 800a18e:	69f9      	ldr	r1, [r7, #28]
 800a190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	2203      	movs	r2, #3
 800a1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a4:	43db      	mvns	r3, r3
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f003 0203 	and.w	r2, r3, #3
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	e01e      	b.n	800a208 <HAL_GPIO_Init+0x1c4>
 800a1ca:	bf00      	nop
 800a1cc:	46020000 	.word	0x46020000
 800a1d0:	08015930 	.word	0x08015930
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	2203      	movs	r2, #3
 800a1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e4:	43db      	mvns	r3, r3
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f003 0203 	and.w	r2, r3, #3
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fc:	69fa      	ldr	r2, [r7, #28]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d00b      	beq.n	800a228 <HAL_GPIO_Init+0x1e4>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d007      	beq.n	800a228 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a21c:	2b11      	cmp	r3, #17
 800a21e:	d003      	beq.n	800a228 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	2b12      	cmp	r3, #18
 800a226:	d130      	bne.n	800a28a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	2203      	movs	r2, #3
 800a234:	fa02 f303 	lsl.w	r3, r2, r3
 800a238:	43db      	mvns	r3, r3
 800a23a:	69fa      	ldr	r2, [r7, #28]
 800a23c:	4013      	ands	r3, r2
 800a23e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	005b      	lsls	r3, r3, #1
 800a248:	fa02 f303 	lsl.w	r3, r2, r3
 800a24c:	69fa      	ldr	r2, [r7, #28]
 800a24e:	4313      	orrs	r3, r2
 800a250:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a25e:	2201      	movs	r2, #1
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	fa02 f303 	lsl.w	r3, r2, r3
 800a266:	43db      	mvns	r3, r3
 800a268:	69fa      	ldr	r2, [r7, #28]
 800a26a:	4013      	ands	r3, r2
 800a26c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	091b      	lsrs	r3, r3, #4
 800a274:	f003 0201 	and.w	r2, r3, #1
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	fa02 f303 	lsl.w	r3, r2, r3
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	4313      	orrs	r3, r2
 800a282:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	69fa      	ldr	r2, [r7, #28]
 800a288:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d107      	bne.n	800a2a2 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800a296:	2b03      	cmp	r3, #3
 800a298:	d11b      	bne.n	800a2d2 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d017      	beq.n	800a2d2 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	2203      	movs	r2, #3
 800a2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b2:	43db      	mvns	r3, r3
 800a2b4:	69fa      	ldr	r2, [r7, #28]
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	69fa      	ldr	r2, [r7, #28]
 800a2d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d07c      	beq.n	800a3d8 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a2de:	4a47      	ldr	r2, [pc, #284]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	089b      	lsrs	r3, r3, #2
 800a2e4:	3318      	adds	r3, #24
 800a2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	220f      	movs	r2, #15
 800a2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fa:	43db      	mvns	r3, r3
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	4013      	ands	r3, r2
 800a300:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	0a9a      	lsrs	r2, r3, #10
 800a306:	4b3e      	ldr	r3, [pc, #248]	@ (800a400 <HAL_GPIO_Init+0x3bc>)
 800a308:	4013      	ands	r3, r2
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	f002 0203 	and.w	r2, r2, #3
 800a310:	00d2      	lsls	r2, r2, #3
 800a312:	4093      	lsls	r3, r2
 800a314:	69fa      	ldr	r2, [r7, #28]
 800a316:	4313      	orrs	r3, r2
 800a318:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a31a:	4938      	ldr	r1, [pc, #224]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	089b      	lsrs	r3, r3, #2
 800a320:	3318      	adds	r3, #24
 800a322:	69fa      	ldr	r2, [r7, #28]
 800a324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a328:	4b34      	ldr	r3, [pc, #208]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	43db      	mvns	r3, r3
 800a332:	69fa      	ldr	r2, [r7, #28]
 800a334:	4013      	ands	r3, r2
 800a336:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	4313      	orrs	r3, r2
 800a34a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a34c:	4a2b      	ldr	r2, [pc, #172]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a352:	4b2a      	ldr	r3, [pc, #168]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	43db      	mvns	r3, r3
 800a35c:	69fa      	ldr	r2, [r7, #28]
 800a35e:	4013      	ands	r3, r2
 800a360:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 800a36e:	69fa      	ldr	r2, [r7, #28]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4313      	orrs	r3, r2
 800a374:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a376:	4a21      	ldr	r2, [pc, #132]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a37c:	4b1f      	ldr	r3, [pc, #124]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a382:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	43db      	mvns	r3, r3
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	4013      	ands	r3, r2
 800a38c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 800a39a:	69fa      	ldr	r2, [r7, #28]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a3a2:	4a16      	ldr	r2, [pc, #88]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800a3aa:	4b14      	ldr	r3, [pc, #80]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	43db      	mvns	r3, r3
 800a3b6:	69fa      	ldr	r2, [r7, #28]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 800a3c8:	69fa      	ldr	r2, [r7, #28]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a3d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a3fc <HAL_GPIO_Init+0x3b8>)
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f47f ae35 	bne.w	800a058 <HAL_GPIO_Init+0x14>
  }
}
 800a3ee:	bf00      	nop
 800a3f0:	bf00      	nop
 800a3f2:	3724      	adds	r7, #36	@ 0x24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	46022000 	.word	0x46022000
 800a400:	002f7f7f 	.word	0x002f7f7f

0800a404 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a404:	b480      	push	{r7}
 800a406:	b089      	sub	sp, #36	@ 0x24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a416:	e0bc      	b.n	800a592 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a418:	2201      	movs	r2, #1
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	fa02 f303 	lsl.w	r3, r2, r3
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	4013      	ands	r3, r2
 800a424:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 80ad 	beq.w	800a58c <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a5e      	ldr	r2, [pc, #376]	@ (800a5b0 <HAL_GPIO_DeInit+0x1ac>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d115      	bne.n	800a466 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800a43a:	4a5e      	ldr	r2, [pc, #376]	@ (800a5b4 <HAL_GPIO_DeInit+0x1b0>)
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a442:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a444:	4a5b      	ldr	r2, [pc, #364]	@ (800a5b4 <HAL_GPIO_DeInit+0x1b0>)
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	4413      	add	r3, r2
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800a450:	4b57      	ldr	r3, [pc, #348]	@ (800a5b0 <HAL_GPIO_DeInit+0x1ac>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	2101      	movs	r1, #1
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	fa01 f303 	lsl.w	r3, r1, r3
 800a45c:	43db      	mvns	r3, r3
 800a45e:	4954      	ldr	r1, [pc, #336]	@ (800a5b0 <HAL_GPIO_DeInit+0x1ac>)
 800a460:	4013      	ands	r3, r2
 800a462:	600b      	str	r3, [r1, #0]
 800a464:	e053      	b.n	800a50e <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800a466:	4a54      	ldr	r2, [pc, #336]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	089b      	lsrs	r3, r3, #2
 800a46c:	3318      	adds	r3, #24
 800a46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a472:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	220f      	movs	r2, #15
 800a47e:	fa02 f303 	lsl.w	r3, r2, r3
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	4013      	ands	r3, r2
 800a486:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	0a9a      	lsrs	r2, r3, #10
 800a48c:	4b4b      	ldr	r3, [pc, #300]	@ (800a5bc <HAL_GPIO_DeInit+0x1b8>)
 800a48e:	4013      	ands	r3, r2
 800a490:	69ba      	ldr	r2, [r7, #24]
 800a492:	f002 0203 	and.w	r2, r2, #3
 800a496:	00d2      	lsls	r2, r2, #3
 800a498:	4093      	lsls	r3, r2
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d136      	bne.n	800a50e <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800a4a0:	4b45      	ldr	r3, [pc, #276]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	43db      	mvns	r3, r3
 800a4aa:	4943      	ldr	r1, [pc, #268]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800a4b2:	4b41      	ldr	r3, [pc, #260]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4b4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	43db      	mvns	r3, r3
 800a4bc:	493e      	ldr	r1, [pc, #248]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4be:	4013      	ands	r3, r2
 800a4c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800a4c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	43db      	mvns	r3, r3
 800a4cc:	493a      	ldr	r1, [pc, #232]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800a4d2:	4b39      	ldr	r3, [pc, #228]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	43db      	mvns	r3, r3
 800a4da:	4937      	ldr	r1, [pc, #220]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	f003 0303 	and.w	r3, r3, #3
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	220f      	movs	r2, #15
 800a4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ee:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800a4f0:	4a31      	ldr	r2, [pc, #196]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	089b      	lsrs	r3, r3, #2
 800a4f6:	3318      	adds	r3, #24
 800a4f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	43da      	mvns	r2, r3
 800a500:	482d      	ldr	r0, [pc, #180]	@ (800a5b8 <HAL_GPIO_DeInit+0x1b4>)
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	089b      	lsrs	r3, r3, #2
 800a506:	400a      	ands	r2, r1
 800a508:	3318      	adds	r3, #24
 800a50a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	2103      	movs	r1, #3
 800a518:	fa01 f303 	lsl.w	r3, r1, r3
 800a51c:	431a      	orrs	r2, r3
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	08da      	lsrs	r2, r3, #3
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	3208      	adds	r2, #8
 800a52a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	f003 0307 	and.w	r3, r3, #7
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	220f      	movs	r2, #15
 800a538:	fa02 f303 	lsl.w	r3, r2, r3
 800a53c:	43db      	mvns	r3, r3
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	08d2      	lsrs	r2, r2, #3
 800a542:	4019      	ands	r1, r3
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	3208      	adds	r2, #8
 800a548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	689a      	ldr	r2, [r3, #8]
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	2103      	movs	r1, #3
 800a556:	fa01 f303 	lsl.w	r3, r1, r3
 800a55a:	43db      	mvns	r3, r3
 800a55c:	401a      	ands	r2, r3
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	2101      	movs	r1, #1
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	fa01 f303 	lsl.w	r3, r1, r3
 800a56e:	43db      	mvns	r3, r3
 800a570:	401a      	ands	r2, r3
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	2103      	movs	r1, #3
 800a580:	fa01 f303 	lsl.w	r3, r1, r3
 800a584:	43db      	mvns	r3, r3
 800a586:	401a      	ands	r2, r3
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	3301      	adds	r3, #1
 800a590:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	fa22 f303 	lsr.w	r3, r2, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f47f af3c 	bne.w	800a418 <HAL_GPIO_DeInit+0x14>
  }
}
 800a5a0:	bf00      	nop
 800a5a2:	bf00      	nop
 800a5a4:	3724      	adds	r7, #36	@ 0x24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	46020000 	.word	0x46020000
 800a5b4:	08015930 	.word	0x08015930
 800a5b8:	46022000 	.word	0x46022000
 800a5bc:	002f7f7f 	.word	0x002f7f7f

0800a5c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	807b      	strh	r3, [r7, #2]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5d0:	787b      	ldrb	r3, [r7, #1]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a5d6:	887a      	ldrh	r2, [r7, #2]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a5dc:	e002      	b.n	800a5e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a5de:	887a      	ldrh	r2, [r7, #2]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a638 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	88fb      	ldrh	r3, [r7, #6]
 800a600:	4013      	ands	r3, r2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d006      	beq.n	800a614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a606:	4a0c      	ldr	r2, [pc, #48]	@ (800a638 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a608:	88fb      	ldrh	r3, [r7, #6]
 800a60a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a60c:	88fb      	ldrh	r3, [r7, #6]
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 f814 	bl	800a63c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a614:	4b08      	ldr	r3, [pc, #32]	@ (800a638 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a616:	691a      	ldr	r2, [r3, #16]
 800a618:	88fb      	ldrh	r3, [r7, #6]
 800a61a:	4013      	ands	r3, r2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d006      	beq.n	800a62e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a620:	4a05      	ldr	r2, [pc, #20]	@ (800a638 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a626:	88fb      	ldrh	r3, [r7, #6]
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 f812 	bl	800a652 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	46022000 	.word	0x46022000

0800a63c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	4603      	mov	r3, r0
 800a65a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e08d      	b.n	800a796 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d106      	bne.n	800a694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7f6 ffb8 	bl	8001604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2224      	movs	r2, #36	@ 0x24
 800a698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 0201 	bic.w	r2, r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a6b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a6c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d107      	bne.n	800a6e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6de:	609a      	str	r2, [r3, #8]
 800a6e0:	e006      	b.n	800a6f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	689a      	ldr	r2, [r3, #8]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a6ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d108      	bne.n	800a70a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a706:	605a      	str	r2, [r3, #4]
 800a708:	e007      	b.n	800a71a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a718:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	6812      	ldr	r2, [r2, #0]
 800a724:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a72c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a73c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	691a      	ldr	r2, [r3, #16]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	69d9      	ldr	r1, [r3, #28]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a1a      	ldr	r2, [r3, #32]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	430a      	orrs	r2, r1
 800a766:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0201 	orr.w	r2, r2, #1
 800a776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b082      	sub	sp, #8
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d101      	bne.n	800a7b0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e021      	b.n	800a7f4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2224      	movs	r2, #36	@ 0x24
 800a7b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f022 0201 	bic.w	r2, r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7f7 f961 	bl	8001a90 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af02      	add	r7, sp, #8
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	4608      	mov	r0, r1
 800a806:	4611      	mov	r1, r2
 800a808:	461a      	mov	r2, r3
 800a80a:	4603      	mov	r3, r0
 800a80c:	817b      	strh	r3, [r7, #10]
 800a80e:	460b      	mov	r3, r1
 800a810:	813b      	strh	r3, [r7, #8]
 800a812:	4613      	mov	r3, r2
 800a814:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b20      	cmp	r3, #32
 800a820:	f040 80f9 	bne.w	800aa16 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <HAL_I2C_Mem_Write+0x34>
 800a82a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d105      	bne.n	800a83c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a836:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e0ed      	b.n	800aa18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <HAL_I2C_Mem_Write+0x4e>
 800a846:	2302      	movs	r3, #2
 800a848:	e0e6      	b.n	800aa18 <HAL_I2C_Mem_Write+0x21c>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a852:	f7fe fb41 	bl	8008ed8 <HAL_GetTick>
 800a856:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	2319      	movs	r3, #25
 800a85e:	2201      	movs	r2, #1
 800a860:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f001 f886 	bl	800b976 <I2C_WaitOnFlagUntilTimeout>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e0d1      	b.n	800aa18 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2221      	movs	r2, #33	@ 0x21
 800a878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2240      	movs	r2, #64	@ 0x40
 800a880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6a3a      	ldr	r2, [r7, #32]
 800a88e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a89c:	88f8      	ldrh	r0, [r7, #6]
 800a89e:	893a      	ldrh	r2, [r7, #8]
 800a8a0:	8979      	ldrh	r1, [r7, #10]
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 fbad 	bl	800b00c <I2C_RequestMemoryWrite>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d005      	beq.n	800a8c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e0a9      	b.n	800aa18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	2bff      	cmp	r3, #255	@ 0xff
 800a8cc:	d90e      	bls.n	800a8ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	22ff      	movs	r2, #255	@ 0xff
 800a8d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	8979      	ldrh	r1, [r7, #10]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f001 fa09 	bl	800bcfc <I2C_TransferConfig>
 800a8ea:	e00f      	b.n	800a90c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	8979      	ldrh	r1, [r7, #10]
 800a8fe:	2300      	movs	r3, #0
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f001 f9f8 	bl	800bcfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f001 f889 	bl	800ba28 <I2C_WaitOnTXISFlagUntilTimeout>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e07b      	b.n	800aa18 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a948:	3b01      	subs	r3, #1
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a954:	b29b      	uxth	r3, r3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d034      	beq.n	800a9c4 <HAL_I2C_Mem_Write+0x1c8>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d130      	bne.n	800a9c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a968:	2200      	movs	r2, #0
 800a96a:	2180      	movs	r1, #128	@ 0x80
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f001 f802 	bl	800b976 <I2C_WaitOnFlagUntilTimeout>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e04d      	b.n	800aa18 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a980:	b29b      	uxth	r3, r3
 800a982:	2bff      	cmp	r3, #255	@ 0xff
 800a984:	d90e      	bls.n	800a9a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	22ff      	movs	r2, #255	@ 0xff
 800a98a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a990:	b2da      	uxtb	r2, r3
 800a992:	8979      	ldrh	r1, [r7, #10]
 800a994:	2300      	movs	r3, #0
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f001 f9ad 	bl	800bcfc <I2C_TransferConfig>
 800a9a2:	e00f      	b.n	800a9c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	8979      	ldrh	r1, [r7, #10]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f001 f99c 	bl	800bcfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d19e      	bne.n	800a90c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f001 f86f 	bl	800bab6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e01a      	b.n	800aa18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6859      	ldr	r1, [r3, #4]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	4b0a      	ldr	r3, [pc, #40]	@ (800aa20 <HAL_I2C_Mem_Write+0x224>)
 800a9f6:	400b      	ands	r3, r1
 800a9f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	e000      	b.n	800aa18 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800aa16:	2302      	movs	r3, #2
  }
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	fe00e800 	.word	0xfe00e800

0800aa24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b088      	sub	sp, #32
 800aa28:	af02      	add	r7, sp, #8
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	4608      	mov	r0, r1
 800aa2e:	4611      	mov	r1, r2
 800aa30:	461a      	mov	r2, r3
 800aa32:	4603      	mov	r3, r0
 800aa34:	817b      	strh	r3, [r7, #10]
 800aa36:	460b      	mov	r3, r1
 800aa38:	813b      	strh	r3, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b20      	cmp	r3, #32
 800aa48:	f040 80fd 	bne.w	800ac46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <HAL_I2C_Mem_Read+0x34>
 800aa52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d105      	bne.n	800aa64 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e0f1      	b.n	800ac48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d101      	bne.n	800aa72 <HAL_I2C_Mem_Read+0x4e>
 800aa6e:	2302      	movs	r3, #2
 800aa70:	e0ea      	b.n	800ac48 <HAL_I2C_Mem_Read+0x224>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aa7a:	f7fe fa2d 	bl	8008ed8 <HAL_GetTick>
 800aa7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	2319      	movs	r3, #25
 800aa86:	2201      	movs	r2, #1
 800aa88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 ff72 	bl	800b976 <I2C_WaitOnFlagUntilTimeout>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e0d5      	b.n	800ac48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2222      	movs	r2, #34	@ 0x22
 800aaa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2240      	movs	r2, #64	@ 0x40
 800aaa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6a3a      	ldr	r2, [r7, #32]
 800aab6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aabc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aac4:	88f8      	ldrh	r0, [r7, #6]
 800aac6:	893a      	ldrh	r2, [r7, #8]
 800aac8:	8979      	ldrh	r1, [r7, #10]
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	4603      	mov	r3, r0
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 faed 	bl	800b0b4 <I2C_RequestMemoryRead>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d005      	beq.n	800aaec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e0ad      	b.n	800ac48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	2bff      	cmp	r3, #255	@ 0xff
 800aaf4:	d90e      	bls.n	800ab14 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	22ff      	movs	r2, #255	@ 0xff
 800aafa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	8979      	ldrh	r1, [r7, #10]
 800ab04:	4b52      	ldr	r3, [pc, #328]	@ (800ac50 <HAL_I2C_Mem_Read+0x22c>)
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f001 f8f5 	bl	800bcfc <I2C_TransferConfig>
 800ab12:	e00f      	b.n	800ab34 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	8979      	ldrh	r1, [r7, #10]
 800ab26:	4b4a      	ldr	r3, [pc, #296]	@ (800ac50 <HAL_I2C_Mem_Read+0x22c>)
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f001 f8e4 	bl	800bcfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2104      	movs	r1, #4
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 ff19 	bl	800b976 <I2C_WaitOnFlagUntilTimeout>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e07c      	b.n	800ac48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab58:	b2d2      	uxtb	r2, r2
 800ab5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d034      	beq.n	800abf4 <HAL_I2C_Mem_Read+0x1d0>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d130      	bne.n	800abf4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2180      	movs	r1, #128	@ 0x80
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f000 feea 	bl	800b976 <I2C_WaitOnFlagUntilTimeout>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e04d      	b.n	800ac48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	2bff      	cmp	r3, #255	@ 0xff
 800abb4:	d90e      	bls.n	800abd4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	22ff      	movs	r2, #255	@ 0xff
 800abba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	8979      	ldrh	r1, [r7, #10]
 800abc4:	2300      	movs	r3, #0
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f001 f895 	bl	800bcfc <I2C_TransferConfig>
 800abd2:	e00f      	b.n	800abf4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abd8:	b29a      	uxth	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	8979      	ldrh	r1, [r7, #10]
 800abe6:	2300      	movs	r3, #0
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f001 f884 	bl	800bcfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d19a      	bne.n	800ab34 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 ff57 	bl	800bab6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e01a      	b.n	800ac48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2220      	movs	r2, #32
 800ac18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6859      	ldr	r1, [r3, #4]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	4b0b      	ldr	r3, [pc, #44]	@ (800ac54 <HAL_I2C_Mem_Read+0x230>)
 800ac26:	400b      	ands	r3, r1
 800ac28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2220      	movs	r2, #32
 800ac2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	e000      	b.n	800ac48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ac46:	2302      	movs	r3, #2
  }
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	80002400 	.word	0x80002400
 800ac54:	fe00e800 	.word	0xfe00e800

0800ac58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d005      	beq.n	800ac84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	68f9      	ldr	r1, [r7, #12]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	4798      	blx	r3
  }
}
 800ac84:	bf00      	nop
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	0a1b      	lsrs	r3, r3, #8
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	d010      	beq.n	800acd2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	09db      	lsrs	r3, r3, #7
 800acb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00a      	beq.n	800acd2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc0:	f043 0201 	orr.w	r2, r3, #1
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800acd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	0a9b      	lsrs	r3, r3, #10
 800acd6:	f003 0301 	and.w	r3, r3, #1
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d010      	beq.n	800ad00 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	09db      	lsrs	r3, r3, #7
 800ace2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00a      	beq.n	800ad00 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acee:	f043 0208 	orr.w	r2, r3, #8
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800acfe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	0a5b      	lsrs	r3, r3, #9
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d010      	beq.n	800ad2e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	09db      	lsrs	r3, r3, #7
 800ad10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00a      	beq.n	800ad2e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad1c:	f043 0202 	orr.w	r2, r3, #2
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad2c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f003 030b 	and.w	r3, r3, #11
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800ad3e:	68f9      	ldr	r1, [r7, #12]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fcbf 	bl	800b6c4 <I2C_ITError>
  }
}
 800ad46:	bf00      	nop
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ad56:	bf00      	nop
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b083      	sub	sp, #12
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b083      	sub	sp, #12
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	70fb      	strb	r3, [r7, #3]
 800ad82:	4613      	mov	r3, r2
 800ad84:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800adae:	bf00      	nop
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800adc2:	bf00      	nop
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800addc:	b2db      	uxtb	r3, r3
}
 800adde:	4618      	mov	r0, r3
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800adea:	b480      	push	{r7}
 800adec:	b083      	sub	sp, #12
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	370c      	adds	r7, #12
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b086      	sub	sp, #24
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	60f8      	str	r0, [r7, #12]
 800ae0a:	60b9      	str	r1, [r7, #8]
 800ae0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d101      	bne.n	800ae26 <I2C_Slave_ISR_IT+0x24>
 800ae22:	2302      	movs	r3, #2
 800ae24:	e0ed      	b.n	800b002 <I2C_Slave_ISR_IT+0x200>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	095b      	lsrs	r3, r3, #5
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	095b      	lsrs	r3, r3, #5
 800ae3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ae46:	6939      	ldr	r1, [r7, #16]
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 fa69 	bl	800b320 <I2C_ITSlaveCplt>
 800ae4e:	e0d3      	b.n	800aff8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	091b      	lsrs	r3, r3, #4
 800ae54:	f003 0301 	and.w	r3, r3, #1
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d04d      	beq.n	800aef8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	091b      	lsrs	r3, r3, #4
 800ae60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d047      	beq.n	800aef8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d128      	bne.n	800aec4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	2b28      	cmp	r3, #40	@ 0x28
 800ae7c:	d108      	bne.n	800ae90 <I2C_Slave_ISR_IT+0x8e>
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae84:	d104      	bne.n	800ae90 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ae86:	6939      	ldr	r1, [r7, #16]
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 fbc5 	bl	800b618 <I2C_ITListenCplt>
 800ae8e:	e032      	b.n	800aef6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b29      	cmp	r3, #41	@ 0x29
 800ae9a:	d10e      	bne.n	800aeba <I2C_Slave_ISR_IT+0xb8>
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aea2:	d00a      	beq.n	800aeba <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2210      	movs	r2, #16
 800aeaa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 fd20 	bl	800b8f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 f9d6 	bl	800b264 <I2C_ITSlaveSeqCplt>
 800aeb8:	e01d      	b.n	800aef6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2210      	movs	r2, #16
 800aec0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800aec2:	e096      	b.n	800aff2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2210      	movs	r2, #16
 800aeca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aed0:	f043 0204 	orr.w	r2, r3, #4
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d004      	beq.n	800aee8 <I2C_Slave_ISR_IT+0xe6>
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aee4:	f040 8085 	bne.w	800aff2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeec:	4619      	mov	r1, r3
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f000 fbe8 	bl	800b6c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800aef4:	e07d      	b.n	800aff2 <I2C_Slave_ISR_IT+0x1f0>
 800aef6:	e07c      	b.n	800aff2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	089b      	lsrs	r3, r3, #2
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	2b00      	cmp	r3, #0
 800af02:	d030      	beq.n	800af66 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	089b      	lsrs	r3, r3, #2
 800af08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d02a      	beq.n	800af66 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af14:	b29b      	uxth	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d018      	beq.n	800af4c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af24:	b2d2      	uxtb	r2, r2
 800af26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af36:	3b01      	subs	r3, #1
 800af38:	b29a      	uxth	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af42:	b29b      	uxth	r3, r3
 800af44:	3b01      	subs	r3, #1
 800af46:	b29a      	uxth	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af50:	b29b      	uxth	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d14f      	bne.n	800aff6 <I2C_Slave_ISR_IT+0x1f4>
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800af5c:	d04b      	beq.n	800aff6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f000 f980 	bl	800b264 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800af64:	e047      	b.n	800aff6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	08db      	lsrs	r3, r3, #3
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00a      	beq.n	800af88 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	08db      	lsrs	r3, r3, #3
 800af76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d004      	beq.n	800af88 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800af7e:	6939      	ldr	r1, [r7, #16]
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 f8eb 	bl	800b15c <I2C_ITAddrCplt>
 800af86:	e037      	b.n	800aff8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	085b      	lsrs	r3, r3, #1
 800af8c:	f003 0301 	and.w	r3, r3, #1
 800af90:	2b00      	cmp	r3, #0
 800af92:	d031      	beq.n	800aff8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	085b      	lsrs	r3, r3, #1
 800af98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d02b      	beq.n	800aff8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d018      	beq.n	800afdc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afae:	781a      	ldrb	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	3b01      	subs	r3, #1
 800afc8:	b29a      	uxth	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afd2:	3b01      	subs	r3, #1
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800afda:	e00d      	b.n	800aff8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afe2:	d002      	beq.n	800afea <I2C_Slave_ISR_IT+0x1e8>
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 f93a 	bl	800b264 <I2C_ITSlaveSeqCplt>
 800aff0:	e002      	b.n	800aff8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800aff2:	bf00      	nop
 800aff4:	e000      	b.n	800aff8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800aff6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af02      	add	r7, sp, #8
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	4608      	mov	r0, r1
 800b016:	4611      	mov	r1, r2
 800b018:	461a      	mov	r2, r3
 800b01a:	4603      	mov	r3, r0
 800b01c:	817b      	strh	r3, [r7, #10]
 800b01e:	460b      	mov	r3, r1
 800b020:	813b      	strh	r3, [r7, #8]
 800b022:	4613      	mov	r3, r2
 800b024:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	8979      	ldrh	r1, [r7, #10]
 800b02c:	4b20      	ldr	r3, [pc, #128]	@ (800b0b0 <I2C_RequestMemoryWrite+0xa4>)
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 fe61 	bl	800bcfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	69b9      	ldr	r1, [r7, #24]
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 fcf2 	bl	800ba28 <I2C_WaitOnTXISFlagUntilTimeout>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e02c      	b.n	800b0a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b04e:	88fb      	ldrh	r3, [r7, #6]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d105      	bne.n	800b060 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b054:	893b      	ldrh	r3, [r7, #8]
 800b056:	b2da      	uxtb	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b05e:	e015      	b.n	800b08c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b060:	893b      	ldrh	r3, [r7, #8]
 800b062:	0a1b      	lsrs	r3, r3, #8
 800b064:	b29b      	uxth	r3, r3
 800b066:	b2da      	uxtb	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b06e:	69fa      	ldr	r2, [r7, #28]
 800b070:	69b9      	ldr	r1, [r7, #24]
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f000 fcd8 	bl	800ba28 <I2C_WaitOnTXISFlagUntilTimeout>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e012      	b.n	800b0a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b082:	893b      	ldrh	r3, [r7, #8]
 800b084:	b2da      	uxtb	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2200      	movs	r2, #0
 800b094:	2180      	movs	r1, #128	@ 0x80
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f000 fc6d 	bl	800b976 <I2C_WaitOnFlagUntilTimeout>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e000      	b.n	800b0a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	80002000 	.word	0x80002000

0800b0b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	817b      	strh	r3, [r7, #10]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	813b      	strh	r3, [r7, #8]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	8979      	ldrh	r1, [r7, #10]
 800b0d4:	4b20      	ldr	r3, [pc, #128]	@ (800b158 <I2C_RequestMemoryRead+0xa4>)
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	2300      	movs	r3, #0
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f000 fe0e 	bl	800bcfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	69b9      	ldr	r1, [r7, #24]
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 fc9f 	bl	800ba28 <I2C_WaitOnTXISFlagUntilTimeout>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e02c      	b.n	800b14e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0f4:	88fb      	ldrh	r3, [r7, #6]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d105      	bne.n	800b106 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0fa:	893b      	ldrh	r3, [r7, #8]
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	629a      	str	r2, [r3, #40]	@ 0x28
 800b104:	e015      	b.n	800b132 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b106:	893b      	ldrh	r3, [r7, #8]
 800b108:	0a1b      	lsrs	r3, r3, #8
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b114:	69fa      	ldr	r2, [r7, #28]
 800b116:	69b9      	ldr	r1, [r7, #24]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fc85 	bl	800ba28 <I2C_WaitOnTXISFlagUntilTimeout>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e012      	b.n	800b14e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b128:	893b      	ldrh	r3, [r7, #8]
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2200      	movs	r2, #0
 800b13a:	2140      	movs	r1, #64	@ 0x40
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 fc1a 	bl	800b976 <I2C_WaitOnFlagUntilTimeout>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e000      	b.n	800b14e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	80002000 	.word	0x80002000

0800b15c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b172:	2b28      	cmp	r3, #40	@ 0x28
 800b174:	d16a      	bne.n	800b24c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	0c1b      	lsrs	r3, r3, #16
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	0c1b      	lsrs	r3, r3, #16
 800b18e:	b29b      	uxth	r3, r3
 800b190:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b194:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b1b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d138      	bne.n	800b22c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b1ba:	897b      	ldrh	r3, [r7, #10]
 800b1bc:	09db      	lsrs	r3, r3, #7
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	89bb      	ldrh	r3, [r7, #12]
 800b1c2:	4053      	eors	r3, r2
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	f003 0306 	and.w	r3, r3, #6
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d11c      	bne.n	800b208 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b1ce:	897b      	ldrh	r3, [r7, #10]
 800b1d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d13b      	bne.n	800b25c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2208      	movs	r2, #8
 800b1f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b1fa:	89ba      	ldrh	r2, [r7, #12]
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff fdb8 	bl	800ad76 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b206:	e029      	b.n	800b25c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b208:	893b      	ldrh	r3, [r7, #8]
 800b20a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b20c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fda5 	bl	800bd60 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b21e:	89ba      	ldrh	r2, [r7, #12]
 800b220:	7bfb      	ldrb	r3, [r7, #15]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff fda6 	bl	800ad76 <HAL_I2C_AddrCallback>
}
 800b22a:	e017      	b.n	800b25c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b22c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fd95 	bl	800bd60 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b23e:	89ba      	ldrh	r2, [r7, #12]
 800b240:	7bfb      	ldrb	r3, [r7, #15]
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff fd96 	bl	800ad76 <HAL_I2C_AddrCallback>
}
 800b24a:	e007      	b.n	800b25c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2208      	movs	r2, #8
 800b252:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800b25c:	bf00      	nop
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	0b9b      	lsrs	r3, r3, #14
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	d008      	beq.n	800b29a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	e00d      	b.n	800b2b6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	0bdb      	lsrs	r3, r3, #15
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d007      	beq.n	800b2b6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b2b4:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b29      	cmp	r3, #41	@ 0x29
 800b2c0:	d112      	bne.n	800b2e8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2228      	movs	r2, #40	@ 0x28
 800b2c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2221      	movs	r2, #33	@ 0x21
 800b2ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fd44 	bl	800bd60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7ff fd34 	bl	800ad4e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b2e6:	e017      	b.n	800b318 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2f2:	d111      	bne.n	800b318 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2228      	movs	r2, #40	@ 0x28
 800b2f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2222      	movs	r2, #34	@ 0x22
 800b300:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b302:	2102      	movs	r1, #2
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 fd2b 	bl	800bd60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff fd25 	bl	800ad62 <HAL_I2C_SlaveRxCpltCallback>
}
 800b318:	bf00      	nop
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b320:	b590      	push	{r4, r7, lr}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b342:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2220      	movs	r2, #32
 800b34a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b34c:	7afb      	ldrb	r3, [r7, #11]
 800b34e:	2b21      	cmp	r3, #33	@ 0x21
 800b350:	d002      	beq.n	800b358 <I2C_ITSlaveCplt+0x38>
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	2b29      	cmp	r3, #41	@ 0x29
 800b356:	d108      	bne.n	800b36a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b358:	f248 0101 	movw	r1, #32769	@ 0x8001
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fcff 	bl	800bd60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2221      	movs	r2, #33	@ 0x21
 800b366:	631a      	str	r2, [r3, #48]	@ 0x30
 800b368:	e019      	b.n	800b39e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b36a:	7afb      	ldrb	r3, [r7, #11]
 800b36c:	2b22      	cmp	r3, #34	@ 0x22
 800b36e:	d002      	beq.n	800b376 <I2C_ITSlaveCplt+0x56>
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	2b2a      	cmp	r3, #42	@ 0x2a
 800b374:	d108      	bne.n	800b388 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b376:	f248 0102 	movw	r1, #32770	@ 0x8002
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fcf0 	bl	800bd60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2222      	movs	r2, #34	@ 0x22
 800b384:	631a      	str	r2, [r3, #48]	@ 0x30
 800b386:	e00a      	b.n	800b39e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b388:	7afb      	ldrb	r3, [r7, #11]
 800b38a:	2b28      	cmp	r3, #40	@ 0x28
 800b38c:	d107      	bne.n	800b39e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b38e:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fce4 	bl	800bd60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b3ac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6859      	ldr	r1, [r3, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	4b95      	ldr	r3, [pc, #596]	@ (800b610 <I2C_ITSlaveCplt+0x2f0>)
 800b3ba:	400b      	ands	r3, r1
 800b3bc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fa97 	bl	800b8f2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	0b9b      	lsrs	r3, r3, #14
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d01c      	beq.n	800b40a <I2C_ITSlaveCplt+0xea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b3de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d032      	beq.n	800b44e <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b3f0:	b29c      	uxth	r4, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fdd4 	bl	8009fa4 <HAL_DMAEx_GetFifoLevel>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	4423      	add	r3, r4
 800b402:	b29a      	uxth	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b408:	e021      	b.n	800b44e <I2C_ITSlaveCplt+0x12e>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	0bdb      	lsrs	r3, r3, #15
 800b40e:	f003 0301 	and.w	r3, r3, #1
 800b412:	2b00      	cmp	r3, #0
 800b414:	d01b      	beq.n	800b44e <I2C_ITSlaveCplt+0x12e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b424:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00f      	beq.n	800b44e <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b436:	b29c      	uxth	r4, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fdb1 	bl	8009fa4 <HAL_DMAEx_GetFifoLevel>
 800b442:	4603      	mov	r3, r0
 800b444:	b29b      	uxth	r3, r3
 800b446:	4423      	add	r3, r4
 800b448:	b29a      	uxth	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	089b      	lsrs	r3, r3, #2
 800b452:	f003 0301 	and.w	r3, r3, #1
 800b456:	2b00      	cmp	r3, #0
 800b458:	d020      	beq.n	800b49c <I2C_ITSlaveCplt+0x17c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f023 0304 	bic.w	r3, r3, #4
 800b460:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46c:	b2d2      	uxtb	r2, r2
 800b46e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00c      	beq.n	800b49c <I2C_ITSlaveCplt+0x17c>
    {
      hi2c->XferSize--;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b486:	3b01      	subs	r3, #1
 800b488:	b29a      	uxth	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b492:	b29b      	uxth	r3, r3
 800b494:	3b01      	subs	r3, #1
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d005      	beq.n	800b4b2 <I2C_ITSlaveCplt+0x192>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4aa:	f043 0204 	orr.w	r2, r3, #4
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	091b      	lsrs	r3, r3, #4
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d04a      	beq.n	800b554 <I2C_ITSlaveCplt+0x234>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	091b      	lsrs	r3, r3, #4
 800b4c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d044      	beq.n	800b554 <I2C_ITSlaveCplt+0x234>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d128      	bne.n	800b526 <I2C_ITSlaveCplt+0x206>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b28      	cmp	r3, #40	@ 0x28
 800b4de:	d108      	bne.n	800b4f2 <I2C_ITSlaveCplt+0x1d2>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4e6:	d104      	bne.n	800b4f2 <I2C_ITSlaveCplt+0x1d2>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b4e8:	6979      	ldr	r1, [r7, #20]
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f894 	bl	800b618 <I2C_ITListenCplt>
 800b4f0:	e030      	b.n	800b554 <I2C_ITSlaveCplt+0x234>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b29      	cmp	r3, #41	@ 0x29
 800b4fc:	d10e      	bne.n	800b51c <I2C_ITSlaveCplt+0x1fc>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b504:	d00a      	beq.n	800b51c <I2C_ITSlaveCplt+0x1fc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2210      	movs	r2, #16
 800b50c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f9ef 	bl	800b8f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff fea5 	bl	800b264 <I2C_ITSlaveSeqCplt>
 800b51a:	e01b      	b.n	800b554 <I2C_ITSlaveCplt+0x234>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2210      	movs	r2, #16
 800b522:	61da      	str	r2, [r3, #28]
 800b524:	e016      	b.n	800b554 <I2C_ITSlaveCplt+0x234>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2210      	movs	r2, #16
 800b52c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b532:	f043 0204 	orr.w	r2, r3, #4
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <I2C_ITSlaveCplt+0x228>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b546:	d105      	bne.n	800b554 <I2C_ITSlaveCplt+0x234>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f8b8 	bl	800b6c4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b566:	2b00      	cmp	r3, #0
 800b568:	d010      	beq.n	800b58c <I2C_ITSlaveCplt+0x26c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f8a7 	bl	800b6c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b28      	cmp	r3, #40	@ 0x28
 800b580:	d141      	bne.n	800b606 <I2C_ITSlaveCplt+0x2e6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b582:	6979      	ldr	r1, [r7, #20]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f847 	bl	800b618 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b58a:	e03c      	b.n	800b606 <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b590:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b594:	d014      	beq.n	800b5c0 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7ff fe64 	bl	800b264 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a1d      	ldr	r2, [pc, #116]	@ (800b614 <I2C_ITSlaveCplt+0x2f4>)
 800b5a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff fbea 	bl	800ad92 <HAL_I2C_ListenCpltCallback>
}
 800b5be:	e022      	b.n	800b606 <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b22      	cmp	r3, #34	@ 0x22
 800b5ca:	d10e      	bne.n	800b5ea <I2C_ITSlaveCplt+0x2ca>
    hi2c->State = HAL_I2C_STATE_READY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2220      	movs	r2, #32
 800b5d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff fbbd 	bl	800ad62 <HAL_I2C_SlaveRxCpltCallback>
}
 800b5e8:	e00d      	b.n	800b606 <I2C_ITSlaveCplt+0x2e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff fba4 	bl	800ad4e <HAL_I2C_SlaveTxCpltCallback>
}
 800b606:	bf00      	nop
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd90      	pop	{r4, r7, pc}
 800b60e:	bf00      	nop
 800b610:	fe00e800 	.word	0xfe00e800
 800b614:	ffff0000 	.word	0xffff0000

0800b618 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a26      	ldr	r2, [pc, #152]	@ (800b6c0 <I2C_ITListenCplt+0xa8>)
 800b626:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2220      	movs	r2, #32
 800b632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	089b      	lsrs	r3, r3, #2
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d022      	beq.n	800b696 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b65a:	b2d2      	uxtb	r2, r2
 800b65c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b662:	1c5a      	adds	r2, r3, #1
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d012      	beq.n	800b696 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b674:	3b01      	subs	r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b680:	b29b      	uxth	r3, r3
 800b682:	3b01      	subs	r3, #1
 800b684:	b29a      	uxth	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b68e:	f043 0204 	orr.w	r2, r3, #4
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b696:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fb60 	bl	800bd60 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2210      	movs	r2, #16
 800b6a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff fb6e 	bl	800ad92 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	ffff0000 	.word	0xffff0000

0800b6c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6d4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a6d      	ldr	r2, [pc, #436]	@ (800b898 <I2C_ITError+0x1d4>)
 800b6e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	2b28      	cmp	r3, #40	@ 0x28
 800b6fa:	d005      	beq.n	800b708 <I2C_ITError+0x44>
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	2b29      	cmp	r3, #41	@ 0x29
 800b700:	d002      	beq.n	800b708 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	2b2a      	cmp	r3, #42	@ 0x2a
 800b706:	d10b      	bne.n	800b720 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b708:	2103      	movs	r1, #3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fb28 	bl	800bd60 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2228      	movs	r2, #40	@ 0x28
 800b714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a60      	ldr	r2, [pc, #384]	@ (800b89c <I2C_ITError+0x1d8>)
 800b71c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b71e:	e030      	b.n	800b782 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b720:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fb1b 	bl	800bd60 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f8e1 	bl	800b8f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b736:	b2db      	uxtb	r3, r3
 800b738:	2b60      	cmp	r3, #96	@ 0x60
 800b73a:	d01f      	beq.n	800b77c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2220      	movs	r2, #32
 800b740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	f003 0320 	and.w	r3, r3, #32
 800b74e:	2b20      	cmp	r3, #32
 800b750:	d114      	bne.n	800b77c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	f003 0310 	and.w	r3, r3, #16
 800b75c:	2b10      	cmp	r3, #16
 800b75e:	d109      	bne.n	800b774 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2210      	movs	r2, #16
 800b766:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b76c:	f043 0204 	orr.w	r2, r3, #4
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2220      	movs	r2, #32
 800b77a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b786:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d039      	beq.n	800b804 <I2C_ITError+0x140>
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b11      	cmp	r3, #17
 800b794:	d002      	beq.n	800b79c <I2C_ITError+0xd8>
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b21      	cmp	r3, #33	@ 0x21
 800b79a:	d133      	bne.n	800b804 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7aa:	d107      	bne.n	800b7bc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b7ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe f925 	bl	8009a10 <HAL_DMA_GetState>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d017      	beq.n	800b7fc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d0:	4a33      	ldr	r2, [pc, #204]	@ (800b8a0 <I2C_ITError+0x1dc>)
 800b7d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fd ff8b 	bl	80096fc <HAL_DMA_Abort_IT>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d04d      	beq.n	800b888 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b7fa:	e045      	b.n	800b888 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f851 	bl	800b8a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b802:	e041      	b.n	800b888 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d039      	beq.n	800b880 <I2C_ITError+0x1bc>
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2b12      	cmp	r3, #18
 800b810:	d002      	beq.n	800b818 <I2C_ITError+0x154>
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	2b22      	cmp	r3, #34	@ 0x22
 800b816:	d133      	bne.n	800b880 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b826:	d107      	bne.n	800b838 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b836:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fe f8e7 	bl	8009a10 <HAL_DMA_GetState>
 800b842:	4603      	mov	r3, r0
 800b844:	2b01      	cmp	r3, #1
 800b846:	d017      	beq.n	800b878 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b84c:	4a14      	ldr	r2, [pc, #80]	@ (800b8a0 <I2C_ITError+0x1dc>)
 800b84e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fd ff4d 	bl	80096fc <HAL_DMA_Abort_IT>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d011      	beq.n	800b88c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b86c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b872:	4610      	mov	r0, r2
 800b874:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b876:	e009      	b.n	800b88c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f813 	bl	800b8a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b87e:	e005      	b.n	800b88c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f80f 	bl	800b8a4 <I2C_TreatErrorCallback>
  }
}
 800b886:	e002      	b.n	800b88e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b888:	bf00      	nop
 800b88a:	e000      	b.n	800b88e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b88c:	bf00      	nop
}
 800b88e:	bf00      	nop
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	ffff0000 	.word	0xffff0000
 800b89c:	0800ae03 	.word	0x0800ae03
 800b8a0:	0800b93b 	.word	0x0800b93b

0800b8a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b60      	cmp	r3, #96	@ 0x60
 800b8b6:	d10e      	bne.n	800b8d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff fa73 	bl	800adba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b8d4:	e009      	b.n	800b8ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff fa5e 	bl	800ada6 <HAL_I2C_ErrorCallback>
}
 800b8ea:	bf00      	nop
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	f003 0302 	and.w	r3, r3, #2
 800b904:	2b02      	cmp	r3, #2
 800b906:	d103      	bne.n	800b910 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2200      	movs	r2, #0
 800b90e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d007      	beq.n	800b92e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	699a      	ldr	r2, [r3, #24]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f042 0201 	orr.w	r2, r2, #1
 800b92c:	619a      	str	r2, [r3, #24]
  }
}
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b946:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b954:	2200      	movs	r2, #0
 800b956:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b964:	2200      	movs	r2, #0
 800b966:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7ff ff9b 	bl	800b8a4 <I2C_TreatErrorCallback>
}
 800b96e:	bf00      	nop
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	603b      	str	r3, [r7, #0]
 800b982:	4613      	mov	r3, r2
 800b984:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b986:	e03b      	b.n	800ba00 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b988:	69ba      	ldr	r2, [r7, #24]
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 f8d5 	bl	800bb3c <I2C_IsErrorOccurred>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e041      	b.n	800ba20 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d02d      	beq.n	800ba00 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9a4:	f7fd fa98 	bl	8008ed8 <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d302      	bcc.n	800b9ba <I2C_WaitOnFlagUntilTimeout+0x44>
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d122      	bne.n	800ba00 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	699a      	ldr	r2, [r3, #24]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	bf0c      	ite	eq
 800b9ca:	2301      	moveq	r3, #1
 800b9cc:	2300      	movne	r3, #0
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d113      	bne.n	800ba00 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9dc:	f043 0220 	orr.w	r2, r3, #32
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e00f      	b.n	800ba20 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	699a      	ldr	r2, [r3, #24]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4013      	ands	r3, r2
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	bf0c      	ite	eq
 800ba10:	2301      	moveq	r3, #1
 800ba12:	2300      	movne	r3, #0
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d0b4      	beq.n	800b988 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba34:	e033      	b.n	800ba9e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	68b9      	ldr	r1, [r7, #8]
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f000 f87e 	bl	800bb3c <I2C_IsErrorOccurred>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e031      	b.n	800baae <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba50:	d025      	beq.n	800ba9e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba52:	f7fd fa41 	bl	8008ed8 <HAL_GetTick>
 800ba56:	4602      	mov	r2, r0
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d302      	bcc.n	800ba68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11a      	bne.n	800ba9e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f003 0302 	and.w	r3, r3, #2
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d013      	beq.n	800ba9e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba7a:	f043 0220 	orr.w	r2, r3, #32
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e007      	b.n	800baae <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	f003 0302 	and.w	r3, r3, #2
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d1c4      	bne.n	800ba36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	60b9      	str	r1, [r7, #8]
 800bac0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bac2:	e02f      	b.n	800bb24 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 f837 	bl	800bb3c <I2C_IsErrorOccurred>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e02d      	b.n	800bb34 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad8:	f7fd f9fe 	bl	8008ed8 <HAL_GetTick>
 800badc:	4602      	mov	r2, r0
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d302      	bcc.n	800baee <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d11a      	bne.n	800bb24 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	f003 0320 	and.w	r3, r3, #32
 800baf8:	2b20      	cmp	r3, #32
 800bafa:	d013      	beq.n	800bb24 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb00:	f043 0220 	orr.w	r2, r3, #32
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2220      	movs	r2, #32
 800bb0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e007      	b.n	800bb34 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	d1c8      	bne.n	800bac4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08a      	sub	sp, #40	@ 0x28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	f003 0310 	and.w	r3, r3, #16
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d068      	beq.n	800bc3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2210      	movs	r2, #16
 800bb6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bb70:	e049      	b.n	800bc06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb78:	d045      	beq.n	800bc06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb7a:	f7fd f9ad 	bl	8008ed8 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d302      	bcc.n	800bb90 <I2C_IsErrorOccurred+0x54>
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d13a      	bne.n	800bc06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bba2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbb2:	d121      	bne.n	800bbf8 <I2C_IsErrorOccurred+0xbc>
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbba:	d01d      	beq.n	800bbf8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bbbc:	7cfb      	ldrb	r3, [r7, #19]
 800bbbe:	2b20      	cmp	r3, #32
 800bbc0:	d01a      	beq.n	800bbf8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bbd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bbd2:	f7fd f981 	bl	8008ed8 <HAL_GetTick>
 800bbd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbd8:	e00e      	b.n	800bbf8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bbda:	f7fd f97d 	bl	8008ed8 <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	2b19      	cmp	r3, #25
 800bbe6:	d907      	bls.n	800bbf8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bbe8:	6a3b      	ldr	r3, [r7, #32]
 800bbea:	f043 0320 	orr.w	r3, r3, #32
 800bbee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800bbf6:	e006      	b.n	800bc06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	f003 0320 	and.w	r3, r3, #32
 800bc02:	2b20      	cmp	r3, #32
 800bc04:	d1e9      	bne.n	800bbda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	f003 0320 	and.w	r3, r3, #32
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	d003      	beq.n	800bc1c <I2C_IsErrorOccurred+0xe0>
 800bc14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d0aa      	beq.n	800bb72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d103      	bne.n	800bc2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	f043 0304 	orr.w	r3, r3, #4
 800bc32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00b      	beq.n	800bc64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	f043 0301 	orr.w	r3, r3, #1
 800bc52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00b      	beq.n	800bc86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	f043 0308 	orr.w	r3, r3, #8
 800bc74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bc7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	f043 0302 	orr.w	r3, r3, #2
 800bc96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bca0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800bca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d01c      	beq.n	800bcea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f7ff fe1e 	bl	800b8f2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6859      	ldr	r1, [r3, #4]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	4b0d      	ldr	r3, [pc, #52]	@ (800bcf8 <I2C_IsErrorOccurred+0x1bc>)
 800bcc2:	400b      	ands	r3, r1
 800bcc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	431a      	orrs	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800bcea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3728      	adds	r7, #40	@ 0x28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	fe00e800 	.word	0xfe00e800

0800bcfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	607b      	str	r3, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	817b      	strh	r3, [r7, #10]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd0e:	897b      	ldrh	r3, [r7, #10]
 800bd10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bd14:	7a7b      	ldrb	r3, [r7, #9]
 800bd16:	041b      	lsls	r3, r3, #16
 800bd18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd1c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd22:	6a3b      	ldr	r3, [r7, #32]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd2a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	0d5b      	lsrs	r3, r3, #21
 800bd36:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bd3a:	4b08      	ldr	r3, [pc, #32]	@ (800bd5c <I2C_TransferConfig+0x60>)
 800bd3c:	430b      	orrs	r3, r1
 800bd3e:	43db      	mvns	r3, r3
 800bd40:	ea02 0103 	and.w	r1, r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	430a      	orrs	r2, r1
 800bd4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bd4e:	bf00      	nop
 800bd50:	371c      	adds	r7, #28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	03ff63ff 	.word	0x03ff63ff

0800bd60 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bd70:	887b      	ldrh	r3, [r7, #2]
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00f      	beq.n	800bd9a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800bd80:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bd8e:	2b28      	cmp	r3, #40	@ 0x28
 800bd90:	d003      	beq.n	800bd9a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800bd98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bd9a:	887b      	ldrh	r3, [r7, #2]
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00f      	beq.n	800bdc4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800bdaa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bdb8:	2b28      	cmp	r3, #40	@ 0x28
 800bdba:	d003      	beq.n	800bdc4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800bdc2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bdc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	da03      	bge.n	800bdd4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800bdd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bdd4:	887b      	ldrh	r3, [r7, #2]
 800bdd6:	2b10      	cmp	r3, #16
 800bdd8:	d103      	bne.n	800bde2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800bde0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bde2:	887b      	ldrh	r3, [r7, #2]
 800bde4:	2b20      	cmp	r3, #32
 800bde6:	d103      	bne.n	800bdf0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f043 0320 	orr.w	r3, r3, #32
 800bdee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bdf0:	887b      	ldrh	r3, [r7, #2]
 800bdf2:	2b40      	cmp	r3, #64	@ 0x40
 800bdf4:	d103      	bne.n	800bdfe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdfc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6819      	ldr	r1, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	43da      	mvns	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	400a      	ands	r2, r1
 800be0e:	601a      	str	r2, [r3, #0]
}
 800be10:	bf00      	nop
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b20      	cmp	r3, #32
 800be30:	d138      	bne.n	800bea4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d101      	bne.n	800be40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800be3c:	2302      	movs	r3, #2
 800be3e:	e032      	b.n	800bea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2224      	movs	r2, #36	@ 0x24
 800be4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f022 0201 	bic.w	r2, r2, #1
 800be5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800be6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6819      	ldr	r1, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	430a      	orrs	r2, r1
 800be7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f042 0201 	orr.w	r2, r2, #1
 800be8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2220      	movs	r2, #32
 800be94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e000      	b.n	800bea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bea4:	2302      	movs	r3, #2
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	d139      	bne.n	800bf3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d101      	bne.n	800bed6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bed2:	2302      	movs	r3, #2
 800bed4:	e033      	b.n	800bf3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2224      	movs	r2, #36	@ 0x24
 800bee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f022 0201 	bic.w	r2, r2, #1
 800bef4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bf04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	021b      	lsls	r3, r3, #8
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f042 0201 	orr.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2220      	movs	r2, #32
 800bf2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e000      	b.n	800bf3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bf3c:	2302      	movs	r3, #2
  }
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
	...

0800bf4c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800bf58:	4b0b      	ldr	r3, [pc, #44]	@ (800bf88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	73fb      	strb	r3, [r7, #15]
 800bf68:	e007      	b.n	800bf7a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800bf6a:	4b07      	ldr	r3, [pc, #28]	@ (800bf88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f023 0204 	bic.w	r2, r3, #4
 800bf72:	4905      	ldr	r1, [pc, #20]	@ (800bf88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	600b      	str	r3, [r1, #0]
  }

  return status;
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr
 800bf88:	40030400 	.word	0x40030400

0800bf8c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800bf90:	4b05      	ldr	r3, [pc, #20]	@ (800bfa8 <HAL_ICACHE_Enable+0x1c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a04      	ldr	r2, [pc, #16]	@ (800bfa8 <HAL_ICACHE_Enable+0x1c>)
 800bf96:	f043 0301 	orr.w	r3, r3, #1
 800bf9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	40030400 	.word	0x40030400

0800bfac <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800bfb4:	4b39      	ldr	r3, [pc, #228]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bfb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bfbc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d10b      	bne.n	800bfde <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfcc:	d905      	bls.n	800bfda <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800bfce:	4b33      	ldr	r3, [pc, #204]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	4a32      	ldr	r2, [pc, #200]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bfd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bfd8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e057      	b.n	800c08e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfe4:	d90a      	bls.n	800bffc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800bfe6:	4b2d      	ldr	r3, [pc, #180]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	4a2a      	ldr	r2, [pc, #168]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bff8:	60d3      	str	r3, [r2, #12]
 800bffa:	e007      	b.n	800c00c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800bffc:	4b27      	ldr	r3, [pc, #156]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c004:	4925      	ldr	r1, [pc, #148]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4313      	orrs	r3, r2
 800c00a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c00c:	4b24      	ldr	r3, [pc, #144]	@ (800c0a0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a24      	ldr	r2, [pc, #144]	@ (800c0a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c012:	fba2 2303 	umull	r2, r3, r2, r3
 800c016:	099b      	lsrs	r3, r3, #6
 800c018:	2232      	movs	r2, #50	@ 0x32
 800c01a:	fb02 f303 	mul.w	r3, r2, r3
 800c01e:	4a21      	ldr	r2, [pc, #132]	@ (800c0a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c020:	fba2 2303 	umull	r2, r3, r2, r3
 800c024:	099b      	lsrs	r3, r3, #6
 800c026:	3301      	adds	r3, #1
 800c028:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c02a:	e002      	b.n	800c032 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	3b01      	subs	r3, #1
 800c030:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c032:	4b1a      	ldr	r3, [pc, #104]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d102      	bne.n	800c044 <HAL_PWREx_ControlVoltageScaling+0x98>
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1f3      	bne.n	800c02c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d01b      	beq.n	800c082 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c04a:	4b15      	ldr	r3, [pc, #84]	@ (800c0a0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a15      	ldr	r2, [pc, #84]	@ (800c0a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c050:	fba2 2303 	umull	r2, r3, r2, r3
 800c054:	099b      	lsrs	r3, r3, #6
 800c056:	2232      	movs	r2, #50	@ 0x32
 800c058:	fb02 f303 	mul.w	r3, r2, r3
 800c05c:	4a11      	ldr	r2, [pc, #68]	@ (800c0a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c05e:	fba2 2303 	umull	r2, r3, r2, r3
 800c062:	099b      	lsrs	r3, r3, #6
 800c064:	3301      	adds	r3, #1
 800c066:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c068:	e002      	b.n	800c070 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3b01      	subs	r3, #1
 800c06e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c070:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d102      	bne.n	800c082 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1f3      	bne.n	800c06a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800c088:	2303      	movs	r3, #3
 800c08a:	e000      	b.n	800c08e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	46020800 	.word	0x46020800
 800c0a0:	20000000 	.word	0x20000000
 800c0a4:	10624dd3 	.word	0x10624dd3

0800c0a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800c0ac:	4b04      	ldr	r3, [pc, #16]	@ (800c0c0 <HAL_PWREx_GetVoltageRange+0x18>)
 800c0ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	46020800 	.word	0x46020800

0800c0c4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800c0c8:	4b05      	ldr	r3, [pc, #20]	@ (800c0e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	4a04      	ldr	r2, [pc, #16]	@ (800c0e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c0ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0d2:	6113      	str	r3, [r2, #16]
}
 800c0d4:	bf00      	nop
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	46020800 	.word	0x46020800

0800c0e4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800c0e8:	4b05      	ldr	r3, [pc, #20]	@ (800c100 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	4a04      	ldr	r2, [pc, #16]	@ (800c100 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c0ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c0f2:	6113      	str	r3, [r2, #16]
}
 800c0f4:	bf00      	nop
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	46020800 	.word	0x46020800

0800c104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b08e      	sub	sp, #56	@ 0x38
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800c10c:	2300      	movs	r3, #0
 800c10e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d102      	bne.n	800c11e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	f000 bec8 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c11e:	4b99      	ldr	r3, [pc, #612]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c120:	69db      	ldr	r3, [r3, #28]
 800c122:	f003 030c 	and.w	r3, r3, #12
 800c126:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c128:	4b96      	ldr	r3, [pc, #600]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c12c:	f003 0303 	and.w	r3, r3, #3
 800c130:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0310 	and.w	r3, r3, #16
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f000 816c 	beq.w	800c418 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <HAL_RCC_OscConfig+0x52>
 800c146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c148:	2b0c      	cmp	r3, #12
 800c14a:	f040 80de 	bne.w	800c30a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c150:	2b01      	cmp	r3, #1
 800c152:	f040 80da 	bne.w	800c30a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	69db      	ldr	r3, [r3, #28]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d102      	bne.n	800c164 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	f000 bea5 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c168:	4b86      	ldr	r3, [pc, #536]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d004      	beq.n	800c17e <HAL_RCC_OscConfig+0x7a>
 800c174:	4b83      	ldr	r3, [pc, #524]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c17c:	e005      	b.n	800c18a <HAL_RCC_OscConfig+0x86>
 800c17e:	4b81      	ldr	r3, [pc, #516]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c184:	041b      	lsls	r3, r3, #16
 800c186:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d255      	bcs.n	800c23a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10a      	bne.n	800c1aa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c198:	4618      	mov	r0, r3
 800c19a:	f001 f9d9 	bl	800d550 <RCC_SetFlashLatencyFromMSIRange>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	f000 be82 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c1aa:	4b76      	ldr	r3, [pc, #472]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	4a75      	ldr	r2, [pc, #468]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c1b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c1b4:	6093      	str	r3, [r2, #8]
 800c1b6:	4b73      	ldr	r3, [pc, #460]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c2:	4970      	ldr	r1, [pc, #448]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c1d0:	d309      	bcc.n	800c1e6 <HAL_RCC_OscConfig+0xe2>
 800c1d2:	4b6c      	ldr	r3, [pc, #432]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f023 021f 	bic.w	r2, r3, #31
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	4969      	ldr	r1, [pc, #420]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	60cb      	str	r3, [r1, #12]
 800c1e4:	e07e      	b.n	800c2e4 <HAL_RCC_OscConfig+0x1e0>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da0a      	bge.n	800c204 <HAL_RCC_OscConfig+0x100>
 800c1ee:	4b65      	ldr	r3, [pc, #404]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	015b      	lsls	r3, r3, #5
 800c1fc:	4961      	ldr	r1, [pc, #388]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c1fe:	4313      	orrs	r3, r2
 800c200:	60cb      	str	r3, [r1, #12]
 800c202:	e06f      	b.n	800c2e4 <HAL_RCC_OscConfig+0x1e0>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c20c:	d30a      	bcc.n	800c224 <HAL_RCC_OscConfig+0x120>
 800c20e:	4b5d      	ldr	r3, [pc, #372]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a1b      	ldr	r3, [r3, #32]
 800c21a:	029b      	lsls	r3, r3, #10
 800c21c:	4959      	ldr	r1, [pc, #356]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	60cb      	str	r3, [r1, #12]
 800c222:	e05f      	b.n	800c2e4 <HAL_RCC_OscConfig+0x1e0>
 800c224:	4b57      	ldr	r3, [pc, #348]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	03db      	lsls	r3, r3, #15
 800c232:	4954      	ldr	r1, [pc, #336]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c234:	4313      	orrs	r3, r2
 800c236:	60cb      	str	r3, [r1, #12]
 800c238:	e054      	b.n	800c2e4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c23a:	4b52      	ldr	r3, [pc, #328]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	4a51      	ldr	r2, [pc, #324]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c240:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c244:	6093      	str	r3, [r2, #8]
 800c246:	4b4f      	ldr	r3, [pc, #316]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c252:	494c      	ldr	r1, [pc, #304]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c254:	4313      	orrs	r3, r2
 800c256:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c260:	d309      	bcc.n	800c276 <HAL_RCC_OscConfig+0x172>
 800c262:	4b48      	ldr	r3, [pc, #288]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f023 021f 	bic.w	r2, r3, #31
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	4945      	ldr	r1, [pc, #276]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c270:	4313      	orrs	r3, r2
 800c272:	60cb      	str	r3, [r1, #12]
 800c274:	e028      	b.n	800c2c8 <HAL_RCC_OscConfig+0x1c4>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	da0a      	bge.n	800c294 <HAL_RCC_OscConfig+0x190>
 800c27e:	4b41      	ldr	r3, [pc, #260]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	015b      	lsls	r3, r3, #5
 800c28c:	493d      	ldr	r1, [pc, #244]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c28e:	4313      	orrs	r3, r2
 800c290:	60cb      	str	r3, [r1, #12]
 800c292:	e019      	b.n	800c2c8 <HAL_RCC_OscConfig+0x1c4>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c29c:	d30a      	bcc.n	800c2b4 <HAL_RCC_OscConfig+0x1b0>
 800c29e:	4b39      	ldr	r3, [pc, #228]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	029b      	lsls	r3, r3, #10
 800c2ac:	4935      	ldr	r1, [pc, #212]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	60cb      	str	r3, [r1, #12]
 800c2b2:	e009      	b.n	800c2c8 <HAL_RCC_OscConfig+0x1c4>
 800c2b4:	4b33      	ldr	r3, [pc, #204]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	03db      	lsls	r3, r3, #15
 800c2c2:	4930      	ldr	r1, [pc, #192]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10a      	bne.n	800c2e4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f001 f93c 	bl	800d550 <RCC_SetFlashLatencyFromMSIRange>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	f000 bde5 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c2e4:	f001 f8de 	bl	800d4a4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c2e8:	4b27      	ldr	r3, [pc, #156]	@ (800c388 <HAL_RCC_OscConfig+0x284>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fc fd69 	bl	8008dc4 <HAL_InitTick>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800c2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 808a 	beq.w	800c416 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800c302:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c306:	f000 bdd2 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	69db      	ldr	r3, [r3, #28]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d066      	beq.n	800c3e0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c312:	4b1c      	ldr	r3, [pc, #112]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a1b      	ldr	r2, [pc, #108]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c318:	f043 0301 	orr.w	r3, r3, #1
 800c31c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c31e:	f7fc fddb 	bl	8008ed8 <HAL_GetTick>
 800c322:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c324:	e009      	b.n	800c33a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c326:	f7fc fdd7 	bl	8008ed8 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	2b02      	cmp	r3, #2
 800c332:	d902      	bls.n	800c33a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	f000 bdba 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c33a:	4b12      	ldr	r3, [pc, #72]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0304 	and.w	r3, r3, #4
 800c342:	2b00      	cmp	r3, #0
 800c344:	d0ef      	beq.n	800c326 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c346:	4b0f      	ldr	r3, [pc, #60]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	4a0e      	ldr	r2, [pc, #56]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c34c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c350:	6093      	str	r3, [r2, #8]
 800c352:	4b0c      	ldr	r3, [pc, #48]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c35e:	4909      	ldr	r1, [pc, #36]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c360:	4313      	orrs	r3, r2
 800c362:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c368:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c36c:	d30e      	bcc.n	800c38c <HAL_RCC_OscConfig+0x288>
 800c36e:	4b05      	ldr	r3, [pc, #20]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	f023 021f 	bic.w	r2, r3, #31
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	4902      	ldr	r1, [pc, #8]	@ (800c384 <HAL_RCC_OscConfig+0x280>)
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60cb      	str	r3, [r1, #12]
 800c380:	e04a      	b.n	800c418 <HAL_RCC_OscConfig+0x314>
 800c382:	bf00      	nop
 800c384:	46020c00 	.word	0x46020c00
 800c388:	20000168 	.word	0x20000168
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c390:	2b00      	cmp	r3, #0
 800c392:	da0a      	bge.n	800c3aa <HAL_RCC_OscConfig+0x2a6>
 800c394:	4b98      	ldr	r3, [pc, #608]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a1b      	ldr	r3, [r3, #32]
 800c3a0:	015b      	lsls	r3, r3, #5
 800c3a2:	4995      	ldr	r1, [pc, #596]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	60cb      	str	r3, [r1, #12]
 800c3a8:	e036      	b.n	800c418 <HAL_RCC_OscConfig+0x314>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3b2:	d30a      	bcc.n	800c3ca <HAL_RCC_OscConfig+0x2c6>
 800c3b4:	4b90      	ldr	r3, [pc, #576]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	029b      	lsls	r3, r3, #10
 800c3c2:	498d      	ldr	r1, [pc, #564]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	60cb      	str	r3, [r1, #12]
 800c3c8:	e026      	b.n	800c418 <HAL_RCC_OscConfig+0x314>
 800c3ca:	4b8b      	ldr	r3, [pc, #556]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	03db      	lsls	r3, r3, #15
 800c3d8:	4987      	ldr	r1, [pc, #540]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	60cb      	str	r3, [r1, #12]
 800c3de:	e01b      	b.n	800c418 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c3e0:	4b85      	ldr	r3, [pc, #532]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a84      	ldr	r2, [pc, #528]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c3e6:	f023 0301 	bic.w	r3, r3, #1
 800c3ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c3ec:	f7fc fd74 	bl	8008ed8 <HAL_GetTick>
 800c3f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c3f2:	e009      	b.n	800c408 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c3f4:	f7fc fd70 	bl	8008ed8 <HAL_GetTick>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d902      	bls.n	800c408 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800c402:	2303      	movs	r3, #3
 800c404:	f000 bd53 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c408:	4b7b      	ldr	r3, [pc, #492]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0304 	and.w	r3, r3, #4
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1ef      	bne.n	800c3f4 <HAL_RCC_OscConfig+0x2f0>
 800c414:	e000      	b.n	800c418 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c416:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f003 0301 	and.w	r3, r3, #1
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 808b 	beq.w	800c53c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c428:	2b08      	cmp	r3, #8
 800c42a:	d005      	beq.n	800c438 <HAL_RCC_OscConfig+0x334>
 800c42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42e:	2b0c      	cmp	r3, #12
 800c430:	d109      	bne.n	800c446 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c434:	2b03      	cmp	r3, #3
 800c436:	d106      	bne.n	800c446 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d17d      	bne.n	800c53c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	f000 bd34 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c44e:	d106      	bne.n	800c45e <HAL_RCC_OscConfig+0x35a>
 800c450:	4b69      	ldr	r3, [pc, #420]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a68      	ldr	r2, [pc, #416]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	e041      	b.n	800c4e2 <HAL_RCC_OscConfig+0x3de>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c466:	d112      	bne.n	800c48e <HAL_RCC_OscConfig+0x38a>
 800c468:	4b63      	ldr	r3, [pc, #396]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a62      	ldr	r2, [pc, #392]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c46e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	4b60      	ldr	r3, [pc, #384]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a5f      	ldr	r2, [pc, #380]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c47a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	4b5d      	ldr	r3, [pc, #372]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a5c      	ldr	r2, [pc, #368]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c48a:	6013      	str	r3, [r2, #0]
 800c48c:	e029      	b.n	800c4e2 <HAL_RCC_OscConfig+0x3de>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800c496:	d112      	bne.n	800c4be <HAL_RCC_OscConfig+0x3ba>
 800c498:	4b57      	ldr	r3, [pc, #348]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a56      	ldr	r2, [pc, #344]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c49e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	4b54      	ldr	r3, [pc, #336]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a53      	ldr	r2, [pc, #332]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	4b51      	ldr	r3, [pc, #324]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a50      	ldr	r2, [pc, #320]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	e011      	b.n	800c4e2 <HAL_RCC_OscConfig+0x3de>
 800c4be:	4b4e      	ldr	r3, [pc, #312]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a4d      	ldr	r2, [pc, #308]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	4b4b      	ldr	r3, [pc, #300]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a4a      	ldr	r2, [pc, #296]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	4b48      	ldr	r3, [pc, #288]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a47      	ldr	r2, [pc, #284]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c4dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c4e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d014      	beq.n	800c514 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800c4ea:	f7fc fcf5 	bl	8008ed8 <HAL_GetTick>
 800c4ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c4f0:	e009      	b.n	800c506 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4f2:	f7fc fcf1 	bl	8008ed8 <HAL_GetTick>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	2b64      	cmp	r3, #100	@ 0x64
 800c4fe:	d902      	bls.n	800c506 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800c500:	2303      	movs	r3, #3
 800c502:	f000 bcd4 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c506:	4b3c      	ldr	r3, [pc, #240]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0ef      	beq.n	800c4f2 <HAL_RCC_OscConfig+0x3ee>
 800c512:	e013      	b.n	800c53c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800c514:	f7fc fce0 	bl	8008ed8 <HAL_GetTick>
 800c518:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c51a:	e009      	b.n	800c530 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c51c:	f7fc fcdc 	bl	8008ed8 <HAL_GetTick>
 800c520:	4602      	mov	r2, r0
 800c522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	2b64      	cmp	r3, #100	@ 0x64
 800c528:	d902      	bls.n	800c530 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	f000 bcbf 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c530:	4b31      	ldr	r3, [pc, #196]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1ef      	bne.n	800c51c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0302 	and.w	r3, r3, #2
 800c544:	2b00      	cmp	r3, #0
 800c546:	d05f      	beq.n	800c608 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	d005      	beq.n	800c55a <HAL_RCC_OscConfig+0x456>
 800c54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c550:	2b0c      	cmp	r3, #12
 800c552:	d114      	bne.n	800c57e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c556:	2b02      	cmp	r3, #2
 800c558:	d111      	bne.n	800c57e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d102      	bne.n	800c568 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	f000 bca3 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c568:	4b23      	ldr	r3, [pc, #140]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	041b      	lsls	r3, r3, #16
 800c576:	4920      	ldr	r1, [pc, #128]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c578:	4313      	orrs	r3, r2
 800c57a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c57c:	e044      	b.n	800c608 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d024      	beq.n	800c5d0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800c586:	4b1c      	ldr	r3, [pc, #112]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c58c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c590:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c592:	f7fc fca1 	bl	8008ed8 <HAL_GetTick>
 800c596:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c598:	e009      	b.n	800c5ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c59a:	f7fc fc9d 	bl	8008ed8 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d902      	bls.n	800c5ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	f000 bc80 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c5ae:	4b12      	ldr	r3, [pc, #72]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d0ef      	beq.n	800c59a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c5ba:	4b0f      	ldr	r3, [pc, #60]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	041b      	lsls	r3, r3, #16
 800c5c8:	490b      	ldr	r1, [pc, #44]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	610b      	str	r3, [r1, #16]
 800c5ce:	e01b      	b.n	800c608 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800c5d0:	4b09      	ldr	r3, [pc, #36]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a08      	ldr	r2, [pc, #32]	@ (800c5f8 <HAL_RCC_OscConfig+0x4f4>)
 800c5d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c5dc:	f7fc fc7c 	bl	8008ed8 <HAL_GetTick>
 800c5e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c5e2:	e00b      	b.n	800c5fc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5e4:	f7fc fc78 	bl	8008ed8 <HAL_GetTick>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d904      	bls.n	800c5fc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	f000 bc5b 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
 800c5f8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c5fc:	4baf      	ldr	r3, [pc, #700]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1ed      	bne.n	800c5e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f003 0308 	and.w	r3, r3, #8
 800c610:	2b00      	cmp	r3, #0
 800c612:	f000 80c8 	beq.w	800c7a6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800c616:	2300      	movs	r3, #0
 800c618:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c61c:	4ba7      	ldr	r3, [pc, #668]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c61e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c622:	f003 0304 	and.w	r3, r3, #4
 800c626:	2b00      	cmp	r3, #0
 800c628:	d111      	bne.n	800c64e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c62a:	4ba4      	ldr	r3, [pc, #656]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c62c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c630:	4aa2      	ldr	r2, [pc, #648]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c632:	f043 0304 	orr.w	r3, r3, #4
 800c636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c63a:	4ba0      	ldr	r3, [pc, #640]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c63c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	617b      	str	r3, [r7, #20]
 800c646:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800c648:	2301      	movs	r3, #1
 800c64a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c64e:	4b9c      	ldr	r3, [pc, #624]	@ (800c8c0 <HAL_RCC_OscConfig+0x7bc>)
 800c650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	d119      	bne.n	800c68e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c65a:	4b99      	ldr	r3, [pc, #612]	@ (800c8c0 <HAL_RCC_OscConfig+0x7bc>)
 800c65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c65e:	4a98      	ldr	r2, [pc, #608]	@ (800c8c0 <HAL_RCC_OscConfig+0x7bc>)
 800c660:	f043 0301 	orr.w	r3, r3, #1
 800c664:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c666:	f7fc fc37 	bl	8008ed8 <HAL_GetTick>
 800c66a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c66c:	e009      	b.n	800c682 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c66e:	f7fc fc33 	bl	8008ed8 <HAL_GetTick>
 800c672:	4602      	mov	r2, r0
 800c674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d902      	bls.n	800c682 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800c67c:	2303      	movs	r3, #3
 800c67e:	f000 bc16 	b.w	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c682:	4b8f      	ldr	r3, [pc, #572]	@ (800c8c0 <HAL_RCC_OscConfig+0x7bc>)
 800c684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0ef      	beq.n	800c66e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d05f      	beq.n	800c756 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800c696:	4b89      	ldr	r3, [pc, #548]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c69c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	699a      	ldr	r2, [r3, #24]
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d037      	beq.n	800c71c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d006      	beq.n	800c6c4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e3f4      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d01b      	beq.n	800c706 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c6ce:	4b7b      	ldr	r3, [pc, #492]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c6d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6d4:	4a79      	ldr	r2, [pc, #484]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c6d6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800c6da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800c6de:	f7fc fbfb 	bl	8008ed8 <HAL_GetTick>
 800c6e2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c6e4:	e008      	b.n	800c6f8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c6e6:	f7fc fbf7 	bl	8008ed8 <HAL_GetTick>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	2b05      	cmp	r3, #5
 800c6f2:	d901      	bls.n	800c6f8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	e3da      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c6f8:	4b70      	ldr	r3, [pc, #448]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c6fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1ef      	bne.n	800c6e6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c706:	4b6d      	ldr	r3, [pc, #436]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c70c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	4969      	ldr	r1, [pc, #420]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c716:	4313      	orrs	r3, r2
 800c718:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c71c:	4b67      	ldr	r3, [pc, #412]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c71e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c722:	4a66      	ldr	r2, [pc, #408]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c728:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800c72c:	f7fc fbd4 	bl	8008ed8 <HAL_GetTick>
 800c730:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c732:	e008      	b.n	800c746 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c734:	f7fc fbd0 	bl	8008ed8 <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	2b05      	cmp	r3, #5
 800c740:	d901      	bls.n	800c746 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	e3b3      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c746:	4b5d      	ldr	r3, [pc, #372]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c74c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0ef      	beq.n	800c734 <HAL_RCC_OscConfig+0x630>
 800c754:	e01b      	b.n	800c78e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c756:	4b59      	ldr	r3, [pc, #356]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c75c:	4a57      	ldr	r2, [pc, #348]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c75e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800c762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800c766:	f7fc fbb7 	bl	8008ed8 <HAL_GetTick>
 800c76a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c76c:	e008      	b.n	800c780 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c76e:	f7fc fbb3 	bl	8008ed8 <HAL_GetTick>
 800c772:	4602      	mov	r2, r0
 800c774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	2b05      	cmp	r3, #5
 800c77a:	d901      	bls.n	800c780 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c77c:	2303      	movs	r3, #3
 800c77e:	e396      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c780:	4b4e      	ldr	r3, [pc, #312]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1ef      	bne.n	800c76e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c78e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c792:	2b01      	cmp	r3, #1
 800c794:	d107      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c796:	4b49      	ldr	r3, [pc, #292]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c79c:	4a47      	ldr	r2, [pc, #284]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c79e:	f023 0304 	bic.w	r3, r3, #4
 800c7a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0304 	and.w	r3, r3, #4
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 8111 	beq.w	800c9d6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7ba:	4b40      	ldr	r3, [pc, #256]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c7bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7c0:	f003 0304 	and.w	r3, r3, #4
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d111      	bne.n	800c7ec <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7c8:	4b3c      	ldr	r3, [pc, #240]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c7ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7ce:	4a3b      	ldr	r2, [pc, #236]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c7d0:	f043 0304 	orr.w	r3, r3, #4
 800c7d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c7d8:	4b38      	ldr	r3, [pc, #224]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c7da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7de:	f003 0304 	and.w	r3, r3, #4
 800c7e2:	613b      	str	r3, [r7, #16]
 800c7e4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c7ec:	4b34      	ldr	r3, [pc, #208]	@ (800c8c0 <HAL_RCC_OscConfig+0x7bc>)
 800c7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7f0:	f003 0301 	and.w	r3, r3, #1
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d118      	bne.n	800c82a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c7f8:	4b31      	ldr	r3, [pc, #196]	@ (800c8c0 <HAL_RCC_OscConfig+0x7bc>)
 800c7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7fc:	4a30      	ldr	r2, [pc, #192]	@ (800c8c0 <HAL_RCC_OscConfig+0x7bc>)
 800c7fe:	f043 0301 	orr.w	r3, r3, #1
 800c802:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c804:	f7fc fb68 	bl	8008ed8 <HAL_GetTick>
 800c808:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c80a:	e008      	b.n	800c81e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c80c:	f7fc fb64 	bl	8008ed8 <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b02      	cmp	r3, #2
 800c818:	d901      	bls.n	800c81e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e347      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c81e:	4b28      	ldr	r3, [pc, #160]	@ (800c8c0 <HAL_RCC_OscConfig+0x7bc>)
 800c820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0f0      	beq.n	800c80c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b00      	cmp	r3, #0
 800c834:	d01f      	beq.n	800c876 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	689b      	ldr	r3, [r3, #8]
 800c83a:	f003 0304 	and.w	r3, r3, #4
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d010      	beq.n	800c864 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c842:	4b1e      	ldr	r3, [pc, #120]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c848:	4a1c      	ldr	r2, [pc, #112]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c84a:	f043 0304 	orr.w	r3, r3, #4
 800c84e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c852:	4b1a      	ldr	r3, [pc, #104]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c858:	4a18      	ldr	r2, [pc, #96]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c85a:	f043 0301 	orr.w	r3, r3, #1
 800c85e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c862:	e018      	b.n	800c896 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c864:	4b15      	ldr	r3, [pc, #84]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c86a:	4a14      	ldr	r2, [pc, #80]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c86c:	f043 0301 	orr.w	r3, r3, #1
 800c870:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c874:	e00f      	b.n	800c896 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c876:	4b11      	ldr	r3, [pc, #68]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c87c:	4a0f      	ldr	r2, [pc, #60]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c87e:	f023 0301 	bic.w	r3, r3, #1
 800c882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c886:	4b0d      	ldr	r3, [pc, #52]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c88c:	4a0b      	ldr	r2, [pc, #44]	@ (800c8bc <HAL_RCC_OscConfig+0x7b8>)
 800c88e:	f023 0304 	bic.w	r3, r3, #4
 800c892:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d057      	beq.n	800c94e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c89e:	f7fc fb1b 	bl	8008ed8 <HAL_GetTick>
 800c8a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8a4:	e00e      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8a6:	f7fc fb17 	bl	8008ed8 <HAL_GetTick>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d905      	bls.n	800c8c4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	e2f8      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
 800c8bc:	46020c00 	.word	0x46020c00
 800c8c0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8c4:	4b9c      	ldr	r3, [pc, #624]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c8c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8ca:	f003 0302 	and.w	r3, r3, #2
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0e9      	beq.n	800c8a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d01b      	beq.n	800c916 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c8de:	4b96      	ldr	r3, [pc, #600]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c8e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8e4:	4a94      	ldr	r2, [pc, #592]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c8e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c8ee:	e00a      	b.n	800c906 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8f0:	f7fc faf2 	bl	8008ed8 <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d901      	bls.n	800c906 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e2d3      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c906:	4b8c      	ldr	r3, [pc, #560]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c90c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c910:	2b00      	cmp	r3, #0
 800c912:	d0ed      	beq.n	800c8f0 <HAL_RCC_OscConfig+0x7ec>
 800c914:	e053      	b.n	800c9be <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c916:	4b88      	ldr	r3, [pc, #544]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c91c:	4a86      	ldr	r2, [pc, #536]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c91e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c922:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c926:	e00a      	b.n	800c93e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c928:	f7fc fad6 	bl	8008ed8 <HAL_GetTick>
 800c92c:	4602      	mov	r2, r0
 800c92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c936:	4293      	cmp	r3, r2
 800c938:	d901      	bls.n	800c93e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c93a:	2303      	movs	r3, #3
 800c93c:	e2b7      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c93e:	4b7e      	ldr	r3, [pc, #504]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1ed      	bne.n	800c928 <HAL_RCC_OscConfig+0x824>
 800c94c:	e037      	b.n	800c9be <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c94e:	f7fc fac3 	bl	8008ed8 <HAL_GetTick>
 800c952:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c954:	e00a      	b.n	800c96c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c956:	f7fc fabf 	bl	8008ed8 <HAL_GetTick>
 800c95a:	4602      	mov	r2, r0
 800c95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c964:	4293      	cmp	r3, r2
 800c966:	d901      	bls.n	800c96c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c968:	2303      	movs	r3, #3
 800c96a:	e2a0      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c96c:	4b72      	ldr	r3, [pc, #456]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c96e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1ed      	bne.n	800c956 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c97a:	4b6f      	ldr	r3, [pc, #444]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c97c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c984:	2b00      	cmp	r3, #0
 800c986:	d01a      	beq.n	800c9be <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c988:	4b6b      	ldr	r3, [pc, #428]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c98a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c98e:	4a6a      	ldr	r2, [pc, #424]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c994:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c998:	e00a      	b.n	800c9b0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c99a:	f7fc fa9d 	bl	8008ed8 <HAL_GetTick>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d901      	bls.n	800c9b0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	e27e      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c9b0:	4b61      	ldr	r3, [pc, #388]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c9b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c9b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1ed      	bne.n	800c99a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c9be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d107      	bne.n	800c9d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9c6:	4b5c      	ldr	r3, [pc, #368]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c9c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c9cc:	4a5a      	ldr	r2, [pc, #360]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c9ce:	f023 0304 	bic.w	r3, r3, #4
 800c9d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0320 	and.w	r3, r3, #32
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d036      	beq.n	800ca50 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d019      	beq.n	800ca1e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c9ea:	4b53      	ldr	r3, [pc, #332]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a52      	ldr	r2, [pc, #328]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800c9f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c9f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c9f6:	f7fc fa6f 	bl	8008ed8 <HAL_GetTick>
 800c9fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c9fc:	e008      	b.n	800ca10 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9fe:	f7fc fa6b 	bl	8008ed8 <HAL_GetTick>
 800ca02:	4602      	mov	r2, r0
 800ca04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d901      	bls.n	800ca10 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	e24e      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ca10:	4b49      	ldr	r3, [pc, #292]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d0f0      	beq.n	800c9fe <HAL_RCC_OscConfig+0x8fa>
 800ca1c:	e018      	b.n	800ca50 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800ca1e:	4b46      	ldr	r3, [pc, #280]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a45      	ldr	r2, [pc, #276]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca28:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ca2a:	f7fc fa55 	bl	8008ed8 <HAL_GetTick>
 800ca2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ca30:	e008      	b.n	800ca44 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ca32:	f7fc fa51 	bl	8008ed8 <HAL_GetTick>
 800ca36:	4602      	mov	r2, r0
 800ca38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d901      	bls.n	800ca44 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800ca40:	2303      	movs	r3, #3
 800ca42:	e234      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ca44:	4b3c      	ldr	r3, [pc, #240]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1f0      	bne.n	800ca32 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d036      	beq.n	800caca <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d019      	beq.n	800ca98 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800ca64:	4b34      	ldr	r3, [pc, #208]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a33      	ldr	r2, [pc, #204]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ca6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ca70:	f7fc fa32 	bl	8008ed8 <HAL_GetTick>
 800ca74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ca76:	e008      	b.n	800ca8a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ca78:	f7fc fa2e 	bl	8008ed8 <HAL_GetTick>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d901      	bls.n	800ca8a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800ca86:	2303      	movs	r3, #3
 800ca88:	e211      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ca8a:	4b2b      	ldr	r3, [pc, #172]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0f0      	beq.n	800ca78 <HAL_RCC_OscConfig+0x974>
 800ca96:	e018      	b.n	800caca <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800ca98:	4b27      	ldr	r3, [pc, #156]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a26      	ldr	r2, [pc, #152]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800ca9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800caa2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800caa4:	f7fc fa18 	bl	8008ed8 <HAL_GetTick>
 800caa8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800caaa:	e008      	b.n	800cabe <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800caac:	f7fc fa14 	bl	8008ed8 <HAL_GetTick>
 800cab0:	4602      	mov	r2, r0
 800cab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab4:	1ad3      	subs	r3, r2, r3
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d901      	bls.n	800cabe <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800caba:	2303      	movs	r3, #3
 800cabc:	e1f7      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800cabe:	4b1e      	ldr	r3, [pc, #120]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1f0      	bne.n	800caac <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d07f      	beq.n	800cbd6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d062      	beq.n	800cba4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800cade:	4b16      	ldr	r3, [pc, #88]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	4a15      	ldr	r2, [pc, #84]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800cae4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cae8:	6093      	str	r3, [r2, #8]
 800caea:	4b13      	ldr	r3, [pc, #76]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf6:	4910      	ldr	r1, [pc, #64]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb00:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800cb04:	d309      	bcc.n	800cb1a <HAL_RCC_OscConfig+0xa16>
 800cb06:	4b0c      	ldr	r3, [pc, #48]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	f023 021f 	bic.w	r2, r3, #31
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a1b      	ldr	r3, [r3, #32]
 800cb12:	4909      	ldr	r1, [pc, #36]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800cb14:	4313      	orrs	r3, r2
 800cb16:	60cb      	str	r3, [r1, #12]
 800cb18:	e02a      	b.n	800cb70 <HAL_RCC_OscConfig+0xa6c>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	da0c      	bge.n	800cb3c <HAL_RCC_OscConfig+0xa38>
 800cb22:	4b05      	ldr	r3, [pc, #20]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	015b      	lsls	r3, r3, #5
 800cb30:	4901      	ldr	r1, [pc, #4]	@ (800cb38 <HAL_RCC_OscConfig+0xa34>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60cb      	str	r3, [r1, #12]
 800cb36:	e01b      	b.n	800cb70 <HAL_RCC_OscConfig+0xa6c>
 800cb38:	46020c00 	.word	0x46020c00
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb44:	d30a      	bcc.n	800cb5c <HAL_RCC_OscConfig+0xa58>
 800cb46:	4ba1      	ldr	r3, [pc, #644]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	029b      	lsls	r3, r3, #10
 800cb54:	499d      	ldr	r1, [pc, #628]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cb56:	4313      	orrs	r3, r2
 800cb58:	60cb      	str	r3, [r1, #12]
 800cb5a:	e009      	b.n	800cb70 <HAL_RCC_OscConfig+0xa6c>
 800cb5c:	4b9b      	ldr	r3, [pc, #620]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6a1b      	ldr	r3, [r3, #32]
 800cb68:	03db      	lsls	r3, r3, #15
 800cb6a:	4998      	ldr	r1, [pc, #608]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800cb70:	4b96      	ldr	r3, [pc, #600]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a95      	ldr	r2, [pc, #596]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cb76:	f043 0310 	orr.w	r3, r3, #16
 800cb7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cb7c:	f7fc f9ac 	bl	8008ed8 <HAL_GetTick>
 800cb80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cb82:	e008      	b.n	800cb96 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cb84:	f7fc f9a8 	bl	8008ed8 <HAL_GetTick>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d901      	bls.n	800cb96 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800cb92:	2303      	movs	r3, #3
 800cb94:	e18b      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cb96:	4b8d      	ldr	r3, [pc, #564]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0320 	and.w	r3, r3, #32
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d0f0      	beq.n	800cb84 <HAL_RCC_OscConfig+0xa80>
 800cba2:	e018      	b.n	800cbd6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800cba4:	4b89      	ldr	r3, [pc, #548]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a88      	ldr	r2, [pc, #544]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cbaa:	f023 0310 	bic.w	r3, r3, #16
 800cbae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cbb0:	f7fc f992 	bl	8008ed8 <HAL_GetTick>
 800cbb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cbb6:	e008      	b.n	800cbca <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cbb8:	f7fc f98e 	bl	8008ed8 <HAL_GetTick>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d901      	bls.n	800cbca <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	e171      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cbca:	4b80      	ldr	r3, [pc, #512]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 0320 	and.w	r3, r3, #32
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1f0      	bne.n	800cbb8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 8166 	beq.w	800ceac <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cbe6:	4b79      	ldr	r3, [pc, #484]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cbe8:	69db      	ldr	r3, [r3, #28]
 800cbea:	f003 030c 	and.w	r3, r3, #12
 800cbee:	2b0c      	cmp	r3, #12
 800cbf0:	f000 80f2 	beq.w	800cdd8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	f040 80c5 	bne.w	800cd88 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800cbfe:	4b73      	ldr	r3, [pc, #460]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a72      	ldr	r2, [pc, #456]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cc04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cc08:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cc0a:	f7fc f965 	bl	8008ed8 <HAL_GetTick>
 800cc0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cc10:	e008      	b.n	800cc24 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc12:	f7fc f961 	bl	8008ed8 <HAL_GetTick>
 800cc16:	4602      	mov	r2, r0
 800cc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d901      	bls.n	800cc24 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e144      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cc24:	4b69      	ldr	r3, [pc, #420]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1f0      	bne.n	800cc12 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc30:	4b66      	ldr	r3, [pc, #408]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cc32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc36:	f003 0304 	and.w	r3, r3, #4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d111      	bne.n	800cc62 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800cc3e:	4b63      	ldr	r3, [pc, #396]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cc40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc44:	4a61      	ldr	r2, [pc, #388]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cc46:	f043 0304 	orr.w	r3, r3, #4
 800cc4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800cc4e:	4b5f      	ldr	r3, [pc, #380]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cc50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800cc62:	4b5b      	ldr	r3, [pc, #364]	@ (800cdd0 <HAL_RCC_OscConfig+0xccc>)
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cc6e:	d102      	bne.n	800cc76 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800cc70:	2301      	movs	r3, #1
 800cc72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800cc76:	4b56      	ldr	r3, [pc, #344]	@ (800cdd0 <HAL_RCC_OscConfig+0xccc>)
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	4a55      	ldr	r2, [pc, #340]	@ (800cdd0 <HAL_RCC_OscConfig+0xccc>)
 800cc7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cc80:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800cc82:	4b52      	ldr	r3, [pc, #328]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cc84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cc8a:	f023 0303 	bic.w	r3, r3, #3
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800cc96:	3a01      	subs	r2, #1
 800cc98:	0212      	lsls	r2, r2, #8
 800cc9a:	4311      	orrs	r1, r2
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800cca0:	430a      	orrs	r2, r1
 800cca2:	494a      	ldr	r1, [pc, #296]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cca4:	4313      	orrs	r3, r2
 800cca6:	628b      	str	r3, [r1, #40]	@ 0x28
 800cca8:	4b48      	ldr	r3, [pc, #288]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800ccaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccac:	4b49      	ldr	r3, [pc, #292]	@ (800cdd4 <HAL_RCC_OscConfig+0xcd0>)
 800ccae:	4013      	ands	r3, r2
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ccb4:	3a01      	subs	r2, #1
 800ccb6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ccbe:	3a01      	subs	r2, #1
 800ccc0:	0252      	lsls	r2, r2, #9
 800ccc2:	b292      	uxth	r2, r2
 800ccc4:	4311      	orrs	r1, r2
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ccca:	3a01      	subs	r2, #1
 800cccc:	0412      	lsls	r2, r2, #16
 800ccce:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ccd2:	4311      	orrs	r1, r2
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ccd8:	3a01      	subs	r2, #1
 800ccda:	0612      	lsls	r2, r2, #24
 800ccdc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800cce0:	430a      	orrs	r2, r1
 800cce2:	493a      	ldr	r1, [pc, #232]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cce4:	4313      	orrs	r3, r2
 800cce6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800cce8:	4b38      	ldr	r3, [pc, #224]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800ccea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccec:	4a37      	ldr	r2, [pc, #220]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800ccee:	f023 0310 	bic.w	r3, r3, #16
 800ccf2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccf8:	4a34      	ldr	r2, [pc, #208]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800ccfe:	4b33      	ldr	r3, [pc, #204]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd02:	4a32      	ldr	r2, [pc, #200]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd04:	f043 0310 	orr.w	r3, r3, #16
 800cd08:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800cd0a:	4b30      	ldr	r3, [pc, #192]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd0e:	f023 020c 	bic.w	r2, r3, #12
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd16:	492d      	ldr	r1, [pc, #180]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800cd1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d105      	bne.n	800cd30 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800cd24:	4b2a      	ldr	r3, [pc, #168]	@ (800cdd0 <HAL_RCC_OscConfig+0xccc>)
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	4a29      	ldr	r2, [pc, #164]	@ (800cdd0 <HAL_RCC_OscConfig+0xccc>)
 800cd2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cd2e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800cd30:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d107      	bne.n	800cd48 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800cd38:	4b24      	ldr	r3, [pc, #144]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd3e:	4a23      	ldr	r2, [pc, #140]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd40:	f023 0304 	bic.w	r3, r3, #4
 800cd44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800cd48:	4b20      	ldr	r3, [pc, #128]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a1f      	ldr	r2, [pc, #124]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cd52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cd54:	f7fc f8c0 	bl	8008ed8 <HAL_GetTick>
 800cd58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cd5a:	e008      	b.n	800cd6e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd5c:	f7fc f8bc 	bl	8008ed8 <HAL_GetTick>
 800cd60:	4602      	mov	r2, r0
 800cd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d901      	bls.n	800cd6e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	e09f      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cd6e:	4b17      	ldr	r3, [pc, #92]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d0f0      	beq.n	800cd5c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cd7a:	4b14      	ldr	r3, [pc, #80]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7e:	4a13      	ldr	r2, [pc, #76]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cd84:	6293      	str	r3, [r2, #40]	@ 0x28
 800cd86:	e091      	b.n	800ceac <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800cd88:	4b10      	ldr	r3, [pc, #64]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a0f      	ldr	r2, [pc, #60]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cd8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cd92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cd94:	f7fc f8a0 	bl	8008ed8 <HAL_GetTick>
 800cd98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cd9a:	e008      	b.n	800cdae <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd9c:	f7fc f89c 	bl	8008ed8 <HAL_GetTick>
 800cda0:	4602      	mov	r2, r0
 800cda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d901      	bls.n	800cdae <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	e07f      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cdae:	4b07      	ldr	r3, [pc, #28]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1f0      	bne.n	800cd9c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800cdba:	4b04      	ldr	r3, [pc, #16]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdbe:	4a03      	ldr	r2, [pc, #12]	@ (800cdcc <HAL_RCC_OscConfig+0xcc8>)
 800cdc0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800cdc4:	f023 0303 	bic.w	r3, r3, #3
 800cdc8:	6293      	str	r3, [r2, #40]	@ 0x28
 800cdca:	e06f      	b.n	800ceac <HAL_RCC_OscConfig+0xda8>
 800cdcc:	46020c00 	.word	0x46020c00
 800cdd0:	46020800 	.word	0x46020800
 800cdd4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800cdd8:	4b37      	ldr	r3, [pc, #220]	@ (800ceb8 <HAL_RCC_OscConfig+0xdb4>)
 800cdda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cddc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cdde:	4b36      	ldr	r3, [pc, #216]	@ (800ceb8 <HAL_RCC_OscConfig+0xdb4>)
 800cde0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cde2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d039      	beq.n	800ce60 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	f003 0203 	and.w	r2, r3, #3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d132      	bne.n	800ce60 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	0a1b      	lsrs	r3, r3, #8
 800cdfe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce06:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d129      	bne.n	800ce60 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d122      	bne.n	800ce60 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce24:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d11a      	bne.n	800ce60 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	0a5b      	lsrs	r3, r3, #9
 800ce2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d111      	bne.n	800ce60 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	0c1b      	lsrs	r3, r3, #16
 800ce40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce48:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d108      	bne.n	800ce60 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	0e1b      	lsrs	r3, r3, #24
 800ce52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce5a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d001      	beq.n	800ce64 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e024      	b.n	800ceae <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800ce64:	4b14      	ldr	r3, [pc, #80]	@ (800ceb8 <HAL_RCC_OscConfig+0xdb4>)
 800ce66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce68:	08db      	lsrs	r3, r3, #3
 800ce6a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d01a      	beq.n	800ceac <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800ce76:	4b10      	ldr	r3, [pc, #64]	@ (800ceb8 <HAL_RCC_OscConfig+0xdb4>)
 800ce78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce7a:	4a0f      	ldr	r2, [pc, #60]	@ (800ceb8 <HAL_RCC_OscConfig+0xdb4>)
 800ce7c:	f023 0310 	bic.w	r3, r3, #16
 800ce80:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce82:	f7fc f829 	bl	8008ed8 <HAL_GetTick>
 800ce86:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800ce88:	bf00      	nop
 800ce8a:	f7fc f825 	bl	8008ed8 <HAL_GetTick>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d0f9      	beq.n	800ce8a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce9a:	4a07      	ldr	r2, [pc, #28]	@ (800ceb8 <HAL_RCC_OscConfig+0xdb4>)
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800cea0:	4b05      	ldr	r3, [pc, #20]	@ (800ceb8 <HAL_RCC_OscConfig+0xdb4>)
 800cea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cea4:	4a04      	ldr	r2, [pc, #16]	@ (800ceb8 <HAL_RCC_OscConfig+0xdb4>)
 800cea6:	f043 0310 	orr.w	r3, r3, #16
 800ceaa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3738      	adds	r7, #56	@ 0x38
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	46020c00 	.word	0x46020c00

0800cebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	e1d9      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ced0:	4b9b      	ldr	r3, [pc, #620]	@ (800d140 <HAL_RCC_ClockConfig+0x284>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 030f 	and.w	r3, r3, #15
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d910      	bls.n	800cf00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cede:	4b98      	ldr	r3, [pc, #608]	@ (800d140 <HAL_RCC_ClockConfig+0x284>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f023 020f 	bic.w	r2, r3, #15
 800cee6:	4996      	ldr	r1, [pc, #600]	@ (800d140 <HAL_RCC_ClockConfig+0x284>)
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ceee:	4b94      	ldr	r3, [pc, #592]	@ (800d140 <HAL_RCC_ClockConfig+0x284>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f003 030f 	and.w	r3, r3, #15
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d001      	beq.n	800cf00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e1c1      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 0310 	and.w	r3, r3, #16
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d010      	beq.n	800cf2e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	695a      	ldr	r2, [r3, #20]
 800cf10:	4b8c      	ldr	r3, [pc, #560]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d908      	bls.n	800cf2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800cf1c:	4b89      	ldr	r3, [pc, #548]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	4986      	ldr	r1, [pc, #536]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f003 0308 	and.w	r3, r3, #8
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d012      	beq.n	800cf60 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	691a      	ldr	r2, [r3, #16]
 800cf3e:	4b81      	ldr	r3, [pc, #516]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	091b      	lsrs	r3, r3, #4
 800cf44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d909      	bls.n	800cf60 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cf4c:	4b7d      	ldr	r3, [pc, #500]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf4e:	6a1b      	ldr	r3, [r3, #32]
 800cf50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	011b      	lsls	r3, r3, #4
 800cf5a:	497a      	ldr	r1, [pc, #488]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 0304 	and.w	r3, r3, #4
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d010      	beq.n	800cf8e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68da      	ldr	r2, [r3, #12]
 800cf70:	4b74      	ldr	r3, [pc, #464]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf72:	6a1b      	ldr	r3, [r3, #32]
 800cf74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d908      	bls.n	800cf8e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cf7c:	4b71      	ldr	r3, [pc, #452]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	496e      	ldr	r1, [pc, #440]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 0302 	and.w	r3, r3, #2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d010      	beq.n	800cfbc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	689a      	ldr	r2, [r3, #8]
 800cf9e:	4b69      	ldr	r3, [pc, #420]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	f003 030f 	and.w	r3, r3, #15
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d908      	bls.n	800cfbc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cfaa:	4b66      	ldr	r3, [pc, #408]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	f023 020f 	bic.w	r2, r3, #15
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	4963      	ldr	r1, [pc, #396]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 80d2 	beq.w	800d16e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	2b03      	cmp	r3, #3
 800cfd4:	d143      	bne.n	800d05e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cfd6:	4b5b      	ldr	r3, [pc, #364]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cfd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cfdc:	f003 0304 	and.w	r3, r3, #4
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d110      	bne.n	800d006 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800cfe4:	4b57      	ldr	r3, [pc, #348]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cfe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cfea:	4a56      	ldr	r2, [pc, #344]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cfec:	f043 0304 	orr.w	r3, r3, #4
 800cff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800cff4:	4b53      	ldr	r3, [pc, #332]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800cff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cffa:	f003 0304 	and.w	r3, r3, #4
 800cffe:	60bb      	str	r3, [r7, #8]
 800d000:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800d002:	2301      	movs	r3, #1
 800d004:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800d006:	f7fb ff67 	bl	8008ed8 <HAL_GetTick>
 800d00a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800d00c:	4b4e      	ldr	r3, [pc, #312]	@ (800d148 <HAL_RCC_ClockConfig+0x28c>)
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00f      	beq.n	800d038 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d018:	e008      	b.n	800d02c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800d01a:	f7fb ff5d 	bl	8008ed8 <HAL_GetTick>
 800d01e:	4602      	mov	r2, r0
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	1ad3      	subs	r3, r2, r3
 800d024:	2b02      	cmp	r3, #2
 800d026:	d901      	bls.n	800d02c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e12b      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d02c:	4b46      	ldr	r3, [pc, #280]	@ (800d148 <HAL_RCC_ClockConfig+0x28c>)
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0f0      	beq.n	800d01a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d038:	7dfb      	ldrb	r3, [r7, #23]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d107      	bne.n	800d04e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d03e:	4b41      	ldr	r3, [pc, #260]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d044:	4a3f      	ldr	r2, [pc, #252]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d046:	f023 0304 	bic.w	r3, r3, #4
 800d04a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d04e:	4b3d      	ldr	r3, [pc, #244]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d121      	bne.n	800d09e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e112      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	2b02      	cmp	r3, #2
 800d064:	d107      	bne.n	800d076 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d066:	4b37      	ldr	r3, [pc, #220]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d115      	bne.n	800d09e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d072:	2301      	movs	r3, #1
 800d074:	e106      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d107      	bne.n	800d08e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800d07e:	4b31      	ldr	r3, [pc, #196]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 0304 	and.w	r3, r3, #4
 800d086:	2b00      	cmp	r3, #0
 800d088:	d109      	bne.n	800d09e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d08a:	2301      	movs	r3, #1
 800d08c:	e0fa      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d08e:	4b2d      	ldr	r3, [pc, #180]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d096:	2b00      	cmp	r3, #0
 800d098:	d101      	bne.n	800d09e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e0f2      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800d09e:	4b29      	ldr	r3, [pc, #164]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d0a0:	69db      	ldr	r3, [r3, #28]
 800d0a2:	f023 0203 	bic.w	r2, r3, #3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	4926      	ldr	r1, [pc, #152]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800d0b0:	f7fb ff12 	bl	8008ed8 <HAL_GetTick>
 800d0b4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	2b03      	cmp	r3, #3
 800d0bc:	d112      	bne.n	800d0e4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d0be:	e00a      	b.n	800d0d6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0c0:	f7fb ff0a 	bl	8008ed8 <HAL_GetTick>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d901      	bls.n	800d0d6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800d0d2:	2303      	movs	r3, #3
 800d0d4:	e0d6      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d0d6:	4b1b      	ldr	r3, [pc, #108]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d0d8:	69db      	ldr	r3, [r3, #28]
 800d0da:	f003 030c 	and.w	r3, r3, #12
 800d0de:	2b0c      	cmp	r3, #12
 800d0e0:	d1ee      	bne.n	800d0c0 <HAL_RCC_ClockConfig+0x204>
 800d0e2:	e044      	b.n	800d16e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d112      	bne.n	800d112 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0ec:	e00a      	b.n	800d104 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0ee:	f7fb fef3 	bl	8008ed8 <HAL_GetTick>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d901      	bls.n	800d104 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d100:	2303      	movs	r3, #3
 800d102:	e0bf      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d104:	4b0f      	ldr	r3, [pc, #60]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d106:	69db      	ldr	r3, [r3, #28]
 800d108:	f003 030c 	and.w	r3, r3, #12
 800d10c:	2b08      	cmp	r3, #8
 800d10e:	d1ee      	bne.n	800d0ee <HAL_RCC_ClockConfig+0x232>
 800d110:	e02d      	b.n	800d16e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d123      	bne.n	800d162 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d11a:	e00a      	b.n	800d132 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d11c:	f7fb fedc 	bl	8008ed8 <HAL_GetTick>
 800d120:	4602      	mov	r2, r0
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d901      	bls.n	800d132 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800d12e:	2303      	movs	r3, #3
 800d130:	e0a8      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d132:	4b04      	ldr	r3, [pc, #16]	@ (800d144 <HAL_RCC_ClockConfig+0x288>)
 800d134:	69db      	ldr	r3, [r3, #28]
 800d136:	f003 030c 	and.w	r3, r3, #12
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1ee      	bne.n	800d11c <HAL_RCC_ClockConfig+0x260>
 800d13e:	e016      	b.n	800d16e <HAL_RCC_ClockConfig+0x2b2>
 800d140:	40022000 	.word	0x40022000
 800d144:	46020c00 	.word	0x46020c00
 800d148:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d14c:	f7fb fec4 	bl	8008ed8 <HAL_GetTick>
 800d150:	4602      	mov	r2, r0
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d901      	bls.n	800d162 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800d15e:	2303      	movs	r3, #3
 800d160:	e090      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d162:	4b4a      	ldr	r3, [pc, #296]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d164:	69db      	ldr	r3, [r3, #28]
 800d166:	f003 030c 	and.w	r3, r3, #12
 800d16a:	2b04      	cmp	r3, #4
 800d16c:	d1ee      	bne.n	800d14c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 0302 	and.w	r3, r3, #2
 800d176:	2b00      	cmp	r3, #0
 800d178:	d010      	beq.n	800d19c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	689a      	ldr	r2, [r3, #8]
 800d17e:	4b43      	ldr	r3, [pc, #268]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d180:	6a1b      	ldr	r3, [r3, #32]
 800d182:	f003 030f 	and.w	r3, r3, #15
 800d186:	429a      	cmp	r2, r3
 800d188:	d208      	bcs.n	800d19c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d18a:	4b40      	ldr	r3, [pc, #256]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	f023 020f 	bic.w	r2, r3, #15
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	493d      	ldr	r1, [pc, #244]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d198:	4313      	orrs	r3, r2
 800d19a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d19c:	4b3c      	ldr	r3, [pc, #240]	@ (800d290 <HAL_RCC_ClockConfig+0x3d4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 030f 	and.w	r3, r3, #15
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d210      	bcs.n	800d1cc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1aa:	4b39      	ldr	r3, [pc, #228]	@ (800d290 <HAL_RCC_ClockConfig+0x3d4>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f023 020f 	bic.w	r2, r3, #15
 800d1b2:	4937      	ldr	r1, [pc, #220]	@ (800d290 <HAL_RCC_ClockConfig+0x3d4>)
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1ba:	4b35      	ldr	r3, [pc, #212]	@ (800d290 <HAL_RCC_ClockConfig+0x3d4>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f003 030f 	and.w	r3, r3, #15
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d001      	beq.n	800d1cc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e05b      	b.n	800d284 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 0304 	and.w	r3, r3, #4
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d010      	beq.n	800d1fa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68da      	ldr	r2, [r3, #12]
 800d1dc:	4b2b      	ldr	r3, [pc, #172]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d1de:	6a1b      	ldr	r3, [r3, #32]
 800d1e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d208      	bcs.n	800d1fa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d1e8:	4b28      	ldr	r3, [pc, #160]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d1ea:	6a1b      	ldr	r3, [r3, #32]
 800d1ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	4925      	ldr	r1, [pc, #148]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f003 0308 	and.w	r3, r3, #8
 800d202:	2b00      	cmp	r3, #0
 800d204:	d012      	beq.n	800d22c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	691a      	ldr	r2, [r3, #16]
 800d20a:	4b20      	ldr	r3, [pc, #128]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	091b      	lsrs	r3, r3, #4
 800d210:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d214:	429a      	cmp	r2, r3
 800d216:	d209      	bcs.n	800d22c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d218:	4b1c      	ldr	r3, [pc, #112]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d21a:	6a1b      	ldr	r3, [r3, #32]
 800d21c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	011b      	lsls	r3, r3, #4
 800d226:	4919      	ldr	r1, [pc, #100]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f003 0310 	and.w	r3, r3, #16
 800d234:	2b00      	cmp	r3, #0
 800d236:	d010      	beq.n	800d25a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	695a      	ldr	r2, [r3, #20]
 800d23c:	4b13      	ldr	r3, [pc, #76]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d244:	429a      	cmp	r2, r3
 800d246:	d208      	bcs.n	800d25a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d248:	4b10      	ldr	r3, [pc, #64]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d24c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	490d      	ldr	r1, [pc, #52]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d256:	4313      	orrs	r3, r2
 800d258:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d25a:	f000 f821 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800d25e:	4602      	mov	r2, r0
 800d260:	4b0a      	ldr	r3, [pc, #40]	@ (800d28c <HAL_RCC_ClockConfig+0x3d0>)
 800d262:	6a1b      	ldr	r3, [r3, #32]
 800d264:	f003 030f 	and.w	r3, r3, #15
 800d268:	490a      	ldr	r1, [pc, #40]	@ (800d294 <HAL_RCC_ClockConfig+0x3d8>)
 800d26a:	5ccb      	ldrb	r3, [r1, r3]
 800d26c:	fa22 f303 	lsr.w	r3, r2, r3
 800d270:	4a09      	ldr	r2, [pc, #36]	@ (800d298 <HAL_RCC_ClockConfig+0x3dc>)
 800d272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d274:	4b09      	ldr	r3, [pc, #36]	@ (800d29c <HAL_RCC_ClockConfig+0x3e0>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fb fda3 	bl	8008dc4 <HAL_InitTick>
 800d27e:	4603      	mov	r3, r0
 800d280:	73fb      	strb	r3, [r7, #15]

  return status;
 800d282:	7bfb      	ldrb	r3, [r7, #15]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3718      	adds	r7, #24
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	46020c00 	.word	0x46020c00
 800d290:	40022000 	.word	0x40022000
 800d294:	080158b0 	.word	0x080158b0
 800d298:	20000000 	.word	0x20000000
 800d29c:	20000168 	.word	0x20000168

0800d2a0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b08b      	sub	sp, #44	@ 0x2c
 800d2a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2ae:	4b78      	ldr	r3, [pc, #480]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d2b0:	69db      	ldr	r3, [r3, #28]
 800d2b2:	f003 030c 	and.w	r3, r3, #12
 800d2b6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d2b8:	4b75      	ldr	r3, [pc, #468]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2bc:	f003 0303 	and.w	r3, r3, #3
 800d2c0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d005      	beq.n	800d2d4 <HAL_RCC_GetSysClockFreq+0x34>
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	2b0c      	cmp	r3, #12
 800d2cc:	d121      	bne.n	800d312 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d11e      	bne.n	800d312 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d2d4:	4b6e      	ldr	r3, [pc, #440]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d107      	bne.n	800d2f0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d2e0:	4b6b      	ldr	r3, [pc, #428]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d2e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2e6:	0b1b      	lsrs	r3, r3, #12
 800d2e8:	f003 030f 	and.w	r3, r3, #15
 800d2ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2ee:	e005      	b.n	800d2fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800d2f0:	4b67      	ldr	r3, [pc, #412]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	0f1b      	lsrs	r3, r3, #28
 800d2f6:	f003 030f 	and.w	r3, r3, #15
 800d2fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d2fc:	4a65      	ldr	r2, [pc, #404]	@ (800d494 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d304:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d110      	bne.n	800d32e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d310:	e00d      	b.n	800d32e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d312:	4b5f      	ldr	r3, [pc, #380]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d314:	69db      	ldr	r3, [r3, #28]
 800d316:	f003 030c 	and.w	r3, r3, #12
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	d102      	bne.n	800d324 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d31e:	4b5e      	ldr	r3, [pc, #376]	@ (800d498 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d320:	623b      	str	r3, [r7, #32]
 800d322:	e004      	b.n	800d32e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	2b08      	cmp	r3, #8
 800d328:	d101      	bne.n	800d32e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d32a:	4b5b      	ldr	r3, [pc, #364]	@ (800d498 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d32c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	2b0c      	cmp	r3, #12
 800d332:	f040 80a5 	bne.w	800d480 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d336:	4b56      	ldr	r3, [pc, #344]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d33a:	f003 0303 	and.w	r3, r3, #3
 800d33e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d340:	4b53      	ldr	r3, [pc, #332]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d344:	0a1b      	lsrs	r3, r3, #8
 800d346:	f003 030f 	and.w	r3, r3, #15
 800d34a:	3301      	adds	r3, #1
 800d34c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d34e:	4b50      	ldr	r3, [pc, #320]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d352:	091b      	lsrs	r3, r3, #4
 800d354:	f003 0301 	and.w	r3, r3, #1
 800d358:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d35a:	4b4d      	ldr	r3, [pc, #308]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d35c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d35e:	08db      	lsrs	r3, r3, #3
 800d360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	fb02 f303 	mul.w	r3, r2, r3
 800d36a:	ee07 3a90 	vmov	s15, r3
 800d36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d372:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d003      	beq.n	800d384 <HAL_RCC_GetSysClockFreq+0xe4>
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	2b03      	cmp	r3, #3
 800d380:	d022      	beq.n	800d3c8 <HAL_RCC_GetSysClockFreq+0x128>
 800d382:	e043      	b.n	800d40c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	ee07 3a90 	vmov	s15, r3
 800d38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d38e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800d49c <HAL_RCC_GetSysClockFreq+0x1fc>
 800d392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d396:	4b3e      	ldr	r3, [pc, #248]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d39e:	ee07 3a90 	vmov	s15, r3
 800d3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d3a6:	ed97 6a01 	vldr	s12, [r7, #4]
 800d3aa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800d4a0 <HAL_RCC_GetSysClockFreq+0x200>
 800d3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3c6:	e046      	b.n	800d456 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	ee07 3a90 	vmov	s15, r3
 800d3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800d49c <HAL_RCC_GetSysClockFreq+0x1fc>
 800d3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3da:	4b2d      	ldr	r3, [pc, #180]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d3dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e2:	ee07 3a90 	vmov	s15, r3
 800d3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d3ea:	ed97 6a01 	vldr	s12, [r7, #4]
 800d3ee:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800d4a0 <HAL_RCC_GetSysClockFreq+0x200>
 800d3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d3fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d40a:	e024      	b.n	800d456 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40e:	ee07 3a90 	vmov	s15, r3
 800d412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	ee07 3a90 	vmov	s15, r3
 800d41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d424:	4b1a      	ldr	r3, [pc, #104]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d42c:	ee07 3a90 	vmov	s15, r3
 800d430:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d434:	ed97 6a01 	vldr	s12, [r7, #4]
 800d438:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800d4a0 <HAL_RCC_GetSysClockFreq+0x200>
 800d43c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d440:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d448:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d450:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d454:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800d456:	4b0e      	ldr	r3, [pc, #56]	@ (800d490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d45a:	0e1b      	lsrs	r3, r3, #24
 800d45c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d460:	3301      	adds	r3, #1
 800d462:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	ee07 3a90 	vmov	s15, r3
 800d46a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d46e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d47a:	ee17 3a90 	vmov	r3, s15
 800d47e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800d480:	6a3b      	ldr	r3, [r7, #32]
}
 800d482:	4618      	mov	r0, r3
 800d484:	372c      	adds	r7, #44	@ 0x2c
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	46020c00 	.word	0x46020c00
 800d494:	080158c8 	.word	0x080158c8
 800d498:	00f42400 	.word	0x00f42400
 800d49c:	4b742400 	.word	0x4b742400
 800d4a0:	46000000 	.word	0x46000000

0800d4a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d4a8:	f7ff fefa 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	4b07      	ldr	r3, [pc, #28]	@ (800d4cc <HAL_RCC_GetHCLKFreq+0x28>)
 800d4b0:	6a1b      	ldr	r3, [r3, #32]
 800d4b2:	f003 030f 	and.w	r3, r3, #15
 800d4b6:	4906      	ldr	r1, [pc, #24]	@ (800d4d0 <HAL_RCC_GetHCLKFreq+0x2c>)
 800d4b8:	5ccb      	ldrb	r3, [r1, r3]
 800d4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d4be:	4a05      	ldr	r2, [pc, #20]	@ (800d4d4 <HAL_RCC_GetHCLKFreq+0x30>)
 800d4c0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d4c2:	4b04      	ldr	r3, [pc, #16]	@ (800d4d4 <HAL_RCC_GetHCLKFreq+0x30>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	46020c00 	.word	0x46020c00
 800d4d0:	080158b0 	.word	0x080158b0
 800d4d4:	20000000 	.word	0x20000000

0800d4d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800d4dc:	f7ff ffe2 	bl	800d4a4 <HAL_RCC_GetHCLKFreq>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	4b05      	ldr	r3, [pc, #20]	@ (800d4f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	091b      	lsrs	r3, r3, #4
 800d4e8:	f003 0307 	and.w	r3, r3, #7
 800d4ec:	4903      	ldr	r1, [pc, #12]	@ (800d4fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800d4ee:	5ccb      	ldrb	r3, [r1, r3]
 800d4f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	46020c00 	.word	0x46020c00
 800d4fc:	080158c0 	.word	0x080158c0

0800d500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800d504:	f7ff ffce 	bl	800d4a4 <HAL_RCC_GetHCLKFreq>
 800d508:	4602      	mov	r2, r0
 800d50a:	4b05      	ldr	r3, [pc, #20]	@ (800d520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d50c:	6a1b      	ldr	r3, [r3, #32]
 800d50e:	0a1b      	lsrs	r3, r3, #8
 800d510:	f003 0307 	and.w	r3, r3, #7
 800d514:	4903      	ldr	r1, [pc, #12]	@ (800d524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d516:	5ccb      	ldrb	r3, [r1, r3]
 800d518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	46020c00 	.word	0x46020c00
 800d524:	080158c0 	.word	0x080158c0

0800d528 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800d52c:	f7ff ffba 	bl	800d4a4 <HAL_RCC_GetHCLKFreq>
 800d530:	4602      	mov	r2, r0
 800d532:	4b05      	ldr	r3, [pc, #20]	@ (800d548 <HAL_RCC_GetPCLK3Freq+0x20>)
 800d534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d536:	091b      	lsrs	r3, r3, #4
 800d538:	f003 0307 	and.w	r3, r3, #7
 800d53c:	4903      	ldr	r1, [pc, #12]	@ (800d54c <HAL_RCC_GetPCLK3Freq+0x24>)
 800d53e:	5ccb      	ldrb	r3, [r1, r3]
 800d540:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d544:	4618      	mov	r0, r3
 800d546:	bd80      	pop	{r7, pc}
 800d548:	46020c00 	.word	0x46020c00
 800d54c:	080158c0 	.word	0x080158c0

0800d550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d558:	4b3e      	ldr	r3, [pc, #248]	@ (800d654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d55a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d55e:	f003 0304 	and.w	r3, r3, #4
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d566:	f7fe fd9f 	bl	800c0a8 <HAL_PWREx_GetVoltageRange>
 800d56a:	6178      	str	r0, [r7, #20]
 800d56c:	e019      	b.n	800d5a2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d56e:	4b39      	ldr	r3, [pc, #228]	@ (800d654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d574:	4a37      	ldr	r2, [pc, #220]	@ (800d654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d576:	f043 0304 	orr.w	r3, r3, #4
 800d57a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800d57e:	4b35      	ldr	r3, [pc, #212]	@ (800d654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d584:	f003 0304 	and.w	r3, r3, #4
 800d588:	60fb      	str	r3, [r7, #12]
 800d58a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d58c:	f7fe fd8c 	bl	800c0a8 <HAL_PWREx_GetVoltageRange>
 800d590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d592:	4b30      	ldr	r3, [pc, #192]	@ (800d654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d598:	4a2e      	ldr	r2, [pc, #184]	@ (800d654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d59a:	f023 0304 	bic.w	r3, r3, #4
 800d59e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d5a8:	d003      	beq.n	800d5b2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5b0:	d109      	bne.n	800d5c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5b8:	d202      	bcs.n	800d5c0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d5be:	e033      	b.n	800d628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d5c4:	e030      	b.n	800d628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5cc:	d208      	bcs.n	800d5e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5d4:	d102      	bne.n	800d5dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	613b      	str	r3, [r7, #16]
 800d5da:	e025      	b.n	800d628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e035      	b.n	800d64c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5e6:	d90f      	bls.n	800d608 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d109      	bne.n	800d602 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d5f4:	d902      	bls.n	800d5fc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	613b      	str	r3, [r7, #16]
 800d5fa:	e015      	b.n	800d628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	613b      	str	r3, [r7, #16]
 800d600:	e012      	b.n	800d628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d602:	2300      	movs	r3, #0
 800d604:	613b      	str	r3, [r7, #16]
 800d606:	e00f      	b.n	800d628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d60e:	d109      	bne.n	800d624 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d616:	d102      	bne.n	800d61e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d618:	2301      	movs	r3, #1
 800d61a:	613b      	str	r3, [r7, #16]
 800d61c:	e004      	b.n	800d628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d61e:	2302      	movs	r3, #2
 800d620:	613b      	str	r3, [r7, #16]
 800d622:	e001      	b.n	800d628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d624:	2301      	movs	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d628:	4b0b      	ldr	r3, [pc, #44]	@ (800d658 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f023 020f 	bic.w	r2, r3, #15
 800d630:	4909      	ldr	r1, [pc, #36]	@ (800d658 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	4313      	orrs	r3, r2
 800d636:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d638:	4b07      	ldr	r3, [pc, #28]	@ (800d658 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f003 030f 	and.w	r3, r3, #15
 800d640:	693a      	ldr	r2, [r7, #16]
 800d642:	429a      	cmp	r2, r3
 800d644:	d001      	beq.n	800d64a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e000      	b.n	800d64c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d64a:	2300      	movs	r3, #0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3718      	adds	r7, #24
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	46020c00 	.word	0x46020c00
 800d658:	40022000 	.word	0x40022000

0800d65c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d65c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d660:	b0ba      	sub	sp, #232	@ 0xe8
 800d662:	af00      	add	r7, sp, #0
 800d664:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d668:	2300      	movs	r3, #0
 800d66a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d66e:	2300      	movs	r3, #0
 800d670:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67c:	f002 0401 	and.w	r4, r2, #1
 800d680:	2500      	movs	r5, #0
 800d682:	ea54 0305 	orrs.w	r3, r4, r5
 800d686:	d00b      	beq.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d688:	4bcb      	ldr	r3, [pc, #812]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d68a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d68e:	f023 0103 	bic.w	r1, r3, #3
 800d692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d698:	4ac7      	ldr	r2, [pc, #796]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d69a:	430b      	orrs	r3, r1
 800d69c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d6a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	f002 0802 	and.w	r8, r2, #2
 800d6ac:	f04f 0900 	mov.w	r9, #0
 800d6b0:	ea58 0309 	orrs.w	r3, r8, r9
 800d6b4:	d00b      	beq.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d6b6:	4bc0      	ldr	r3, [pc, #768]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d6b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6bc:	f023 010c 	bic.w	r1, r3, #12
 800d6c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6c6:	4abc      	ldr	r2, [pc, #752]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d6c8:	430b      	orrs	r3, r1
 800d6ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d6ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d6:	f002 0a04 	and.w	sl, r2, #4
 800d6da:	f04f 0b00 	mov.w	fp, #0
 800d6de:	ea5a 030b 	orrs.w	r3, sl, fp
 800d6e2:	d00b      	beq.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d6e4:	4bb4      	ldr	r3, [pc, #720]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d6e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6ea:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d6ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6f4:	4ab0      	ldr	r2, [pc, #704]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d6f6:	430b      	orrs	r3, r1
 800d6f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d6fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d704:	f002 0308 	and.w	r3, r2, #8
 800d708:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d70c:	2300      	movs	r3, #0
 800d70e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d712:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d716:	460b      	mov	r3, r1
 800d718:	4313      	orrs	r3, r2
 800d71a:	d00b      	beq.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d71c:	4ba6      	ldr	r3, [pc, #664]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d71e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d722:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d72a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d72c:	4aa2      	ldr	r2, [pc, #648]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d72e:	430b      	orrs	r3, r1
 800d730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73c:	f002 0310 	and.w	r3, r2, #16
 800d740:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d744:	2300      	movs	r3, #0
 800d746:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d74a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d74e:	460b      	mov	r3, r1
 800d750:	4313      	orrs	r3, r2
 800d752:	d00b      	beq.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d754:	4b98      	ldr	r3, [pc, #608]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d75a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d75e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d764:	4a94      	ldr	r2, [pc, #592]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d766:	430b      	orrs	r3, r1
 800d768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d76c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	f002 0320 	and.w	r3, r2, #32
 800d778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d77c:	2300      	movs	r3, #0
 800d77e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d782:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d786:	460b      	mov	r3, r1
 800d788:	4313      	orrs	r3, r2
 800d78a:	d00b      	beq.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d78c:	4b8a      	ldr	r3, [pc, #552]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d78e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d792:	f023 0107 	bic.w	r1, r3, #7
 800d796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d79a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d79c:	4a86      	ldr	r2, [pc, #536]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d79e:	430b      	orrs	r3, r1
 800d7a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d7a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d7b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d7ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	d00b      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d7c4:	4b7c      	ldr	r3, [pc, #496]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d7c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d7ca:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800d7ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7d4:	4a78      	ldr	r2, [pc, #480]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d7d6:	430b      	orrs	r3, r1
 800d7d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d7dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d7e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	d00b      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d7fc:	4b6e      	ldr	r3, [pc, #440]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d7fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d802:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d80a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d80c:	4a6a      	ldr	r2, [pc, #424]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d80e:	430b      	orrs	r3, r1
 800d810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800d820:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d824:	2300      	movs	r3, #0
 800d826:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d82a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d82e:	460b      	mov	r3, r1
 800d830:	4313      	orrs	r3, r2
 800d832:	d00b      	beq.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d834:	4b60      	ldr	r3, [pc, #384]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d83a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d83e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d844:	4a5c      	ldr	r2, [pc, #368]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d846:	430b      	orrs	r3, r1
 800d848:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d84c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d85c:	2300      	movs	r3, #0
 800d85e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d862:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d866:	460b      	mov	r3, r1
 800d868:	4313      	orrs	r3, r2
 800d86a:	d00b      	beq.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d86c:	4b52      	ldr	r3, [pc, #328]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d86e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d872:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800d876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d87a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d87c:	4a4e      	ldr	r2, [pc, #312]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d87e:	430b      	orrs	r3, r1
 800d880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800d890:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d894:	2300      	movs	r3, #0
 800d896:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d89a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	d00b      	beq.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d8a4:	4b44      	ldr	r3, [pc, #272]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d8a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d8aa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800d8ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d8b4:	4a40      	ldr	r2, [pc, #256]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d8b6:	430b      	orrs	r3, r1
 800d8b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d8bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d8c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d8d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	d00b      	beq.n	800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d8dc:	4b36      	ldr	r3, [pc, #216]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d8de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d8e2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800d8e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8ec:	4a32      	ldr	r2, [pc, #200]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d8ee:	430b      	orrs	r3, r1
 800d8f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d8f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d904:	2300      	movs	r3, #0
 800d906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d90a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d90e:	460b      	mov	r3, r1
 800d910:	4313      	orrs	r3, r2
 800d912:	d00c      	beq.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d914:	4b28      	ldr	r3, [pc, #160]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d91a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d91e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d926:	4a24      	ldr	r2, [pc, #144]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d928:	430b      	orrs	r3, r1
 800d92a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d92e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d93a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d93c:	2300      	movs	r3, #0
 800d93e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d940:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d944:	460b      	mov	r3, r1
 800d946:	4313      	orrs	r3, r2
 800d948:	d04f      	beq.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d94a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d952:	2b80      	cmp	r3, #128	@ 0x80
 800d954:	d02d      	beq.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800d956:	2b80      	cmp	r3, #128	@ 0x80
 800d958:	d827      	bhi.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d95a:	2b60      	cmp	r3, #96	@ 0x60
 800d95c:	d02e      	beq.n	800d9bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d95e:	2b60      	cmp	r3, #96	@ 0x60
 800d960:	d823      	bhi.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d962:	2b40      	cmp	r3, #64	@ 0x40
 800d964:	d006      	beq.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800d966:	2b40      	cmp	r3, #64	@ 0x40
 800d968:	d81f      	bhi.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d009      	beq.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800d96e:	2b20      	cmp	r3, #32
 800d970:	d011      	beq.n	800d996 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800d972:	e01a      	b.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d974:	4b10      	ldr	r3, [pc, #64]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d978:	4a0f      	ldr	r2, [pc, #60]	@ (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d97a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d97e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d980:	e01d      	b.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d986:	3308      	adds	r3, #8
 800d988:	4618      	mov	r0, r3
 800d98a:	f002 fa17 	bl	800fdbc <RCCEx_PLL2_Config>
 800d98e:	4603      	mov	r3, r0
 800d990:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d994:	e013      	b.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d99a:	332c      	adds	r3, #44	@ 0x2c
 800d99c:	4618      	mov	r0, r3
 800d99e:	f002 faa5 	bl	800feec <RCCEx_PLL3_Config>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d9a8:	e009      	b.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d9b0:	e005      	b.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800d9b2:	bf00      	nop
 800d9b4:	e003      	b.n	800d9be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d9b6:	bf00      	nop
 800d9b8:	46020c00 	.word	0x46020c00
        break;
 800d9bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10d      	bne.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d9c6:	4bb6      	ldr	r3, [pc, #728]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d9c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d9cc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800d9d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9d8:	4ab1      	ldr	r2, [pc, #708]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d9da:	430b      	orrs	r3, r1
 800d9dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d9e0:	e003      	b.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d9e6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d9ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d9f6:	673b      	str	r3, [r7, #112]	@ 0x70
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	677b      	str	r3, [r7, #116]	@ 0x74
 800d9fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800da00:	460b      	mov	r3, r1
 800da02:	4313      	orrs	r3, r2
 800da04:	d053      	beq.n	800daae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800da06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800da0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800da0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da12:	d033      	beq.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800da14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da18:	d82c      	bhi.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800da1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da1e:	d02f      	beq.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800da20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da24:	d826      	bhi.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800da26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da2a:	d008      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800da2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da30:	d820      	bhi.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00a      	beq.n	800da4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800da36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da3a:	d011      	beq.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800da3c:	e01a      	b.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800da3e:	4b98      	ldr	r3, [pc, #608]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da42:	4a97      	ldr	r2, [pc, #604]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800da4a:	e01a      	b.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800da4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800da50:	3308      	adds	r3, #8
 800da52:	4618      	mov	r0, r3
 800da54:	f002 f9b2 	bl	800fdbc <RCCEx_PLL2_Config>
 800da58:	4603      	mov	r3, r0
 800da5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800da5e:	e010      	b.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800da60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800da64:	332c      	adds	r3, #44	@ 0x2c
 800da66:	4618      	mov	r0, r3
 800da68:	f002 fa40 	bl	800feec <RCCEx_PLL3_Config>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800da72:	e006      	b.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800da7a:	e002      	b.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800da7c:	bf00      	nop
 800da7e:	e000      	b.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800da80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10d      	bne.n	800daa6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800da8a:	4b85      	ldr	r3, [pc, #532]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da90:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800da94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800da98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800da9c:	4a80      	ldr	r2, [pc, #512]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da9e:	430b      	orrs	r3, r1
 800daa0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800daa4:	e003      	b.n	800daae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800daa6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800daaa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800daae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800daba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dabc:	2300      	movs	r3, #0
 800dabe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dac0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dac4:	460b      	mov	r3, r1
 800dac6:	4313      	orrs	r3, r2
 800dac8:	d046      	beq.n	800db58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800daca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dad2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800dad6:	d028      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800dad8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800dadc:	d821      	bhi.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800dade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dae2:	d022      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800dae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dae8:	d81b      	bhi.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800daea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800daee:	d01c      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800daf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800daf4:	d815      	bhi.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800daf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dafa:	d008      	beq.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800dafc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db00:	d80f      	bhi.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800db02:	2b00      	cmp	r3, #0
 800db04:	d011      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800db06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db0a:	d00e      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800db0c:	e009      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800db0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800db12:	3308      	adds	r3, #8
 800db14:	4618      	mov	r0, r3
 800db16:	f002 f951 	bl	800fdbc <RCCEx_PLL2_Config>
 800db1a:	4603      	mov	r3, r0
 800db1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800db20:	e004      	b.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800db22:	2301      	movs	r3, #1
 800db24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800db28:	e000      	b.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800db2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800db30:	2b00      	cmp	r3, #0
 800db32:	d10d      	bne.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800db34:	4b5a      	ldr	r3, [pc, #360]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800db36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800db3a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800db3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800db42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db46:	4a56      	ldr	r2, [pc, #344]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800db48:	430b      	orrs	r3, r1
 800db4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800db4e:	e003      	b.n	800db58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800db54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800db58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db60:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800db64:	663b      	str	r3, [r7, #96]	@ 0x60
 800db66:	2300      	movs	r3, #0
 800db68:	667b      	str	r3, [r7, #100]	@ 0x64
 800db6a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800db6e:	460b      	mov	r3, r1
 800db70:	4313      	orrs	r3, r2
 800db72:	d03f      	beq.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800db74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800db78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db7c:	2b04      	cmp	r3, #4
 800db7e:	d81e      	bhi.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x562>
 800db80:	a201      	add	r2, pc, #4	@ (adr r2, 800db88 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800db82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db86:	bf00      	nop
 800db88:	0800dbc7 	.word	0x0800dbc7
 800db8c:	0800db9d 	.word	0x0800db9d
 800db90:	0800dbab 	.word	0x0800dbab
 800db94:	0800dbc7 	.word	0x0800dbc7
 800db98:	0800dbc7 	.word	0x0800dbc7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800db9c:	4b40      	ldr	r3, [pc, #256]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800db9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba0:	4a3f      	ldr	r2, [pc, #252]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dba6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800dba8:	e00e      	b.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dbaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dbae:	332c      	adds	r3, #44	@ 0x2c
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f002 f99b 	bl	800feec <RCCEx_PLL3_Config>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dbbc:	e004      	b.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dbc4:	e000      	b.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800dbc6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dbc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10d      	bne.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800dbd0:	4b33      	ldr	r3, [pc, #204]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dbd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dbd6:	f023 0107 	bic.w	r1, r3, #7
 800dbda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dbde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbe2:	4a2f      	ldr	r2, [pc, #188]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dbe4:	430b      	orrs	r3, r1
 800dbe6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800dbea:	e003      	b.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dbf0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800dbf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800dc00:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc02:	2300      	movs	r3, #0
 800dc04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dc06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	d04d      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800dc10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dc14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc1c:	d028      	beq.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800dc1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc22:	d821      	bhi.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dc24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc28:	d024      	beq.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800dc2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc2e:	d81b      	bhi.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dc30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc34:	d00e      	beq.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800dc36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc3a:	d815      	bhi.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d01b      	beq.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800dc40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc44:	d110      	bne.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dc46:	4b16      	ldr	r3, [pc, #88]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dc48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc4a:	4a15      	ldr	r2, [pc, #84]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dc4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc50:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800dc52:	e012      	b.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dc54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dc58:	332c      	adds	r3, #44	@ 0x2c
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f002 f946 	bl	800feec <RCCEx_PLL3_Config>
 800dc60:	4603      	mov	r3, r0
 800dc62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dc66:	e008      	b.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dc6e:	e004      	b.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800dc70:	bf00      	nop
 800dc72:	e002      	b.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800dc74:	bf00      	nop
 800dc76:	e000      	b.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800dc78:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dc7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d110      	bne.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800dc82:	4b07      	ldr	r3, [pc, #28]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dc84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800dc8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dc90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc94:	4a02      	ldr	r2, [pc, #8]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dc96:	430b      	orrs	r3, r1
 800dc98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800dc9c:	e006      	b.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x650>
 800dc9e:	bf00      	nop
 800dca0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dca4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dca8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dcac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800dcb8:	653b      	str	r3, [r7, #80]	@ 0x50
 800dcba:	2300      	movs	r3, #0
 800dcbc:	657b      	str	r3, [r7, #84]	@ 0x54
 800dcbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	f000 80b5 	beq.w	800de34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dcca:	2300      	movs	r3, #0
 800dccc:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dcd0:	4b9d      	ldr	r3, [pc, #628]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dcd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dcd6:	f003 0304 	and.w	r3, r3, #4
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d113      	bne.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dcde:	4b9a      	ldr	r3, [pc, #616]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dce4:	4a98      	ldr	r2, [pc, #608]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dce6:	f043 0304 	orr.w	r3, r3, #4
 800dcea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800dcee:	4b96      	ldr	r3, [pc, #600]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dcf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dcf4:	f003 0304 	and.w	r3, r3, #4
 800dcf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dcfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 800dd00:	2301      	movs	r3, #1
 800dd02:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800dd06:	4b91      	ldr	r3, [pc, #580]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800dd08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd0a:	4a90      	ldr	r2, [pc, #576]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800dd0c:	f043 0301 	orr.w	r3, r3, #1
 800dd10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dd12:	f7fb f8e1 	bl	8008ed8 <HAL_GetTick>
 800dd16:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800dd1a:	e00b      	b.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd1c:	f7fb f8dc 	bl	8008ed8 <HAL_GetTick>
 800dd20:	4602      	mov	r2, r0
 800dd22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d903      	bls.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800dd2c:	2303      	movs	r3, #3
 800dd2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dd32:	e005      	b.n	800dd40 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800dd34:	4b85      	ldr	r3, [pc, #532]	@ (800df4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800dd36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd38:	f003 0301 	and.w	r3, r3, #1
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d0ed      	beq.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800dd40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d165      	bne.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dd48:	4b7f      	ldr	r3, [pc, #508]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800dd56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d023      	beq.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800dd5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800dd66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d01b      	beq.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dd6e:	4b76      	ldr	r3, [pc, #472]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dd7c:	4b72      	ldr	r3, [pc, #456]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd82:	4a71      	ldr	r2, [pc, #452]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dd8c:	4b6e      	ldr	r3, [pc, #440]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd92:	4a6d      	ldr	r2, [pc, #436]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dd98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dd9c:	4a6a      	ldr	r2, [pc, #424]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dda2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dda6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddaa:	f003 0301 	and.w	r3, r3, #1
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d019      	beq.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddb2:	f7fb f891 	bl	8008ed8 <HAL_GetTick>
 800ddb6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ddba:	e00d      	b.n	800ddd8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddbc:	f7fb f88c 	bl	8008ed8 <HAL_GetTick>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddc6:	1ad2      	subs	r2, r2, r3
 800ddc8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d903      	bls.n	800ddd8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800ddd0:	2303      	movs	r3, #3
 800ddd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800ddd6:	e006      	b.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ddd8:	4b5b      	ldr	r3, [pc, #364]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ddda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ddde:	f003 0302 	and.w	r3, r3, #2
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d0ea      	beq.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800dde6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10d      	bne.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800ddee:	4b56      	ldr	r3, [pc, #344]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ddf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ddf4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ddf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800de00:	4a51      	ldr	r2, [pc, #324]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de02:	430b      	orrs	r3, r1
 800de04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800de08:	e008      	b.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800de0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800de0e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800de12:	e003      	b.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800de18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800de1c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800de20:	2b01      	cmp	r3, #1
 800de22:	d107      	bne.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800de24:	4b48      	ldr	r3, [pc, #288]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de2a:	4a47      	ldr	r2, [pc, #284]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de2c:	f023 0304 	bic.w	r3, r3, #4
 800de30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800de34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800de40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de42:	2300      	movs	r3, #0
 800de44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800de4a:	460b      	mov	r3, r1
 800de4c:	4313      	orrs	r3, r2
 800de4e:	d042      	beq.n	800ded6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800de50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de58:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800de5c:	d022      	beq.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800de5e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800de62:	d81b      	bhi.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800de64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de68:	d011      	beq.n	800de8e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800de6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de6e:	d815      	bhi.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800de70:	2b00      	cmp	r3, #0
 800de72:	d019      	beq.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800de74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de78:	d110      	bne.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800de7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de7e:	3308      	adds	r3, #8
 800de80:	4618      	mov	r0, r3
 800de82:	f001 ff9b 	bl	800fdbc <RCCEx_PLL2_Config>
 800de86:	4603      	mov	r3, r0
 800de88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800de8c:	e00d      	b.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de8e:	4b2e      	ldr	r3, [pc, #184]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de92:	4a2d      	ldr	r2, [pc, #180]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800de94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de98:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800de9a:	e006      	b.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dea2:	e002      	b.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800dea4:	bf00      	nop
 800dea6:	e000      	b.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800dea8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800deaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d10d      	bne.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800deb2:	4b25      	ldr	r3, [pc, #148]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800deb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800deb8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800debc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dec4:	4a20      	ldr	r2, [pc, #128]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dec6:	430b      	orrs	r3, r1
 800dec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800decc:	e003      	b.n	800ded6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dece:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800ded2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ded6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800deda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dede:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800dee2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dee4:	2300      	movs	r3, #0
 800dee6:	647b      	str	r3, [r7, #68]	@ 0x44
 800dee8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800deec:	460b      	mov	r3, r1
 800deee:	4313      	orrs	r3, r2
 800def0:	d032      	beq.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800def2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800def6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800defa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800defe:	d00b      	beq.n	800df18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800df00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df04:	d804      	bhi.n	800df10 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800df06:	2b00      	cmp	r3, #0
 800df08:	d008      	beq.n	800df1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800df0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df0e:	d007      	beq.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800df16:	e004      	b.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800df18:	bf00      	nop
 800df1a:	e002      	b.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800df1c:	bf00      	nop
 800df1e:	e000      	b.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800df20:	bf00      	nop
    }
    if (ret == HAL_OK)
 800df22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800df26:	2b00      	cmp	r3, #0
 800df28:	d112      	bne.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800df2a:	4b07      	ldr	r3, [pc, #28]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800df2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800df30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800df34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800df3c:	4a02      	ldr	r2, [pc, #8]	@ (800df48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800df3e:	430b      	orrs	r3, r1
 800df40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800df44:	e008      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800df46:	bf00      	nop
 800df48:	46020c00 	.word	0x46020c00
 800df4c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800df54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800df58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800df64:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df66:	2300      	movs	r3, #0
 800df68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800df6e:	460b      	mov	r3, r1
 800df70:	4313      	orrs	r3, r2
 800df72:	d00c      	beq.n	800df8e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800df74:	4b98      	ldr	r3, [pc, #608]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800df76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800df7a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800df7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800df86:	4a94      	ldr	r2, [pc, #592]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800df88:	430b      	orrs	r3, r1
 800df8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800df8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800df9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800df9c:	2300      	movs	r3, #0
 800df9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfa0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	d019      	beq.n	800dfde <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800dfaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dfb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dfb6:	d105      	bne.n	800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dfb8:	4b87      	ldr	r3, [pc, #540]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dfba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfbc:	4a86      	ldr	r2, [pc, #536]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dfbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dfc2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800dfc4:	4b84      	ldr	r3, [pc, #528]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dfc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dfca:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800dfce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dfd6:	4a80      	ldr	r2, [pc, #512]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dfd8:	430b      	orrs	r3, r1
 800dfda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800dfde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800dfea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dfec:	2300      	movs	r3, #0
 800dfee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dff0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800dff4:	460b      	mov	r3, r1
 800dff6:	4313      	orrs	r3, r2
 800dff8:	d00c      	beq.n	800e014 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800dffa:	4b77      	ldr	r3, [pc, #476]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e000:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e008:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e00c:	4972      	ldr	r1, [pc, #456]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e00e:	4313      	orrs	r3, r2
 800e010:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e020:	623b      	str	r3, [r7, #32]
 800e022:	2300      	movs	r3, #0
 800e024:	627b      	str	r3, [r7, #36]	@ 0x24
 800e026:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e02a:	460b      	mov	r3, r1
 800e02c:	4313      	orrs	r3, r2
 800e02e:	d00c      	beq.n	800e04a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e030:	4b69      	ldr	r3, [pc, #420]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e036:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e03a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e03e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e042:	4965      	ldr	r1, [pc, #404]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e044:	4313      	orrs	r3, r2
 800e046:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e04a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e052:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e056:	61bb      	str	r3, [r7, #24]
 800e058:	2300      	movs	r3, #0
 800e05a:	61fb      	str	r3, [r7, #28]
 800e05c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e060:	460b      	mov	r3, r1
 800e062:	4313      	orrs	r3, r2
 800e064:	d00c      	beq.n	800e080 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e066:	4b5c      	ldr	r3, [pc, #368]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e06c:	f023 0218 	bic.w	r2, r3, #24
 800e070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e074:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e078:	4957      	ldr	r1, [pc, #348]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e07a:	4313      	orrs	r3, r2
 800e07c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e088:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800e08c:	613b      	str	r3, [r7, #16]
 800e08e:	2300      	movs	r3, #0
 800e090:	617b      	str	r3, [r7, #20]
 800e092:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e096:	460b      	mov	r3, r1
 800e098:	4313      	orrs	r3, r2
 800e09a:	d032      	beq.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e09c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e0a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e0a8:	d105      	bne.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0aa:	4b4b      	ldr	r3, [pc, #300]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0ae:	4a4a      	ldr	r2, [pc, #296]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e0b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e0b4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e0b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e0be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e0c2:	d108      	bne.n	800e0d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e0c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f001 fe76 	bl	800fdbc <RCCEx_PLL2_Config>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800e0d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10d      	bne.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e0de:	4b3e      	ldr	r3, [pc, #248]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e0e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e0e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e0e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e0f0:	4939      	ldr	r1, [pc, #228]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e0f8:	e003      	b.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e0fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800e10e:	60bb      	str	r3, [r7, #8]
 800e110:	2300      	movs	r3, #0
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e118:	460b      	mov	r3, r1
 800e11a:	4313      	orrs	r3, r2
 800e11c:	d03a      	beq.n	800e194 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e11e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e12a:	d00e      	beq.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800e12c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e130:	d815      	bhi.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e132:	2b00      	cmp	r3, #0
 800e134:	d017      	beq.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800e136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e13a:	d110      	bne.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e13c:	4b26      	ldr	r3, [pc, #152]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e140:	4a25      	ldr	r2, [pc, #148]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e146:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e148:	e00e      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e14a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e14e:	3308      	adds	r3, #8
 800e150:	4618      	mov	r0, r3
 800e152:	f001 fe33 	bl	800fdbc <RCCEx_PLL2_Config>
 800e156:	4603      	mov	r3, r0
 800e158:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e15c:	e004      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800e15e:	2301      	movs	r3, #1
 800e160:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800e164:	e000      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800e166:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e168:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10d      	bne.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800e170:	4b19      	ldr	r3, [pc, #100]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e176:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e17a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e182:	4915      	ldr	r1, [pc, #84]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e184:	4313      	orrs	r3, r2
 800e186:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800e18a:	e003      	b.n	800e194 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e18c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800e190:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e1a0:	603b      	str	r3, [r7, #0]
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	607b      	str	r3, [r7, #4]
 800e1a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	d00c      	beq.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e1b0:	4b09      	ldr	r3, [pc, #36]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e1b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e1b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e1ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e1c2:	4905      	ldr	r1, [pc, #20]	@ (800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e1ca:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	37e8      	adds	r7, #232	@ 0xe8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1d8:	46020c00 	.word	0x46020c00

0800e1dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b089      	sub	sp, #36	@ 0x24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e1e4:	4ba6      	ldr	r3, [pc, #664]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1ec:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e1ee:	4ba4      	ldr	r3, [pc, #656]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1f2:	f003 0303 	and.w	r3, r3, #3
 800e1f6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800e1f8:	4ba1      	ldr	r3, [pc, #644]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1fc:	0a1b      	lsrs	r3, r3, #8
 800e1fe:	f003 030f 	and.w	r3, r3, #15
 800e202:	3301      	adds	r3, #1
 800e204:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800e206:	4b9e      	ldr	r3, [pc, #632]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20a:	091b      	lsrs	r3, r3, #4
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e212:	4b9b      	ldr	r3, [pc, #620]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e216:	08db      	lsrs	r3, r3, #3
 800e218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	fb02 f303 	mul.w	r3, r2, r3
 800e222:	ee07 3a90 	vmov	s15, r3
 800e226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e22a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b03      	cmp	r3, #3
 800e232:	d062      	beq.n	800e2fa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	2b03      	cmp	r3, #3
 800e238:	f200 8081 	bhi.w	800e33e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d024      	beq.n	800e28c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2b02      	cmp	r3, #2
 800e246:	d17a      	bne.n	800e33e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	ee07 3a90 	vmov	s15, r3
 800e24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e252:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e484 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800e256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e25a:	4b89      	ldr	r3, [pc, #548]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e25c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e262:	ee07 3a90 	vmov	s15, r3
 800e266:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e26a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e26e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e488 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e272:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e276:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e27a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e28a:	e08f      	b.n	800e3ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e28c:	4b7c      	ldr	r3, [pc, #496]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e28e:	689b      	ldr	r3, [r3, #8]
 800e290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e294:	2b00      	cmp	r3, #0
 800e296:	d005      	beq.n	800e2a4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800e298:	4b79      	ldr	r3, [pc, #484]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	0f1b      	lsrs	r3, r3, #28
 800e29e:	f003 030f 	and.w	r3, r3, #15
 800e2a2:	e006      	b.n	800e2b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800e2a4:	4b76      	ldr	r3, [pc, #472]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e2a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e2aa:	041b      	lsls	r3, r3, #16
 800e2ac:	0f1b      	lsrs	r3, r3, #28
 800e2ae:	f003 030f 	and.w	r3, r3, #15
 800e2b2:	4a76      	ldr	r2, [pc, #472]	@ (800e48c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800e2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2b8:	ee07 3a90 	vmov	s15, r3
 800e2bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	ee07 3a90 	vmov	s15, r3
 800e2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	ee07 3a90 	vmov	s15, r3
 800e2d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2d8:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2dc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e488 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e2e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e2f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e2f8:	e058      	b.n	800e3ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	ee07 3a90 	vmov	s15, r3
 800e300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e304:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e484 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800e308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e30c:	4b5c      	ldr	r3, [pc, #368]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e30e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e314:	ee07 3a90 	vmov	s15, r3
 800e318:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e31c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e320:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e488 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e324:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e328:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e32c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e330:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e334:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e33c:	e036      	b.n	800e3ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e33e:	4b50      	ldr	r3, [pc, #320]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e346:	2b00      	cmp	r3, #0
 800e348:	d005      	beq.n	800e356 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800e34a:	4b4d      	ldr	r3, [pc, #308]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	0f1b      	lsrs	r3, r3, #28
 800e350:	f003 030f 	and.w	r3, r3, #15
 800e354:	e006      	b.n	800e364 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800e356:	4b4a      	ldr	r3, [pc, #296]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e35c:	041b      	lsls	r3, r3, #16
 800e35e:	0f1b      	lsrs	r3, r3, #28
 800e360:	f003 030f 	and.w	r3, r3, #15
 800e364:	4a49      	ldr	r2, [pc, #292]	@ (800e48c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800e366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e36a:	ee07 3a90 	vmov	s15, r3
 800e36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	ee07 3a90 	vmov	s15, r3
 800e378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e37c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	ee07 3a90 	vmov	s15, r3
 800e386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e38a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e38e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e488 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e39a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e3aa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e3ac:	4b34      	ldr	r3, [pc, #208]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d017      	beq.n	800e3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e3b8:	4b31      	ldr	r3, [pc, #196]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3bc:	0a5b      	lsrs	r3, r3, #9
 800e3be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3c2:	ee07 3a90 	vmov	s15, r3
 800e3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e3ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e3ce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e3d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3de:	ee17 2a90 	vmov	r2, s15
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	e002      	b.n	800e3ee <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e3ee:	4b24      	ldr	r3, [pc, #144]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d017      	beq.n	800e42a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e3fa:	4b21      	ldr	r3, [pc, #132]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3fe:	0c1b      	lsrs	r3, r3, #16
 800e400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e404:	ee07 3a90 	vmov	s15, r3
 800e408:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e40c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e410:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e414:	edd7 6a07 	vldr	s13, [r7, #28]
 800e418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e41c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e420:	ee17 2a90 	vmov	r2, s15
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	605a      	str	r2, [r3, #4]
 800e428:	e002      	b.n	800e430 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e430:	4b13      	ldr	r3, [pc, #76]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d017      	beq.n	800e46c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e43c:	4b10      	ldr	r3, [pc, #64]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e440:	0e1b      	lsrs	r3, r3, #24
 800e442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e446:	ee07 3a90 	vmov	s15, r3
 800e44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e44e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e452:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e456:	edd7 6a07 	vldr	s13, [r7, #28]
 800e45a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e45e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e462:	ee17 2a90 	vmov	r2, s15
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e46a:	e002      	b.n	800e472 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	609a      	str	r2, [r3, #8]
}
 800e472:	bf00      	nop
 800e474:	3724      	adds	r7, #36	@ 0x24
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	46020c00 	.word	0x46020c00
 800e484:	4b742400 	.word	0x4b742400
 800e488:	46000000 	.word	0x46000000
 800e48c:	080158c8 	.word	0x080158c8

0800e490 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e490:	b480      	push	{r7}
 800e492:	b089      	sub	sp, #36	@ 0x24
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e498:	4ba6      	ldr	r3, [pc, #664]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e49a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4a0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e4a2:	4ba4      	ldr	r3, [pc, #656]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a6:	f003 0303 	and.w	r3, r3, #3
 800e4aa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e4ac:	4ba1      	ldr	r3, [pc, #644]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b0:	0a1b      	lsrs	r3, r3, #8
 800e4b2:	f003 030f 	and.w	r3, r3, #15
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e4ba:	4b9e      	ldr	r3, [pc, #632]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4be:	091b      	lsrs	r3, r3, #4
 800e4c0:	f003 0301 	and.w	r3, r3, #1
 800e4c4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e4c6:	4b9b      	ldr	r3, [pc, #620]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ca:	08db      	lsrs	r3, r3, #3
 800e4cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	fb02 f303 	mul.w	r3, r2, r3
 800e4d6:	ee07 3a90 	vmov	s15, r3
 800e4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	2b03      	cmp	r3, #3
 800e4e6:	d062      	beq.n	800e5ae <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	f200 8081 	bhi.w	800e5f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d024      	beq.n	800e540 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	2b02      	cmp	r3, #2
 800e4fa:	d17a      	bne.n	800e5f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	ee07 3a90 	vmov	s15, r3
 800e502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e506:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800e50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e50e:	4b89      	ldr	r3, [pc, #548]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e516:	ee07 3a90 	vmov	s15, r3
 800e51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e51e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e522:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e73c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e526:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e52e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e532:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e53a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e53e:	e08f      	b.n	800e660 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e540:	4b7c      	ldr	r3, [pc, #496]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d005      	beq.n	800e558 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800e54c:	4b79      	ldr	r3, [pc, #484]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	0f1b      	lsrs	r3, r3, #28
 800e552:	f003 030f 	and.w	r3, r3, #15
 800e556:	e006      	b.n	800e566 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800e558:	4b76      	ldr	r3, [pc, #472]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e55a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e55e:	041b      	lsls	r3, r3, #16
 800e560:	0f1b      	lsrs	r3, r3, #28
 800e562:	f003 030f 	and.w	r3, r3, #15
 800e566:	4a76      	ldr	r2, [pc, #472]	@ (800e740 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800e568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e56c:	ee07 3a90 	vmov	s15, r3
 800e570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	ee07 3a90 	vmov	s15, r3
 800e57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	ee07 3a90 	vmov	s15, r3
 800e588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e58c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e590:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e73c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e59c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e5a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e5ac:	e058      	b.n	800e660 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	ee07 3a90 	vmov	s15, r3
 800e5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5b8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800e5bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5c0:	4b5c      	ldr	r3, [pc, #368]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e5c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5c8:	ee07 3a90 	vmov	s15, r3
 800e5cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5d4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e73c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e5d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e5f0:	e036      	b.n	800e660 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e5f2:	4b50      	ldr	r3, [pc, #320]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d005      	beq.n	800e60a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800e5fe:	4b4d      	ldr	r3, [pc, #308]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e600:	689b      	ldr	r3, [r3, #8]
 800e602:	0f1b      	lsrs	r3, r3, #28
 800e604:	f003 030f 	and.w	r3, r3, #15
 800e608:	e006      	b.n	800e618 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800e60a:	4b4a      	ldr	r3, [pc, #296]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e60c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e610:	041b      	lsls	r3, r3, #16
 800e612:	0f1b      	lsrs	r3, r3, #28
 800e614:	f003 030f 	and.w	r3, r3, #15
 800e618:	4a49      	ldr	r2, [pc, #292]	@ (800e740 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800e61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e61e:	ee07 3a90 	vmov	s15, r3
 800e622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	ee07 3a90 	vmov	s15, r3
 800e62c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	ee07 3a90 	vmov	s15, r3
 800e63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e63e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e642:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e73c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e652:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e65a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e65e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e660:	4b34      	ldr	r3, [pc, #208]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d017      	beq.n	800e69c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e66c:	4b31      	ldr	r3, [pc, #196]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e66e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e670:	0a5b      	lsrs	r3, r3, #9
 800e672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e676:	ee07 3a90 	vmov	s15, r3
 800e67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e67e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e682:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e686:	edd7 6a07 	vldr	s13, [r7, #28]
 800e68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e692:	ee17 2a90 	vmov	r2, s15
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	e002      	b.n	800e6a2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e6a2:	4b24      	ldr	r3, [pc, #144]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d017      	beq.n	800e6de <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e6ae:	4b21      	ldr	r3, [pc, #132]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6b2:	0c1b      	lsrs	r3, r3, #16
 800e6b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6b8:	ee07 3a90 	vmov	s15, r3
 800e6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800e6c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e6c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e6c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6d4:	ee17 2a90 	vmov	r2, s15
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	605a      	str	r2, [r3, #4]
 800e6dc:	e002      	b.n	800e6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800e6e4:	4b13      	ldr	r3, [pc, #76]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d017      	beq.n	800e720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e6f0:	4b10      	ldr	r3, [pc, #64]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6f4:	0e1b      	lsrs	r3, r3, #24
 800e6f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6fa:	ee07 3a90 	vmov	s15, r3
 800e6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800e702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e706:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e70a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e70e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e716:	ee17 2a90 	vmov	r2, s15
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e71e:	e002      	b.n	800e726 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	609a      	str	r2, [r3, #8]
}
 800e726:	bf00      	nop
 800e728:	3724      	adds	r7, #36	@ 0x24
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	46020c00 	.word	0x46020c00
 800e738:	4b742400 	.word	0x4b742400
 800e73c:	46000000 	.word	0x46000000
 800e740:	080158c8 	.word	0x080158c8

0800e744 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e744:	b480      	push	{r7}
 800e746:	b089      	sub	sp, #36	@ 0x24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800e74c:	4ba6      	ldr	r3, [pc, #664]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e74e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e754:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800e756:	4ba4      	ldr	r3, [pc, #656]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e75a:	f003 0303 	and.w	r3, r3, #3
 800e75e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800e760:	4ba1      	ldr	r3, [pc, #644]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e764:	0a1b      	lsrs	r3, r3, #8
 800e766:	f003 030f 	and.w	r3, r3, #15
 800e76a:	3301      	adds	r3, #1
 800e76c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800e76e:	4b9e      	ldr	r3, [pc, #632]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e772:	091b      	lsrs	r3, r3, #4
 800e774:	f003 0301 	and.w	r3, r3, #1
 800e778:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800e77a:	4b9b      	ldr	r3, [pc, #620]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e77c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e77e:	08db      	lsrs	r3, r3, #3
 800e780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	fb02 f303 	mul.w	r3, r2, r3
 800e78a:	ee07 3a90 	vmov	s15, r3
 800e78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e792:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	2b03      	cmp	r3, #3
 800e79a:	d062      	beq.n	800e862 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	2b03      	cmp	r3, #3
 800e7a0:	f200 8081 	bhi.w	800e8a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d024      	beq.n	800e7f4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d17a      	bne.n	800e8a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	ee07 3a90 	vmov	s15, r3
 800e7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800e7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7c2:	4b89      	ldr	r3, [pc, #548]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e7c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ca:	ee07 3a90 	vmov	s15, r3
 800e7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e7d6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ee:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800e7f2:	e08f      	b.n	800e914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e7f4:	4b7c      	ldr	r3, [pc, #496]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d005      	beq.n	800e80c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800e800:	4b79      	ldr	r3, [pc, #484]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	0f1b      	lsrs	r3, r3, #28
 800e806:	f003 030f 	and.w	r3, r3, #15
 800e80a:	e006      	b.n	800e81a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800e80c:	4b76      	ldr	r3, [pc, #472]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e80e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e812:	041b      	lsls	r3, r3, #16
 800e814:	0f1b      	lsrs	r3, r3, #28
 800e816:	f003 030f 	and.w	r3, r3, #15
 800e81a:	4a76      	ldr	r2, [pc, #472]	@ (800e9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e820:	ee07 3a90 	vmov	s15, r3
 800e824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	ee07 3a90 	vmov	s15, r3
 800e82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	ee07 3a90 	vmov	s15, r3
 800e83c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e840:	ed97 6a02 	vldr	s12, [r7, #8]
 800e844:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e84c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e850:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e854:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e85c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e860:	e058      	b.n	800e914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	ee07 3a90 	vmov	s15, r3
 800e868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e86c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e9ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800e870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e874:	4b5c      	ldr	r3, [pc, #368]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e87c:	ee07 3a90 	vmov	s15, r3
 800e880:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e884:	ed97 6a02 	vldr	s12, [r7, #8]
 800e888:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e88c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e890:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e898:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e89c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e8a4:	e036      	b.n	800e914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e8a6:	4b50      	ldr	r3, [pc, #320]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d005      	beq.n	800e8be <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800e8b2:	4b4d      	ldr	r3, [pc, #308]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	0f1b      	lsrs	r3, r3, #28
 800e8b8:	f003 030f 	and.w	r3, r3, #15
 800e8bc:	e006      	b.n	800e8cc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800e8be:	4b4a      	ldr	r3, [pc, #296]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e8c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e8c4:	041b      	lsls	r3, r3, #16
 800e8c6:	0f1b      	lsrs	r3, r3, #28
 800e8c8:	f003 030f 	and.w	r3, r3, #15
 800e8cc:	4a49      	ldr	r2, [pc, #292]	@ (800e9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8d2:	ee07 3a90 	vmov	s15, r3
 800e8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	ee07 3a90 	vmov	s15, r3
 800e8e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	ee07 3a90 	vmov	s15, r3
 800e8ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8f6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e8fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e906:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e90e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e912:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e914:	4b34      	ldr	r3, [pc, #208]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d017      	beq.n	800e950 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e920:	4b31      	ldr	r3, [pc, #196]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e924:	0a5b      	lsrs	r3, r3, #9
 800e926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e92a:	ee07 3a90 	vmov	s15, r3
 800e92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e936:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e946:	ee17 2a90 	vmov	r2, s15
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	601a      	str	r2, [r3, #0]
 800e94e:	e002      	b.n	800e956 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e956:	4b24      	ldr	r3, [pc, #144]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e95a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d017      	beq.n	800e992 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e962:	4b21      	ldr	r3, [pc, #132]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e966:	0c1b      	lsrs	r3, r3, #16
 800e968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e96c:	ee07 3a90 	vmov	s15, r3
 800e970:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e978:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e97c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e988:	ee17 2a90 	vmov	r2, s15
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	605a      	str	r2, [r3, #4]
 800e990:	e002      	b.n	800e998 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e998:	4b13      	ldr	r3, [pc, #76]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e99c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d017      	beq.n	800e9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e9a4:	4b10      	ldr	r3, [pc, #64]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e9a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9a8:	0e1b      	lsrs	r3, r3, #24
 800e9aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9ae:	ee07 3a90 	vmov	s15, r3
 800e9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e9b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e9ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e9be:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9ca:	ee17 2a90 	vmov	r2, s15
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e9d2:	e002      	b.n	800e9da <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	609a      	str	r2, [r3, #8]
}
 800e9da:	bf00      	nop
 800e9dc:	3724      	adds	r7, #36	@ 0x24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	46020c00 	.word	0x46020c00
 800e9ec:	4b742400 	.word	0x4b742400
 800e9f0:	46000000 	.word	0x46000000
 800e9f4:	080158c8 	.word	0x080158c8

0800e9f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b08e      	sub	sp, #56	@ 0x38
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ea02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea06:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800ea0a:	430b      	orrs	r3, r1
 800ea0c:	d145      	bne.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ea0e:	4ba7      	ldr	r3, [pc, #668]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea18:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ea1a:	4ba4      	ldr	r3, [pc, #656]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea20:	f003 0302 	and.w	r3, r3, #2
 800ea24:	2b02      	cmp	r3, #2
 800ea26:	d108      	bne.n	800ea3a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ea28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea2e:	d104      	bne.n	800ea3a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ea30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea36:	f001 b9b3 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ea3a:	4b9c      	ldr	r3, [pc, #624]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea48:	d114      	bne.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea50:	d110      	bne.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ea52:	4b96      	ldr	r3, [pc, #600]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea60:	d103      	bne.n	800ea6a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800ea62:	23fa      	movs	r3, #250	@ 0xfa
 800ea64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ea66:	f001 b99b 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800ea6a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ea6e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ea70:	f001 b996 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800ea74:	4b8d      	ldr	r3, [pc, #564]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea80:	d107      	bne.n	800ea92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ea82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ea88:	d103      	bne.n	800ea92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800ea8a:	4b89      	ldr	r3, [pc, #548]	@ (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800ea8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea8e:	f001 b987 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800ea92:	2300      	movs	r3, #0
 800ea94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea96:	f001 b983 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ea9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea9e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800eaa2:	430b      	orrs	r3, r1
 800eaa4:	d151      	bne.n	800eb4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800eaa6:	4b81      	ldr	r3, [pc, #516]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eaa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eaac:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800eab0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800eab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab4:	2b80      	cmp	r3, #128	@ 0x80
 800eab6:	d035      	beq.n	800eb24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800eab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaba:	2b80      	cmp	r3, #128	@ 0x80
 800eabc:	d841      	bhi.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac0:	2b60      	cmp	r3, #96	@ 0x60
 800eac2:	d02a      	beq.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800eac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac6:	2b60      	cmp	r3, #96	@ 0x60
 800eac8:	d83b      	bhi.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eacc:	2b40      	cmp	r3, #64	@ 0x40
 800eace:	d009      	beq.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ead0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead2:	2b40      	cmp	r3, #64	@ 0x40
 800ead4:	d835      	bhi.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ead6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00c      	beq.n	800eaf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800eadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eade:	2b20      	cmp	r3, #32
 800eae0:	d012      	beq.n	800eb08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800eae2:	e02e      	b.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff fb77 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800eaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eaf2:	f001 b955 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaf6:	f107 0318 	add.w	r3, r7, #24
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fcc8 	bl	800e490 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb04:	f001 b94c 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb08:	f107 030c 	add.w	r3, r7, #12
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7ff fe19 	bl	800e744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb16:	f001 b943 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800eb1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800eb1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb20:	f001 b93e 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eb24:	4b61      	ldr	r3, [pc, #388]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eb2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb30:	d103      	bne.n	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800eb32:	4b60      	ldr	r3, [pc, #384]	@ (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800eb34:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eb36:	f001 b933 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb3e:	f001 b92f 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800eb42:	2300      	movs	r3, #0
 800eb44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb46:	f001 b92b 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800eb4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb4e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800eb52:	430b      	orrs	r3, r1
 800eb54:	d158      	bne.n	800ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800eb56:	4b55      	ldr	r3, [pc, #340]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eb58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eb5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eb60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800eb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb68:	d03b      	beq.n	800ebe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb70:	d846      	bhi.n	800ec00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800eb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eb78:	d02e      	beq.n	800ebd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eb80:	d83e      	bhi.n	800ec00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800eb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb88:	d00b      	beq.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb90:	d836      	bhi.n	800ec00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800eb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00d      	beq.n	800ebb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800eb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb9e:	d012      	beq.n	800ebc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800eba0:	e02e      	b.n	800ec00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fb18 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ebac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebb0:	f001 b8f6 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebb4:	f107 0318 	add.w	r3, r7, #24
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7ff fc69 	bl	800e490 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebc2:	f001 b8ed 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebc6:	f107 030c 	add.w	r3, r7, #12
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7ff fdba 	bl	800e744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebd4:	f001 b8e4 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ebd8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ebdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebde:	f001 b8df 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ebe2:	4b32      	ldr	r3, [pc, #200]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ebea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebee:	d103      	bne.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800ebf0:	4b30      	ldr	r3, [pc, #192]	@ (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ebf2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ebf4:	f001 b8d4 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebfc:	f001 b8d0 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800ec00:	2300      	movs	r3, #0
 800ec02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ec04:	f001 b8cc 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ec08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec0c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ec10:	430b      	orrs	r3, r1
 800ec12:	d126      	bne.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ec14:	4b25      	ldr	r3, [pc, #148]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ec1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800ec20:	4b22      	ldr	r3, [pc, #136]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec2c:	d106      	bne.n	800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d103      	bne.n	800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ec34:	4b1f      	ldr	r3, [pc, #124]	@ (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ec36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec38:	f001 b8b2 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ec3c:	4b1b      	ldr	r3, [pc, #108]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec48:	d107      	bne.n	800ec5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ec50:	d103      	bne.n	800ec5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ec52:	4b19      	ldr	r3, [pc, #100]	@ (800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ec54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec56:	f001 b8a3 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec5e:	f001 b89f 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ec62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec66:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800ec6a:	430b      	orrs	r3, r1
 800ec6c:	d16e      	bne.n	800ed4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ec6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ec74:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ec78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ec80:	d03d      	beq.n	800ecfe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ec82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec84:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ec88:	d85c      	bhi.n	800ed44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ec90:	d014      	beq.n	800ecbc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ec92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ec98:	d854      	bhi.n	800ed44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d01f      	beq.n	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800eca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eca6:	d012      	beq.n	800ecce <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800eca8:	e04c      	b.n	800ed44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ecaa:	bf00      	nop
 800ecac:	46020c00 	.word	0x46020c00
 800ecb0:	0007a120 	.word	0x0007a120
 800ecb4:	00f42400 	.word	0x00f42400
 800ecb8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7ff fa8b 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ecca:	f001 b869 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecce:	f107 0318 	add.w	r3, r7, #24
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7ff fbdc 	bl	800e490 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ecdc:	f001 b860 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ece0:	4ba7      	ldr	r3, [pc, #668]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ece8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ecec:	d103      	bne.n	800ecf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800ecee:	4ba5      	ldr	r3, [pc, #660]	@ (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ecf0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ecf2:	f001 b855 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ecfa:	f001 b851 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ecfe:	4ba0      	ldr	r3, [pc, #640]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f003 0320 	and.w	r3, r3, #32
 800ed06:	2b20      	cmp	r3, #32
 800ed08:	d118      	bne.n	800ed3c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ed0a:	4b9d      	ldr	r3, [pc, #628]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d005      	beq.n	800ed22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ed16:	4b9a      	ldr	r3, [pc, #616]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	0e1b      	lsrs	r3, r3, #24
 800ed1c:	f003 030f 	and.w	r3, r3, #15
 800ed20:	e006      	b.n	800ed30 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ed22:	4b97      	ldr	r3, [pc, #604]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ed28:	041b      	lsls	r3, r3, #16
 800ed2a:	0e1b      	lsrs	r3, r3, #24
 800ed2c:	f003 030f 	and.w	r3, r3, #15
 800ed30:	4a95      	ldr	r2, [pc, #596]	@ (800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ed32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ed38:	f001 b832 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ed40:	f001 b82e 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800ed44:	2300      	movs	r3, #0
 800ed46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ed48:	f001 b82a 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ed4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed50:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800ed54:	430b      	orrs	r3, r1
 800ed56:	d17f      	bne.n	800ee58 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ed58:	4b89      	ldr	r3, [pc, #548]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ed5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed62:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ed64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d165      	bne.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ed6a:	4b85      	ldr	r3, [pc, #532]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed70:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ed74:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800ed76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed78:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ed7c:	d034      	beq.n	800ede8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed80:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ed84:	d853      	bhi.n	800ee2e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ed86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed8c:	d00b      	beq.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed94:	d84b      	bhi.n	800ee2e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ed96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d016      	beq.n	800edca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800ed9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eda2:	d009      	beq.n	800edb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800eda4:	e043      	b.n	800ee2e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eda6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800edaa:	4618      	mov	r0, r3
 800edac:	f7ff fa16 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800edb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800edb4:	f000 bff4 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edb8:	f107 0318 	add.w	r3, r7, #24
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7ff fb67 	bl	800e490 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800edc6:	f000 bfeb 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800edca:	4b6d      	ldr	r3, [pc, #436]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800edd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edd6:	d103      	bne.n	800ede0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800edd8:	4b6a      	ldr	r3, [pc, #424]	@ (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800edda:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800eddc:	f000 bfe0 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800ede0:	2300      	movs	r3, #0
 800ede2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ede4:	f000 bfdc 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ede8:	4b65      	ldr	r3, [pc, #404]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f003 0320 	and.w	r3, r3, #32
 800edf0:	2b20      	cmp	r3, #32
 800edf2:	d118      	bne.n	800ee26 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800edf4:	4b62      	ldr	r3, [pc, #392]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d005      	beq.n	800ee0c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800ee00:	4b5f      	ldr	r3, [pc, #380]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	0e1b      	lsrs	r3, r3, #24
 800ee06:	f003 030f 	and.w	r3, r3, #15
 800ee0a:	e006      	b.n	800ee1a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ee0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ee12:	041b      	lsls	r3, r3, #16
 800ee14:	0e1b      	lsrs	r3, r3, #24
 800ee16:	f003 030f 	and.w	r3, r3, #15
 800ee1a:	4a5b      	ldr	r2, [pc, #364]	@ (800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ee1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee20:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ee22:	f000 bfbd 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800ee26:	2300      	movs	r3, #0
 800ee28:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ee2a:	f000 bfb9 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ee32:	f000 bfb5 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800ee36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee3c:	d108      	bne.n	800ee50 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7ff f9ca 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800ee48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee4c:	f000 bfa8 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800ee50:	2300      	movs	r3, #0
 800ee52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee54:	f000 bfa4 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800ee58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee5c:	1e51      	subs	r1, r2, #1
 800ee5e:	430b      	orrs	r3, r1
 800ee60:	d136      	bne.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ee62:	4b47      	ldr	r3, [pc, #284]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee68:	f003 0303 	and.w	r3, r3, #3
 800ee6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d104      	bne.n	800ee7e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800ee74:	f7fe fb44 	bl	800d500 <HAL_RCC_GetPCLK2Freq>
 800ee78:	6378      	str	r0, [r7, #52]	@ 0x34
 800ee7a:	f000 bf91 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d104      	bne.n	800ee8e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ee84:	f7fe fa0c 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800ee88:	6378      	str	r0, [r7, #52]	@ 0x34
 800ee8a:	f000 bf89 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ee8e:	4b3c      	ldr	r3, [pc, #240]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee9a:	d106      	bne.n	800eeaa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ee9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	d103      	bne.n	800eeaa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800eea2:	4b3a      	ldr	r3, [pc, #232]	@ (800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800eea4:	637b      	str	r3, [r7, #52]	@ 0x34
 800eea6:	f000 bf7b 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800eeaa:	4b35      	ldr	r3, [pc, #212]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eeac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eeb0:	f003 0302 	and.w	r3, r3, #2
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d107      	bne.n	800eec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeba:	2b03      	cmp	r3, #3
 800eebc:	d104      	bne.n	800eec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800eebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eec2:	637b      	str	r3, [r7, #52]	@ 0x34
 800eec4:	f000 bf6c 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800eec8:	2300      	movs	r3, #0
 800eeca:	637b      	str	r3, [r7, #52]	@ 0x34
 800eecc:	f000 bf68 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800eed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eed4:	1e91      	subs	r1, r2, #2
 800eed6:	430b      	orrs	r3, r1
 800eed8:	d136      	bne.n	800ef48 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800eeda:	4b29      	ldr	r3, [pc, #164]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eedc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eee0:	f003 030c 	and.w	r3, r3, #12
 800eee4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800eee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d104      	bne.n	800eef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800eeec:	f7fe faf4 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800eef0:	6378      	str	r0, [r7, #52]	@ 0x34
 800eef2:	f000 bf55 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800eef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef8:	2b04      	cmp	r3, #4
 800eefa:	d104      	bne.n	800ef06 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eefc:	f7fe f9d0 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800ef00:	6378      	str	r0, [r7, #52]	@ 0x34
 800ef02:	f000 bf4d 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ef06:	4b1e      	ldr	r3, [pc, #120]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ef0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef12:	d106      	bne.n	800ef22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ef14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef16:	2b08      	cmp	r3, #8
 800ef18:	d103      	bne.n	800ef22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ef1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ef1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef1e:	f000 bf3f 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ef22:	4b17      	ldr	r3, [pc, #92]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ef28:	f003 0302 	and.w	r3, r3, #2
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d107      	bne.n	800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ef30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef32:	2b0c      	cmp	r3, #12
 800ef34:	d104      	bne.n	800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ef36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef3c:	f000 bf30 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ef40:	2300      	movs	r3, #0
 800ef42:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef44:	f000 bf2c 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ef48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef4c:	1f11      	subs	r1, r2, #4
 800ef4e:	430b      	orrs	r3, r1
 800ef50:	d13f      	bne.n	800efd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ef52:	4b0b      	ldr	r3, [pc, #44]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ef58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ef5c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d104      	bne.n	800ef6e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ef64:	f7fe fab8 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800ef68:	6378      	str	r0, [r7, #52]	@ 0x34
 800ef6a:	f000 bf19 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef70:	2b10      	cmp	r3, #16
 800ef72:	d10d      	bne.n	800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ef74:	f7fe f994 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800ef78:	6378      	str	r0, [r7, #52]	@ 0x34
 800ef7a:	f000 bf11 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800ef7e:	bf00      	nop
 800ef80:	46020c00 	.word	0x46020c00
 800ef84:	02dc6c00 	.word	0x02dc6c00
 800ef88:	080158c8 	.word	0x080158c8
 800ef8c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ef90:	4ba6      	ldr	r3, [pc, #664]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ef98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef9c:	d106      	bne.n	800efac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa0:	2b20      	cmp	r3, #32
 800efa2:	d103      	bne.n	800efac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800efa4:	4ba2      	ldr	r3, [pc, #648]	@ (800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800efa6:	637b      	str	r3, [r7, #52]	@ 0x34
 800efa8:	f000 befa 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800efac:	4b9f      	ldr	r3, [pc, #636]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800efae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800efb2:	f003 0302 	and.w	r3, r3, #2
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	d107      	bne.n	800efca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800efba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efbc:	2b30      	cmp	r3, #48	@ 0x30
 800efbe:	d104      	bne.n	800efca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800efc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800efc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800efc6:	f000 beeb 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800efca:	2300      	movs	r3, #0
 800efcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800efce:	f000 bee7 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800efd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efd6:	f1a2 0108 	sub.w	r1, r2, #8
 800efda:	430b      	orrs	r3, r1
 800efdc:	d136      	bne.n	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800efde:	4b93      	ldr	r3, [pc, #588]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800efe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800efe4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800efe8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800efea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efec:	2b00      	cmp	r3, #0
 800efee:	d104      	bne.n	800effa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800eff0:	f7fe fa72 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800eff4:	6378      	str	r0, [r7, #52]	@ 0x34
 800eff6:	f000 bed3 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800effa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800effc:	2b40      	cmp	r3, #64	@ 0x40
 800effe:	d104      	bne.n	800f00a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f000:	f7fe f94e 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f004:	6378      	str	r0, [r7, #52]	@ 0x34
 800f006:	f000 becb 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f00a:	4b88      	ldr	r3, [pc, #544]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f016:	d106      	bne.n	800f026 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800f018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f01a:	2b80      	cmp	r3, #128	@ 0x80
 800f01c:	d103      	bne.n	800f026 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800f01e:	4b84      	ldr	r3, [pc, #528]	@ (800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f020:	637b      	str	r3, [r7, #52]	@ 0x34
 800f022:	f000 bebd 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f026:	4b81      	ldr	r3, [pc, #516]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f02c:	f003 0302 	and.w	r3, r3, #2
 800f030:	2b02      	cmp	r3, #2
 800f032:	d107      	bne.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f036:	2bc0      	cmp	r3, #192	@ 0xc0
 800f038:	d104      	bne.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800f03a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f03e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f040:	f000 beae 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f044:	2300      	movs	r3, #0
 800f046:	637b      	str	r3, [r7, #52]	@ 0x34
 800f048:	f000 beaa 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800f04c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f050:	f1a2 0110 	sub.w	r1, r2, #16
 800f054:	430b      	orrs	r3, r1
 800f056:	d139      	bne.n	800f0cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f058:	4b74      	ldr	r3, [pc, #464]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f05a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f05e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f062:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f066:	2b00      	cmp	r3, #0
 800f068:	d104      	bne.n	800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f06a:	f7fe fa35 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800f06e:	6378      	str	r0, [r7, #52]	@ 0x34
 800f070:	f000 be96 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f07a:	d104      	bne.n	800f086 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f07c:	f7fe f910 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f080:	6378      	str	r0, [r7, #52]	@ 0x34
 800f082:	f000 be8d 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f086:	4b69      	ldr	r3, [pc, #420]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f08e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f092:	d107      	bne.n	800f0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800f094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f09a:	d103      	bne.n	800f0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800f09c:	4b64      	ldr	r3, [pc, #400]	@ (800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f09e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0a0:	f000 be7e 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f0a4:	4b61      	ldr	r3, [pc, #388]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f0a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f0aa:	f003 0302 	and.w	r3, r3, #2
 800f0ae:	2b02      	cmp	r3, #2
 800f0b0:	d108      	bne.n	800f0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f0b8:	d104      	bne.n	800f0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800f0ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0be:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0c0:	f000 be6e 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0c8:	f000 be6a 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800f0cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0d0:	f1a2 0120 	sub.w	r1, r2, #32
 800f0d4:	430b      	orrs	r3, r1
 800f0d6:	d158      	bne.n	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f0d8:	4b54      	ldr	r3, [pc, #336]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f0da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f0de:	f003 0307 	and.w	r3, r3, #7
 800f0e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800f0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d104      	bne.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800f0ea:	f7fe fa1d 	bl	800d528 <HAL_RCC_GetPCLK3Freq>
 800f0ee:	6378      	str	r0, [r7, #52]	@ 0x34
 800f0f0:	f000 be56 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d104      	bne.n	800f104 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f0fa:	f7fe f8d1 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f0fe:	6378      	str	r0, [r7, #52]	@ 0x34
 800f100:	f000 be4e 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f104:	4b49      	ldr	r3, [pc, #292]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f10c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f110:	d106      	bne.n	800f120 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	2b02      	cmp	r3, #2
 800f116:	d103      	bne.n	800f120 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800f118:	4b45      	ldr	r3, [pc, #276]	@ (800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800f11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f11c:	f000 be40 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f120:	4b42      	ldr	r3, [pc, #264]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f126:	f003 0302 	and.w	r3, r3, #2
 800f12a:	2b02      	cmp	r3, #2
 800f12c:	d107      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800f12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f130:	2b03      	cmp	r3, #3
 800f132:	d104      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800f134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f138:	637b      	str	r3, [r7, #52]	@ 0x34
 800f13a:	f000 be31 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800f13e:	4b3b      	ldr	r3, [pc, #236]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f003 0320 	and.w	r3, r3, #32
 800f146:	2b20      	cmp	r3, #32
 800f148:	d11b      	bne.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800f14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f14c:	2b04      	cmp	r3, #4
 800f14e:	d118      	bne.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f150:	4b36      	ldr	r3, [pc, #216]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d005      	beq.n	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f15c:	4b33      	ldr	r3, [pc, #204]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	0e1b      	lsrs	r3, r3, #24
 800f162:	f003 030f 	and.w	r3, r3, #15
 800f166:	e006      	b.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800f168:	4b30      	ldr	r3, [pc, #192]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f16a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f16e:	041b      	lsls	r3, r3, #16
 800f170:	0e1b      	lsrs	r3, r3, #24
 800f172:	f003 030f 	and.w	r3, r3, #15
 800f176:	4a2f      	ldr	r2, [pc, #188]	@ (800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f17c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f17e:	f000 be0f 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800f182:	2300      	movs	r3, #0
 800f184:	637b      	str	r3, [r7, #52]	@ 0x34
 800f186:	f000 be0b 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800f18a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f18e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f192:	430b      	orrs	r3, r1
 800f194:	d172      	bne.n	800f27c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800f196:	4b25      	ldr	r3, [pc, #148]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f19c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f1a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1a8:	d104      	bne.n	800f1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f1aa:	f7fe f879 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f1ae:	6378      	str	r0, [r7, #52]	@ 0x34
 800f1b0:	f000 bdf6 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800f1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f1ba:	d108      	bne.n	800f1ce <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1bc:	f107 0318 	add.w	r3, r7, #24
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7ff f965 	bl	800e490 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1ca:	f000 bde9 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d104      	bne.n	800f1de <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800f1d4:	f7fe f966 	bl	800d4a4 <HAL_RCC_GetHCLKFreq>
 800f1d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800f1da:	f000 bde1 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800f1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f1e4:	d128      	bne.n	800f238 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f1e6:	4b11      	ldr	r3, [pc, #68]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f003 0320 	and.w	r3, r3, #32
 800f1ee:	2b20      	cmp	r3, #32
 800f1f0:	d118      	bne.n	800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d005      	beq.n	800f20a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800f1fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	0e1b      	lsrs	r3, r3, #24
 800f204:	f003 030f 	and.w	r3, r3, #15
 800f208:	e006      	b.n	800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800f20a:	4b08      	ldr	r3, [pc, #32]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800f20c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f210:	041b      	lsls	r3, r3, #16
 800f212:	0e1b      	lsrs	r3, r3, #24
 800f214:	f003 030f 	and.w	r3, r3, #15
 800f218:	4a06      	ldr	r2, [pc, #24]	@ (800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f21e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f220:	f000 bdbe 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800f224:	2300      	movs	r3, #0
 800f226:	637b      	str	r3, [r7, #52]	@ 0x34
 800f228:	f000 bdba 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f22c:	46020c00 	.word	0x46020c00
 800f230:	00f42400 	.word	0x00f42400
 800f234:	080158c8 	.word	0x080158c8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f238:	4baf      	ldr	r3, [pc, #700]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f244:	d107      	bne.n	800f256 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800f246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f248:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f24c:	d103      	bne.n	800f256 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800f24e:	4bab      	ldr	r3, [pc, #684]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f250:	637b      	str	r3, [r7, #52]	@ 0x34
 800f252:	f000 bda5 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f256:	4ba8      	ldr	r3, [pc, #672]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f25e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f262:	d107      	bne.n	800f274 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800f264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f266:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f26a:	d103      	bne.n	800f274 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800f26c:	4ba3      	ldr	r3, [pc, #652]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f26e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f270:	f000 bd96 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f274:	2300      	movs	r3, #0
 800f276:	637b      	str	r3, [r7, #52]	@ 0x34
 800f278:	f000 bd92 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f27c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f280:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f284:	430b      	orrs	r3, r1
 800f286:	d158      	bne.n	800f33a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f288:	4b9b      	ldr	r3, [pc, #620]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f28a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f28e:	f003 0307 	and.w	r3, r3, #7
 800f292:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f296:	2b04      	cmp	r3, #4
 800f298:	d84b      	bhi.n	800f332 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800f29a:	a201      	add	r2, pc, #4	@ (adr r2, 800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800f29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a0:	0800f2d9 	.word	0x0800f2d9
 800f2a4:	0800f2b5 	.word	0x0800f2b5
 800f2a8:	0800f2c7 	.word	0x0800f2c7
 800f2ac:	0800f2e3 	.word	0x0800f2e3
 800f2b0:	0800f2ed 	.word	0x0800f2ed
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f2b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fe ff8f 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f2c2:	f000 bd6d 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2c6:	f107 030c 	add.w	r3, r7, #12
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7ff fa3a 	bl	800e744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f2d4:	f000 bd64 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f2d8:	f7fe f8e4 	bl	800d4a4 <HAL_RCC_GetHCLKFreq>
 800f2dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f2de:	f000 bd5f 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f2e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f2e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f2e8:	f000 bd5a 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f2ec:	4b82      	ldr	r3, [pc, #520]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f003 0320 	and.w	r3, r3, #32
 800f2f4:	2b20      	cmp	r3, #32
 800f2f6:	d118      	bne.n	800f32a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f2f8:	4b7f      	ldr	r3, [pc, #508]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f300:	2b00      	cmp	r3, #0
 800f302:	d005      	beq.n	800f310 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800f304:	4b7c      	ldr	r3, [pc, #496]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f306:	689b      	ldr	r3, [r3, #8]
 800f308:	0e1b      	lsrs	r3, r3, #24
 800f30a:	f003 030f 	and.w	r3, r3, #15
 800f30e:	e006      	b.n	800f31e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800f310:	4b79      	ldr	r3, [pc, #484]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f316:	041b      	lsls	r3, r3, #16
 800f318:	0e1b      	lsrs	r3, r3, #24
 800f31a:	f003 030f 	and.w	r3, r3, #15
 800f31e:	4a78      	ldr	r2, [pc, #480]	@ (800f500 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f324:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f326:	f000 bd3b 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f32a:	2300      	movs	r3, #0
 800f32c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f32e:	f000 bd37 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f332:	2300      	movs	r3, #0
 800f334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f336:	f000 bd33 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f33a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f33e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800f342:	430b      	orrs	r3, r1
 800f344:	d167      	bne.n	800f416 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f346:	4b6c      	ldr	r3, [pc, #432]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f34c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f350:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f354:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f358:	d036      	beq.n	800f3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800f35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f35c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f360:	d855      	bhi.n	800f40e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f368:	d029      	beq.n	800f3be <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800f36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f36c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f370:	d84d      	bhi.n	800f40e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f378:	d013      	beq.n	800f3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800f37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f37c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f380:	d845      	bhi.n	800f40e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f384:	2b00      	cmp	r3, #0
 800f386:	d015      	beq.n	800f3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800f388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f38a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f38e:	d13e      	bne.n	800f40e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f394:	4618      	mov	r0, r3
 800f396:	f7fe ff21 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f39c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f39e:	f000 bcff 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3a2:	f107 030c 	add.w	r3, r7, #12
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7ff f9cc 	bl	800e744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3b0:	f000 bcf6 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f3b4:	f7fe f876 	bl	800d4a4 <HAL_RCC_GetHCLKFreq>
 800f3b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f3ba:	f000 bcf1 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f3be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f3c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3c4:	f000 bcec 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f3c8:	4b4b      	ldr	r3, [pc, #300]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 0320 	and.w	r3, r3, #32
 800f3d0:	2b20      	cmp	r3, #32
 800f3d2:	d118      	bne.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f3d4:	4b48      	ldr	r3, [pc, #288]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d005      	beq.n	800f3ec <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800f3e0:	4b45      	ldr	r3, [pc, #276]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	0e1b      	lsrs	r3, r3, #24
 800f3e6:	f003 030f 	and.w	r3, r3, #15
 800f3ea:	e006      	b.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f3ec:	4b42      	ldr	r3, [pc, #264]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f3ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f3f2:	041b      	lsls	r3, r3, #16
 800f3f4:	0e1b      	lsrs	r3, r3, #24
 800f3f6:	f003 030f 	and.w	r3, r3, #15
 800f3fa:	4a41      	ldr	r2, [pc, #260]	@ (800f500 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f400:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f402:	f000 bccd 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f406:	2300      	movs	r3, #0
 800f408:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f40a:	f000 bcc9 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f40e:	2300      	movs	r3, #0
 800f410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f412:	f000 bcc5 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f41a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800f41e:	430b      	orrs	r3, r1
 800f420:	d14c      	bne.n	800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f422:	4b35      	ldr	r3, [pc, #212]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f428:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f42c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f430:	2b00      	cmp	r3, #0
 800f432:	d104      	bne.n	800f43e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f434:	f7fe f850 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800f438:	6378      	str	r0, [r7, #52]	@ 0x34
 800f43a:	f000 bcb1 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f444:	d104      	bne.n	800f450 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f446:	f7fd ff2b 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f44a:	6378      	str	r0, [r7, #52]	@ 0x34
 800f44c:	f000 bca8 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f450:	4b29      	ldr	r3, [pc, #164]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f45c:	d107      	bne.n	800f46e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800f45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f464:	d103      	bne.n	800f46e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800f466:	4b25      	ldr	r3, [pc, #148]	@ (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f468:	637b      	str	r3, [r7, #52]	@ 0x34
 800f46a:	f000 bc99 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f46e:	4b22      	ldr	r3, [pc, #136]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f003 0320 	and.w	r3, r3, #32
 800f476:	2b20      	cmp	r3, #32
 800f478:	d11c      	bne.n	800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800f47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f47c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f480:	d118      	bne.n	800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f482:	4b1d      	ldr	r3, [pc, #116]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d005      	beq.n	800f49a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800f48e:	4b1a      	ldr	r3, [pc, #104]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	0e1b      	lsrs	r3, r3, #24
 800f494:	f003 030f 	and.w	r3, r3, #15
 800f498:	e006      	b.n	800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800f49a:	4b17      	ldr	r3, [pc, #92]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f49c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f4a0:	041b      	lsls	r3, r3, #16
 800f4a2:	0e1b      	lsrs	r3, r3, #24
 800f4a4:	f003 030f 	and.w	r3, r3, #15
 800f4a8:	4a15      	ldr	r2, [pc, #84]	@ (800f500 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4b0:	f000 bc76 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4b8:	f000 bc72 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4c0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800f4c4:	430b      	orrs	r3, r1
 800f4c6:	d153      	bne.n	800f570 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f4c8:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f4ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f4ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f4d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d104      	bne.n	800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f4da:	f7fd fffd 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800f4de:	6378      	str	r0, [r7, #52]	@ 0x34
 800f4e0:	f000 bc5e 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f4ea:	d10b      	bne.n	800f504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f4ec:	f7fd fed8 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f4f0:	6378      	str	r0, [r7, #52]	@ 0x34
 800f4f2:	f000 bc55 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f4f6:	bf00      	nop
 800f4f8:	46020c00 	.word	0x46020c00
 800f4fc:	00f42400 	.word	0x00f42400
 800f500:	080158c8 	.word	0x080158c8
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f504:	4ba1      	ldr	r3, [pc, #644]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f50c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f510:	d107      	bne.n	800f522 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800f512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f518:	d103      	bne.n	800f522 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800f51a:	4b9d      	ldr	r3, [pc, #628]	@ (800f790 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f51e:	f000 bc3f 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f522:	4b9a      	ldr	r3, [pc, #616]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f003 0320 	and.w	r3, r3, #32
 800f52a:	2b20      	cmp	r3, #32
 800f52c:	d11c      	bne.n	800f568 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800f52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f530:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f534:	d118      	bne.n	800f568 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f536:	4b95      	ldr	r3, [pc, #596]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d005      	beq.n	800f54e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800f542:	4b92      	ldr	r3, [pc, #584]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	0e1b      	lsrs	r3, r3, #24
 800f548:	f003 030f 	and.w	r3, r3, #15
 800f54c:	e006      	b.n	800f55c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800f54e:	4b8f      	ldr	r3, [pc, #572]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f554:	041b      	lsls	r3, r3, #16
 800f556:	0e1b      	lsrs	r3, r3, #24
 800f558:	f003 030f 	and.w	r3, r3, #15
 800f55c:	4a8d      	ldr	r2, [pc, #564]	@ (800f794 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f562:	637b      	str	r3, [r7, #52]	@ 0x34
 800f564:	f000 bc1c 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f568:	2300      	movs	r3, #0
 800f56a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f56c:	f000 bc18 	b.w	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f570:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f574:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f578:	430b      	orrs	r3, r1
 800f57a:	d151      	bne.n	800f620 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f57c:	4b83      	ldr	r3, [pc, #524]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f57e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f582:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f586:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f58a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f58c:	d024      	beq.n	800f5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f590:	2bc0      	cmp	r3, #192	@ 0xc0
 800f592:	d842      	bhi.n	800f61a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800f594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f596:	2b80      	cmp	r3, #128	@ 0x80
 800f598:	d00d      	beq.n	800f5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800f59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f59c:	2b80      	cmp	r3, #128	@ 0x80
 800f59e:	d83c      	bhi.n	800f61a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d003      	beq.n	800f5ae <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800f5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a8:	2b40      	cmp	r3, #64	@ 0x40
 800f5aa:	d011      	beq.n	800f5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800f5ac:	e035      	b.n	800f61a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f5ae:	f7fd ffbb 	bl	800d528 <HAL_RCC_GetPCLK3Freq>
 800f5b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f5b4:	e3f4      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f5b6:	4b75      	ldr	r3, [pc, #468]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f5be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f5c2:	d102      	bne.n	800f5ca <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800f5c4:	4b72      	ldr	r3, [pc, #456]	@ (800f790 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f5c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f5c8:	e3ea      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f5ce:	e3e7      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f5d0:	f7fd fe66 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f5d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f5d6:	e3e3      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f5d8:	4b6c      	ldr	r3, [pc, #432]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f003 0320 	and.w	r3, r3, #32
 800f5e0:	2b20      	cmp	r3, #32
 800f5e2:	d117      	bne.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f5e4:	4b69      	ldr	r3, [pc, #420]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d005      	beq.n	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800f5f0:	4b66      	ldr	r3, [pc, #408]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	0e1b      	lsrs	r3, r3, #24
 800f5f6:	f003 030f 	and.w	r3, r3, #15
 800f5fa:	e006      	b.n	800f60a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800f5fc:	4b63      	ldr	r3, [pc, #396]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f5fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f602:	041b      	lsls	r3, r3, #16
 800f604:	0e1b      	lsrs	r3, r3, #24
 800f606:	f003 030f 	and.w	r3, r3, #15
 800f60a:	4a62      	ldr	r2, [pc, #392]	@ (800f794 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f610:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f612:	e3c5      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f614:	2300      	movs	r3, #0
 800f616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f618:	e3c2      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800f61a:	2300      	movs	r3, #0
 800f61c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f61e:	e3bf      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f624:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800f628:	430b      	orrs	r3, r1
 800f62a:	d147      	bne.n	800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f62c:	4b57      	ldr	r3, [pc, #348]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f62e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f632:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f636:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d103      	bne.n	800f646 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f63e:	f7fd ff4b 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800f642:	6378      	str	r0, [r7, #52]	@ 0x34
 800f644:	e3ac      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f64c:	d103      	bne.n	800f656 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f64e:	f7fd fe27 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f652:	6378      	str	r0, [r7, #52]	@ 0x34
 800f654:	e3a4      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f656:	4b4d      	ldr	r3, [pc, #308]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f65e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f662:	d106      	bne.n	800f672 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800f664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f66a:	d102      	bne.n	800f672 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800f66c:	4b48      	ldr	r3, [pc, #288]	@ (800f790 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f66e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f670:	e396      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f672:	4b46      	ldr	r3, [pc, #280]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f003 0320 	and.w	r3, r3, #32
 800f67a:	2b20      	cmp	r3, #32
 800f67c:	d11b      	bne.n	800f6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800f67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f680:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f684:	d117      	bne.n	800f6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f686:	4b41      	ldr	r3, [pc, #260]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f688:	689b      	ldr	r3, [r3, #8]
 800f68a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d005      	beq.n	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800f692:	4b3e      	ldr	r3, [pc, #248]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	0e1b      	lsrs	r3, r3, #24
 800f698:	f003 030f 	and.w	r3, r3, #15
 800f69c:	e006      	b.n	800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800f69e:	4b3b      	ldr	r3, [pc, #236]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f6a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f6a4:	041b      	lsls	r3, r3, #16
 800f6a6:	0e1b      	lsrs	r3, r3, #24
 800f6a8:	f003 030f 	and.w	r3, r3, #15
 800f6ac:	4a39      	ldr	r2, [pc, #228]	@ (800f794 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6b4:	e374      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6ba:	e371      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800f6bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6c0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f6c4:	430b      	orrs	r3, r1
 800f6c6:	d16a      	bne.n	800f79e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800f6c8:	4b30      	ldr	r3, [pc, #192]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f6ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f6ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f6d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d120      	bne.n	800f71c <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f6da:	4b2c      	ldr	r3, [pc, #176]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f003 0320 	and.w	r3, r3, #32
 800f6e2:	2b20      	cmp	r3, #32
 800f6e4:	d117      	bne.n	800f716 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f6e6:	4b29      	ldr	r3, [pc, #164]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d005      	beq.n	800f6fe <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800f6f2:	4b26      	ldr	r3, [pc, #152]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	0e1b      	lsrs	r3, r3, #24
 800f6f8:	f003 030f 	and.w	r3, r3, #15
 800f6fc:	e006      	b.n	800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800f6fe:	4b23      	ldr	r3, [pc, #140]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f704:	041b      	lsls	r3, r3, #16
 800f706:	0e1b      	lsrs	r3, r3, #24
 800f708:	f003 030f 	and.w	r3, r3, #15
 800f70c:	4a21      	ldr	r2, [pc, #132]	@ (800f794 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f712:	637b      	str	r3, [r7, #52]	@ 0x34
 800f714:	e344      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800f716:	2300      	movs	r3, #0
 800f718:	637b      	str	r3, [r7, #52]	@ 0x34
 800f71a:	e341      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800f71c:	4b1b      	ldr	r3, [pc, #108]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f71e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f722:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f72a:	d112      	bne.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800f72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f732:	d10e      	bne.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f734:	4b15      	ldr	r3, [pc, #84]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f73a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f73e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f742:	d102      	bne.n	800f74a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800f744:	23fa      	movs	r3, #250	@ 0xfa
 800f746:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f748:	e32a      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f74a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f74e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f750:	e326      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800f752:	4b0e      	ldr	r3, [pc, #56]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f75a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f75e:	d106      	bne.n	800f76e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800f760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f766:	d102      	bne.n	800f76e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800f768:	4b09      	ldr	r3, [pc, #36]	@ (800f790 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f76a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f76c:	e318      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800f76e:	4b07      	ldr	r3, [pc, #28]	@ (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f774:	f003 0302 	and.w	r3, r3, #2
 800f778:	2b02      	cmp	r3, #2
 800f77a:	d10d      	bne.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800f77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f782:	d109      	bne.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800f784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f788:	637b      	str	r3, [r7, #52]	@ 0x34
 800f78a:	e309      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f78c:	46020c00 	.word	0x46020c00
 800f790:	00f42400 	.word	0x00f42400
 800f794:	080158c8 	.word	0x080158c8
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800f798:	2300      	movs	r3, #0
 800f79a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f79c:	e300      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800f79e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7a2:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800f7a6:	430b      	orrs	r3, r1
 800f7a8:	d164      	bne.n	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f7aa:	4ba2      	ldr	r3, [pc, #648]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f7b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f7b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d120      	bne.n	800f7fe <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f7bc:	4b9d      	ldr	r3, [pc, #628]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f003 0320 	and.w	r3, r3, #32
 800f7c4:	2b20      	cmp	r3, #32
 800f7c6:	d117      	bne.n	800f7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f7c8:	4b9a      	ldr	r3, [pc, #616]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d005      	beq.n	800f7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800f7d4:	4b97      	ldr	r3, [pc, #604]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	0e1b      	lsrs	r3, r3, #24
 800f7da:	f003 030f 	and.w	r3, r3, #15
 800f7de:	e006      	b.n	800f7ee <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800f7e0:	4b94      	ldr	r3, [pc, #592]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f7e6:	041b      	lsls	r3, r3, #16
 800f7e8:	0e1b      	lsrs	r3, r3, #24
 800f7ea:	f003 030f 	and.w	r3, r3, #15
 800f7ee:	4a92      	ldr	r2, [pc, #584]	@ (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800f7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7f6:	e2d3      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7fc:	e2d0      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800f7fe:	4b8d      	ldr	r3, [pc, #564]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f80c:	d112      	bne.n	800f834 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800f80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f814:	d10e      	bne.n	800f834 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f816:	4b87      	ldr	r3, [pc, #540]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f81c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f824:	d102      	bne.n	800f82c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800f826:	23fa      	movs	r3, #250	@ 0xfa
 800f828:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f82a:	e2b9      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f82c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f830:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f832:	e2b5      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800f834:	4b7f      	ldr	r3, [pc, #508]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f83c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f840:	d106      	bne.n	800f850 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800f842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f848:	d102      	bne.n	800f850 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800f84a:	4b7c      	ldr	r3, [pc, #496]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f84c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f84e:	e2a7      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800f850:	4b78      	ldr	r3, [pc, #480]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f856:	f003 0302 	and.w	r3, r3, #2
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	d107      	bne.n	800f86e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800f85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f860:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f864:	d103      	bne.n	800f86e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800f866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f86a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f86c:	e298      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800f86e:	2300      	movs	r3, #0
 800f870:	637b      	str	r3, [r7, #52]	@ 0x34
 800f872:	e295      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800f874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f878:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f87c:	430b      	orrs	r3, r1
 800f87e:	d147      	bne.n	800f910 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800f880:	4b6c      	ldr	r3, [pc, #432]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f886:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800f88a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800f88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d103      	bne.n	800f89a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f892:	f7fd fe21 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800f896:	6378      	str	r0, [r7, #52]	@ 0x34
 800f898:	e282      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800f89a:	4b66      	ldr	r3, [pc, #408]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f89c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f8a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f8a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f8a8:	d112      	bne.n	800f8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800f8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f8b0:	d10e      	bne.n	800f8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f8b2:	4b60      	ldr	r3, [pc, #384]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f8b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f8b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f8bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f8c0:	d102      	bne.n	800f8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800f8c2:	23fa      	movs	r3, #250	@ 0xfa
 800f8c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f8c6:	e26b      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f8c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f8cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f8ce:	e267      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800f8d0:	4b58      	ldr	r3, [pc, #352]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f8d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f8dc:	d106      	bne.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800f8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f8e4:	d102      	bne.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800f8e6:	4b55      	ldr	r3, [pc, #340]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f8e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8ea:	e259      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800f8ec:	4b51      	ldr	r3, [pc, #324]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f8ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f8f2:	f003 0302 	and.w	r3, r3, #2
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	d107      	bne.n	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800f900:	d103      	bne.n	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800f902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f906:	637b      	str	r3, [r7, #52]	@ 0x34
 800f908:	e24a      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800f90a:	2300      	movs	r3, #0
 800f90c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f90e:	e247      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800f910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f914:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800f918:	430b      	orrs	r3, r1
 800f91a:	d12d      	bne.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800f91c:	4b45      	ldr	r3, [pc, #276]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f91e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f922:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800f926:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800f928:	4b42      	ldr	r3, [pc, #264]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f934:	d105      	bne.n	800f942 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d102      	bne.n	800f942 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800f93c:	4b3f      	ldr	r3, [pc, #252]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f93e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f940:	e22e      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800f942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f948:	d107      	bne.n	800f95a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f94a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fe fc44 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800f954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f956:	637b      	str	r3, [r7, #52]	@ 0x34
 800f958:	e222      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800f95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f95c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f960:	d107      	bne.n	800f972 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f962:	f107 0318 	add.w	r3, r7, #24
 800f966:	4618      	mov	r0, r3
 800f968:	f7fe fd92 	bl	800e490 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800f96c:	69bb      	ldr	r3, [r7, #24]
 800f96e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f970:	e216      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800f972:	2300      	movs	r3, #0
 800f974:	637b      	str	r3, [r7, #52]	@ 0x34
 800f976:	e213      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800f978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f97c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800f980:	430b      	orrs	r3, r1
 800f982:	d15d      	bne.n	800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f984:	4b2b      	ldr	r3, [pc, #172]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f98a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800f98e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800f990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f996:	d028      	beq.n	800f9ea <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800f998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f99a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f99e:	d845      	bhi.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800f9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f9a6:	d013      	beq.n	800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800f9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f9ae:	d83d      	bhi.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800f9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d004      	beq.n	800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800f9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f9bc:	d004      	beq.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800f9be:	e035      	b.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800f9c0:	f7fd fd9e 	bl	800d500 <HAL_RCC_GetPCLK2Freq>
 800f9c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f9c6:	e1eb      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f9c8:	f7fd fc6a 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800f9cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f9ce:	e1e7      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f9d0:	4b18      	ldr	r3, [pc, #96]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f9d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f9dc:	d102      	bne.n	800f9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800f9de:	4b17      	ldr	r3, [pc, #92]	@ (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f9e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f9e2:	e1dd      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f9e8:	e1da      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f9ea:	4b12      	ldr	r3, [pc, #72]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f003 0320 	and.w	r3, r3, #32
 800f9f2:	2b20      	cmp	r3, #32
 800f9f4:	d117      	bne.n	800fa26 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d005      	beq.n	800fa0e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800fa02:	4b0c      	ldr	r3, [pc, #48]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	0e1b      	lsrs	r3, r3, #24
 800fa08:	f003 030f 	and.w	r3, r3, #15
 800fa0c:	e006      	b.n	800fa1c <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800fa0e:	4b09      	ldr	r3, [pc, #36]	@ (800fa34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800fa10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fa14:	041b      	lsls	r3, r3, #16
 800fa16:	0e1b      	lsrs	r3, r3, #24
 800fa18:	f003 030f 	and.w	r3, r3, #15
 800fa1c:	4a06      	ldr	r2, [pc, #24]	@ (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800fa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fa24:	e1bc      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fa26:	2300      	movs	r3, #0
 800fa28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa2a:	e1b9      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa30:	e1b6      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800fa32:	bf00      	nop
 800fa34:	46020c00 	.word	0x46020c00
 800fa38:	080158c8 	.word	0x080158c8
 800fa3c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800fa40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa44:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800fa48:	430b      	orrs	r3, r1
 800fa4a:	d156      	bne.n	800fafa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800fa4c:	4ba5      	ldr	r3, [pc, #660]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fa4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800fa56:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800fa58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fa5e:	d028      	beq.n	800fab2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800fa60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fa66:	d845      	bhi.n	800faf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800fa68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa6e:	d013      	beq.n	800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800fa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa76:	d83d      	bhi.n	800faf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800fa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d004      	beq.n	800fa88 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa84:	d004      	beq.n	800fa90 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800fa86:	e035      	b.n	800faf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800fa88:	f7fd fd26 	bl	800d4d8 <HAL_RCC_GetPCLK1Freq>
 800fa8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fa8e:	e187      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fa90:	f7fd fc06 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800fa94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fa96:	e183      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa98:	4b92      	ldr	r3, [pc, #584]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800faa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800faa4:	d102      	bne.n	800faac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800faa6:	4b90      	ldr	r3, [pc, #576]	@ (800fce8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800faa8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800faaa:	e179      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800faac:	2300      	movs	r3, #0
 800faae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fab0:	e176      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fab2:	4b8c      	ldr	r3, [pc, #560]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f003 0320 	and.w	r3, r3, #32
 800faba:	2b20      	cmp	r3, #32
 800fabc:	d117      	bne.n	800faee <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fabe:	4b89      	ldr	r3, [pc, #548]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d005      	beq.n	800fad6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800faca:	4b86      	ldr	r3, [pc, #536]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800facc:	689b      	ldr	r3, [r3, #8]
 800face:	0e1b      	lsrs	r3, r3, #24
 800fad0:	f003 030f 	and.w	r3, r3, #15
 800fad4:	e006      	b.n	800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800fad6:	4b83      	ldr	r3, [pc, #524]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fadc:	041b      	lsls	r3, r3, #16
 800fade:	0e1b      	lsrs	r3, r3, #24
 800fae0:	f003 030f 	and.w	r3, r3, #15
 800fae4:	4a81      	ldr	r2, [pc, #516]	@ (800fcec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800fae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800faec:	e158      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800faee:	2300      	movs	r3, #0
 800faf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800faf2:	e155      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800faf4:	2300      	movs	r3, #0
 800faf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800faf8:	e152      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800fafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fafe:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800fb02:	430b      	orrs	r3, r1
 800fb04:	d177      	bne.n	800fbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800fb06:	4b77      	ldr	r3, [pc, #476]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fb08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fb0c:	f003 0318 	and.w	r3, r3, #24
 800fb10:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800fb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb14:	2b18      	cmp	r3, #24
 800fb16:	d86b      	bhi.n	800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800fb18:	a201      	add	r2, pc, #4	@ (adr r2, 800fb20 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800fb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb1e:	bf00      	nop
 800fb20:	0800fb85 	.word	0x0800fb85
 800fb24:	0800fbf1 	.word	0x0800fbf1
 800fb28:	0800fbf1 	.word	0x0800fbf1
 800fb2c:	0800fbf1 	.word	0x0800fbf1
 800fb30:	0800fbf1 	.word	0x0800fbf1
 800fb34:	0800fbf1 	.word	0x0800fbf1
 800fb38:	0800fbf1 	.word	0x0800fbf1
 800fb3c:	0800fbf1 	.word	0x0800fbf1
 800fb40:	0800fb8d 	.word	0x0800fb8d
 800fb44:	0800fbf1 	.word	0x0800fbf1
 800fb48:	0800fbf1 	.word	0x0800fbf1
 800fb4c:	0800fbf1 	.word	0x0800fbf1
 800fb50:	0800fbf1 	.word	0x0800fbf1
 800fb54:	0800fbf1 	.word	0x0800fbf1
 800fb58:	0800fbf1 	.word	0x0800fbf1
 800fb5c:	0800fbf1 	.word	0x0800fbf1
 800fb60:	0800fb95 	.word	0x0800fb95
 800fb64:	0800fbf1 	.word	0x0800fbf1
 800fb68:	0800fbf1 	.word	0x0800fbf1
 800fb6c:	0800fbf1 	.word	0x0800fbf1
 800fb70:	0800fbf1 	.word	0x0800fbf1
 800fb74:	0800fbf1 	.word	0x0800fbf1
 800fb78:	0800fbf1 	.word	0x0800fbf1
 800fb7c:	0800fbf1 	.word	0x0800fbf1
 800fb80:	0800fbaf 	.word	0x0800fbaf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800fb84:	f7fd fcd0 	bl	800d528 <HAL_RCC_GetPCLK3Freq>
 800fb88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fb8a:	e109      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fb8c:	f7fd fb88 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800fb90:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fb92:	e105      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fb94:	4b53      	ldr	r3, [pc, #332]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fba0:	d102      	bne.n	800fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800fba2:	4b51      	ldr	r3, [pc, #324]	@ (800fce8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800fba4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fba6:	e0fb      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fbac:	e0f8      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fbae:	4b4d      	ldr	r3, [pc, #308]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f003 0320 	and.w	r3, r3, #32
 800fbb6:	2b20      	cmp	r3, #32
 800fbb8:	d117      	bne.n	800fbea <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fbba:	4b4a      	ldr	r3, [pc, #296]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d005      	beq.n	800fbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800fbc6:	4b47      	ldr	r3, [pc, #284]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	0e1b      	lsrs	r3, r3, #24
 800fbcc:	f003 030f 	and.w	r3, r3, #15
 800fbd0:	e006      	b.n	800fbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800fbd2:	4b44      	ldr	r3, [pc, #272]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fbd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fbd8:	041b      	lsls	r3, r3, #16
 800fbda:	0e1b      	lsrs	r3, r3, #24
 800fbdc:	f003 030f 	and.w	r3, r3, #15
 800fbe0:	4a42      	ldr	r2, [pc, #264]	@ (800fcec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800fbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbe6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fbe8:	e0da      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fbea:	2300      	movs	r3, #0
 800fbec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fbee:	e0d7      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fbf4:	e0d4      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800fbf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbfa:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800fbfe:	430b      	orrs	r3, r1
 800fc00:	d155      	bne.n	800fcae <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800fc02:	4b38      	ldr	r3, [pc, #224]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fc08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800fc0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fc14:	d013      	beq.n	800fc3e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800fc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fc1c:	d844      	bhi.n	800fca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fc24:	d013      	beq.n	800fc4e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800fc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fc2c:	d83c      	bhi.n	800fca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800fc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d014      	beq.n	800fc5e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800fc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc3a:	d014      	beq.n	800fc66 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800fc3c:	e034      	b.n	800fca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc3e:	f107 0318 	add.w	r3, r7, #24
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe fc24 	bl	800e490 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc4c:	e0a8      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe fac2 	bl	800e1dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc5c:	e0a0      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fc5e:	f7fd fb1f 	bl	800d2a0 <HAL_RCC_GetSysClockFreq>
 800fc62:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fc64:	e09c      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fc66:	4b1f      	ldr	r3, [pc, #124]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f003 0320 	and.w	r3, r3, #32
 800fc6e:	2b20      	cmp	r3, #32
 800fc70:	d117      	bne.n	800fca2 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fc72:	4b1c      	ldr	r3, [pc, #112]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d005      	beq.n	800fc8a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800fc7e:	4b19      	ldr	r3, [pc, #100]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	0e1b      	lsrs	r3, r3, #24
 800fc84:	f003 030f 	and.w	r3, r3, #15
 800fc88:	e006      	b.n	800fc98 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800fc8a:	4b16      	ldr	r3, [pc, #88]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fc8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fc90:	041b      	lsls	r3, r3, #16
 800fc92:	0e1b      	lsrs	r3, r3, #24
 800fc94:	f003 030f 	and.w	r3, r3, #15
 800fc98:	4a14      	ldr	r2, [pc, #80]	@ (800fcec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800fc9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fca0:	e07e      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fca2:	2300      	movs	r3, #0
 800fca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fca6:	e07b      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fcac:	e078      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800fcae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcb2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800fcb6:	430b      	orrs	r3, r1
 800fcb8:	d138      	bne.n	800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800fcba:	4b0a      	ldr	r3, [pc, #40]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fcbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fcc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fcc4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800fcc6:	4b07      	ldr	r3, [pc, #28]	@ (800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fcc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fccc:	f003 0302 	and.w	r3, r3, #2
 800fcd0:	2b02      	cmp	r3, #2
 800fcd2:	d10d      	bne.n	800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800fcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d10a      	bne.n	800fcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800fcda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fcde:	637b      	str	r3, [r7, #52]	@ 0x34
 800fce0:	e05e      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800fce2:	bf00      	nop
 800fce4:	46020c00 	.word	0x46020c00
 800fce8:	00f42400 	.word	0x00f42400
 800fcec:	080158c8 	.word	0x080158c8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800fcf0:	4b2e      	ldr	r3, [pc, #184]	@ (800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fcf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fcf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fcfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fcfe:	d112      	bne.n	800fd26 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800fd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd06:	d10e      	bne.n	800fd26 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd08:	4b28      	ldr	r3, [pc, #160]	@ (800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fd0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fd0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fd12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd16:	d102      	bne.n	800fd1e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800fd18:	23fa      	movs	r3, #250	@ 0xfa
 800fd1a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd1c:	e040      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800fd1e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800fd22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd24:	e03c      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800fd26:	2300      	movs	r3, #0
 800fd28:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd2a:	e039      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800fd2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd30:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800fd34:	430b      	orrs	r3, r1
 800fd36:	d131      	bne.n	800fd9c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800fd38:	4b1c      	ldr	r3, [pc, #112]	@ (800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fd3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fd3e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800fd42:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800fd44:	4b19      	ldr	r3, [pc, #100]	@ (800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fd4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd50:	d105      	bne.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800fd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d102      	bne.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800fd58:	4b15      	ldr	r3, [pc, #84]	@ (800fdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800fd5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd5c:	e020      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800fd5e:	4b13      	ldr	r3, [pc, #76]	@ (800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fd66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd6a:	d106      	bne.n	800fd7a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800fd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd72:	d102      	bne.n	800fd7a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800fd74:	4b0f      	ldr	r3, [pc, #60]	@ (800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800fd76:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd78:	e012      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800fd7a:	4b0c      	ldr	r3, [pc, #48]	@ (800fdac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd86:	d106      	bne.n	800fd96 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800fd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd8e:	d102      	bne.n	800fd96 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800fd90:	4b09      	ldr	r3, [pc, #36]	@ (800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800fd92:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd94:	e004      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800fd96:	2300      	movs	r3, #0
 800fd98:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd9a:	e001      	b.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800fda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3738      	adds	r7, #56	@ 0x38
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	46020c00 	.word	0x46020c00
 800fdb0:	02dc6c00 	.word	0x02dc6c00
 800fdb4:	016e3600 	.word	0x016e3600
 800fdb8:	00f42400 	.word	0x00f42400

0800fdbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800fdc4:	4b47      	ldr	r3, [pc, #284]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4a46      	ldr	r2, [pc, #280]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fdca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fdce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fdd0:	f7f9 f882 	bl	8008ed8 <HAL_GetTick>
 800fdd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fdd6:	e008      	b.n	800fdea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fdd8:	f7f9 f87e 	bl	8008ed8 <HAL_GetTick>
 800fddc:	4602      	mov	r2, r0
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	2b02      	cmp	r3, #2
 800fde4:	d901      	bls.n	800fdea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fde6:	2303      	movs	r3, #3
 800fde8:	e077      	b.n	800feda <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fdea:	4b3e      	ldr	r3, [pc, #248]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1f0      	bne.n	800fdd8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800fdf6:	4b3b      	ldr	r3, [pc, #236]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fdf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdfa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800fdfe:	f023 0303 	bic.w	r3, r3, #3
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	6811      	ldr	r1, [r2, #0]
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	6852      	ldr	r2, [r2, #4]
 800fe0a:	3a01      	subs	r2, #1
 800fe0c:	0212      	lsls	r2, r2, #8
 800fe0e:	430a      	orrs	r2, r1
 800fe10:	4934      	ldr	r1, [pc, #208]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe12:	4313      	orrs	r3, r2
 800fe14:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800fe16:	4b33      	ldr	r3, [pc, #204]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fe1a:	4b33      	ldr	r3, [pc, #204]	@ (800fee8 <RCCEx_PLL2_Config+0x12c>)
 800fe1c:	4013      	ands	r3, r2
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	6892      	ldr	r2, [r2, #8]
 800fe22:	3a01      	subs	r2, #1
 800fe24:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	68d2      	ldr	r2, [r2, #12]
 800fe2c:	3a01      	subs	r2, #1
 800fe2e:	0252      	lsls	r2, r2, #9
 800fe30:	b292      	uxth	r2, r2
 800fe32:	4311      	orrs	r1, r2
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	6912      	ldr	r2, [r2, #16]
 800fe38:	3a01      	subs	r2, #1
 800fe3a:	0412      	lsls	r2, r2, #16
 800fe3c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800fe40:	4311      	orrs	r1, r2
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	6952      	ldr	r2, [r2, #20]
 800fe46:	3a01      	subs	r2, #1
 800fe48:	0612      	lsls	r2, r2, #24
 800fe4a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800fe4e:	430a      	orrs	r2, r1
 800fe50:	4924      	ldr	r1, [pc, #144]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe52:	4313      	orrs	r3, r2
 800fe54:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800fe56:	4b23      	ldr	r3, [pc, #140]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe5a:	f023 020c 	bic.w	r2, r3, #12
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	699b      	ldr	r3, [r3, #24]
 800fe62:	4920      	ldr	r1, [pc, #128]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe64:	4313      	orrs	r3, r2
 800fe66:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800fe68:	4b1e      	ldr	r3, [pc, #120]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a1b      	ldr	r3, [r3, #32]
 800fe70:	491c      	ldr	r1, [pc, #112]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe72:	4313      	orrs	r3, r2
 800fe74:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800fe76:	4b1b      	ldr	r3, [pc, #108]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe7a:	4a1a      	ldr	r2, [pc, #104]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe7c:	f023 0310 	bic.w	r3, r3, #16
 800fe80:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fe82:	4b18      	ldr	r3, [pc, #96]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fe8a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	69d2      	ldr	r2, [r2, #28]
 800fe92:	00d2      	lsls	r2, r2, #3
 800fe94:	4913      	ldr	r1, [pc, #76]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe96:	4313      	orrs	r3, r2
 800fe98:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800fe9a:	4b12      	ldr	r3, [pc, #72]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fe9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe9e:	4a11      	ldr	r2, [pc, #68]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fea0:	f043 0310 	orr.w	r3, r3, #16
 800fea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800fea6:	4b0f      	ldr	r3, [pc, #60]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a0e      	ldr	r2, [pc, #56]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800feac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800feb0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800feb2:	f7f9 f811 	bl	8008ed8 <HAL_GetTick>
 800feb6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800feb8:	e008      	b.n	800fecc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800feba:	f7f9 f80d 	bl	8008ed8 <HAL_GetTick>
 800febe:	4602      	mov	r2, r0
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	1ad3      	subs	r3, r2, r3
 800fec4:	2b02      	cmp	r3, #2
 800fec6:	d901      	bls.n	800fecc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800fec8:	2303      	movs	r3, #3
 800feca:	e006      	b.n	800feda <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fecc:	4b05      	ldr	r3, [pc, #20]	@ (800fee4 <RCCEx_PLL2_Config+0x128>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d0f0      	beq.n	800feba <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800fed8:	2300      	movs	r3, #0

}
 800feda:	4618      	mov	r0, r3
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	46020c00 	.word	0x46020c00
 800fee8:	80800000 	.word	0x80800000

0800feec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800fef4:	4b47      	ldr	r3, [pc, #284]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a46      	ldr	r2, [pc, #280]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800fefa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fefe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ff00:	f7f8 ffea 	bl	8008ed8 <HAL_GetTick>
 800ff04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ff06:	e008      	b.n	800ff1a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ff08:	f7f8 ffe6 	bl	8008ed8 <HAL_GetTick>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d901      	bls.n	800ff1a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ff16:	2303      	movs	r3, #3
 800ff18:	e077      	b.n	801000a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ff1a:	4b3e      	ldr	r3, [pc, #248]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d1f0      	bne.n	800ff08 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ff26:	4b3b      	ldr	r3, [pc, #236]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ff28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ff2e:	f023 0303 	bic.w	r3, r3, #3
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	6811      	ldr	r1, [r2, #0]
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	6852      	ldr	r2, [r2, #4]
 800ff3a:	3a01      	subs	r2, #1
 800ff3c:	0212      	lsls	r2, r2, #8
 800ff3e:	430a      	orrs	r2, r1
 800ff40:	4934      	ldr	r1, [pc, #208]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ff42:	4313      	orrs	r3, r2
 800ff44:	630b      	str	r3, [r1, #48]	@ 0x30
 800ff46:	4b33      	ldr	r3, [pc, #204]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ff48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff4a:	4b33      	ldr	r3, [pc, #204]	@ (8010018 <RCCEx_PLL3_Config+0x12c>)
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	6892      	ldr	r2, [r2, #8]
 800ff52:	3a01      	subs	r2, #1
 800ff54:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	68d2      	ldr	r2, [r2, #12]
 800ff5c:	3a01      	subs	r2, #1
 800ff5e:	0252      	lsls	r2, r2, #9
 800ff60:	b292      	uxth	r2, r2
 800ff62:	4311      	orrs	r1, r2
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	6912      	ldr	r2, [r2, #16]
 800ff68:	3a01      	subs	r2, #1
 800ff6a:	0412      	lsls	r2, r2, #16
 800ff6c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ff70:	4311      	orrs	r1, r2
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	6952      	ldr	r2, [r2, #20]
 800ff76:	3a01      	subs	r2, #1
 800ff78:	0612      	lsls	r2, r2, #24
 800ff7a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ff7e:	430a      	orrs	r2, r1
 800ff80:	4924      	ldr	r1, [pc, #144]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ff82:	4313      	orrs	r3, r2
 800ff84:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ff86:	4b23      	ldr	r3, [pc, #140]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ff88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff8a:	f023 020c 	bic.w	r2, r3, #12
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	699b      	ldr	r3, [r3, #24]
 800ff92:	4920      	ldr	r1, [pc, #128]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ff94:	4313      	orrs	r3, r2
 800ff96:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ff98:	4b1e      	ldr	r3, [pc, #120]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ff9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6a1b      	ldr	r3, [r3, #32]
 800ffa0:	491c      	ldr	r1, [pc, #112]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ffa6:	4b1b      	ldr	r3, [pc, #108]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffaa:	4a1a      	ldr	r2, [pc, #104]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffac:	f023 0310 	bic.w	r3, r3, #16
 800ffb0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ffb2:	4b18      	ldr	r3, [pc, #96]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ffb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ffba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	69d2      	ldr	r2, [r2, #28]
 800ffc2:	00d2      	lsls	r2, r2, #3
 800ffc4:	4913      	ldr	r1, [pc, #76]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ffca:	4b12      	ldr	r3, [pc, #72]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffce:	4a11      	ldr	r2, [pc, #68]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffd0:	f043 0310 	orr.w	r3, r3, #16
 800ffd4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800ffd6:	4b0f      	ldr	r3, [pc, #60]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4a0e      	ldr	r2, [pc, #56]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800ffdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ffe0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ffe2:	f7f8 ff79 	bl	8008ed8 <HAL_GetTick>
 800ffe6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ffe8:	e008      	b.n	800fffc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ffea:	f7f8 ff75 	bl	8008ed8 <HAL_GetTick>
 800ffee:	4602      	mov	r2, r0
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	1ad3      	subs	r3, r2, r3
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	d901      	bls.n	800fffc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800fff8:	2303      	movs	r3, #3
 800fffa:	e006      	b.n	801000a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fffc:	4b05      	ldr	r3, [pc, #20]	@ (8010014 <RCCEx_PLL3_Config+0x128>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010004:	2b00      	cmp	r3, #0
 8010006:	d0f0      	beq.n	800ffea <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	46020c00 	.word	0x46020c00
 8010018:	80800000 	.word	0x80800000

0801001c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b08a      	sub	sp, #40	@ 0x28
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	691b      	ldr	r3, [r3, #16]
 801002a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	695b      	ldr	r3, [r3, #20]
 8010032:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8010034:	6a3a      	ldr	r2, [r7, #32]
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	4013      	ands	r3, r2
 801003a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	689b      	ldr	r3, [r3, #8]
 8010042:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8010044:	2300      	movs	r3, #0
 8010046:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 801004e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3330      	adds	r3, #48	@ 0x30
 8010056:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801005e:	2b00      	cmp	r3, #0
 8010060:	d010      	beq.n	8010084 <HAL_SPI_IRQHandler+0x68>
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	f003 0308 	and.w	r3, r3, #8
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00b      	beq.n	8010084 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	699a      	ldr	r2, [r3, #24]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801007a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 f9c9 	bl	8010414 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8010082:	e19a      	b.n	80103ba <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801008a:	2b00      	cmp	r3, #0
 801008c:	d113      	bne.n	80100b6 <HAL_SPI_IRQHandler+0x9a>
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	f003 0320 	and.w	r3, r3, #32
 8010094:	2b00      	cmp	r3, #0
 8010096:	d10e      	bne.n	80100b6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d009      	beq.n	80100b6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	4798      	blx	r3
    handled = 1UL;
 80100b2:	2301      	movs	r3, #1
 80100b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d10f      	bne.n	80100e0 <HAL_SPI_IRQHandler+0xc4>
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00a      	beq.n	80100e0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d105      	bne.n	80100e0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	4798      	blx	r3
    handled = 1UL;
 80100dc:	2301      	movs	r3, #1
 80100de:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	f003 0320 	and.w	r3, r3, #32
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d10f      	bne.n	801010a <HAL_SPI_IRQHandler+0xee>
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	f003 0302 	and.w	r3, r3, #2
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d00a      	beq.n	801010a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d105      	bne.n	801010a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	4798      	blx	r3
    handled = 1UL;
 8010106:	2301      	movs	r3, #1
 8010108:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 801010a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801010c:	2b00      	cmp	r3, #0
 801010e:	f040 814f 	bne.w	80103b0 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	f003 0308 	and.w	r3, r3, #8
 8010118:	2b00      	cmp	r3, #0
 801011a:	f000 808b 	beq.w	8010234 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	699a      	ldr	r2, [r3, #24]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	f042 0208 	orr.w	r2, r2, #8
 801012c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	699a      	ldr	r2, [r3, #24]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f042 0210 	orr.w	r2, r2, #16
 801013c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	699a      	ldr	r2, [r3, #24]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801014c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	691a      	ldr	r2, [r3, #16]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f022 0208 	bic.w	r2, r2, #8
 801015c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	689b      	ldr	r3, [r3, #8]
 8010164:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010168:	2b00      	cmp	r3, #0
 801016a:	d13d      	bne.n	80101e8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801016c:	e036      	b.n	80101dc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	2b0f      	cmp	r3, #15
 8010174:	d90b      	bls.n	801018e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801017e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010180:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010186:	1d1a      	adds	r2, r3, #4
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801018c:	e01d      	b.n	80101ca <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	2b07      	cmp	r3, #7
 8010194:	d90b      	bls.n	80101ae <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	8812      	ldrh	r2, [r2, #0]
 801019e:	b292      	uxth	r2, r2
 80101a0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101a6:	1c9a      	adds	r2, r3, #2
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	66da      	str	r2, [r3, #108]	@ 0x6c
 80101ac:	e00d      	b.n	80101ca <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101ba:	7812      	ldrb	r2, [r2, #0]
 80101bc:	b2d2      	uxtb	r2, r2
 80101be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101c4:	1c5a      	adds	r2, r3, #1
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	3b01      	subs	r3, #1
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d1c2      	bne.n	801016e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 f937 	bl	801045c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2201      	movs	r2, #1
 80101f2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d003      	beq.n	8010208 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 f8fd 	bl	8010400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010206:	e0d8      	b.n	80103ba <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8010208:	7cfb      	ldrb	r3, [r7, #19]
 801020a:	2b05      	cmp	r3, #5
 801020c:	d103      	bne.n	8010216 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 f8ec 	bl	80103ec <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8010214:	e0ce      	b.n	80103b4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8010216:	7cfb      	ldrb	r3, [r7, #19]
 8010218:	2b04      	cmp	r3, #4
 801021a:	d103      	bne.n	8010224 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 f8db 	bl	80103d8 <HAL_SPI_RxCpltCallback>
    return;
 8010222:	e0c7      	b.n	80103b4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8010224:	7cfb      	ldrb	r3, [r7, #19]
 8010226:	2b03      	cmp	r3, #3
 8010228:	f040 80c4 	bne.w	80103b4 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 f8c9 	bl	80103c4 <HAL_SPI_TxCpltCallback>
    return;
 8010232:	e0bf      	b.n	80103b4 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801023a:	2b00      	cmp	r3, #0
 801023c:	f000 80bd 	beq.w	80103ba <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00f      	beq.n	801026a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010250:	f043 0204 	orr.w	r2, r3, #4
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	699a      	ldr	r2, [r3, #24]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010268:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010270:	2b00      	cmp	r3, #0
 8010272:	d00f      	beq.n	8010294 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801027a:	f043 0201 	orr.w	r2, r3, #1
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	699a      	ldr	r2, [r3, #24]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010292:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801029a:	2b00      	cmp	r3, #0
 801029c:	d00f      	beq.n	80102be <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102a4:	f043 0208 	orr.w	r2, r3, #8
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	699a      	ldr	r2, [r3, #24]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80102bc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	f003 0320 	and.w	r3, r3, #32
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00f      	beq.n	80102e8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	699a      	ldr	r2, [r3, #24]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	f042 0220 	orr.w	r2, r2, #32
 80102e6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d062      	beq.n	80103b8 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f022 0201 	bic.w	r2, r2, #1
 8010300:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	691b      	ldr	r3, [r3, #16]
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	6812      	ldr	r2, [r2, #0]
 801030c:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8010310:	f023 0303 	bic.w	r3, r3, #3
 8010314:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801031c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010320:	d13e      	bne.n	80103a0 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	689a      	ldr	r2, [r3, #8]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010330:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010338:	2b00      	cmp	r3, #0
 801033a:	d015      	beq.n	8010368 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010342:	4a1f      	ldr	r2, [pc, #124]	@ (80103c0 <HAL_SPI_IRQHandler+0x3a4>)
 8010344:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801034c:	4618      	mov	r0, r3
 801034e:	f7f9 f9d5 	bl	80096fc <HAL_DMA_Abort_IT>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d007      	beq.n	8010368 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801035e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801036e:	2b00      	cmp	r3, #0
 8010370:	d022      	beq.n	80103b8 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010378:	4a11      	ldr	r2, [pc, #68]	@ (80103c0 <HAL_SPI_IRQHandler+0x3a4>)
 801037a:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010382:	4618      	mov	r0, r3
 8010384:	f7f9 f9ba 	bl	80096fc <HAL_DMA_Abort_IT>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d014      	beq.n	80103b8 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010394:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801039e:	e00b      	b.n	80103b8 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 f829 	bl	8010400 <HAL_SPI_ErrorCallback>
    return;
 80103ae:	e003      	b.n	80103b8 <HAL_SPI_IRQHandler+0x39c>
    return;
 80103b0:	bf00      	nop
 80103b2:	e002      	b.n	80103ba <HAL_SPI_IRQHandler+0x39e>
    return;
 80103b4:	bf00      	nop
 80103b6:	e000      	b.n	80103ba <HAL_SPI_IRQHandler+0x39e>
    return;
 80103b8:	bf00      	nop
  }
}
 80103ba:	3728      	adds	r7, #40	@ 0x28
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	08010429 	.word	0x08010429

080103c4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80103cc:	bf00      	nop
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80103e0:	bf00      	nop
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80103ec:	b480      	push	{r7}
 80103ee:	b083      	sub	sp, #12
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80103f4:	bf00      	nop
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010408:	bf00      	nop
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801041c:	bf00      	nop
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010434:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2200      	movs	r2, #0
 801043a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2200      	movs	r2, #0
 8010442:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2201      	movs	r2, #1
 801044a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f7ff ffd6 	bl	8010400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010454:	bf00      	nop
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801045c:	b480      	push	{r7}
 801045e:	b085      	sub	sp, #20
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	695b      	ldr	r3, [r3, #20]
 801046a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	699a      	ldr	r2, [r3, #24]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f042 0208 	orr.w	r2, r2, #8
 801047a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	699a      	ldr	r2, [r3, #24]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f042 0210 	orr.w	r2, r2, #16
 801048a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f022 0201 	bic.w	r2, r2, #1
 801049a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	691b      	ldr	r3, [r3, #16]
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	6812      	ldr	r2, [r2, #0]
 80104a6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80104aa:	f023 0303 	bic.w	r3, r3, #3
 80104ae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	689a      	ldr	r2, [r3, #8]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80104be:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	2b04      	cmp	r3, #4
 80104ca:	d014      	beq.n	80104f6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f003 0320 	and.w	r3, r3, #32
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d00f      	beq.n	80104f6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80104dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	699a      	ldr	r2, [r3, #24]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f042 0220 	orr.w	r2, r2, #32
 80104f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	2b03      	cmp	r3, #3
 8010500:	d014      	beq.n	801052c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00f      	beq.n	801052c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010512:	f043 0204 	orr.w	r2, r3, #4
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	699a      	ldr	r2, [r3, #24]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801052a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00f      	beq.n	8010556 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801053c:	f043 0201 	orr.w	r2, r3, #1
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	699a      	ldr	r2, [r3, #24]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010554:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00f      	beq.n	8010580 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010566:	f043 0208 	orr.w	r2, r3, #8
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	699a      	ldr	r2, [r3, #24]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801057e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8010590:	bf00      	nop
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d101      	bne.n	80105ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	e042      	b.n	8010634 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d106      	bne.n	80105c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7f1 faf5 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2224      	movs	r2, #36	@ 0x24
 80105ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f022 0201 	bic.w	r2, r2, #1
 80105dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d002      	beq.n	80105ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 f9ca 	bl	8010980 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f825 	bl	801063c <UART_SetConfig>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d101      	bne.n	80105fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80105f8:	2301      	movs	r3, #1
 80105fa:	e01b      	b.n	8010634 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	685a      	ldr	r2, [r3, #4]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801060a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	689a      	ldr	r2, [r3, #8]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801061a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f042 0201 	orr.w	r2, r2, #1
 801062a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 fa49 	bl	8010ac4 <UART_CheckIdleState>
 8010632:	4603      	mov	r3, r0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801063c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010640:	b094      	sub	sp, #80	@ 0x50
 8010642:	af00      	add	r7, sp, #0
 8010644:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010646:	2300      	movs	r3, #0
 8010648:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	4b7e      	ldr	r3, [pc, #504]	@ (801084c <UART_SetConfig+0x210>)
 8010652:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010656:	689a      	ldr	r2, [r3, #8]
 8010658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065a:	691b      	ldr	r3, [r3, #16]
 801065c:	431a      	orrs	r2, r3
 801065e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010660:	695b      	ldr	r3, [r3, #20]
 8010662:	431a      	orrs	r2, r3
 8010664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010666:	69db      	ldr	r3, [r3, #28]
 8010668:	4313      	orrs	r3, r2
 801066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801066c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4977      	ldr	r1, [pc, #476]	@ (8010850 <UART_SetConfig+0x214>)
 8010674:	4019      	ands	r1, r3
 8010676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801067c:	430b      	orrs	r3, r1
 801067e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801068a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068c:	68d9      	ldr	r1, [r3, #12]
 801068e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	ea40 0301 	orr.w	r3, r0, r1
 8010696:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801069a:	699b      	ldr	r3, [r3, #24]
 801069c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801069e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	4b6a      	ldr	r3, [pc, #424]	@ (801084c <UART_SetConfig+0x210>)
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d009      	beq.n	80106bc <UART_SetConfig+0x80>
 80106a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	4b69      	ldr	r3, [pc, #420]	@ (8010854 <UART_SetConfig+0x218>)
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d004      	beq.n	80106bc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80106b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b4:	6a1a      	ldr	r2, [r3, #32]
 80106b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106b8:	4313      	orrs	r3, r2
 80106ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80106bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	689b      	ldr	r3, [r3, #8]
 80106c2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80106c6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80106ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106d0:	430b      	orrs	r3, r1
 80106d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80106d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106da:	f023 000f 	bic.w	r0, r3, #15
 80106de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80106e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	ea40 0301 	orr.w	r3, r0, r1
 80106ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80106ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	4b59      	ldr	r3, [pc, #356]	@ (8010858 <UART_SetConfig+0x21c>)
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d102      	bne.n	80106fc <UART_SetConfig+0xc0>
 80106f6:	2301      	movs	r3, #1
 80106f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106fa:	e029      	b.n	8010750 <UART_SetConfig+0x114>
 80106fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	4b56      	ldr	r3, [pc, #344]	@ (801085c <UART_SetConfig+0x220>)
 8010702:	429a      	cmp	r2, r3
 8010704:	d102      	bne.n	801070c <UART_SetConfig+0xd0>
 8010706:	2302      	movs	r3, #2
 8010708:	64bb      	str	r3, [r7, #72]	@ 0x48
 801070a:	e021      	b.n	8010750 <UART_SetConfig+0x114>
 801070c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	4b53      	ldr	r3, [pc, #332]	@ (8010860 <UART_SetConfig+0x224>)
 8010712:	429a      	cmp	r2, r3
 8010714:	d102      	bne.n	801071c <UART_SetConfig+0xe0>
 8010716:	2304      	movs	r3, #4
 8010718:	64bb      	str	r3, [r7, #72]	@ 0x48
 801071a:	e019      	b.n	8010750 <UART_SetConfig+0x114>
 801071c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	4b50      	ldr	r3, [pc, #320]	@ (8010864 <UART_SetConfig+0x228>)
 8010722:	429a      	cmp	r2, r3
 8010724:	d102      	bne.n	801072c <UART_SetConfig+0xf0>
 8010726:	2308      	movs	r3, #8
 8010728:	64bb      	str	r3, [r7, #72]	@ 0x48
 801072a:	e011      	b.n	8010750 <UART_SetConfig+0x114>
 801072c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	4b4d      	ldr	r3, [pc, #308]	@ (8010868 <UART_SetConfig+0x22c>)
 8010732:	429a      	cmp	r2, r3
 8010734:	d102      	bne.n	801073c <UART_SetConfig+0x100>
 8010736:	2310      	movs	r3, #16
 8010738:	64bb      	str	r3, [r7, #72]	@ 0x48
 801073a:	e009      	b.n	8010750 <UART_SetConfig+0x114>
 801073c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	4b42      	ldr	r3, [pc, #264]	@ (801084c <UART_SetConfig+0x210>)
 8010742:	429a      	cmp	r2, r3
 8010744:	d102      	bne.n	801074c <UART_SetConfig+0x110>
 8010746:	2320      	movs	r3, #32
 8010748:	64bb      	str	r3, [r7, #72]	@ 0x48
 801074a:	e001      	b.n	8010750 <UART_SetConfig+0x114>
 801074c:	2300      	movs	r3, #0
 801074e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	4b3d      	ldr	r3, [pc, #244]	@ (801084c <UART_SetConfig+0x210>)
 8010756:	429a      	cmp	r2, r3
 8010758:	d005      	beq.n	8010766 <UART_SetConfig+0x12a>
 801075a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	4b3d      	ldr	r3, [pc, #244]	@ (8010854 <UART_SetConfig+0x218>)
 8010760:	429a      	cmp	r2, r3
 8010762:	f040 8085 	bne.w	8010870 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010768:	2200      	movs	r2, #0
 801076a:	623b      	str	r3, [r7, #32]
 801076c:	627a      	str	r2, [r7, #36]	@ 0x24
 801076e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010772:	f7fe f941 	bl	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010776:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8010778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801077a:	2b00      	cmp	r3, #0
 801077c:	f000 80e8 	beq.w	8010950 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010784:	4a39      	ldr	r2, [pc, #228]	@ (801086c <UART_SetConfig+0x230>)
 8010786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801078a:	461a      	mov	r2, r3
 801078c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801078e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010792:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010796:	685a      	ldr	r2, [r3, #4]
 8010798:	4613      	mov	r3, r2
 801079a:	005b      	lsls	r3, r3, #1
 801079c:	4413      	add	r3, r2
 801079e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d305      	bcc.n	80107b0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80107a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80107aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d903      	bls.n	80107b8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80107b0:	2301      	movs	r3, #1
 80107b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80107b6:	e048      	b.n	801084a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107ba:	2200      	movs	r2, #0
 80107bc:	61bb      	str	r3, [r7, #24]
 80107be:	61fa      	str	r2, [r7, #28]
 80107c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107c4:	4a29      	ldr	r2, [pc, #164]	@ (801086c <UART_SetConfig+0x230>)
 80107c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	2200      	movs	r2, #0
 80107ce:	613b      	str	r3, [r7, #16]
 80107d0:	617a      	str	r2, [r7, #20]
 80107d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80107d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80107da:	f7f0 fa59 	bl	8000c90 <__aeabi_uldivmod>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4610      	mov	r0, r2
 80107e4:	4619      	mov	r1, r3
 80107e6:	f04f 0200 	mov.w	r2, #0
 80107ea:	f04f 0300 	mov.w	r3, #0
 80107ee:	020b      	lsls	r3, r1, #8
 80107f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80107f4:	0202      	lsls	r2, r0, #8
 80107f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107f8:	6849      	ldr	r1, [r1, #4]
 80107fa:	0849      	lsrs	r1, r1, #1
 80107fc:	2000      	movs	r0, #0
 80107fe:	460c      	mov	r4, r1
 8010800:	4605      	mov	r5, r0
 8010802:	eb12 0804 	adds.w	r8, r2, r4
 8010806:	eb43 0905 	adc.w	r9, r3, r5
 801080a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	60bb      	str	r3, [r7, #8]
 8010812:	60fa      	str	r2, [r7, #12]
 8010814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010818:	4640      	mov	r0, r8
 801081a:	4649      	mov	r1, r9
 801081c:	f7f0 fa38 	bl	8000c90 <__aeabi_uldivmod>
 8010820:	4602      	mov	r2, r0
 8010822:	460b      	mov	r3, r1
 8010824:	4613      	mov	r3, r2
 8010826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801082a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801082e:	d308      	bcc.n	8010842 <UART_SetConfig+0x206>
 8010830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010836:	d204      	bcs.n	8010842 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8010838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801083e:	60da      	str	r2, [r3, #12]
 8010840:	e003      	b.n	801084a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8010842:	2301      	movs	r3, #1
 8010844:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010848:	e082      	b.n	8010950 <UART_SetConfig+0x314>
 801084a:	e081      	b.n	8010950 <UART_SetConfig+0x314>
 801084c:	46002400 	.word	0x46002400
 8010850:	cfff69f3 	.word	0xcfff69f3
 8010854:	56002400 	.word	0x56002400
 8010858:	40013800 	.word	0x40013800
 801085c:	40004400 	.word	0x40004400
 8010860:	40004800 	.word	0x40004800
 8010864:	40004c00 	.word	0x40004c00
 8010868:	40005000 	.word	0x40005000
 801086c:	080159b0 	.word	0x080159b0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010872:	69db      	ldr	r3, [r3, #28]
 8010874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010878:	d13c      	bne.n	80108f4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801087a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801087c:	2200      	movs	r2, #0
 801087e:	603b      	str	r3, [r7, #0]
 8010880:	607a      	str	r2, [r7, #4]
 8010882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010886:	f7fe f8b7 	bl	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq>
 801088a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801088c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801088e:	2b00      	cmp	r3, #0
 8010890:	d05e      	beq.n	8010950 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010896:	4a39      	ldr	r2, [pc, #228]	@ (801097c <UART_SetConfig+0x340>)
 8010898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801089c:	461a      	mov	r2, r3
 801089e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80108a4:	005a      	lsls	r2, r3, #1
 80108a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	085b      	lsrs	r3, r3, #1
 80108ac:	441a      	add	r2, r3
 80108ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80108b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108ba:	2b0f      	cmp	r3, #15
 80108bc:	d916      	bls.n	80108ec <UART_SetConfig+0x2b0>
 80108be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80108c4:	d212      	bcs.n	80108ec <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80108c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	f023 030f 	bic.w	r3, r3, #15
 80108ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80108d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108d2:	085b      	lsrs	r3, r3, #1
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	f003 0307 	and.w	r3, r3, #7
 80108da:	b29a      	uxth	r2, r3
 80108dc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80108de:	4313      	orrs	r3, r2
 80108e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80108e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80108e8:	60da      	str	r2, [r3, #12]
 80108ea:	e031      	b.n	8010950 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80108ec:	2301      	movs	r3, #1
 80108ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80108f2:	e02d      	b.n	8010950 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80108f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108f6:	2200      	movs	r2, #0
 80108f8:	469a      	mov	sl, r3
 80108fa:	4693      	mov	fp, r2
 80108fc:	4650      	mov	r0, sl
 80108fe:	4659      	mov	r1, fp
 8010900:	f7fe f87a 	bl	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010904:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010908:	2b00      	cmp	r3, #0
 801090a:	d021      	beq.n	8010950 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801090c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801090e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010910:	4a1a      	ldr	r2, [pc, #104]	@ (801097c <UART_SetConfig+0x340>)
 8010912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010916:	461a      	mov	r2, r3
 8010918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801091a:	fbb3 f2f2 	udiv	r2, r3, r2
 801091e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	085b      	lsrs	r3, r3, #1
 8010924:	441a      	add	r2, r3
 8010926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	fbb2 f3f3 	udiv	r3, r2, r3
 801092e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010932:	2b0f      	cmp	r3, #15
 8010934:	d909      	bls.n	801094a <UART_SetConfig+0x30e>
 8010936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801093c:	d205      	bcs.n	801094a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801093e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010940:	b29a      	uxth	r2, r3
 8010942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	60da      	str	r2, [r3, #12]
 8010948:	e002      	b.n	8010950 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 801094a:	2301      	movs	r3, #1
 801094c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010952:	2201      	movs	r2, #1
 8010954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801095a:	2201      	movs	r2, #1
 801095c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010962:	2200      	movs	r2, #0
 8010964:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010968:	2200      	movs	r2, #0
 801096a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801096c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010970:	4618      	mov	r0, r3
 8010972:	3750      	adds	r7, #80	@ 0x50
 8010974:	46bd      	mov	sp, r7
 8010976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801097a:	bf00      	nop
 801097c:	080159b0 	.word	0x080159b0

08010980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801098c:	f003 0308 	and.w	r3, r3, #8
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00a      	beq.n	80109aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	430a      	orrs	r2, r1
 80109a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ae:	f003 0301 	and.w	r3, r3, #1
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00a      	beq.n	80109cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	430a      	orrs	r2, r1
 80109ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109d0:	f003 0302 	and.w	r3, r3, #2
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00a      	beq.n	80109ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	430a      	orrs	r2, r1
 80109ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109f2:	f003 0304 	and.w	r3, r3, #4
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00a      	beq.n	8010a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	430a      	orrs	r2, r1
 8010a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a14:	f003 0310 	and.w	r3, r3, #16
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00a      	beq.n	8010a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	430a      	orrs	r2, r1
 8010a30:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a36:	f003 0320 	and.w	r3, r3, #32
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00a      	beq.n	8010a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	689b      	ldr	r3, [r3, #8]
 8010a44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	430a      	orrs	r2, r1
 8010a52:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d01a      	beq.n	8010a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	430a      	orrs	r2, r1
 8010a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010a7e:	d10a      	bne.n	8010a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	430a      	orrs	r2, r1
 8010a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d00a      	beq.n	8010ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	430a      	orrs	r2, r1
 8010ab6:	605a      	str	r2, [r3, #4]
  }
}
 8010ab8:	bf00      	nop
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b098      	sub	sp, #96	@ 0x60
 8010ac8:	af02      	add	r7, sp, #8
 8010aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010ad4:	f7f8 fa00 	bl	8008ed8 <HAL_GetTick>
 8010ad8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f003 0308 	and.w	r3, r3, #8
 8010ae4:	2b08      	cmp	r3, #8
 8010ae6:	d12f      	bne.n	8010b48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010af0:	2200      	movs	r2, #0
 8010af2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 f88e 	bl	8010c18 <UART_WaitOnFlagUntilTimeout>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d022      	beq.n	8010b48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0a:	e853 3f00 	ldrex	r3, [r3]
 8010b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b16:	653b      	str	r3, [r7, #80]	@ 0x50
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010b28:	e841 2300 	strex	r3, r2, [r1]
 8010b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d1e6      	bne.n	8010b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2220      	movs	r2, #32
 8010b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b44:	2303      	movs	r3, #3
 8010b46:	e063      	b.n	8010c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f003 0304 	and.w	r3, r3, #4
 8010b52:	2b04      	cmp	r3, #4
 8010b54:	d149      	bne.n	8010bea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010b5a:	9300      	str	r3, [sp, #0]
 8010b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f000 f857 	bl	8010c18 <UART_WaitOnFlagUntilTimeout>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d03c      	beq.n	8010bea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b78:	e853 3f00 	ldrex	r3, [r3]
 8010b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8010b7e:	6a3b      	ldr	r3, [r7, #32]
 8010b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b96:	e841 2300 	strex	r3, r2, [r1]
 8010b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d1e6      	bne.n	8010b70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	e853 3f00 	ldrex	r3, [r3]
 8010bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f023 0301 	bic.w	r3, r3, #1
 8010bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3308      	adds	r3, #8
 8010bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010bc2:	61fa      	str	r2, [r7, #28]
 8010bc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc6:	69b9      	ldr	r1, [r7, #24]
 8010bc8:	69fa      	ldr	r2, [r7, #28]
 8010bca:	e841 2300 	strex	r3, r2, [r1]
 8010bce:	617b      	str	r3, [r7, #20]
   return(result);
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1e5      	bne.n	8010ba2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2220      	movs	r2, #32
 8010bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2200      	movs	r2, #0
 8010be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010be6:	2303      	movs	r3, #3
 8010be8:	e012      	b.n	8010c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2220      	movs	r2, #32
 8010bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2220      	movs	r2, #32
 8010bf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2200      	movs	r2, #0
 8010c04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c0e:	2300      	movs	r3, #0
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3758      	adds	r7, #88	@ 0x58
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	603b      	str	r3, [r7, #0]
 8010c24:	4613      	mov	r3, r2
 8010c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c28:	e04f      	b.n	8010cca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c30:	d04b      	beq.n	8010cca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c32:	f7f8 f951 	bl	8008ed8 <HAL_GetTick>
 8010c36:	4602      	mov	r2, r0
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	1ad3      	subs	r3, r2, r3
 8010c3c:	69ba      	ldr	r2, [r7, #24]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d302      	bcc.n	8010c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8010c42:	69bb      	ldr	r3, [r7, #24]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d101      	bne.n	8010c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010c48:	2303      	movs	r3, #3
 8010c4a:	e04e      	b.n	8010cea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f003 0304 	and.w	r3, r3, #4
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d037      	beq.n	8010cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	2b80      	cmp	r3, #128	@ 0x80
 8010c5e:	d034      	beq.n	8010cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	2b40      	cmp	r3, #64	@ 0x40
 8010c64:	d031      	beq.n	8010cca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	69db      	ldr	r3, [r3, #28]
 8010c6c:	f003 0308 	and.w	r3, r3, #8
 8010c70:	2b08      	cmp	r3, #8
 8010c72:	d110      	bne.n	8010c96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2208      	movs	r2, #8
 8010c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c7c:	68f8      	ldr	r0, [r7, #12]
 8010c7e:	f000 f838 	bl	8010cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	2208      	movs	r2, #8
 8010c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010c92:	2301      	movs	r3, #1
 8010c94:	e029      	b.n	8010cea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	69db      	ldr	r3, [r3, #28]
 8010c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ca4:	d111      	bne.n	8010cca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010cb0:	68f8      	ldr	r0, [r7, #12]
 8010cb2:	f000 f81e 	bl	8010cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2220      	movs	r2, #32
 8010cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010cc6:	2303      	movs	r3, #3
 8010cc8:	e00f      	b.n	8010cea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	69da      	ldr	r2, [r3, #28]
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	4013      	ands	r3, r2
 8010cd4:	68ba      	ldr	r2, [r7, #8]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	bf0c      	ite	eq
 8010cda:	2301      	moveq	r3, #1
 8010cdc:	2300      	movne	r3, #0
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	79fb      	ldrb	r3, [r7, #7]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d0a0      	beq.n	8010c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010ce8:	2300      	movs	r3, #0
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010cf2:	b480      	push	{r7}
 8010cf4:	b095      	sub	sp, #84	@ 0x54
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d02:	e853 3f00 	ldrex	r3, [r3]
 8010d06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	461a      	mov	r2, r3
 8010d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d18:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010d1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010d20:	e841 2300 	strex	r3, r2, [r1]
 8010d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d1e6      	bne.n	8010cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	3308      	adds	r3, #8
 8010d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d34:	6a3b      	ldr	r3, [r7, #32]
 8010d36:	e853 3f00 	ldrex	r3, [r3]
 8010d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010d42:	f023 0301 	bic.w	r3, r3, #1
 8010d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	3308      	adds	r3, #8
 8010d4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d58:	e841 2300 	strex	r3, r2, [r1]
 8010d5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d1e3      	bne.n	8010d2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d118      	bne.n	8010d9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	e853 3f00 	ldrex	r3, [r3]
 8010d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	f023 0310 	bic.w	r3, r3, #16
 8010d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	461a      	mov	r2, r3
 8010d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d8a:	61bb      	str	r3, [r7, #24]
 8010d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8e:	6979      	ldr	r1, [r7, #20]
 8010d90:	69ba      	ldr	r2, [r7, #24]
 8010d92:	e841 2300 	strex	r3, r2, [r1]
 8010d96:	613b      	str	r3, [r7, #16]
   return(result);
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d1e6      	bne.n	8010d6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2220      	movs	r2, #32
 8010da2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2200      	movs	r2, #0
 8010daa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010db2:	bf00      	nop
 8010db4:	3754      	adds	r7, #84	@ 0x54
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010dbe:	b480      	push	{r7}
 8010dc0:	b085      	sub	sp, #20
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d101      	bne.n	8010dd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8010dd0:	2302      	movs	r3, #2
 8010dd2:	e027      	b.n	8010e24 <HAL_UARTEx_DisableFifoMode+0x66>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2224      	movs	r2, #36	@ 0x24
 8010de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f022 0201 	bic.w	r2, r2, #1
 8010dfa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010e02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	68fa      	ldr	r2, [r7, #12]
 8010e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2220      	movs	r2, #32
 8010e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e22:	2300      	movs	r3, #0
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3714      	adds	r7, #20
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b084      	sub	sp, #16
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d101      	bne.n	8010e48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e44:	2302      	movs	r3, #2
 8010e46:	e02d      	b.n	8010ea4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2224      	movs	r2, #36	@ 0x24
 8010e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	f022 0201 	bic.w	r2, r2, #1
 8010e6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	689b      	ldr	r3, [r3, #8]
 8010e76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	683a      	ldr	r2, [r7, #0]
 8010e80:	430a      	orrs	r2, r1
 8010e82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f84f 	bl	8010f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	68fa      	ldr	r2, [r7, #12]
 8010e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2220      	movs	r2, #32
 8010e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ea2:	2300      	movs	r3, #0
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3710      	adds	r7, #16
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b084      	sub	sp, #16
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d101      	bne.n	8010ec4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ec0:	2302      	movs	r3, #2
 8010ec2:	e02d      	b.n	8010f20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2224      	movs	r2, #36	@ 0x24
 8010ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f022 0201 	bic.w	r2, r2, #1
 8010eea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	689b      	ldr	r3, [r3, #8]
 8010ef2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	683a      	ldr	r2, [r7, #0]
 8010efc:	430a      	orrs	r2, r1
 8010efe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f000 f811 	bl	8010f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	68fa      	ldr	r2, [r7, #12]
 8010f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2220      	movs	r2, #32
 8010f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f1e:	2300      	movs	r3, #0
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d108      	bne.n	8010f4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2201      	movs	r2, #1
 8010f44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f48:	e031      	b.n	8010fae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f4a:	2308      	movs	r3, #8
 8010f4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f4e:	2308      	movs	r3, #8
 8010f50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	689b      	ldr	r3, [r3, #8]
 8010f58:	0e5b      	lsrs	r3, r3, #25
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	f003 0307 	and.w	r3, r3, #7
 8010f60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	689b      	ldr	r3, [r3, #8]
 8010f68:	0f5b      	lsrs	r3, r3, #29
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	f003 0307 	and.w	r3, r3, #7
 8010f70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f72:	7bbb      	ldrb	r3, [r7, #14]
 8010f74:	7b3a      	ldrb	r2, [r7, #12]
 8010f76:	4911      	ldr	r1, [pc, #68]	@ (8010fbc <UARTEx_SetNbDataToProcess+0x94>)
 8010f78:	5c8a      	ldrb	r2, [r1, r2]
 8010f7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010f7e:	7b3a      	ldrb	r2, [r7, #12]
 8010f80:	490f      	ldr	r1, [pc, #60]	@ (8010fc0 <UARTEx_SetNbDataToProcess+0x98>)
 8010f82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f84:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
 8010f92:	7b7a      	ldrb	r2, [r7, #13]
 8010f94:	4909      	ldr	r1, [pc, #36]	@ (8010fbc <UARTEx_SetNbDataToProcess+0x94>)
 8010f96:	5c8a      	ldrb	r2, [r1, r2]
 8010f98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010f9c:	7b7a      	ldrb	r2, [r7, #13]
 8010f9e:	4908      	ldr	r1, [pc, #32]	@ (8010fc0 <UARTEx_SetNbDataToProcess+0x98>)
 8010fa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010fa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010fae:	bf00      	nop
 8010fb0:	3714      	adds	r7, #20
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr
 8010fba:	bf00      	nop
 8010fbc:	080159c8 	.word	0x080159c8
 8010fc0:	080159d0 	.word	0x080159d0

08010fc4 <__cvt>:
 8010fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc8:	ec57 6b10 	vmov	r6, r7, d0
 8010fcc:	2f00      	cmp	r7, #0
 8010fce:	460c      	mov	r4, r1
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	463b      	mov	r3, r7
 8010fd4:	bfb4      	ite	lt
 8010fd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010fda:	2300      	movge	r3, #0
 8010fdc:	4691      	mov	r9, r2
 8010fde:	bfbf      	itttt	lt
 8010fe0:	4632      	movlt	r2, r6
 8010fe2:	461f      	movlt	r7, r3
 8010fe4:	232d      	movlt	r3, #45	@ 0x2d
 8010fe6:	4616      	movlt	r6, r2
 8010fe8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010fec:	700b      	strb	r3, [r1, #0]
 8010fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ff0:	f023 0820 	bic.w	r8, r3, #32
 8010ff4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010ff8:	d005      	beq.n	8011006 <__cvt+0x42>
 8010ffa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010ffe:	d100      	bne.n	8011002 <__cvt+0x3e>
 8011000:	3401      	adds	r4, #1
 8011002:	2102      	movs	r1, #2
 8011004:	e000      	b.n	8011008 <__cvt+0x44>
 8011006:	2103      	movs	r1, #3
 8011008:	ab03      	add	r3, sp, #12
 801100a:	4622      	mov	r2, r4
 801100c:	9301      	str	r3, [sp, #4]
 801100e:	ab02      	add	r3, sp, #8
 8011010:	ec47 6b10 	vmov	d0, r6, r7
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	4653      	mov	r3, sl
 8011018:	f001 f98a 	bl	8012330 <_dtoa_r>
 801101c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011020:	4605      	mov	r5, r0
 8011022:	d119      	bne.n	8011058 <__cvt+0x94>
 8011024:	f019 0f01 	tst.w	r9, #1
 8011028:	d00e      	beq.n	8011048 <__cvt+0x84>
 801102a:	eb00 0904 	add.w	r9, r0, r4
 801102e:	2200      	movs	r2, #0
 8011030:	2300      	movs	r3, #0
 8011032:	4630      	mov	r0, r6
 8011034:	4639      	mov	r1, r7
 8011036:	f7ef fd4b 	bl	8000ad0 <__aeabi_dcmpeq>
 801103a:	b108      	cbz	r0, 8011040 <__cvt+0x7c>
 801103c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011040:	2230      	movs	r2, #48	@ 0x30
 8011042:	9b03      	ldr	r3, [sp, #12]
 8011044:	454b      	cmp	r3, r9
 8011046:	d31e      	bcc.n	8011086 <__cvt+0xc2>
 8011048:	9b03      	ldr	r3, [sp, #12]
 801104a:	4628      	mov	r0, r5
 801104c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801104e:	1b5b      	subs	r3, r3, r5
 8011050:	6013      	str	r3, [r2, #0]
 8011052:	b004      	add	sp, #16
 8011054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011058:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801105c:	eb00 0904 	add.w	r9, r0, r4
 8011060:	d1e5      	bne.n	801102e <__cvt+0x6a>
 8011062:	7803      	ldrb	r3, [r0, #0]
 8011064:	2b30      	cmp	r3, #48	@ 0x30
 8011066:	d10a      	bne.n	801107e <__cvt+0xba>
 8011068:	2200      	movs	r2, #0
 801106a:	2300      	movs	r3, #0
 801106c:	4630      	mov	r0, r6
 801106e:	4639      	mov	r1, r7
 8011070:	f7ef fd2e 	bl	8000ad0 <__aeabi_dcmpeq>
 8011074:	b918      	cbnz	r0, 801107e <__cvt+0xba>
 8011076:	f1c4 0401 	rsb	r4, r4, #1
 801107a:	f8ca 4000 	str.w	r4, [sl]
 801107e:	f8da 3000 	ldr.w	r3, [sl]
 8011082:	4499      	add	r9, r3
 8011084:	e7d3      	b.n	801102e <__cvt+0x6a>
 8011086:	1c59      	adds	r1, r3, #1
 8011088:	9103      	str	r1, [sp, #12]
 801108a:	701a      	strb	r2, [r3, #0]
 801108c:	e7d9      	b.n	8011042 <__cvt+0x7e>

0801108e <__exponent>:
 801108e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011090:	2900      	cmp	r1, #0
 8011092:	7002      	strb	r2, [r0, #0]
 8011094:	bfba      	itte	lt
 8011096:	4249      	neglt	r1, r1
 8011098:	232d      	movlt	r3, #45	@ 0x2d
 801109a:	232b      	movge	r3, #43	@ 0x2b
 801109c:	2909      	cmp	r1, #9
 801109e:	7043      	strb	r3, [r0, #1]
 80110a0:	dd28      	ble.n	80110f4 <__exponent+0x66>
 80110a2:	f10d 0307 	add.w	r3, sp, #7
 80110a6:	270a      	movs	r7, #10
 80110a8:	461d      	mov	r5, r3
 80110aa:	461a      	mov	r2, r3
 80110ac:	3b01      	subs	r3, #1
 80110ae:	fbb1 f6f7 	udiv	r6, r1, r7
 80110b2:	fb07 1416 	mls	r4, r7, r6, r1
 80110b6:	3430      	adds	r4, #48	@ 0x30
 80110b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80110bc:	460c      	mov	r4, r1
 80110be:	4631      	mov	r1, r6
 80110c0:	2c63      	cmp	r4, #99	@ 0x63
 80110c2:	dcf2      	bgt.n	80110aa <__exponent+0x1c>
 80110c4:	3130      	adds	r1, #48	@ 0x30
 80110c6:	1e94      	subs	r4, r2, #2
 80110c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80110cc:	1c41      	adds	r1, r0, #1
 80110ce:	4623      	mov	r3, r4
 80110d0:	42ab      	cmp	r3, r5
 80110d2:	d30a      	bcc.n	80110ea <__exponent+0x5c>
 80110d4:	f10d 0309 	add.w	r3, sp, #9
 80110d8:	1a9b      	subs	r3, r3, r2
 80110da:	42ac      	cmp	r4, r5
 80110dc:	bf88      	it	hi
 80110de:	2300      	movhi	r3, #0
 80110e0:	3302      	adds	r3, #2
 80110e2:	4403      	add	r3, r0
 80110e4:	1a18      	subs	r0, r3, r0
 80110e6:	b003      	add	sp, #12
 80110e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80110ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80110f2:	e7ed      	b.n	80110d0 <__exponent+0x42>
 80110f4:	2330      	movs	r3, #48	@ 0x30
 80110f6:	3130      	adds	r1, #48	@ 0x30
 80110f8:	7083      	strb	r3, [r0, #2]
 80110fa:	1d03      	adds	r3, r0, #4
 80110fc:	70c1      	strb	r1, [r0, #3]
 80110fe:	e7f1      	b.n	80110e4 <__exponent+0x56>

08011100 <_printf_float>:
 8011100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011104:	b08d      	sub	sp, #52	@ 0x34
 8011106:	460c      	mov	r4, r1
 8011108:	4616      	mov	r6, r2
 801110a:	461f      	mov	r7, r3
 801110c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011110:	4605      	mov	r5, r0
 8011112:	f000 fff1 	bl	80120f8 <_localeconv_r>
 8011116:	6803      	ldr	r3, [r0, #0]
 8011118:	4618      	mov	r0, r3
 801111a:	9304      	str	r3, [sp, #16]
 801111c:	f7ef f8ac 	bl	8000278 <strlen>
 8011120:	2300      	movs	r3, #0
 8011122:	9005      	str	r0, [sp, #20]
 8011124:	930a      	str	r3, [sp, #40]	@ 0x28
 8011126:	f8d8 3000 	ldr.w	r3, [r8]
 801112a:	f894 a018 	ldrb.w	sl, [r4, #24]
 801112e:	3307      	adds	r3, #7
 8011130:	f8d4 b000 	ldr.w	fp, [r4]
 8011134:	f023 0307 	bic.w	r3, r3, #7
 8011138:	f103 0208 	add.w	r2, r3, #8
 801113c:	f8c8 2000 	str.w	r2, [r8]
 8011140:	f04f 32ff 	mov.w	r2, #4294967295
 8011144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011148:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801114c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011150:	9307      	str	r3, [sp, #28]
 8011152:	4b9d      	ldr	r3, [pc, #628]	@ (80113c8 <_printf_float+0x2c8>)
 8011154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011158:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801115c:	f7ef fcea 	bl	8000b34 <__aeabi_dcmpun>
 8011160:	bb70      	cbnz	r0, 80111c0 <_printf_float+0xc0>
 8011162:	f04f 32ff 	mov.w	r2, #4294967295
 8011166:	4b98      	ldr	r3, [pc, #608]	@ (80113c8 <_printf_float+0x2c8>)
 8011168:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801116c:	f7ef fcc4 	bl	8000af8 <__aeabi_dcmple>
 8011170:	bb30      	cbnz	r0, 80111c0 <_printf_float+0xc0>
 8011172:	2200      	movs	r2, #0
 8011174:	2300      	movs	r3, #0
 8011176:	4640      	mov	r0, r8
 8011178:	4649      	mov	r1, r9
 801117a:	f7ef fcb3 	bl	8000ae4 <__aeabi_dcmplt>
 801117e:	b110      	cbz	r0, 8011186 <_printf_float+0x86>
 8011180:	232d      	movs	r3, #45	@ 0x2d
 8011182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011186:	4a91      	ldr	r2, [pc, #580]	@ (80113cc <_printf_float+0x2cc>)
 8011188:	4b91      	ldr	r3, [pc, #580]	@ (80113d0 <_printf_float+0x2d0>)
 801118a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801118e:	bf8c      	ite	hi
 8011190:	4690      	movhi	r8, r2
 8011192:	4698      	movls	r8, r3
 8011194:	2303      	movs	r3, #3
 8011196:	f04f 0900 	mov.w	r9, #0
 801119a:	6123      	str	r3, [r4, #16]
 801119c:	f02b 0304 	bic.w	r3, fp, #4
 80111a0:	6023      	str	r3, [r4, #0]
 80111a2:	4633      	mov	r3, r6
 80111a4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80111a6:	4621      	mov	r1, r4
 80111a8:	4628      	mov	r0, r5
 80111aa:	9700      	str	r7, [sp, #0]
 80111ac:	f000 f9d2 	bl	8011554 <_printf_common>
 80111b0:	3001      	adds	r0, #1
 80111b2:	f040 808d 	bne.w	80112d0 <_printf_float+0x1d0>
 80111b6:	f04f 30ff 	mov.w	r0, #4294967295
 80111ba:	b00d      	add	sp, #52	@ 0x34
 80111bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c0:	4642      	mov	r2, r8
 80111c2:	464b      	mov	r3, r9
 80111c4:	4640      	mov	r0, r8
 80111c6:	4649      	mov	r1, r9
 80111c8:	f7ef fcb4 	bl	8000b34 <__aeabi_dcmpun>
 80111cc:	b140      	cbz	r0, 80111e0 <_printf_float+0xe0>
 80111ce:	464b      	mov	r3, r9
 80111d0:	4a80      	ldr	r2, [pc, #512]	@ (80113d4 <_printf_float+0x2d4>)
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	bfbc      	itt	lt
 80111d6:	232d      	movlt	r3, #45	@ 0x2d
 80111d8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80111dc:	4b7e      	ldr	r3, [pc, #504]	@ (80113d8 <_printf_float+0x2d8>)
 80111de:	e7d4      	b.n	801118a <_printf_float+0x8a>
 80111e0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80111e4:	6863      	ldr	r3, [r4, #4]
 80111e6:	9206      	str	r2, [sp, #24]
 80111e8:	1c5a      	adds	r2, r3, #1
 80111ea:	d13b      	bne.n	8011264 <_printf_float+0x164>
 80111ec:	2306      	movs	r3, #6
 80111ee:	6063      	str	r3, [r4, #4]
 80111f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80111f4:	2300      	movs	r3, #0
 80111f6:	4628      	mov	r0, r5
 80111f8:	6022      	str	r2, [r4, #0]
 80111fa:	9303      	str	r3, [sp, #12]
 80111fc:	ab0a      	add	r3, sp, #40	@ 0x28
 80111fe:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011202:	ab09      	add	r3, sp, #36	@ 0x24
 8011204:	ec49 8b10 	vmov	d0, r8, r9
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801120e:	6861      	ldr	r1, [r4, #4]
 8011210:	f7ff fed8 	bl	8010fc4 <__cvt>
 8011214:	9b06      	ldr	r3, [sp, #24]
 8011216:	4680      	mov	r8, r0
 8011218:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801121a:	2b47      	cmp	r3, #71	@ 0x47
 801121c:	d129      	bne.n	8011272 <_printf_float+0x172>
 801121e:	1cc8      	adds	r0, r1, #3
 8011220:	db02      	blt.n	8011228 <_printf_float+0x128>
 8011222:	6863      	ldr	r3, [r4, #4]
 8011224:	4299      	cmp	r1, r3
 8011226:	dd41      	ble.n	80112ac <_printf_float+0x1ac>
 8011228:	f1aa 0a02 	sub.w	sl, sl, #2
 801122c:	fa5f fa8a 	uxtb.w	sl, sl
 8011230:	3901      	subs	r1, #1
 8011232:	4652      	mov	r2, sl
 8011234:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011238:	9109      	str	r1, [sp, #36]	@ 0x24
 801123a:	f7ff ff28 	bl	801108e <__exponent>
 801123e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011240:	4681      	mov	r9, r0
 8011242:	1813      	adds	r3, r2, r0
 8011244:	2a01      	cmp	r2, #1
 8011246:	6123      	str	r3, [r4, #16]
 8011248:	dc02      	bgt.n	8011250 <_printf_float+0x150>
 801124a:	6822      	ldr	r2, [r4, #0]
 801124c:	07d2      	lsls	r2, r2, #31
 801124e:	d501      	bpl.n	8011254 <_printf_float+0x154>
 8011250:	3301      	adds	r3, #1
 8011252:	6123      	str	r3, [r4, #16]
 8011254:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011258:	2b00      	cmp	r3, #0
 801125a:	d0a2      	beq.n	80111a2 <_printf_float+0xa2>
 801125c:	232d      	movs	r3, #45	@ 0x2d
 801125e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011262:	e79e      	b.n	80111a2 <_printf_float+0xa2>
 8011264:	9a06      	ldr	r2, [sp, #24]
 8011266:	2a47      	cmp	r2, #71	@ 0x47
 8011268:	d1c2      	bne.n	80111f0 <_printf_float+0xf0>
 801126a:	2b00      	cmp	r3, #0
 801126c:	d1c0      	bne.n	80111f0 <_printf_float+0xf0>
 801126e:	2301      	movs	r3, #1
 8011270:	e7bd      	b.n	80111ee <_printf_float+0xee>
 8011272:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011276:	d9db      	bls.n	8011230 <_printf_float+0x130>
 8011278:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801127c:	d118      	bne.n	80112b0 <_printf_float+0x1b0>
 801127e:	2900      	cmp	r1, #0
 8011280:	6863      	ldr	r3, [r4, #4]
 8011282:	dd0b      	ble.n	801129c <_printf_float+0x19c>
 8011284:	6121      	str	r1, [r4, #16]
 8011286:	b913      	cbnz	r3, 801128e <_printf_float+0x18e>
 8011288:	6822      	ldr	r2, [r4, #0]
 801128a:	07d0      	lsls	r0, r2, #31
 801128c:	d502      	bpl.n	8011294 <_printf_float+0x194>
 801128e:	3301      	adds	r3, #1
 8011290:	440b      	add	r3, r1
 8011292:	6123      	str	r3, [r4, #16]
 8011294:	f04f 0900 	mov.w	r9, #0
 8011298:	65a1      	str	r1, [r4, #88]	@ 0x58
 801129a:	e7db      	b.n	8011254 <_printf_float+0x154>
 801129c:	b913      	cbnz	r3, 80112a4 <_printf_float+0x1a4>
 801129e:	6822      	ldr	r2, [r4, #0]
 80112a0:	07d2      	lsls	r2, r2, #31
 80112a2:	d501      	bpl.n	80112a8 <_printf_float+0x1a8>
 80112a4:	3302      	adds	r3, #2
 80112a6:	e7f4      	b.n	8011292 <_printf_float+0x192>
 80112a8:	2301      	movs	r3, #1
 80112aa:	e7f2      	b.n	8011292 <_printf_float+0x192>
 80112ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80112b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112b2:	4299      	cmp	r1, r3
 80112b4:	db05      	blt.n	80112c2 <_printf_float+0x1c2>
 80112b6:	6823      	ldr	r3, [r4, #0]
 80112b8:	6121      	str	r1, [r4, #16]
 80112ba:	07d8      	lsls	r0, r3, #31
 80112bc:	d5ea      	bpl.n	8011294 <_printf_float+0x194>
 80112be:	1c4b      	adds	r3, r1, #1
 80112c0:	e7e7      	b.n	8011292 <_printf_float+0x192>
 80112c2:	2900      	cmp	r1, #0
 80112c4:	bfd4      	ite	le
 80112c6:	f1c1 0202 	rsble	r2, r1, #2
 80112ca:	2201      	movgt	r2, #1
 80112cc:	4413      	add	r3, r2
 80112ce:	e7e0      	b.n	8011292 <_printf_float+0x192>
 80112d0:	6823      	ldr	r3, [r4, #0]
 80112d2:	055a      	lsls	r2, r3, #21
 80112d4:	d407      	bmi.n	80112e6 <_printf_float+0x1e6>
 80112d6:	6923      	ldr	r3, [r4, #16]
 80112d8:	4642      	mov	r2, r8
 80112da:	4631      	mov	r1, r6
 80112dc:	4628      	mov	r0, r5
 80112de:	47b8      	blx	r7
 80112e0:	3001      	adds	r0, #1
 80112e2:	d12b      	bne.n	801133c <_printf_float+0x23c>
 80112e4:	e767      	b.n	80111b6 <_printf_float+0xb6>
 80112e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80112ea:	f240 80dd 	bls.w	80114a8 <_printf_float+0x3a8>
 80112ee:	2200      	movs	r2, #0
 80112f0:	2300      	movs	r3, #0
 80112f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80112f6:	f7ef fbeb 	bl	8000ad0 <__aeabi_dcmpeq>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d033      	beq.n	8011366 <_printf_float+0x266>
 80112fe:	2301      	movs	r3, #1
 8011300:	4a36      	ldr	r2, [pc, #216]	@ (80113dc <_printf_float+0x2dc>)
 8011302:	4631      	mov	r1, r6
 8011304:	4628      	mov	r0, r5
 8011306:	47b8      	blx	r7
 8011308:	3001      	adds	r0, #1
 801130a:	f43f af54 	beq.w	80111b6 <_printf_float+0xb6>
 801130e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011312:	4543      	cmp	r3, r8
 8011314:	db02      	blt.n	801131c <_printf_float+0x21c>
 8011316:	6823      	ldr	r3, [r4, #0]
 8011318:	07d8      	lsls	r0, r3, #31
 801131a:	d50f      	bpl.n	801133c <_printf_float+0x23c>
 801131c:	4631      	mov	r1, r6
 801131e:	4628      	mov	r0, r5
 8011320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011324:	47b8      	blx	r7
 8011326:	3001      	adds	r0, #1
 8011328:	f43f af45 	beq.w	80111b6 <_printf_float+0xb6>
 801132c:	f04f 0900 	mov.w	r9, #0
 8011330:	f108 38ff 	add.w	r8, r8, #4294967295
 8011334:	f104 0a1a 	add.w	sl, r4, #26
 8011338:	45c8      	cmp	r8, r9
 801133a:	dc09      	bgt.n	8011350 <_printf_float+0x250>
 801133c:	6823      	ldr	r3, [r4, #0]
 801133e:	079b      	lsls	r3, r3, #30
 8011340:	f100 8103 	bmi.w	801154a <_printf_float+0x44a>
 8011344:	68e0      	ldr	r0, [r4, #12]
 8011346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011348:	4298      	cmp	r0, r3
 801134a:	bfb8      	it	lt
 801134c:	4618      	movlt	r0, r3
 801134e:	e734      	b.n	80111ba <_printf_float+0xba>
 8011350:	2301      	movs	r3, #1
 8011352:	4652      	mov	r2, sl
 8011354:	4631      	mov	r1, r6
 8011356:	4628      	mov	r0, r5
 8011358:	47b8      	blx	r7
 801135a:	3001      	adds	r0, #1
 801135c:	f43f af2b 	beq.w	80111b6 <_printf_float+0xb6>
 8011360:	f109 0901 	add.w	r9, r9, #1
 8011364:	e7e8      	b.n	8011338 <_printf_float+0x238>
 8011366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011368:	2b00      	cmp	r3, #0
 801136a:	dc39      	bgt.n	80113e0 <_printf_float+0x2e0>
 801136c:	2301      	movs	r3, #1
 801136e:	4a1b      	ldr	r2, [pc, #108]	@ (80113dc <_printf_float+0x2dc>)
 8011370:	4631      	mov	r1, r6
 8011372:	4628      	mov	r0, r5
 8011374:	47b8      	blx	r7
 8011376:	3001      	adds	r0, #1
 8011378:	f43f af1d 	beq.w	80111b6 <_printf_float+0xb6>
 801137c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011380:	ea59 0303 	orrs.w	r3, r9, r3
 8011384:	d102      	bne.n	801138c <_printf_float+0x28c>
 8011386:	6823      	ldr	r3, [r4, #0]
 8011388:	07d9      	lsls	r1, r3, #31
 801138a:	d5d7      	bpl.n	801133c <_printf_float+0x23c>
 801138c:	4631      	mov	r1, r6
 801138e:	4628      	mov	r0, r5
 8011390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011394:	47b8      	blx	r7
 8011396:	3001      	adds	r0, #1
 8011398:	f43f af0d 	beq.w	80111b6 <_printf_float+0xb6>
 801139c:	f04f 0a00 	mov.w	sl, #0
 80113a0:	f104 0b1a 	add.w	fp, r4, #26
 80113a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113a6:	425b      	negs	r3, r3
 80113a8:	4553      	cmp	r3, sl
 80113aa:	dc01      	bgt.n	80113b0 <_printf_float+0x2b0>
 80113ac:	464b      	mov	r3, r9
 80113ae:	e793      	b.n	80112d8 <_printf_float+0x1d8>
 80113b0:	2301      	movs	r3, #1
 80113b2:	465a      	mov	r2, fp
 80113b4:	4631      	mov	r1, r6
 80113b6:	4628      	mov	r0, r5
 80113b8:	47b8      	blx	r7
 80113ba:	3001      	adds	r0, #1
 80113bc:	f43f aefb 	beq.w	80111b6 <_printf_float+0xb6>
 80113c0:	f10a 0a01 	add.w	sl, sl, #1
 80113c4:	e7ee      	b.n	80113a4 <_printf_float+0x2a4>
 80113c6:	bf00      	nop
 80113c8:	7fefffff 	.word	0x7fefffff
 80113cc:	080159dc 	.word	0x080159dc
 80113d0:	080159d8 	.word	0x080159d8
 80113d4:	080159e4 	.word	0x080159e4
 80113d8:	080159e0 	.word	0x080159e0
 80113dc:	080159e8 	.word	0x080159e8
 80113e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80113e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80113e6:	4553      	cmp	r3, sl
 80113e8:	bfa8      	it	ge
 80113ea:	4653      	movge	r3, sl
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	4699      	mov	r9, r3
 80113f0:	dc36      	bgt.n	8011460 <_printf_float+0x360>
 80113f2:	f04f 0b00 	mov.w	fp, #0
 80113f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113fa:	f104 021a 	add.w	r2, r4, #26
 80113fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011400:	9306      	str	r3, [sp, #24]
 8011402:	eba3 0309 	sub.w	r3, r3, r9
 8011406:	455b      	cmp	r3, fp
 8011408:	dc31      	bgt.n	801146e <_printf_float+0x36e>
 801140a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801140c:	459a      	cmp	sl, r3
 801140e:	dc3a      	bgt.n	8011486 <_printf_float+0x386>
 8011410:	6823      	ldr	r3, [r4, #0]
 8011412:	07da      	lsls	r2, r3, #31
 8011414:	d437      	bmi.n	8011486 <_printf_float+0x386>
 8011416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011418:	ebaa 0903 	sub.w	r9, sl, r3
 801141c:	9b06      	ldr	r3, [sp, #24]
 801141e:	ebaa 0303 	sub.w	r3, sl, r3
 8011422:	4599      	cmp	r9, r3
 8011424:	bfa8      	it	ge
 8011426:	4699      	movge	r9, r3
 8011428:	f1b9 0f00 	cmp.w	r9, #0
 801142c:	dc33      	bgt.n	8011496 <_printf_float+0x396>
 801142e:	f04f 0800 	mov.w	r8, #0
 8011432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011436:	f104 0b1a 	add.w	fp, r4, #26
 801143a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801143c:	ebaa 0303 	sub.w	r3, sl, r3
 8011440:	eba3 0309 	sub.w	r3, r3, r9
 8011444:	4543      	cmp	r3, r8
 8011446:	f77f af79 	ble.w	801133c <_printf_float+0x23c>
 801144a:	2301      	movs	r3, #1
 801144c:	465a      	mov	r2, fp
 801144e:	4631      	mov	r1, r6
 8011450:	4628      	mov	r0, r5
 8011452:	47b8      	blx	r7
 8011454:	3001      	adds	r0, #1
 8011456:	f43f aeae 	beq.w	80111b6 <_printf_float+0xb6>
 801145a:	f108 0801 	add.w	r8, r8, #1
 801145e:	e7ec      	b.n	801143a <_printf_float+0x33a>
 8011460:	4642      	mov	r2, r8
 8011462:	4631      	mov	r1, r6
 8011464:	4628      	mov	r0, r5
 8011466:	47b8      	blx	r7
 8011468:	3001      	adds	r0, #1
 801146a:	d1c2      	bne.n	80113f2 <_printf_float+0x2f2>
 801146c:	e6a3      	b.n	80111b6 <_printf_float+0xb6>
 801146e:	2301      	movs	r3, #1
 8011470:	4631      	mov	r1, r6
 8011472:	4628      	mov	r0, r5
 8011474:	9206      	str	r2, [sp, #24]
 8011476:	47b8      	blx	r7
 8011478:	3001      	adds	r0, #1
 801147a:	f43f ae9c 	beq.w	80111b6 <_printf_float+0xb6>
 801147e:	f10b 0b01 	add.w	fp, fp, #1
 8011482:	9a06      	ldr	r2, [sp, #24]
 8011484:	e7bb      	b.n	80113fe <_printf_float+0x2fe>
 8011486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801148a:	4631      	mov	r1, r6
 801148c:	4628      	mov	r0, r5
 801148e:	47b8      	blx	r7
 8011490:	3001      	adds	r0, #1
 8011492:	d1c0      	bne.n	8011416 <_printf_float+0x316>
 8011494:	e68f      	b.n	80111b6 <_printf_float+0xb6>
 8011496:	9a06      	ldr	r2, [sp, #24]
 8011498:	464b      	mov	r3, r9
 801149a:	4631      	mov	r1, r6
 801149c:	4628      	mov	r0, r5
 801149e:	4442      	add	r2, r8
 80114a0:	47b8      	blx	r7
 80114a2:	3001      	adds	r0, #1
 80114a4:	d1c3      	bne.n	801142e <_printf_float+0x32e>
 80114a6:	e686      	b.n	80111b6 <_printf_float+0xb6>
 80114a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80114ac:	f1ba 0f01 	cmp.w	sl, #1
 80114b0:	dc01      	bgt.n	80114b6 <_printf_float+0x3b6>
 80114b2:	07db      	lsls	r3, r3, #31
 80114b4:	d536      	bpl.n	8011524 <_printf_float+0x424>
 80114b6:	2301      	movs	r3, #1
 80114b8:	4642      	mov	r2, r8
 80114ba:	4631      	mov	r1, r6
 80114bc:	4628      	mov	r0, r5
 80114be:	47b8      	blx	r7
 80114c0:	3001      	adds	r0, #1
 80114c2:	f43f ae78 	beq.w	80111b6 <_printf_float+0xb6>
 80114c6:	4631      	mov	r1, r6
 80114c8:	4628      	mov	r0, r5
 80114ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114ce:	47b8      	blx	r7
 80114d0:	3001      	adds	r0, #1
 80114d2:	f43f ae70 	beq.w	80111b6 <_printf_float+0xb6>
 80114d6:	2200      	movs	r2, #0
 80114d8:	2300      	movs	r3, #0
 80114da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80114e2:	f7ef faf5 	bl	8000ad0 <__aeabi_dcmpeq>
 80114e6:	b9c0      	cbnz	r0, 801151a <_printf_float+0x41a>
 80114e8:	4653      	mov	r3, sl
 80114ea:	f108 0201 	add.w	r2, r8, #1
 80114ee:	4631      	mov	r1, r6
 80114f0:	4628      	mov	r0, r5
 80114f2:	47b8      	blx	r7
 80114f4:	3001      	adds	r0, #1
 80114f6:	d10c      	bne.n	8011512 <_printf_float+0x412>
 80114f8:	e65d      	b.n	80111b6 <_printf_float+0xb6>
 80114fa:	2301      	movs	r3, #1
 80114fc:	465a      	mov	r2, fp
 80114fe:	4631      	mov	r1, r6
 8011500:	4628      	mov	r0, r5
 8011502:	47b8      	blx	r7
 8011504:	3001      	adds	r0, #1
 8011506:	f43f ae56 	beq.w	80111b6 <_printf_float+0xb6>
 801150a:	f108 0801 	add.w	r8, r8, #1
 801150e:	45d0      	cmp	r8, sl
 8011510:	dbf3      	blt.n	80114fa <_printf_float+0x3fa>
 8011512:	464b      	mov	r3, r9
 8011514:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011518:	e6df      	b.n	80112da <_printf_float+0x1da>
 801151a:	f04f 0800 	mov.w	r8, #0
 801151e:	f104 0b1a 	add.w	fp, r4, #26
 8011522:	e7f4      	b.n	801150e <_printf_float+0x40e>
 8011524:	2301      	movs	r3, #1
 8011526:	4642      	mov	r2, r8
 8011528:	e7e1      	b.n	80114ee <_printf_float+0x3ee>
 801152a:	2301      	movs	r3, #1
 801152c:	464a      	mov	r2, r9
 801152e:	4631      	mov	r1, r6
 8011530:	4628      	mov	r0, r5
 8011532:	47b8      	blx	r7
 8011534:	3001      	adds	r0, #1
 8011536:	f43f ae3e 	beq.w	80111b6 <_printf_float+0xb6>
 801153a:	f108 0801 	add.w	r8, r8, #1
 801153e:	68e3      	ldr	r3, [r4, #12]
 8011540:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011542:	1a5b      	subs	r3, r3, r1
 8011544:	4543      	cmp	r3, r8
 8011546:	dcf0      	bgt.n	801152a <_printf_float+0x42a>
 8011548:	e6fc      	b.n	8011344 <_printf_float+0x244>
 801154a:	f04f 0800 	mov.w	r8, #0
 801154e:	f104 0919 	add.w	r9, r4, #25
 8011552:	e7f4      	b.n	801153e <_printf_float+0x43e>

08011554 <_printf_common>:
 8011554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011558:	4616      	mov	r6, r2
 801155a:	4698      	mov	r8, r3
 801155c:	688a      	ldr	r2, [r1, #8]
 801155e:	4607      	mov	r7, r0
 8011560:	690b      	ldr	r3, [r1, #16]
 8011562:	460c      	mov	r4, r1
 8011564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011568:	4293      	cmp	r3, r2
 801156a:	bfb8      	it	lt
 801156c:	4613      	movlt	r3, r2
 801156e:	6033      	str	r3, [r6, #0]
 8011570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011574:	b10a      	cbz	r2, 801157a <_printf_common+0x26>
 8011576:	3301      	adds	r3, #1
 8011578:	6033      	str	r3, [r6, #0]
 801157a:	6823      	ldr	r3, [r4, #0]
 801157c:	0699      	lsls	r1, r3, #26
 801157e:	bf42      	ittt	mi
 8011580:	6833      	ldrmi	r3, [r6, #0]
 8011582:	3302      	addmi	r3, #2
 8011584:	6033      	strmi	r3, [r6, #0]
 8011586:	6825      	ldr	r5, [r4, #0]
 8011588:	f015 0506 	ands.w	r5, r5, #6
 801158c:	d106      	bne.n	801159c <_printf_common+0x48>
 801158e:	f104 0a19 	add.w	sl, r4, #25
 8011592:	68e3      	ldr	r3, [r4, #12]
 8011594:	6832      	ldr	r2, [r6, #0]
 8011596:	1a9b      	subs	r3, r3, r2
 8011598:	42ab      	cmp	r3, r5
 801159a:	dc2b      	bgt.n	80115f4 <_printf_common+0xa0>
 801159c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80115a0:	6822      	ldr	r2, [r4, #0]
 80115a2:	3b00      	subs	r3, #0
 80115a4:	bf18      	it	ne
 80115a6:	2301      	movne	r3, #1
 80115a8:	0692      	lsls	r2, r2, #26
 80115aa:	d430      	bmi.n	801160e <_printf_common+0xba>
 80115ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80115b0:	4641      	mov	r1, r8
 80115b2:	4638      	mov	r0, r7
 80115b4:	47c8      	blx	r9
 80115b6:	3001      	adds	r0, #1
 80115b8:	d023      	beq.n	8011602 <_printf_common+0xae>
 80115ba:	6823      	ldr	r3, [r4, #0]
 80115bc:	341a      	adds	r4, #26
 80115be:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80115c2:	f003 0306 	and.w	r3, r3, #6
 80115c6:	2b04      	cmp	r3, #4
 80115c8:	bf0a      	itet	eq
 80115ca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80115ce:	2500      	movne	r5, #0
 80115d0:	6833      	ldreq	r3, [r6, #0]
 80115d2:	f04f 0600 	mov.w	r6, #0
 80115d6:	bf08      	it	eq
 80115d8:	1aed      	subeq	r5, r5, r3
 80115da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80115de:	bf08      	it	eq
 80115e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115e4:	4293      	cmp	r3, r2
 80115e6:	bfc4      	itt	gt
 80115e8:	1a9b      	subgt	r3, r3, r2
 80115ea:	18ed      	addgt	r5, r5, r3
 80115ec:	42b5      	cmp	r5, r6
 80115ee:	d11a      	bne.n	8011626 <_printf_common+0xd2>
 80115f0:	2000      	movs	r0, #0
 80115f2:	e008      	b.n	8011606 <_printf_common+0xb2>
 80115f4:	2301      	movs	r3, #1
 80115f6:	4652      	mov	r2, sl
 80115f8:	4641      	mov	r1, r8
 80115fa:	4638      	mov	r0, r7
 80115fc:	47c8      	blx	r9
 80115fe:	3001      	adds	r0, #1
 8011600:	d103      	bne.n	801160a <_printf_common+0xb6>
 8011602:	f04f 30ff 	mov.w	r0, #4294967295
 8011606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801160a:	3501      	adds	r5, #1
 801160c:	e7c1      	b.n	8011592 <_printf_common+0x3e>
 801160e:	18e1      	adds	r1, r4, r3
 8011610:	1c5a      	adds	r2, r3, #1
 8011612:	2030      	movs	r0, #48	@ 0x30
 8011614:	3302      	adds	r3, #2
 8011616:	4422      	add	r2, r4
 8011618:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801161c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011624:	e7c2      	b.n	80115ac <_printf_common+0x58>
 8011626:	2301      	movs	r3, #1
 8011628:	4622      	mov	r2, r4
 801162a:	4641      	mov	r1, r8
 801162c:	4638      	mov	r0, r7
 801162e:	47c8      	blx	r9
 8011630:	3001      	adds	r0, #1
 8011632:	d0e6      	beq.n	8011602 <_printf_common+0xae>
 8011634:	3601      	adds	r6, #1
 8011636:	e7d9      	b.n	80115ec <_printf_common+0x98>

08011638 <_printf_i>:
 8011638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801163c:	7e0f      	ldrb	r7, [r1, #24]
 801163e:	4691      	mov	r9, r2
 8011640:	4680      	mov	r8, r0
 8011642:	460c      	mov	r4, r1
 8011644:	2f78      	cmp	r7, #120	@ 0x78
 8011646:	469a      	mov	sl, r3
 8011648:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801164a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801164e:	d807      	bhi.n	8011660 <_printf_i+0x28>
 8011650:	2f62      	cmp	r7, #98	@ 0x62
 8011652:	d80a      	bhi.n	801166a <_printf_i+0x32>
 8011654:	2f00      	cmp	r7, #0
 8011656:	f000 80d1 	beq.w	80117fc <_printf_i+0x1c4>
 801165a:	2f58      	cmp	r7, #88	@ 0x58
 801165c:	f000 80b8 	beq.w	80117d0 <_printf_i+0x198>
 8011660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011668:	e03a      	b.n	80116e0 <_printf_i+0xa8>
 801166a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801166e:	2b15      	cmp	r3, #21
 8011670:	d8f6      	bhi.n	8011660 <_printf_i+0x28>
 8011672:	a101      	add	r1, pc, #4	@ (adr r1, 8011678 <_printf_i+0x40>)
 8011674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011678:	080116d1 	.word	0x080116d1
 801167c:	080116e5 	.word	0x080116e5
 8011680:	08011661 	.word	0x08011661
 8011684:	08011661 	.word	0x08011661
 8011688:	08011661 	.word	0x08011661
 801168c:	08011661 	.word	0x08011661
 8011690:	080116e5 	.word	0x080116e5
 8011694:	08011661 	.word	0x08011661
 8011698:	08011661 	.word	0x08011661
 801169c:	08011661 	.word	0x08011661
 80116a0:	08011661 	.word	0x08011661
 80116a4:	080117e3 	.word	0x080117e3
 80116a8:	0801170f 	.word	0x0801170f
 80116ac:	0801179d 	.word	0x0801179d
 80116b0:	08011661 	.word	0x08011661
 80116b4:	08011661 	.word	0x08011661
 80116b8:	08011805 	.word	0x08011805
 80116bc:	08011661 	.word	0x08011661
 80116c0:	0801170f 	.word	0x0801170f
 80116c4:	08011661 	.word	0x08011661
 80116c8:	08011661 	.word	0x08011661
 80116cc:	080117a5 	.word	0x080117a5
 80116d0:	6833      	ldr	r3, [r6, #0]
 80116d2:	1d1a      	adds	r2, r3, #4
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	6032      	str	r2, [r6, #0]
 80116d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80116e0:	2301      	movs	r3, #1
 80116e2:	e09c      	b.n	801181e <_printf_i+0x1e6>
 80116e4:	6833      	ldr	r3, [r6, #0]
 80116e6:	6820      	ldr	r0, [r4, #0]
 80116e8:	1d19      	adds	r1, r3, #4
 80116ea:	6031      	str	r1, [r6, #0]
 80116ec:	0606      	lsls	r6, r0, #24
 80116ee:	d501      	bpl.n	80116f4 <_printf_i+0xbc>
 80116f0:	681d      	ldr	r5, [r3, #0]
 80116f2:	e003      	b.n	80116fc <_printf_i+0xc4>
 80116f4:	0645      	lsls	r5, r0, #25
 80116f6:	d5fb      	bpl.n	80116f0 <_printf_i+0xb8>
 80116f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80116fc:	2d00      	cmp	r5, #0
 80116fe:	da03      	bge.n	8011708 <_printf_i+0xd0>
 8011700:	232d      	movs	r3, #45	@ 0x2d
 8011702:	426d      	negs	r5, r5
 8011704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011708:	4858      	ldr	r0, [pc, #352]	@ (801186c <_printf_i+0x234>)
 801170a:	230a      	movs	r3, #10
 801170c:	e011      	b.n	8011732 <_printf_i+0xfa>
 801170e:	6821      	ldr	r1, [r4, #0]
 8011710:	6833      	ldr	r3, [r6, #0]
 8011712:	0608      	lsls	r0, r1, #24
 8011714:	f853 5b04 	ldr.w	r5, [r3], #4
 8011718:	d402      	bmi.n	8011720 <_printf_i+0xe8>
 801171a:	0649      	lsls	r1, r1, #25
 801171c:	bf48      	it	mi
 801171e:	b2ad      	uxthmi	r5, r5
 8011720:	2f6f      	cmp	r7, #111	@ 0x6f
 8011722:	6033      	str	r3, [r6, #0]
 8011724:	4851      	ldr	r0, [pc, #324]	@ (801186c <_printf_i+0x234>)
 8011726:	bf14      	ite	ne
 8011728:	230a      	movne	r3, #10
 801172a:	2308      	moveq	r3, #8
 801172c:	2100      	movs	r1, #0
 801172e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011732:	6866      	ldr	r6, [r4, #4]
 8011734:	2e00      	cmp	r6, #0
 8011736:	60a6      	str	r6, [r4, #8]
 8011738:	db05      	blt.n	8011746 <_printf_i+0x10e>
 801173a:	6821      	ldr	r1, [r4, #0]
 801173c:	432e      	orrs	r6, r5
 801173e:	f021 0104 	bic.w	r1, r1, #4
 8011742:	6021      	str	r1, [r4, #0]
 8011744:	d04b      	beq.n	80117de <_printf_i+0x1a6>
 8011746:	4616      	mov	r6, r2
 8011748:	fbb5 f1f3 	udiv	r1, r5, r3
 801174c:	fb03 5711 	mls	r7, r3, r1, r5
 8011750:	5dc7      	ldrb	r7, [r0, r7]
 8011752:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011756:	462f      	mov	r7, r5
 8011758:	460d      	mov	r5, r1
 801175a:	42bb      	cmp	r3, r7
 801175c:	d9f4      	bls.n	8011748 <_printf_i+0x110>
 801175e:	2b08      	cmp	r3, #8
 8011760:	d10b      	bne.n	801177a <_printf_i+0x142>
 8011762:	6823      	ldr	r3, [r4, #0]
 8011764:	07df      	lsls	r7, r3, #31
 8011766:	d508      	bpl.n	801177a <_printf_i+0x142>
 8011768:	6923      	ldr	r3, [r4, #16]
 801176a:	6861      	ldr	r1, [r4, #4]
 801176c:	4299      	cmp	r1, r3
 801176e:	bfde      	ittt	le
 8011770:	2330      	movle	r3, #48	@ 0x30
 8011772:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011776:	f106 36ff 	addle.w	r6, r6, #4294967295
 801177a:	1b92      	subs	r2, r2, r6
 801177c:	6122      	str	r2, [r4, #16]
 801177e:	464b      	mov	r3, r9
 8011780:	aa03      	add	r2, sp, #12
 8011782:	4621      	mov	r1, r4
 8011784:	4640      	mov	r0, r8
 8011786:	f8cd a000 	str.w	sl, [sp]
 801178a:	f7ff fee3 	bl	8011554 <_printf_common>
 801178e:	3001      	adds	r0, #1
 8011790:	d14a      	bne.n	8011828 <_printf_i+0x1f0>
 8011792:	f04f 30ff 	mov.w	r0, #4294967295
 8011796:	b004      	add	sp, #16
 8011798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801179c:	6823      	ldr	r3, [r4, #0]
 801179e:	f043 0320 	orr.w	r3, r3, #32
 80117a2:	6023      	str	r3, [r4, #0]
 80117a4:	2778      	movs	r7, #120	@ 0x78
 80117a6:	4832      	ldr	r0, [pc, #200]	@ (8011870 <_printf_i+0x238>)
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80117ae:	061f      	lsls	r7, r3, #24
 80117b0:	6831      	ldr	r1, [r6, #0]
 80117b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80117b6:	d402      	bmi.n	80117be <_printf_i+0x186>
 80117b8:	065f      	lsls	r7, r3, #25
 80117ba:	bf48      	it	mi
 80117bc:	b2ad      	uxthmi	r5, r5
 80117be:	6031      	str	r1, [r6, #0]
 80117c0:	07d9      	lsls	r1, r3, #31
 80117c2:	bf44      	itt	mi
 80117c4:	f043 0320 	orrmi.w	r3, r3, #32
 80117c8:	6023      	strmi	r3, [r4, #0]
 80117ca:	b11d      	cbz	r5, 80117d4 <_printf_i+0x19c>
 80117cc:	2310      	movs	r3, #16
 80117ce:	e7ad      	b.n	801172c <_printf_i+0xf4>
 80117d0:	4826      	ldr	r0, [pc, #152]	@ (801186c <_printf_i+0x234>)
 80117d2:	e7e9      	b.n	80117a8 <_printf_i+0x170>
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	f023 0320 	bic.w	r3, r3, #32
 80117da:	6023      	str	r3, [r4, #0]
 80117dc:	e7f6      	b.n	80117cc <_printf_i+0x194>
 80117de:	4616      	mov	r6, r2
 80117e0:	e7bd      	b.n	801175e <_printf_i+0x126>
 80117e2:	6833      	ldr	r3, [r6, #0]
 80117e4:	6825      	ldr	r5, [r4, #0]
 80117e6:	1d18      	adds	r0, r3, #4
 80117e8:	6961      	ldr	r1, [r4, #20]
 80117ea:	6030      	str	r0, [r6, #0]
 80117ec:	062e      	lsls	r6, r5, #24
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	d501      	bpl.n	80117f6 <_printf_i+0x1be>
 80117f2:	6019      	str	r1, [r3, #0]
 80117f4:	e002      	b.n	80117fc <_printf_i+0x1c4>
 80117f6:	0668      	lsls	r0, r5, #25
 80117f8:	d5fb      	bpl.n	80117f2 <_printf_i+0x1ba>
 80117fa:	8019      	strh	r1, [r3, #0]
 80117fc:	2300      	movs	r3, #0
 80117fe:	4616      	mov	r6, r2
 8011800:	6123      	str	r3, [r4, #16]
 8011802:	e7bc      	b.n	801177e <_printf_i+0x146>
 8011804:	6833      	ldr	r3, [r6, #0]
 8011806:	2100      	movs	r1, #0
 8011808:	1d1a      	adds	r2, r3, #4
 801180a:	6032      	str	r2, [r6, #0]
 801180c:	681e      	ldr	r6, [r3, #0]
 801180e:	6862      	ldr	r2, [r4, #4]
 8011810:	4630      	mov	r0, r6
 8011812:	f000 fce8 	bl	80121e6 <memchr>
 8011816:	b108      	cbz	r0, 801181c <_printf_i+0x1e4>
 8011818:	1b80      	subs	r0, r0, r6
 801181a:	6060      	str	r0, [r4, #4]
 801181c:	6863      	ldr	r3, [r4, #4]
 801181e:	6123      	str	r3, [r4, #16]
 8011820:	2300      	movs	r3, #0
 8011822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011826:	e7aa      	b.n	801177e <_printf_i+0x146>
 8011828:	6923      	ldr	r3, [r4, #16]
 801182a:	4632      	mov	r2, r6
 801182c:	4649      	mov	r1, r9
 801182e:	4640      	mov	r0, r8
 8011830:	47d0      	blx	sl
 8011832:	3001      	adds	r0, #1
 8011834:	d0ad      	beq.n	8011792 <_printf_i+0x15a>
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	079b      	lsls	r3, r3, #30
 801183a:	d413      	bmi.n	8011864 <_printf_i+0x22c>
 801183c:	68e0      	ldr	r0, [r4, #12]
 801183e:	9b03      	ldr	r3, [sp, #12]
 8011840:	4298      	cmp	r0, r3
 8011842:	bfb8      	it	lt
 8011844:	4618      	movlt	r0, r3
 8011846:	e7a6      	b.n	8011796 <_printf_i+0x15e>
 8011848:	2301      	movs	r3, #1
 801184a:	4632      	mov	r2, r6
 801184c:	4649      	mov	r1, r9
 801184e:	4640      	mov	r0, r8
 8011850:	47d0      	blx	sl
 8011852:	3001      	adds	r0, #1
 8011854:	d09d      	beq.n	8011792 <_printf_i+0x15a>
 8011856:	3501      	adds	r5, #1
 8011858:	68e3      	ldr	r3, [r4, #12]
 801185a:	9903      	ldr	r1, [sp, #12]
 801185c:	1a5b      	subs	r3, r3, r1
 801185e:	42ab      	cmp	r3, r5
 8011860:	dcf2      	bgt.n	8011848 <_printf_i+0x210>
 8011862:	e7eb      	b.n	801183c <_printf_i+0x204>
 8011864:	2500      	movs	r5, #0
 8011866:	f104 0619 	add.w	r6, r4, #25
 801186a:	e7f5      	b.n	8011858 <_printf_i+0x220>
 801186c:	080159ea 	.word	0x080159ea
 8011870:	080159fb 	.word	0x080159fb

08011874 <_scanf_float>:
 8011874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011878:	b087      	sub	sp, #28
 801187a:	4691      	mov	r9, r2
 801187c:	4680      	mov	r8, r0
 801187e:	460c      	mov	r4, r1
 8011880:	9303      	str	r3, [sp, #12]
 8011882:	688b      	ldr	r3, [r1, #8]
 8011884:	1e5a      	subs	r2, r3, #1
 8011886:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801188a:	460a      	mov	r2, r1
 801188c:	bf89      	itett	hi
 801188e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011892:	f04f 0b00 	movls.w	fp, #0
 8011896:	eb03 0b05 	addhi.w	fp, r3, r5
 801189a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801189e:	f04f 0500 	mov.w	r5, #0
 80118a2:	bf88      	it	hi
 80118a4:	608b      	strhi	r3, [r1, #8]
 80118a6:	680b      	ldr	r3, [r1, #0]
 80118a8:	46aa      	mov	sl, r5
 80118aa:	462f      	mov	r7, r5
 80118ac:	9502      	str	r5, [sp, #8]
 80118ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80118b2:	f842 3b1c 	str.w	r3, [r2], #28
 80118b6:	4616      	mov	r6, r2
 80118b8:	9201      	str	r2, [sp, #4]
 80118ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80118be:	68a2      	ldr	r2, [r4, #8]
 80118c0:	b15a      	cbz	r2, 80118da <_scanf_float+0x66>
 80118c2:	f8d9 3000 	ldr.w	r3, [r9]
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80118ca:	d863      	bhi.n	8011994 <_scanf_float+0x120>
 80118cc:	2b40      	cmp	r3, #64	@ 0x40
 80118ce:	d83b      	bhi.n	8011948 <_scanf_float+0xd4>
 80118d0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80118d4:	b2c8      	uxtb	r0, r1
 80118d6:	280e      	cmp	r0, #14
 80118d8:	d939      	bls.n	801194e <_scanf_float+0xda>
 80118da:	b11f      	cbz	r7, 80118e4 <_scanf_float+0x70>
 80118dc:	6823      	ldr	r3, [r4, #0]
 80118de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80118e2:	6023      	str	r3, [r4, #0]
 80118e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80118e8:	f1ba 0f01 	cmp.w	sl, #1
 80118ec:	f200 8115 	bhi.w	8011b1a <_scanf_float+0x2a6>
 80118f0:	9b01      	ldr	r3, [sp, #4]
 80118f2:	429e      	cmp	r6, r3
 80118f4:	f200 8106 	bhi.w	8011b04 <_scanf_float+0x290>
 80118f8:	2001      	movs	r0, #1
 80118fa:	b007      	add	sp, #28
 80118fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011900:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011904:	2a0d      	cmp	r2, #13
 8011906:	d8e8      	bhi.n	80118da <_scanf_float+0x66>
 8011908:	a101      	add	r1, pc, #4	@ (adr r1, 8011910 <_scanf_float+0x9c>)
 801190a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801190e:	bf00      	nop
 8011910:	08011a59 	.word	0x08011a59
 8011914:	080118db 	.word	0x080118db
 8011918:	080118db 	.word	0x080118db
 801191c:	080118db 	.word	0x080118db
 8011920:	08011ab5 	.word	0x08011ab5
 8011924:	08011a8f 	.word	0x08011a8f
 8011928:	080118db 	.word	0x080118db
 801192c:	080118db 	.word	0x080118db
 8011930:	08011a67 	.word	0x08011a67
 8011934:	080118db 	.word	0x080118db
 8011938:	080118db 	.word	0x080118db
 801193c:	080118db 	.word	0x080118db
 8011940:	080118db 	.word	0x080118db
 8011944:	08011a23 	.word	0x08011a23
 8011948:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801194c:	e7da      	b.n	8011904 <_scanf_float+0x90>
 801194e:	290e      	cmp	r1, #14
 8011950:	d8c3      	bhi.n	80118da <_scanf_float+0x66>
 8011952:	a001      	add	r0, pc, #4	@ (adr r0, 8011958 <_scanf_float+0xe4>)
 8011954:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011958:	08011a13 	.word	0x08011a13
 801195c:	080118db 	.word	0x080118db
 8011960:	08011a13 	.word	0x08011a13
 8011964:	08011aa3 	.word	0x08011aa3
 8011968:	080118db 	.word	0x080118db
 801196c:	080119b5 	.word	0x080119b5
 8011970:	080119f9 	.word	0x080119f9
 8011974:	080119f9 	.word	0x080119f9
 8011978:	080119f9 	.word	0x080119f9
 801197c:	080119f9 	.word	0x080119f9
 8011980:	080119f9 	.word	0x080119f9
 8011984:	080119f9 	.word	0x080119f9
 8011988:	080119f9 	.word	0x080119f9
 801198c:	080119f9 	.word	0x080119f9
 8011990:	080119f9 	.word	0x080119f9
 8011994:	2b6e      	cmp	r3, #110	@ 0x6e
 8011996:	d809      	bhi.n	80119ac <_scanf_float+0x138>
 8011998:	2b60      	cmp	r3, #96	@ 0x60
 801199a:	d8b1      	bhi.n	8011900 <_scanf_float+0x8c>
 801199c:	2b54      	cmp	r3, #84	@ 0x54
 801199e:	d07b      	beq.n	8011a98 <_scanf_float+0x224>
 80119a0:	2b59      	cmp	r3, #89	@ 0x59
 80119a2:	d19a      	bne.n	80118da <_scanf_float+0x66>
 80119a4:	2d07      	cmp	r5, #7
 80119a6:	d198      	bne.n	80118da <_scanf_float+0x66>
 80119a8:	2508      	movs	r5, #8
 80119aa:	e02f      	b.n	8011a0c <_scanf_float+0x198>
 80119ac:	2b74      	cmp	r3, #116	@ 0x74
 80119ae:	d073      	beq.n	8011a98 <_scanf_float+0x224>
 80119b0:	2b79      	cmp	r3, #121	@ 0x79
 80119b2:	e7f6      	b.n	80119a2 <_scanf_float+0x12e>
 80119b4:	6821      	ldr	r1, [r4, #0]
 80119b6:	05c8      	lsls	r0, r1, #23
 80119b8:	d51e      	bpl.n	80119f8 <_scanf_float+0x184>
 80119ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80119be:	3701      	adds	r7, #1
 80119c0:	6021      	str	r1, [r4, #0]
 80119c2:	f1bb 0f00 	cmp.w	fp, #0
 80119c6:	d003      	beq.n	80119d0 <_scanf_float+0x15c>
 80119c8:	3201      	adds	r2, #1
 80119ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119ce:	60a2      	str	r2, [r4, #8]
 80119d0:	68a3      	ldr	r3, [r4, #8]
 80119d2:	3b01      	subs	r3, #1
 80119d4:	60a3      	str	r3, [r4, #8]
 80119d6:	6923      	ldr	r3, [r4, #16]
 80119d8:	3301      	adds	r3, #1
 80119da:	6123      	str	r3, [r4, #16]
 80119dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80119e0:	3b01      	subs	r3, #1
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f8c9 3004 	str.w	r3, [r9, #4]
 80119e8:	f340 8083 	ble.w	8011af2 <_scanf_float+0x27e>
 80119ec:	f8d9 3000 	ldr.w	r3, [r9]
 80119f0:	3301      	adds	r3, #1
 80119f2:	f8c9 3000 	str.w	r3, [r9]
 80119f6:	e762      	b.n	80118be <_scanf_float+0x4a>
 80119f8:	eb1a 0105 	adds.w	r1, sl, r5
 80119fc:	f47f af6d 	bne.w	80118da <_scanf_float+0x66>
 8011a00:	6822      	ldr	r2, [r4, #0]
 8011a02:	460d      	mov	r5, r1
 8011a04:	468a      	mov	sl, r1
 8011a06:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011a0a:	6022      	str	r2, [r4, #0]
 8011a0c:	f806 3b01 	strb.w	r3, [r6], #1
 8011a10:	e7de      	b.n	80119d0 <_scanf_float+0x15c>
 8011a12:	6822      	ldr	r2, [r4, #0]
 8011a14:	0610      	lsls	r0, r2, #24
 8011a16:	f57f af60 	bpl.w	80118da <_scanf_float+0x66>
 8011a1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011a1e:	6022      	str	r2, [r4, #0]
 8011a20:	e7f4      	b.n	8011a0c <_scanf_float+0x198>
 8011a22:	f1ba 0f00 	cmp.w	sl, #0
 8011a26:	d10c      	bne.n	8011a42 <_scanf_float+0x1ce>
 8011a28:	b977      	cbnz	r7, 8011a48 <_scanf_float+0x1d4>
 8011a2a:	6822      	ldr	r2, [r4, #0]
 8011a2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011a30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011a34:	d108      	bne.n	8011a48 <_scanf_float+0x1d4>
 8011a36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a3a:	f04f 0a01 	mov.w	sl, #1
 8011a3e:	6022      	str	r2, [r4, #0]
 8011a40:	e7e4      	b.n	8011a0c <_scanf_float+0x198>
 8011a42:	f1ba 0f02 	cmp.w	sl, #2
 8011a46:	d051      	beq.n	8011aec <_scanf_float+0x278>
 8011a48:	2d01      	cmp	r5, #1
 8011a4a:	d002      	beq.n	8011a52 <_scanf_float+0x1de>
 8011a4c:	2d04      	cmp	r5, #4
 8011a4e:	f47f af44 	bne.w	80118da <_scanf_float+0x66>
 8011a52:	3501      	adds	r5, #1
 8011a54:	b2ed      	uxtb	r5, r5
 8011a56:	e7d9      	b.n	8011a0c <_scanf_float+0x198>
 8011a58:	f1ba 0f01 	cmp.w	sl, #1
 8011a5c:	f47f af3d 	bne.w	80118da <_scanf_float+0x66>
 8011a60:	f04f 0a02 	mov.w	sl, #2
 8011a64:	e7d2      	b.n	8011a0c <_scanf_float+0x198>
 8011a66:	b975      	cbnz	r5, 8011a86 <_scanf_float+0x212>
 8011a68:	2f00      	cmp	r7, #0
 8011a6a:	f47f af37 	bne.w	80118dc <_scanf_float+0x68>
 8011a6e:	6822      	ldr	r2, [r4, #0]
 8011a70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011a74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011a78:	f040 8103 	bne.w	8011c82 <_scanf_float+0x40e>
 8011a7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a80:	2501      	movs	r5, #1
 8011a82:	6022      	str	r2, [r4, #0]
 8011a84:	e7c2      	b.n	8011a0c <_scanf_float+0x198>
 8011a86:	2d03      	cmp	r5, #3
 8011a88:	d0e3      	beq.n	8011a52 <_scanf_float+0x1de>
 8011a8a:	2d05      	cmp	r5, #5
 8011a8c:	e7df      	b.n	8011a4e <_scanf_float+0x1da>
 8011a8e:	2d02      	cmp	r5, #2
 8011a90:	f47f af23 	bne.w	80118da <_scanf_float+0x66>
 8011a94:	2503      	movs	r5, #3
 8011a96:	e7b9      	b.n	8011a0c <_scanf_float+0x198>
 8011a98:	2d06      	cmp	r5, #6
 8011a9a:	f47f af1e 	bne.w	80118da <_scanf_float+0x66>
 8011a9e:	2507      	movs	r5, #7
 8011aa0:	e7b4      	b.n	8011a0c <_scanf_float+0x198>
 8011aa2:	6822      	ldr	r2, [r4, #0]
 8011aa4:	0591      	lsls	r1, r2, #22
 8011aa6:	f57f af18 	bpl.w	80118da <_scanf_float+0x66>
 8011aaa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011aae:	9702      	str	r7, [sp, #8]
 8011ab0:	6022      	str	r2, [r4, #0]
 8011ab2:	e7ab      	b.n	8011a0c <_scanf_float+0x198>
 8011ab4:	6822      	ldr	r2, [r4, #0]
 8011ab6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011aba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011abe:	d005      	beq.n	8011acc <_scanf_float+0x258>
 8011ac0:	0550      	lsls	r0, r2, #21
 8011ac2:	f57f af0a 	bpl.w	80118da <_scanf_float+0x66>
 8011ac6:	2f00      	cmp	r7, #0
 8011ac8:	f000 80db 	beq.w	8011c82 <_scanf_float+0x40e>
 8011acc:	0591      	lsls	r1, r2, #22
 8011ace:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011ad2:	bf58      	it	pl
 8011ad4:	9902      	ldrpl	r1, [sp, #8]
 8011ad6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011ada:	bf58      	it	pl
 8011adc:	1a79      	subpl	r1, r7, r1
 8011ade:	6022      	str	r2, [r4, #0]
 8011ae0:	f04f 0700 	mov.w	r7, #0
 8011ae4:	bf58      	it	pl
 8011ae6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011aea:	e78f      	b.n	8011a0c <_scanf_float+0x198>
 8011aec:	f04f 0a03 	mov.w	sl, #3
 8011af0:	e78c      	b.n	8011a0c <_scanf_float+0x198>
 8011af2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011af6:	4649      	mov	r1, r9
 8011af8:	4640      	mov	r0, r8
 8011afa:	4798      	blx	r3
 8011afc:	2800      	cmp	r0, #0
 8011afe:	f43f aede 	beq.w	80118be <_scanf_float+0x4a>
 8011b02:	e6ea      	b.n	80118da <_scanf_float+0x66>
 8011b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b08:	464a      	mov	r2, r9
 8011b0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b0e:	4640      	mov	r0, r8
 8011b10:	4798      	blx	r3
 8011b12:	6923      	ldr	r3, [r4, #16]
 8011b14:	3b01      	subs	r3, #1
 8011b16:	6123      	str	r3, [r4, #16]
 8011b18:	e6ea      	b.n	80118f0 <_scanf_float+0x7c>
 8011b1a:	1e6b      	subs	r3, r5, #1
 8011b1c:	2b06      	cmp	r3, #6
 8011b1e:	d824      	bhi.n	8011b6a <_scanf_float+0x2f6>
 8011b20:	2d02      	cmp	r5, #2
 8011b22:	d836      	bhi.n	8011b92 <_scanf_float+0x31e>
 8011b24:	9b01      	ldr	r3, [sp, #4]
 8011b26:	429e      	cmp	r6, r3
 8011b28:	f67f aee6 	bls.w	80118f8 <_scanf_float+0x84>
 8011b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b30:	464a      	mov	r2, r9
 8011b32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b36:	4640      	mov	r0, r8
 8011b38:	4798      	blx	r3
 8011b3a:	6923      	ldr	r3, [r4, #16]
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	6123      	str	r3, [r4, #16]
 8011b40:	e7f0      	b.n	8011b24 <_scanf_float+0x2b0>
 8011b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b46:	464a      	mov	r2, r9
 8011b48:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011b4c:	4640      	mov	r0, r8
 8011b4e:	4798      	blx	r3
 8011b50:	6923      	ldr	r3, [r4, #16]
 8011b52:	3b01      	subs	r3, #1
 8011b54:	6123      	str	r3, [r4, #16]
 8011b56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b5a:	fa5f fa8a 	uxtb.w	sl, sl
 8011b5e:	f1ba 0f02 	cmp.w	sl, #2
 8011b62:	d1ee      	bne.n	8011b42 <_scanf_float+0x2ce>
 8011b64:	3d03      	subs	r5, #3
 8011b66:	b2ed      	uxtb	r5, r5
 8011b68:	1b76      	subs	r6, r6, r5
 8011b6a:	6823      	ldr	r3, [r4, #0]
 8011b6c:	05da      	lsls	r2, r3, #23
 8011b6e:	d52f      	bpl.n	8011bd0 <_scanf_float+0x35c>
 8011b70:	055b      	lsls	r3, r3, #21
 8011b72:	d511      	bpl.n	8011b98 <_scanf_float+0x324>
 8011b74:	9b01      	ldr	r3, [sp, #4]
 8011b76:	429e      	cmp	r6, r3
 8011b78:	f67f aebe 	bls.w	80118f8 <_scanf_float+0x84>
 8011b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b80:	464a      	mov	r2, r9
 8011b82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b86:	4640      	mov	r0, r8
 8011b88:	4798      	blx	r3
 8011b8a:	6923      	ldr	r3, [r4, #16]
 8011b8c:	3b01      	subs	r3, #1
 8011b8e:	6123      	str	r3, [r4, #16]
 8011b90:	e7f0      	b.n	8011b74 <_scanf_float+0x300>
 8011b92:	46aa      	mov	sl, r5
 8011b94:	46b3      	mov	fp, r6
 8011b96:	e7de      	b.n	8011b56 <_scanf_float+0x2e2>
 8011b98:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011b9c:	1e75      	subs	r5, r6, #1
 8011b9e:	6923      	ldr	r3, [r4, #16]
 8011ba0:	2965      	cmp	r1, #101	@ 0x65
 8011ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ba6:	6123      	str	r3, [r4, #16]
 8011ba8:	d00c      	beq.n	8011bc4 <_scanf_float+0x350>
 8011baa:	2945      	cmp	r1, #69	@ 0x45
 8011bac:	d00a      	beq.n	8011bc4 <_scanf_float+0x350>
 8011bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011bb2:	464a      	mov	r2, r9
 8011bb4:	4640      	mov	r0, r8
 8011bb6:	1eb5      	subs	r5, r6, #2
 8011bb8:	4798      	blx	r3
 8011bba:	6923      	ldr	r3, [r4, #16]
 8011bbc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011bc0:	3b01      	subs	r3, #1
 8011bc2:	6123      	str	r3, [r4, #16]
 8011bc4:	462e      	mov	r6, r5
 8011bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011bca:	464a      	mov	r2, r9
 8011bcc:	4640      	mov	r0, r8
 8011bce:	4798      	blx	r3
 8011bd0:	6822      	ldr	r2, [r4, #0]
 8011bd2:	f012 0210 	ands.w	r2, r2, #16
 8011bd6:	d001      	beq.n	8011bdc <_scanf_float+0x368>
 8011bd8:	2000      	movs	r0, #0
 8011bda:	e68e      	b.n	80118fa <_scanf_float+0x86>
 8011bdc:	7032      	strb	r2, [r6, #0]
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011be8:	d125      	bne.n	8011c36 <_scanf_float+0x3c2>
 8011bea:	9b02      	ldr	r3, [sp, #8]
 8011bec:	429f      	cmp	r7, r3
 8011bee:	d00a      	beq.n	8011c06 <_scanf_float+0x392>
 8011bf0:	1bda      	subs	r2, r3, r7
 8011bf2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011bf6:	4924      	ldr	r1, [pc, #144]	@ (8011c88 <_scanf_float+0x414>)
 8011bf8:	429e      	cmp	r6, r3
 8011bfa:	bf28      	it	cs
 8011bfc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011c00:	4630      	mov	r0, r6
 8011c02:	f000 f977 	bl	8011ef4 <siprintf>
 8011c06:	2200      	movs	r2, #0
 8011c08:	9901      	ldr	r1, [sp, #4]
 8011c0a:	4640      	mov	r0, r8
 8011c0c:	f002 fd1c 	bl	8014648 <_strtod_r>
 8011c10:	6821      	ldr	r1, [r4, #0]
 8011c12:	9b03      	ldr	r3, [sp, #12]
 8011c14:	f011 0f02 	tst.w	r1, #2
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	ec57 6b10 	vmov	r6, r7, d0
 8011c1e:	f103 0204 	add.w	r2, r3, #4
 8011c22:	d015      	beq.n	8011c50 <_scanf_float+0x3dc>
 8011c24:	9903      	ldr	r1, [sp, #12]
 8011c26:	600a      	str	r2, [r1, #0]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	e9c3 6700 	strd	r6, r7, [r3]
 8011c2e:	68e3      	ldr	r3, [r4, #12]
 8011c30:	3301      	adds	r3, #1
 8011c32:	60e3      	str	r3, [r4, #12]
 8011c34:	e7d0      	b.n	8011bd8 <_scanf_float+0x364>
 8011c36:	9b04      	ldr	r3, [sp, #16]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d0e4      	beq.n	8011c06 <_scanf_float+0x392>
 8011c3c:	9905      	ldr	r1, [sp, #20]
 8011c3e:	230a      	movs	r3, #10
 8011c40:	4640      	mov	r0, r8
 8011c42:	3101      	adds	r1, #1
 8011c44:	f002 fd80 	bl	8014748 <_strtol_r>
 8011c48:	9b04      	ldr	r3, [sp, #16]
 8011c4a:	9e05      	ldr	r6, [sp, #20]
 8011c4c:	1ac2      	subs	r2, r0, r3
 8011c4e:	e7d0      	b.n	8011bf2 <_scanf_float+0x37e>
 8011c50:	f011 0f04 	tst.w	r1, #4
 8011c54:	9903      	ldr	r1, [sp, #12]
 8011c56:	600a      	str	r2, [r1, #0]
 8011c58:	d1e6      	bne.n	8011c28 <_scanf_float+0x3b4>
 8011c5a:	681d      	ldr	r5, [r3, #0]
 8011c5c:	4632      	mov	r2, r6
 8011c5e:	463b      	mov	r3, r7
 8011c60:	4630      	mov	r0, r6
 8011c62:	4639      	mov	r1, r7
 8011c64:	f7ee ff66 	bl	8000b34 <__aeabi_dcmpun>
 8011c68:	b128      	cbz	r0, 8011c76 <_scanf_float+0x402>
 8011c6a:	4808      	ldr	r0, [pc, #32]	@ (8011c8c <_scanf_float+0x418>)
 8011c6c:	f000 faca 	bl	8012204 <nanf>
 8011c70:	ed85 0a00 	vstr	s0, [r5]
 8011c74:	e7db      	b.n	8011c2e <_scanf_float+0x3ba>
 8011c76:	4630      	mov	r0, r6
 8011c78:	4639      	mov	r1, r7
 8011c7a:	f7ee ffb9 	bl	8000bf0 <__aeabi_d2f>
 8011c7e:	6028      	str	r0, [r5, #0]
 8011c80:	e7d5      	b.n	8011c2e <_scanf_float+0x3ba>
 8011c82:	2700      	movs	r7, #0
 8011c84:	e62e      	b.n	80118e4 <_scanf_float+0x70>
 8011c86:	bf00      	nop
 8011c88:	08015a0c 	.word	0x08015a0c
 8011c8c:	08015b4d 	.word	0x08015b4d

08011c90 <std>:
 8011c90:	2300      	movs	r3, #0
 8011c92:	b510      	push	{r4, lr}
 8011c94:	4604      	mov	r4, r0
 8011c96:	6083      	str	r3, [r0, #8]
 8011c98:	8181      	strh	r1, [r0, #12]
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c9e:	81c2      	strh	r2, [r0, #14]
 8011ca0:	2208      	movs	r2, #8
 8011ca2:	6183      	str	r3, [r0, #24]
 8011ca4:	e9c0 3300 	strd	r3, r3, [r0]
 8011ca8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011cac:	305c      	adds	r0, #92	@ 0x5c
 8011cae:	f000 fa1b 	bl	80120e8 <memset>
 8011cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce8 <std+0x58>)
 8011cb4:	6224      	str	r4, [r4, #32]
 8011cb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8011cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8011cec <std+0x5c>)
 8011cba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf0 <std+0x60>)
 8011cbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf4 <std+0x64>)
 8011cc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8011cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf8 <std+0x68>)
 8011cc6:	429c      	cmp	r4, r3
 8011cc8:	d006      	beq.n	8011cd8 <std+0x48>
 8011cca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011cce:	4294      	cmp	r4, r2
 8011cd0:	d002      	beq.n	8011cd8 <std+0x48>
 8011cd2:	33d0      	adds	r3, #208	@ 0xd0
 8011cd4:	429c      	cmp	r4, r3
 8011cd6:	d105      	bne.n	8011ce4 <std+0x54>
 8011cd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ce0:	f000 ba7e 	b.w	80121e0 <__retarget_lock_init_recursive>
 8011ce4:	bd10      	pop	{r4, pc}
 8011ce6:	bf00      	nop
 8011ce8:	08011f39 	.word	0x08011f39
 8011cec:	08011f5b 	.word	0x08011f5b
 8011cf0:	08011f93 	.word	0x08011f93
 8011cf4:	08011fb7 	.word	0x08011fb7
 8011cf8:	200008e8 	.word	0x200008e8

08011cfc <stdio_exit_handler>:
 8011cfc:	4a02      	ldr	r2, [pc, #8]	@ (8011d08 <stdio_exit_handler+0xc>)
 8011cfe:	4903      	ldr	r1, [pc, #12]	@ (8011d0c <stdio_exit_handler+0x10>)
 8011d00:	4803      	ldr	r0, [pc, #12]	@ (8011d10 <stdio_exit_handler+0x14>)
 8011d02:	f000 b869 	b.w	8011dd8 <_fwalk_sglue>
 8011d06:	bf00      	nop
 8011d08:	20000170 	.word	0x20000170
 8011d0c:	08014d89 	.word	0x08014d89
 8011d10:	20000180 	.word	0x20000180

08011d14 <cleanup_stdio>:
 8011d14:	6841      	ldr	r1, [r0, #4]
 8011d16:	4b0c      	ldr	r3, [pc, #48]	@ (8011d48 <cleanup_stdio+0x34>)
 8011d18:	4299      	cmp	r1, r3
 8011d1a:	b510      	push	{r4, lr}
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	d001      	beq.n	8011d24 <cleanup_stdio+0x10>
 8011d20:	f003 f832 	bl	8014d88 <_fflush_r>
 8011d24:	68a1      	ldr	r1, [r4, #8]
 8011d26:	4b09      	ldr	r3, [pc, #36]	@ (8011d4c <cleanup_stdio+0x38>)
 8011d28:	4299      	cmp	r1, r3
 8011d2a:	d002      	beq.n	8011d32 <cleanup_stdio+0x1e>
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f003 f82b 	bl	8014d88 <_fflush_r>
 8011d32:	68e1      	ldr	r1, [r4, #12]
 8011d34:	4b06      	ldr	r3, [pc, #24]	@ (8011d50 <cleanup_stdio+0x3c>)
 8011d36:	4299      	cmp	r1, r3
 8011d38:	d004      	beq.n	8011d44 <cleanup_stdio+0x30>
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d40:	f003 b822 	b.w	8014d88 <_fflush_r>
 8011d44:	bd10      	pop	{r4, pc}
 8011d46:	bf00      	nop
 8011d48:	200008e8 	.word	0x200008e8
 8011d4c:	20000950 	.word	0x20000950
 8011d50:	200009b8 	.word	0x200009b8

08011d54 <global_stdio_init.part.0>:
 8011d54:	b510      	push	{r4, lr}
 8011d56:	4b0b      	ldr	r3, [pc, #44]	@ (8011d84 <global_stdio_init.part.0+0x30>)
 8011d58:	2104      	movs	r1, #4
 8011d5a:	4c0b      	ldr	r4, [pc, #44]	@ (8011d88 <global_stdio_init.part.0+0x34>)
 8011d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8011d8c <global_stdio_init.part.0+0x38>)
 8011d5e:	4620      	mov	r0, r4
 8011d60:	601a      	str	r2, [r3, #0]
 8011d62:	2200      	movs	r2, #0
 8011d64:	f7ff ff94 	bl	8011c90 <std>
 8011d68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	2109      	movs	r1, #9
 8011d70:	f7ff ff8e 	bl	8011c90 <std>
 8011d74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011d78:	2202      	movs	r2, #2
 8011d7a:	2112      	movs	r1, #18
 8011d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d80:	f7ff bf86 	b.w	8011c90 <std>
 8011d84:	20000a20 	.word	0x20000a20
 8011d88:	200008e8 	.word	0x200008e8
 8011d8c:	08011cfd 	.word	0x08011cfd

08011d90 <__sfp_lock_acquire>:
 8011d90:	4801      	ldr	r0, [pc, #4]	@ (8011d98 <__sfp_lock_acquire+0x8>)
 8011d92:	f000 ba26 	b.w	80121e2 <__retarget_lock_acquire_recursive>
 8011d96:	bf00      	nop
 8011d98:	20000a29 	.word	0x20000a29

08011d9c <__sfp_lock_release>:
 8011d9c:	4801      	ldr	r0, [pc, #4]	@ (8011da4 <__sfp_lock_release+0x8>)
 8011d9e:	f000 ba21 	b.w	80121e4 <__retarget_lock_release_recursive>
 8011da2:	bf00      	nop
 8011da4:	20000a29 	.word	0x20000a29

08011da8 <__sinit>:
 8011da8:	b510      	push	{r4, lr}
 8011daa:	4604      	mov	r4, r0
 8011dac:	f7ff fff0 	bl	8011d90 <__sfp_lock_acquire>
 8011db0:	6a23      	ldr	r3, [r4, #32]
 8011db2:	b11b      	cbz	r3, 8011dbc <__sinit+0x14>
 8011db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011db8:	f7ff bff0 	b.w	8011d9c <__sfp_lock_release>
 8011dbc:	4b04      	ldr	r3, [pc, #16]	@ (8011dd0 <__sinit+0x28>)
 8011dbe:	6223      	str	r3, [r4, #32]
 8011dc0:	4b04      	ldr	r3, [pc, #16]	@ (8011dd4 <__sinit+0x2c>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d1f5      	bne.n	8011db4 <__sinit+0xc>
 8011dc8:	f7ff ffc4 	bl	8011d54 <global_stdio_init.part.0>
 8011dcc:	e7f2      	b.n	8011db4 <__sinit+0xc>
 8011dce:	bf00      	nop
 8011dd0:	08011d15 	.word	0x08011d15
 8011dd4:	20000a20 	.word	0x20000a20

08011dd8 <_fwalk_sglue>:
 8011dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ddc:	4607      	mov	r7, r0
 8011dde:	4688      	mov	r8, r1
 8011de0:	4614      	mov	r4, r2
 8011de2:	2600      	movs	r6, #0
 8011de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011de8:	f1b9 0901 	subs.w	r9, r9, #1
 8011dec:	d505      	bpl.n	8011dfa <_fwalk_sglue+0x22>
 8011dee:	6824      	ldr	r4, [r4, #0]
 8011df0:	2c00      	cmp	r4, #0
 8011df2:	d1f7      	bne.n	8011de4 <_fwalk_sglue+0xc>
 8011df4:	4630      	mov	r0, r6
 8011df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dfa:	89ab      	ldrh	r3, [r5, #12]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d907      	bls.n	8011e10 <_fwalk_sglue+0x38>
 8011e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e04:	3301      	adds	r3, #1
 8011e06:	d003      	beq.n	8011e10 <_fwalk_sglue+0x38>
 8011e08:	4629      	mov	r1, r5
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	47c0      	blx	r8
 8011e0e:	4306      	orrs	r6, r0
 8011e10:	3568      	adds	r5, #104	@ 0x68
 8011e12:	e7e9      	b.n	8011de8 <_fwalk_sglue+0x10>

08011e14 <iprintf>:
 8011e14:	b40f      	push	{r0, r1, r2, r3}
 8011e16:	b507      	push	{r0, r1, r2, lr}
 8011e18:	4906      	ldr	r1, [pc, #24]	@ (8011e34 <iprintf+0x20>)
 8011e1a:	ab04      	add	r3, sp, #16
 8011e1c:	6808      	ldr	r0, [r1, #0]
 8011e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e22:	6881      	ldr	r1, [r0, #8]
 8011e24:	9301      	str	r3, [sp, #4]
 8011e26:	f002 fe13 	bl	8014a50 <_vfiprintf_r>
 8011e2a:	b003      	add	sp, #12
 8011e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e30:	b004      	add	sp, #16
 8011e32:	4770      	bx	lr
 8011e34:	2000017c 	.word	0x2000017c

08011e38 <_puts_r>:
 8011e38:	6a03      	ldr	r3, [r0, #32]
 8011e3a:	b570      	push	{r4, r5, r6, lr}
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	460e      	mov	r6, r1
 8011e40:	6884      	ldr	r4, [r0, #8]
 8011e42:	b90b      	cbnz	r3, 8011e48 <_puts_r+0x10>
 8011e44:	f7ff ffb0 	bl	8011da8 <__sinit>
 8011e48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e4a:	07db      	lsls	r3, r3, #31
 8011e4c:	d405      	bmi.n	8011e5a <_puts_r+0x22>
 8011e4e:	89a3      	ldrh	r3, [r4, #12]
 8011e50:	0598      	lsls	r0, r3, #22
 8011e52:	d402      	bmi.n	8011e5a <_puts_r+0x22>
 8011e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e56:	f000 f9c4 	bl	80121e2 <__retarget_lock_acquire_recursive>
 8011e5a:	89a3      	ldrh	r3, [r4, #12]
 8011e5c:	0719      	lsls	r1, r3, #28
 8011e5e:	d502      	bpl.n	8011e66 <_puts_r+0x2e>
 8011e60:	6923      	ldr	r3, [r4, #16]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d135      	bne.n	8011ed2 <_puts_r+0x9a>
 8011e66:	4621      	mov	r1, r4
 8011e68:	4628      	mov	r0, r5
 8011e6a:	f000 f8e7 	bl	801203c <__swsetup_r>
 8011e6e:	b380      	cbz	r0, 8011ed2 <_puts_r+0x9a>
 8011e70:	f04f 35ff 	mov.w	r5, #4294967295
 8011e74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e76:	07da      	lsls	r2, r3, #31
 8011e78:	d405      	bmi.n	8011e86 <_puts_r+0x4e>
 8011e7a:	89a3      	ldrh	r3, [r4, #12]
 8011e7c:	059b      	lsls	r3, r3, #22
 8011e7e:	d402      	bmi.n	8011e86 <_puts_r+0x4e>
 8011e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e82:	f000 f9af 	bl	80121e4 <__retarget_lock_release_recursive>
 8011e86:	4628      	mov	r0, r5
 8011e88:	bd70      	pop	{r4, r5, r6, pc}
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	da04      	bge.n	8011e98 <_puts_r+0x60>
 8011e8e:	69a2      	ldr	r2, [r4, #24]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	dc17      	bgt.n	8011ec4 <_puts_r+0x8c>
 8011e94:	290a      	cmp	r1, #10
 8011e96:	d015      	beq.n	8011ec4 <_puts_r+0x8c>
 8011e98:	6823      	ldr	r3, [r4, #0]
 8011e9a:	1c5a      	adds	r2, r3, #1
 8011e9c:	6022      	str	r2, [r4, #0]
 8011e9e:	7019      	strb	r1, [r3, #0]
 8011ea0:	68a3      	ldr	r3, [r4, #8]
 8011ea2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	60a3      	str	r3, [r4, #8]
 8011eaa:	2900      	cmp	r1, #0
 8011eac:	d1ed      	bne.n	8011e8a <_puts_r+0x52>
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	da11      	bge.n	8011ed6 <_puts_r+0x9e>
 8011eb2:	4622      	mov	r2, r4
 8011eb4:	210a      	movs	r1, #10
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	f000 f881 	bl	8011fbe <__swbuf_r>
 8011ebc:	3001      	adds	r0, #1
 8011ebe:	d0d7      	beq.n	8011e70 <_puts_r+0x38>
 8011ec0:	250a      	movs	r5, #10
 8011ec2:	e7d7      	b.n	8011e74 <_puts_r+0x3c>
 8011ec4:	4622      	mov	r2, r4
 8011ec6:	4628      	mov	r0, r5
 8011ec8:	f000 f879 	bl	8011fbe <__swbuf_r>
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d1e7      	bne.n	8011ea0 <_puts_r+0x68>
 8011ed0:	e7ce      	b.n	8011e70 <_puts_r+0x38>
 8011ed2:	3e01      	subs	r6, #1
 8011ed4:	e7e4      	b.n	8011ea0 <_puts_r+0x68>
 8011ed6:	6823      	ldr	r3, [r4, #0]
 8011ed8:	1c5a      	adds	r2, r3, #1
 8011eda:	6022      	str	r2, [r4, #0]
 8011edc:	220a      	movs	r2, #10
 8011ede:	701a      	strb	r2, [r3, #0]
 8011ee0:	e7ee      	b.n	8011ec0 <_puts_r+0x88>
	...

08011ee4 <puts>:
 8011ee4:	4b02      	ldr	r3, [pc, #8]	@ (8011ef0 <puts+0xc>)
 8011ee6:	4601      	mov	r1, r0
 8011ee8:	6818      	ldr	r0, [r3, #0]
 8011eea:	f7ff bfa5 	b.w	8011e38 <_puts_r>
 8011eee:	bf00      	nop
 8011ef0:	2000017c 	.word	0x2000017c

08011ef4 <siprintf>:
 8011ef4:	b40e      	push	{r1, r2, r3}
 8011ef6:	b510      	push	{r4, lr}
 8011ef8:	b09d      	sub	sp, #116	@ 0x74
 8011efa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011efe:	2400      	movs	r4, #0
 8011f00:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011f02:	9002      	str	r0, [sp, #8]
 8011f04:	9006      	str	r0, [sp, #24]
 8011f06:	9107      	str	r1, [sp, #28]
 8011f08:	9104      	str	r1, [sp, #16]
 8011f0a:	4809      	ldr	r0, [pc, #36]	@ (8011f30 <siprintf+0x3c>)
 8011f0c:	4909      	ldr	r1, [pc, #36]	@ (8011f34 <siprintf+0x40>)
 8011f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f12:	9105      	str	r1, [sp, #20]
 8011f14:	a902      	add	r1, sp, #8
 8011f16:	6800      	ldr	r0, [r0, #0]
 8011f18:	9301      	str	r3, [sp, #4]
 8011f1a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011f1c:	f002 fc72 	bl	8014804 <_svfiprintf_r>
 8011f20:	9b02      	ldr	r3, [sp, #8]
 8011f22:	701c      	strb	r4, [r3, #0]
 8011f24:	b01d      	add	sp, #116	@ 0x74
 8011f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f2a:	b003      	add	sp, #12
 8011f2c:	4770      	bx	lr
 8011f2e:	bf00      	nop
 8011f30:	2000017c 	.word	0x2000017c
 8011f34:	ffff0208 	.word	0xffff0208

08011f38 <__sread>:
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	460c      	mov	r4, r1
 8011f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f40:	f000 f900 	bl	8012144 <_read_r>
 8011f44:	2800      	cmp	r0, #0
 8011f46:	bfab      	itete	ge
 8011f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8011f4c:	181b      	addge	r3, r3, r0
 8011f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011f52:	bfac      	ite	ge
 8011f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011f56:	81a3      	strhlt	r3, [r4, #12]
 8011f58:	bd10      	pop	{r4, pc}

08011f5a <__swrite>:
 8011f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f5e:	461f      	mov	r7, r3
 8011f60:	898b      	ldrh	r3, [r1, #12]
 8011f62:	4605      	mov	r5, r0
 8011f64:	460c      	mov	r4, r1
 8011f66:	05db      	lsls	r3, r3, #23
 8011f68:	4616      	mov	r6, r2
 8011f6a:	d505      	bpl.n	8011f78 <__swrite+0x1e>
 8011f6c:	2302      	movs	r3, #2
 8011f6e:	2200      	movs	r2, #0
 8011f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f74:	f000 f8d4 	bl	8012120 <_lseek_r>
 8011f78:	89a3      	ldrh	r3, [r4, #12]
 8011f7a:	4632      	mov	r2, r6
 8011f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f80:	4628      	mov	r0, r5
 8011f82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011f86:	81a3      	strh	r3, [r4, #12]
 8011f88:	463b      	mov	r3, r7
 8011f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8e:	f000 b8eb 	b.w	8012168 <_write_r>

08011f92 <__sseek>:
 8011f92:	b510      	push	{r4, lr}
 8011f94:	460c      	mov	r4, r1
 8011f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f9a:	f000 f8c1 	bl	8012120 <_lseek_r>
 8011f9e:	1c43      	adds	r3, r0, #1
 8011fa0:	89a3      	ldrh	r3, [r4, #12]
 8011fa2:	bf15      	itete	ne
 8011fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011fae:	81a3      	strheq	r3, [r4, #12]
 8011fb0:	bf18      	it	ne
 8011fb2:	81a3      	strhne	r3, [r4, #12]
 8011fb4:	bd10      	pop	{r4, pc}

08011fb6 <__sclose>:
 8011fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fba:	f000 b8a1 	b.w	8012100 <_close_r>

08011fbe <__swbuf_r>:
 8011fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fc0:	460e      	mov	r6, r1
 8011fc2:	4614      	mov	r4, r2
 8011fc4:	4605      	mov	r5, r0
 8011fc6:	b118      	cbz	r0, 8011fd0 <__swbuf_r+0x12>
 8011fc8:	6a03      	ldr	r3, [r0, #32]
 8011fca:	b90b      	cbnz	r3, 8011fd0 <__swbuf_r+0x12>
 8011fcc:	f7ff feec 	bl	8011da8 <__sinit>
 8011fd0:	69a3      	ldr	r3, [r4, #24]
 8011fd2:	60a3      	str	r3, [r4, #8]
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	071a      	lsls	r2, r3, #28
 8011fd8:	d501      	bpl.n	8011fde <__swbuf_r+0x20>
 8011fda:	6923      	ldr	r3, [r4, #16]
 8011fdc:	b943      	cbnz	r3, 8011ff0 <__swbuf_r+0x32>
 8011fde:	4621      	mov	r1, r4
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	f000 f82b 	bl	801203c <__swsetup_r>
 8011fe6:	b118      	cbz	r0, 8011ff0 <__swbuf_r+0x32>
 8011fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8011fec:	4638      	mov	r0, r7
 8011fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ff0:	6823      	ldr	r3, [r4, #0]
 8011ff2:	b2f6      	uxtb	r6, r6
 8011ff4:	6922      	ldr	r2, [r4, #16]
 8011ff6:	4637      	mov	r7, r6
 8011ff8:	1a98      	subs	r0, r3, r2
 8011ffa:	6963      	ldr	r3, [r4, #20]
 8011ffc:	4283      	cmp	r3, r0
 8011ffe:	dc05      	bgt.n	801200c <__swbuf_r+0x4e>
 8012000:	4621      	mov	r1, r4
 8012002:	4628      	mov	r0, r5
 8012004:	f002 fec0 	bl	8014d88 <_fflush_r>
 8012008:	2800      	cmp	r0, #0
 801200a:	d1ed      	bne.n	8011fe8 <__swbuf_r+0x2a>
 801200c:	68a3      	ldr	r3, [r4, #8]
 801200e:	3b01      	subs	r3, #1
 8012010:	60a3      	str	r3, [r4, #8]
 8012012:	6823      	ldr	r3, [r4, #0]
 8012014:	1c5a      	adds	r2, r3, #1
 8012016:	6022      	str	r2, [r4, #0]
 8012018:	701e      	strb	r6, [r3, #0]
 801201a:	1c43      	adds	r3, r0, #1
 801201c:	6962      	ldr	r2, [r4, #20]
 801201e:	429a      	cmp	r2, r3
 8012020:	d004      	beq.n	801202c <__swbuf_r+0x6e>
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	07db      	lsls	r3, r3, #31
 8012026:	d5e1      	bpl.n	8011fec <__swbuf_r+0x2e>
 8012028:	2e0a      	cmp	r6, #10
 801202a:	d1df      	bne.n	8011fec <__swbuf_r+0x2e>
 801202c:	4621      	mov	r1, r4
 801202e:	4628      	mov	r0, r5
 8012030:	f002 feaa 	bl	8014d88 <_fflush_r>
 8012034:	2800      	cmp	r0, #0
 8012036:	d0d9      	beq.n	8011fec <__swbuf_r+0x2e>
 8012038:	e7d6      	b.n	8011fe8 <__swbuf_r+0x2a>
	...

0801203c <__swsetup_r>:
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	4b29      	ldr	r3, [pc, #164]	@ (80120e4 <__swsetup_r+0xa8>)
 8012040:	4605      	mov	r5, r0
 8012042:	460c      	mov	r4, r1
 8012044:	6818      	ldr	r0, [r3, #0]
 8012046:	b118      	cbz	r0, 8012050 <__swsetup_r+0x14>
 8012048:	6a03      	ldr	r3, [r0, #32]
 801204a:	b90b      	cbnz	r3, 8012050 <__swsetup_r+0x14>
 801204c:	f7ff feac 	bl	8011da8 <__sinit>
 8012050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012054:	0719      	lsls	r1, r3, #28
 8012056:	d422      	bmi.n	801209e <__swsetup_r+0x62>
 8012058:	06da      	lsls	r2, r3, #27
 801205a:	d407      	bmi.n	801206c <__swsetup_r+0x30>
 801205c:	2209      	movs	r2, #9
 801205e:	602a      	str	r2, [r5, #0]
 8012060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	81a3      	strh	r3, [r4, #12]
 801206a:	e033      	b.n	80120d4 <__swsetup_r+0x98>
 801206c:	0758      	lsls	r0, r3, #29
 801206e:	d512      	bpl.n	8012096 <__swsetup_r+0x5a>
 8012070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012072:	b141      	cbz	r1, 8012086 <__swsetup_r+0x4a>
 8012074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012078:	4299      	cmp	r1, r3
 801207a:	d002      	beq.n	8012082 <__swsetup_r+0x46>
 801207c:	4628      	mov	r0, r5
 801207e:	f000 ff29 	bl	8012ed4 <_free_r>
 8012082:	2300      	movs	r3, #0
 8012084:	6363      	str	r3, [r4, #52]	@ 0x34
 8012086:	89a3      	ldrh	r3, [r4, #12]
 8012088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801208c:	81a3      	strh	r3, [r4, #12]
 801208e:	2300      	movs	r3, #0
 8012090:	6063      	str	r3, [r4, #4]
 8012092:	6923      	ldr	r3, [r4, #16]
 8012094:	6023      	str	r3, [r4, #0]
 8012096:	89a3      	ldrh	r3, [r4, #12]
 8012098:	f043 0308 	orr.w	r3, r3, #8
 801209c:	81a3      	strh	r3, [r4, #12]
 801209e:	6923      	ldr	r3, [r4, #16]
 80120a0:	b94b      	cbnz	r3, 80120b6 <__swsetup_r+0x7a>
 80120a2:	89a3      	ldrh	r3, [r4, #12]
 80120a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80120a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120ac:	d003      	beq.n	80120b6 <__swsetup_r+0x7a>
 80120ae:	4621      	mov	r1, r4
 80120b0:	4628      	mov	r0, r5
 80120b2:	f002 feb6 	bl	8014e22 <__smakebuf_r>
 80120b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120ba:	f013 0201 	ands.w	r2, r3, #1
 80120be:	d00a      	beq.n	80120d6 <__swsetup_r+0x9a>
 80120c0:	2200      	movs	r2, #0
 80120c2:	60a2      	str	r2, [r4, #8]
 80120c4:	6962      	ldr	r2, [r4, #20]
 80120c6:	4252      	negs	r2, r2
 80120c8:	61a2      	str	r2, [r4, #24]
 80120ca:	6922      	ldr	r2, [r4, #16]
 80120cc:	b942      	cbnz	r2, 80120e0 <__swsetup_r+0xa4>
 80120ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80120d2:	d1c5      	bne.n	8012060 <__swsetup_r+0x24>
 80120d4:	bd38      	pop	{r3, r4, r5, pc}
 80120d6:	0799      	lsls	r1, r3, #30
 80120d8:	bf58      	it	pl
 80120da:	6962      	ldrpl	r2, [r4, #20]
 80120dc:	60a2      	str	r2, [r4, #8]
 80120de:	e7f4      	b.n	80120ca <__swsetup_r+0x8e>
 80120e0:	2000      	movs	r0, #0
 80120e2:	e7f7      	b.n	80120d4 <__swsetup_r+0x98>
 80120e4:	2000017c 	.word	0x2000017c

080120e8 <memset>:
 80120e8:	4402      	add	r2, r0
 80120ea:	4603      	mov	r3, r0
 80120ec:	4293      	cmp	r3, r2
 80120ee:	d100      	bne.n	80120f2 <memset+0xa>
 80120f0:	4770      	bx	lr
 80120f2:	f803 1b01 	strb.w	r1, [r3], #1
 80120f6:	e7f9      	b.n	80120ec <memset+0x4>

080120f8 <_localeconv_r>:
 80120f8:	4800      	ldr	r0, [pc, #0]	@ (80120fc <_localeconv_r+0x4>)
 80120fa:	4770      	bx	lr
 80120fc:	200002bc 	.word	0x200002bc

08012100 <_close_r>:
 8012100:	b538      	push	{r3, r4, r5, lr}
 8012102:	2300      	movs	r3, #0
 8012104:	4d05      	ldr	r5, [pc, #20]	@ (801211c <_close_r+0x1c>)
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
 801210a:	602b      	str	r3, [r5, #0]
 801210c:	f7ef ff34 	bl	8001f78 <_close>
 8012110:	1c43      	adds	r3, r0, #1
 8012112:	d102      	bne.n	801211a <_close_r+0x1a>
 8012114:	682b      	ldr	r3, [r5, #0]
 8012116:	b103      	cbz	r3, 801211a <_close_r+0x1a>
 8012118:	6023      	str	r3, [r4, #0]
 801211a:	bd38      	pop	{r3, r4, r5, pc}
 801211c:	20000a24 	.word	0x20000a24

08012120 <_lseek_r>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	4604      	mov	r4, r0
 8012124:	4d06      	ldr	r5, [pc, #24]	@ (8012140 <_lseek_r+0x20>)
 8012126:	4608      	mov	r0, r1
 8012128:	4611      	mov	r1, r2
 801212a:	2200      	movs	r2, #0
 801212c:	602a      	str	r2, [r5, #0]
 801212e:	461a      	mov	r2, r3
 8012130:	f7ef ff49 	bl	8001fc6 <_lseek>
 8012134:	1c43      	adds	r3, r0, #1
 8012136:	d102      	bne.n	801213e <_lseek_r+0x1e>
 8012138:	682b      	ldr	r3, [r5, #0]
 801213a:	b103      	cbz	r3, 801213e <_lseek_r+0x1e>
 801213c:	6023      	str	r3, [r4, #0]
 801213e:	bd38      	pop	{r3, r4, r5, pc}
 8012140:	20000a24 	.word	0x20000a24

08012144 <_read_r>:
 8012144:	b538      	push	{r3, r4, r5, lr}
 8012146:	4604      	mov	r4, r0
 8012148:	4d06      	ldr	r5, [pc, #24]	@ (8012164 <_read_r+0x20>)
 801214a:	4608      	mov	r0, r1
 801214c:	4611      	mov	r1, r2
 801214e:	2200      	movs	r2, #0
 8012150:	602a      	str	r2, [r5, #0]
 8012152:	461a      	mov	r2, r3
 8012154:	f7ef fef3 	bl	8001f3e <_read>
 8012158:	1c43      	adds	r3, r0, #1
 801215a:	d102      	bne.n	8012162 <_read_r+0x1e>
 801215c:	682b      	ldr	r3, [r5, #0]
 801215e:	b103      	cbz	r3, 8012162 <_read_r+0x1e>
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	bd38      	pop	{r3, r4, r5, pc}
 8012164:	20000a24 	.word	0x20000a24

08012168 <_write_r>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	4604      	mov	r4, r0
 801216c:	4d06      	ldr	r5, [pc, #24]	@ (8012188 <_write_r+0x20>)
 801216e:	4608      	mov	r0, r1
 8012170:	4611      	mov	r1, r2
 8012172:	2200      	movs	r2, #0
 8012174:	602a      	str	r2, [r5, #0]
 8012176:	461a      	mov	r2, r3
 8012178:	f7ef fa0c 	bl	8001594 <_write>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d102      	bne.n	8012186 <_write_r+0x1e>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	b103      	cbz	r3, 8012186 <_write_r+0x1e>
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	20000a24 	.word	0x20000a24

0801218c <__errno>:
 801218c:	4b01      	ldr	r3, [pc, #4]	@ (8012194 <__errno+0x8>)
 801218e:	6818      	ldr	r0, [r3, #0]
 8012190:	4770      	bx	lr
 8012192:	bf00      	nop
 8012194:	2000017c 	.word	0x2000017c

08012198 <__libc_init_array>:
 8012198:	b570      	push	{r4, r5, r6, lr}
 801219a:	4d0d      	ldr	r5, [pc, #52]	@ (80121d0 <__libc_init_array+0x38>)
 801219c:	2600      	movs	r6, #0
 801219e:	4c0d      	ldr	r4, [pc, #52]	@ (80121d4 <__libc_init_array+0x3c>)
 80121a0:	1b64      	subs	r4, r4, r5
 80121a2:	10a4      	asrs	r4, r4, #2
 80121a4:	42a6      	cmp	r6, r4
 80121a6:	d109      	bne.n	80121bc <__libc_init_array+0x24>
 80121a8:	4d0b      	ldr	r5, [pc, #44]	@ (80121d8 <__libc_init_array+0x40>)
 80121aa:	2600      	movs	r6, #0
 80121ac:	4c0b      	ldr	r4, [pc, #44]	@ (80121dc <__libc_init_array+0x44>)
 80121ae:	f003 fb05 	bl	80157bc <_init>
 80121b2:	1b64      	subs	r4, r4, r5
 80121b4:	10a4      	asrs	r4, r4, #2
 80121b6:	42a6      	cmp	r6, r4
 80121b8:	d105      	bne.n	80121c6 <__libc_init_array+0x2e>
 80121ba:	bd70      	pop	{r4, r5, r6, pc}
 80121bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80121c0:	3601      	adds	r6, #1
 80121c2:	4798      	blx	r3
 80121c4:	e7ee      	b.n	80121a4 <__libc_init_array+0xc>
 80121c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80121ca:	3601      	adds	r6, #1
 80121cc:	4798      	blx	r3
 80121ce:	e7f2      	b.n	80121b6 <__libc_init_array+0x1e>
 80121d0:	08015e0c 	.word	0x08015e0c
 80121d4:	08015e0c 	.word	0x08015e0c
 80121d8:	08015e0c 	.word	0x08015e0c
 80121dc:	08015e10 	.word	0x08015e10

080121e0 <__retarget_lock_init_recursive>:
 80121e0:	4770      	bx	lr

080121e2 <__retarget_lock_acquire_recursive>:
 80121e2:	4770      	bx	lr

080121e4 <__retarget_lock_release_recursive>:
 80121e4:	4770      	bx	lr

080121e6 <memchr>:
 80121e6:	b2c9      	uxtb	r1, r1
 80121e8:	4603      	mov	r3, r0
 80121ea:	4402      	add	r2, r0
 80121ec:	b510      	push	{r4, lr}
 80121ee:	4293      	cmp	r3, r2
 80121f0:	4618      	mov	r0, r3
 80121f2:	d101      	bne.n	80121f8 <memchr+0x12>
 80121f4:	2000      	movs	r0, #0
 80121f6:	e003      	b.n	8012200 <memchr+0x1a>
 80121f8:	7804      	ldrb	r4, [r0, #0]
 80121fa:	3301      	adds	r3, #1
 80121fc:	428c      	cmp	r4, r1
 80121fe:	d1f6      	bne.n	80121ee <memchr+0x8>
 8012200:	bd10      	pop	{r4, pc}
	...

08012204 <nanf>:
 8012204:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801220c <nanf+0x8>
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	7fc00000 	.word	0x7fc00000

08012210 <quorem>:
 8012210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012214:	6903      	ldr	r3, [r0, #16]
 8012216:	4607      	mov	r7, r0
 8012218:	690c      	ldr	r4, [r1, #16]
 801221a:	42a3      	cmp	r3, r4
 801221c:	f2c0 8083 	blt.w	8012326 <quorem+0x116>
 8012220:	3c01      	subs	r4, #1
 8012222:	f100 0514 	add.w	r5, r0, #20
 8012226:	f101 0814 	add.w	r8, r1, #20
 801222a:	00a3      	lsls	r3, r4, #2
 801222c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012230:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801223a:	9301      	str	r3, [sp, #4]
 801223c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012240:	3301      	adds	r3, #1
 8012242:	429a      	cmp	r2, r3
 8012244:	fbb2 f6f3 	udiv	r6, r2, r3
 8012248:	d331      	bcc.n	80122ae <quorem+0x9e>
 801224a:	f04f 0a00 	mov.w	sl, #0
 801224e:	46c4      	mov	ip, r8
 8012250:	46ae      	mov	lr, r5
 8012252:	46d3      	mov	fp, sl
 8012254:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012258:	b298      	uxth	r0, r3
 801225a:	45e1      	cmp	r9, ip
 801225c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8012260:	fb06 a000 	mla	r0, r6, r0, sl
 8012264:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012268:	b280      	uxth	r0, r0
 801226a:	fb06 2303 	mla	r3, r6, r3, r2
 801226e:	f8de 2000 	ldr.w	r2, [lr]
 8012272:	b292      	uxth	r2, r2
 8012274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012278:	eba2 0200 	sub.w	r2, r2, r0
 801227c:	b29b      	uxth	r3, r3
 801227e:	f8de 0000 	ldr.w	r0, [lr]
 8012282:	445a      	add	r2, fp
 8012284:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012288:	b292      	uxth	r2, r2
 801228a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801228e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012292:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012296:	f84e 2b04 	str.w	r2, [lr], #4
 801229a:	d2db      	bcs.n	8012254 <quorem+0x44>
 801229c:	9b00      	ldr	r3, [sp, #0]
 801229e:	58eb      	ldr	r3, [r5, r3]
 80122a0:	b92b      	cbnz	r3, 80122ae <quorem+0x9e>
 80122a2:	9b01      	ldr	r3, [sp, #4]
 80122a4:	3b04      	subs	r3, #4
 80122a6:	429d      	cmp	r5, r3
 80122a8:	461a      	mov	r2, r3
 80122aa:	d330      	bcc.n	801230e <quorem+0xfe>
 80122ac:	613c      	str	r4, [r7, #16]
 80122ae:	4638      	mov	r0, r7
 80122b0:	f001 f9d0 	bl	8013654 <__mcmp>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	db26      	blt.n	8012306 <quorem+0xf6>
 80122b8:	4629      	mov	r1, r5
 80122ba:	2000      	movs	r0, #0
 80122bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80122c0:	f8d1 c000 	ldr.w	ip, [r1]
 80122c4:	fa1f fe82 	uxth.w	lr, r2
 80122c8:	45c1      	cmp	r9, r8
 80122ca:	fa1f f38c 	uxth.w	r3, ip
 80122ce:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80122d2:	eba3 030e 	sub.w	r3, r3, lr
 80122d6:	4403      	add	r3, r0
 80122d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80122dc:	b29b      	uxth	r3, r3
 80122de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80122e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80122ea:	f841 3b04 	str.w	r3, [r1], #4
 80122ee:	d2e5      	bcs.n	80122bc <quorem+0xac>
 80122f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122f8:	b922      	cbnz	r2, 8012304 <quorem+0xf4>
 80122fa:	3b04      	subs	r3, #4
 80122fc:	429d      	cmp	r5, r3
 80122fe:	461a      	mov	r2, r3
 8012300:	d30b      	bcc.n	801231a <quorem+0x10a>
 8012302:	613c      	str	r4, [r7, #16]
 8012304:	3601      	adds	r6, #1
 8012306:	4630      	mov	r0, r6
 8012308:	b003      	add	sp, #12
 801230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801230e:	6812      	ldr	r2, [r2, #0]
 8012310:	3b04      	subs	r3, #4
 8012312:	2a00      	cmp	r2, #0
 8012314:	d1ca      	bne.n	80122ac <quorem+0x9c>
 8012316:	3c01      	subs	r4, #1
 8012318:	e7c5      	b.n	80122a6 <quorem+0x96>
 801231a:	6812      	ldr	r2, [r2, #0]
 801231c:	3b04      	subs	r3, #4
 801231e:	2a00      	cmp	r2, #0
 8012320:	d1ef      	bne.n	8012302 <quorem+0xf2>
 8012322:	3c01      	subs	r4, #1
 8012324:	e7ea      	b.n	80122fc <quorem+0xec>
 8012326:	2000      	movs	r0, #0
 8012328:	e7ee      	b.n	8012308 <quorem+0xf8>
 801232a:	0000      	movs	r0, r0
 801232c:	0000      	movs	r0, r0
	...

08012330 <_dtoa_r>:
 8012330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012334:	69c7      	ldr	r7, [r0, #28]
 8012336:	b097      	sub	sp, #92	@ 0x5c
 8012338:	4681      	mov	r9, r0
 801233a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801233c:	9107      	str	r1, [sp, #28]
 801233e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012340:	9311      	str	r3, [sp, #68]	@ 0x44
 8012342:	ec55 4b10 	vmov	r4, r5, d0
 8012346:	ed8d 0b04 	vstr	d0, [sp, #16]
 801234a:	b97f      	cbnz	r7, 801236c <_dtoa_r+0x3c>
 801234c:	2010      	movs	r0, #16
 801234e:	f000 fe0b 	bl	8012f68 <malloc>
 8012352:	4602      	mov	r2, r0
 8012354:	f8c9 001c 	str.w	r0, [r9, #28]
 8012358:	b920      	cbnz	r0, 8012364 <_dtoa_r+0x34>
 801235a:	4ba9      	ldr	r3, [pc, #676]	@ (8012600 <_dtoa_r+0x2d0>)
 801235c:	21ef      	movs	r1, #239	@ 0xef
 801235e:	48a9      	ldr	r0, [pc, #676]	@ (8012604 <_dtoa_r+0x2d4>)
 8012360:	f002 fe12 	bl	8014f88 <__assert_func>
 8012364:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012368:	6007      	str	r7, [r0, #0]
 801236a:	60c7      	str	r7, [r0, #12]
 801236c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012370:	6819      	ldr	r1, [r3, #0]
 8012372:	b159      	cbz	r1, 801238c <_dtoa_r+0x5c>
 8012374:	685a      	ldr	r2, [r3, #4]
 8012376:	2301      	movs	r3, #1
 8012378:	4648      	mov	r0, r9
 801237a:	4093      	lsls	r3, r2
 801237c:	604a      	str	r2, [r1, #4]
 801237e:	608b      	str	r3, [r1, #8]
 8012380:	f000 fee8 	bl	8013154 <_Bfree>
 8012384:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012388:	2200      	movs	r2, #0
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	1e2b      	subs	r3, r5, #0
 801238e:	bfb7      	itett	lt
 8012390:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012394:	2300      	movge	r3, #0
 8012396:	2201      	movlt	r2, #1
 8012398:	9305      	strlt	r3, [sp, #20]
 801239a:	bfa8      	it	ge
 801239c:	6033      	strge	r3, [r6, #0]
 801239e:	9f05      	ldr	r7, [sp, #20]
 80123a0:	4b99      	ldr	r3, [pc, #612]	@ (8012608 <_dtoa_r+0x2d8>)
 80123a2:	bfb8      	it	lt
 80123a4:	6032      	strlt	r2, [r6, #0]
 80123a6:	43bb      	bics	r3, r7
 80123a8:	d112      	bne.n	80123d0 <_dtoa_r+0xa0>
 80123aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80123ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80123b0:	6013      	str	r3, [r2, #0]
 80123b2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123b6:	4323      	orrs	r3, r4
 80123b8:	f000 855a 	beq.w	8012e70 <_dtoa_r+0xb40>
 80123bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80123be:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801261c <_dtoa_r+0x2ec>
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	f000 855c 	beq.w	8012e80 <_dtoa_r+0xb50>
 80123c8:	f10a 0303 	add.w	r3, sl, #3
 80123cc:	f000 bd56 	b.w	8012e7c <_dtoa_r+0xb4c>
 80123d0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80123d4:	2200      	movs	r2, #0
 80123d6:	2300      	movs	r3, #0
 80123d8:	ec51 0b17 	vmov	r0, r1, d7
 80123dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80123e0:	f7ee fb76 	bl	8000ad0 <__aeabi_dcmpeq>
 80123e4:	4680      	mov	r8, r0
 80123e6:	b158      	cbz	r0, 8012400 <_dtoa_r+0xd0>
 80123e8:	2301      	movs	r3, #1
 80123ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80123ec:	6013      	str	r3, [r2, #0]
 80123ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80123f0:	b113      	cbz	r3, 80123f8 <_dtoa_r+0xc8>
 80123f2:	4b86      	ldr	r3, [pc, #536]	@ (801260c <_dtoa_r+0x2dc>)
 80123f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80123f6:	6013      	str	r3, [r2, #0]
 80123f8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8012620 <_dtoa_r+0x2f0>
 80123fc:	f000 bd40 	b.w	8012e80 <_dtoa_r+0xb50>
 8012400:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012404:	aa14      	add	r2, sp, #80	@ 0x50
 8012406:	a915      	add	r1, sp, #84	@ 0x54
 8012408:	4648      	mov	r0, r9
 801240a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801240e:	f001 fa49 	bl	80138a4 <__d2b>
 8012412:	9002      	str	r0, [sp, #8]
 8012414:	2e00      	cmp	r6, #0
 8012416:	d076      	beq.n	8012506 <_dtoa_r+0x1d6>
 8012418:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801241a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801241e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8012422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012426:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801242a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801242e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012432:	4619      	mov	r1, r3
 8012434:	2200      	movs	r2, #0
 8012436:	4b76      	ldr	r3, [pc, #472]	@ (8012610 <_dtoa_r+0x2e0>)
 8012438:	f7ed ff2a 	bl	8000290 <__aeabi_dsub>
 801243c:	a36a      	add	r3, pc, #424	@ (adr r3, 80125e8 <_dtoa_r+0x2b8>)
 801243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012442:	f7ee f8dd 	bl	8000600 <__aeabi_dmul>
 8012446:	a36a      	add	r3, pc, #424	@ (adr r3, 80125f0 <_dtoa_r+0x2c0>)
 8012448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244c:	f7ed ff22 	bl	8000294 <__adddf3>
 8012450:	4604      	mov	r4, r0
 8012452:	460d      	mov	r5, r1
 8012454:	4630      	mov	r0, r6
 8012456:	f7ee f869 	bl	800052c <__aeabi_i2d>
 801245a:	a367      	add	r3, pc, #412	@ (adr r3, 80125f8 <_dtoa_r+0x2c8>)
 801245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012460:	f7ee f8ce 	bl	8000600 <__aeabi_dmul>
 8012464:	4602      	mov	r2, r0
 8012466:	460b      	mov	r3, r1
 8012468:	4620      	mov	r0, r4
 801246a:	4629      	mov	r1, r5
 801246c:	f7ed ff12 	bl	8000294 <__adddf3>
 8012470:	4604      	mov	r4, r0
 8012472:	460d      	mov	r5, r1
 8012474:	f7ee fb74 	bl	8000b60 <__aeabi_d2iz>
 8012478:	2200      	movs	r2, #0
 801247a:	4607      	mov	r7, r0
 801247c:	2300      	movs	r3, #0
 801247e:	4620      	mov	r0, r4
 8012480:	4629      	mov	r1, r5
 8012482:	f7ee fb2f 	bl	8000ae4 <__aeabi_dcmplt>
 8012486:	b140      	cbz	r0, 801249a <_dtoa_r+0x16a>
 8012488:	4638      	mov	r0, r7
 801248a:	f7ee f84f 	bl	800052c <__aeabi_i2d>
 801248e:	4622      	mov	r2, r4
 8012490:	462b      	mov	r3, r5
 8012492:	f7ee fb1d 	bl	8000ad0 <__aeabi_dcmpeq>
 8012496:	b900      	cbnz	r0, 801249a <_dtoa_r+0x16a>
 8012498:	3f01      	subs	r7, #1
 801249a:	2f16      	cmp	r7, #22
 801249c:	d852      	bhi.n	8012544 <_dtoa_r+0x214>
 801249e:	4b5d      	ldr	r3, [pc, #372]	@ (8012614 <_dtoa_r+0x2e4>)
 80124a0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80124a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80124a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ac:	f7ee fb1a 	bl	8000ae4 <__aeabi_dcmplt>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d049      	beq.n	8012548 <_dtoa_r+0x218>
 80124b4:	3f01      	subs	r7, #1
 80124b6:	2300      	movs	r3, #0
 80124b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80124ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80124bc:	1b9b      	subs	r3, r3, r6
 80124be:	1e5a      	subs	r2, r3, #1
 80124c0:	bf4c      	ite	mi
 80124c2:	f1c3 0301 	rsbmi	r3, r3, #1
 80124c6:	2300      	movpl	r3, #0
 80124c8:	9206      	str	r2, [sp, #24]
 80124ca:	bf45      	ittet	mi
 80124cc:	9300      	strmi	r3, [sp, #0]
 80124ce:	2300      	movmi	r3, #0
 80124d0:	9300      	strpl	r3, [sp, #0]
 80124d2:	9306      	strmi	r3, [sp, #24]
 80124d4:	2f00      	cmp	r7, #0
 80124d6:	db39      	blt.n	801254c <_dtoa_r+0x21c>
 80124d8:	9b06      	ldr	r3, [sp, #24]
 80124da:	970d      	str	r7, [sp, #52]	@ 0x34
 80124dc:	443b      	add	r3, r7
 80124de:	9306      	str	r3, [sp, #24]
 80124e0:	2300      	movs	r3, #0
 80124e2:	9308      	str	r3, [sp, #32]
 80124e4:	9b07      	ldr	r3, [sp, #28]
 80124e6:	2b09      	cmp	r3, #9
 80124e8:	d863      	bhi.n	80125b2 <_dtoa_r+0x282>
 80124ea:	2b05      	cmp	r3, #5
 80124ec:	bfc5      	ittet	gt
 80124ee:	3b04      	subgt	r3, #4
 80124f0:	2400      	movgt	r4, #0
 80124f2:	2401      	movle	r4, #1
 80124f4:	9307      	strgt	r3, [sp, #28]
 80124f6:	9b07      	ldr	r3, [sp, #28]
 80124f8:	3b02      	subs	r3, #2
 80124fa:	2b03      	cmp	r3, #3
 80124fc:	d865      	bhi.n	80125ca <_dtoa_r+0x29a>
 80124fe:	e8df f003 	tbb	[pc, r3]
 8012502:	5654      	.short	0x5654
 8012504:	2d39      	.short	0x2d39
 8012506:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801250a:	441e      	add	r6, r3
 801250c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012510:	2b20      	cmp	r3, #32
 8012512:	bfc9      	itett	gt
 8012514:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012518:	f1c3 0320 	rsble	r3, r3, #32
 801251c:	409f      	lslgt	r7, r3
 801251e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012522:	bfd8      	it	le
 8012524:	fa04 f003 	lslle.w	r0, r4, r3
 8012528:	f106 36ff 	add.w	r6, r6, #4294967295
 801252c:	bfc4      	itt	gt
 801252e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012532:	ea47 0003 	orrgt.w	r0, r7, r3
 8012536:	f7ed ffe9 	bl	800050c <__aeabi_ui2d>
 801253a:	2201      	movs	r2, #1
 801253c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012540:	9212      	str	r2, [sp, #72]	@ 0x48
 8012542:	e776      	b.n	8012432 <_dtoa_r+0x102>
 8012544:	2301      	movs	r3, #1
 8012546:	e7b7      	b.n	80124b8 <_dtoa_r+0x188>
 8012548:	9010      	str	r0, [sp, #64]	@ 0x40
 801254a:	e7b6      	b.n	80124ba <_dtoa_r+0x18a>
 801254c:	9b00      	ldr	r3, [sp, #0]
 801254e:	1bdb      	subs	r3, r3, r7
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	427b      	negs	r3, r7
 8012554:	9308      	str	r3, [sp, #32]
 8012556:	2300      	movs	r3, #0
 8012558:	930d      	str	r3, [sp, #52]	@ 0x34
 801255a:	e7c3      	b.n	80124e4 <_dtoa_r+0x1b4>
 801255c:	2301      	movs	r3, #1
 801255e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012560:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012562:	eb07 0b03 	add.w	fp, r7, r3
 8012566:	f10b 0301 	add.w	r3, fp, #1
 801256a:	2b01      	cmp	r3, #1
 801256c:	9303      	str	r3, [sp, #12]
 801256e:	bfb8      	it	lt
 8012570:	2301      	movlt	r3, #1
 8012572:	e006      	b.n	8012582 <_dtoa_r+0x252>
 8012574:	2301      	movs	r3, #1
 8012576:	9309      	str	r3, [sp, #36]	@ 0x24
 8012578:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801257a:	2b00      	cmp	r3, #0
 801257c:	dd28      	ble.n	80125d0 <_dtoa_r+0x2a0>
 801257e:	469b      	mov	fp, r3
 8012580:	9303      	str	r3, [sp, #12]
 8012582:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8012586:	2100      	movs	r1, #0
 8012588:	2204      	movs	r2, #4
 801258a:	f102 0514 	add.w	r5, r2, #20
 801258e:	429d      	cmp	r5, r3
 8012590:	d926      	bls.n	80125e0 <_dtoa_r+0x2b0>
 8012592:	6041      	str	r1, [r0, #4]
 8012594:	4648      	mov	r0, r9
 8012596:	f000 fd9d 	bl	80130d4 <_Balloc>
 801259a:	4682      	mov	sl, r0
 801259c:	2800      	cmp	r0, #0
 801259e:	d141      	bne.n	8012624 <_dtoa_r+0x2f4>
 80125a0:	4b1d      	ldr	r3, [pc, #116]	@ (8012618 <_dtoa_r+0x2e8>)
 80125a2:	4602      	mov	r2, r0
 80125a4:	f240 11af 	movw	r1, #431	@ 0x1af
 80125a8:	e6d9      	b.n	801235e <_dtoa_r+0x2e>
 80125aa:	2300      	movs	r3, #0
 80125ac:	e7e3      	b.n	8012576 <_dtoa_r+0x246>
 80125ae:	2300      	movs	r3, #0
 80125b0:	e7d5      	b.n	801255e <_dtoa_r+0x22e>
 80125b2:	2401      	movs	r4, #1
 80125b4:	2300      	movs	r3, #0
 80125b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80125b8:	9307      	str	r3, [sp, #28]
 80125ba:	f04f 3bff 	mov.w	fp, #4294967295
 80125be:	2200      	movs	r2, #0
 80125c0:	2312      	movs	r3, #18
 80125c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80125c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80125c8:	e7db      	b.n	8012582 <_dtoa_r+0x252>
 80125ca:	2301      	movs	r3, #1
 80125cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80125ce:	e7f4      	b.n	80125ba <_dtoa_r+0x28a>
 80125d0:	f04f 0b01 	mov.w	fp, #1
 80125d4:	465b      	mov	r3, fp
 80125d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80125da:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80125de:	e7d0      	b.n	8012582 <_dtoa_r+0x252>
 80125e0:	3101      	adds	r1, #1
 80125e2:	0052      	lsls	r2, r2, #1
 80125e4:	e7d1      	b.n	801258a <_dtoa_r+0x25a>
 80125e6:	bf00      	nop
 80125e8:	636f4361 	.word	0x636f4361
 80125ec:	3fd287a7 	.word	0x3fd287a7
 80125f0:	8b60c8b3 	.word	0x8b60c8b3
 80125f4:	3fc68a28 	.word	0x3fc68a28
 80125f8:	509f79fb 	.word	0x509f79fb
 80125fc:	3fd34413 	.word	0x3fd34413
 8012600:	08015a1e 	.word	0x08015a1e
 8012604:	08015a35 	.word	0x08015a35
 8012608:	7ff00000 	.word	0x7ff00000
 801260c:	080159e9 	.word	0x080159e9
 8012610:	3ff80000 	.word	0x3ff80000
 8012614:	08015be8 	.word	0x08015be8
 8012618:	08015a8d 	.word	0x08015a8d
 801261c:	08015a1a 	.word	0x08015a1a
 8012620:	080159e8 	.word	0x080159e8
 8012624:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012628:	6018      	str	r0, [r3, #0]
 801262a:	9b03      	ldr	r3, [sp, #12]
 801262c:	2b0e      	cmp	r3, #14
 801262e:	f200 80a1 	bhi.w	8012774 <_dtoa_r+0x444>
 8012632:	2c00      	cmp	r4, #0
 8012634:	f000 809e 	beq.w	8012774 <_dtoa_r+0x444>
 8012638:	2f00      	cmp	r7, #0
 801263a:	dd33      	ble.n	80126a4 <_dtoa_r+0x374>
 801263c:	f007 020f 	and.w	r2, r7, #15
 8012640:	4b9b      	ldr	r3, [pc, #620]	@ (80128b0 <_dtoa_r+0x580>)
 8012642:	05f8      	lsls	r0, r7, #23
 8012644:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801264c:	ed93 7b00 	vldr	d7, [r3]
 8012650:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8012654:	d516      	bpl.n	8012684 <_dtoa_r+0x354>
 8012656:	4b97      	ldr	r3, [pc, #604]	@ (80128b4 <_dtoa_r+0x584>)
 8012658:	f004 040f 	and.w	r4, r4, #15
 801265c:	2603      	movs	r6, #3
 801265e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012666:	f7ee f8f5 	bl	8000854 <__aeabi_ddiv>
 801266a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801266e:	4d91      	ldr	r5, [pc, #580]	@ (80128b4 <_dtoa_r+0x584>)
 8012670:	b954      	cbnz	r4, 8012688 <_dtoa_r+0x358>
 8012672:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801267a:	f7ee f8eb 	bl	8000854 <__aeabi_ddiv>
 801267e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012682:	e028      	b.n	80126d6 <_dtoa_r+0x3a6>
 8012684:	2602      	movs	r6, #2
 8012686:	e7f2      	b.n	801266e <_dtoa_r+0x33e>
 8012688:	07e1      	lsls	r1, r4, #31
 801268a:	d508      	bpl.n	801269e <_dtoa_r+0x36e>
 801268c:	3601      	adds	r6, #1
 801268e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012692:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012696:	f7ed ffb3 	bl	8000600 <__aeabi_dmul>
 801269a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801269e:	1064      	asrs	r4, r4, #1
 80126a0:	3508      	adds	r5, #8
 80126a2:	e7e5      	b.n	8012670 <_dtoa_r+0x340>
 80126a4:	f000 80af 	beq.w	8012806 <_dtoa_r+0x4d6>
 80126a8:	427c      	negs	r4, r7
 80126aa:	4b81      	ldr	r3, [pc, #516]	@ (80128b0 <_dtoa_r+0x580>)
 80126ac:	4d81      	ldr	r5, [pc, #516]	@ (80128b4 <_dtoa_r+0x584>)
 80126ae:	2602      	movs	r6, #2
 80126b0:	f004 020f 	and.w	r2, r4, #15
 80126b4:	1124      	asrs	r4, r4, #4
 80126b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80126be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c2:	f7ed ff9d 	bl	8000600 <__aeabi_dmul>
 80126c6:	2300      	movs	r3, #0
 80126c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80126cc:	2c00      	cmp	r4, #0
 80126ce:	f040 808f 	bne.w	80127f0 <_dtoa_r+0x4c0>
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d1d3      	bne.n	801267e <_dtoa_r+0x34e>
 80126d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80126d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f000 8094 	beq.w	801280a <_dtoa_r+0x4da>
 80126e2:	2200      	movs	r2, #0
 80126e4:	4b74      	ldr	r3, [pc, #464]	@ (80128b8 <_dtoa_r+0x588>)
 80126e6:	4620      	mov	r0, r4
 80126e8:	4629      	mov	r1, r5
 80126ea:	f7ee f9fb 	bl	8000ae4 <__aeabi_dcmplt>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f000 808b 	beq.w	801280a <_dtoa_r+0x4da>
 80126f4:	9b03      	ldr	r3, [sp, #12]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f000 8087 	beq.w	801280a <_dtoa_r+0x4da>
 80126fc:	f1bb 0f00 	cmp.w	fp, #0
 8012700:	dd34      	ble.n	801276c <_dtoa_r+0x43c>
 8012702:	4620      	mov	r0, r4
 8012704:	f107 38ff 	add.w	r8, r7, #4294967295
 8012708:	3601      	adds	r6, #1
 801270a:	465c      	mov	r4, fp
 801270c:	2200      	movs	r2, #0
 801270e:	4b6b      	ldr	r3, [pc, #428]	@ (80128bc <_dtoa_r+0x58c>)
 8012710:	4629      	mov	r1, r5
 8012712:	f7ed ff75 	bl	8000600 <__aeabi_dmul>
 8012716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801271a:	4630      	mov	r0, r6
 801271c:	f7ed ff06 	bl	800052c <__aeabi_i2d>
 8012720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012724:	f7ed ff6c 	bl	8000600 <__aeabi_dmul>
 8012728:	2200      	movs	r2, #0
 801272a:	4b65      	ldr	r3, [pc, #404]	@ (80128c0 <_dtoa_r+0x590>)
 801272c:	f7ed fdb2 	bl	8000294 <__adddf3>
 8012730:	4605      	mov	r5, r0
 8012732:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012736:	2c00      	cmp	r4, #0
 8012738:	d16a      	bne.n	8012810 <_dtoa_r+0x4e0>
 801273a:	2200      	movs	r2, #0
 801273c:	4b61      	ldr	r3, [pc, #388]	@ (80128c4 <_dtoa_r+0x594>)
 801273e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012742:	f7ed fda5 	bl	8000290 <__aeabi_dsub>
 8012746:	4602      	mov	r2, r0
 8012748:	460b      	mov	r3, r1
 801274a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801274e:	462a      	mov	r2, r5
 8012750:	4633      	mov	r3, r6
 8012752:	f7ee f9e5 	bl	8000b20 <__aeabi_dcmpgt>
 8012756:	2800      	cmp	r0, #0
 8012758:	f040 8298 	bne.w	8012c8c <_dtoa_r+0x95c>
 801275c:	462a      	mov	r2, r5
 801275e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012766:	f7ee f9bd 	bl	8000ae4 <__aeabi_dcmplt>
 801276a:	bb38      	cbnz	r0, 80127bc <_dtoa_r+0x48c>
 801276c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8012770:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012774:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012776:	2b00      	cmp	r3, #0
 8012778:	f2c0 8157 	blt.w	8012a2a <_dtoa_r+0x6fa>
 801277c:	2f0e      	cmp	r7, #14
 801277e:	f300 8154 	bgt.w	8012a2a <_dtoa_r+0x6fa>
 8012782:	4b4b      	ldr	r3, [pc, #300]	@ (80128b0 <_dtoa_r+0x580>)
 8012784:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012788:	ed93 7b00 	vldr	d7, [r3]
 801278c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801278e:	2b00      	cmp	r3, #0
 8012790:	ed8d 7b00 	vstr	d7, [sp]
 8012794:	f280 80e5 	bge.w	8012962 <_dtoa_r+0x632>
 8012798:	9b03      	ldr	r3, [sp, #12]
 801279a:	2b00      	cmp	r3, #0
 801279c:	f300 80e1 	bgt.w	8012962 <_dtoa_r+0x632>
 80127a0:	d10c      	bne.n	80127bc <_dtoa_r+0x48c>
 80127a2:	2200      	movs	r2, #0
 80127a4:	4b47      	ldr	r3, [pc, #284]	@ (80128c4 <_dtoa_r+0x594>)
 80127a6:	ec51 0b17 	vmov	r0, r1, d7
 80127aa:	f7ed ff29 	bl	8000600 <__aeabi_dmul>
 80127ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127b2:	f7ee f9ab 	bl	8000b0c <__aeabi_dcmpge>
 80127b6:	2800      	cmp	r0, #0
 80127b8:	f000 8266 	beq.w	8012c88 <_dtoa_r+0x958>
 80127bc:	2400      	movs	r4, #0
 80127be:	4625      	mov	r5, r4
 80127c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127c2:	4656      	mov	r6, sl
 80127c4:	ea6f 0803 	mvn.w	r8, r3
 80127c8:	2700      	movs	r7, #0
 80127ca:	4621      	mov	r1, r4
 80127cc:	4648      	mov	r0, r9
 80127ce:	f000 fcc1 	bl	8013154 <_Bfree>
 80127d2:	2d00      	cmp	r5, #0
 80127d4:	f000 80bd 	beq.w	8012952 <_dtoa_r+0x622>
 80127d8:	b12f      	cbz	r7, 80127e6 <_dtoa_r+0x4b6>
 80127da:	42af      	cmp	r7, r5
 80127dc:	d003      	beq.n	80127e6 <_dtoa_r+0x4b6>
 80127de:	4639      	mov	r1, r7
 80127e0:	4648      	mov	r0, r9
 80127e2:	f000 fcb7 	bl	8013154 <_Bfree>
 80127e6:	4629      	mov	r1, r5
 80127e8:	4648      	mov	r0, r9
 80127ea:	f000 fcb3 	bl	8013154 <_Bfree>
 80127ee:	e0b0      	b.n	8012952 <_dtoa_r+0x622>
 80127f0:	07e2      	lsls	r2, r4, #31
 80127f2:	d505      	bpl.n	8012800 <_dtoa_r+0x4d0>
 80127f4:	3601      	adds	r6, #1
 80127f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80127fa:	f7ed ff01 	bl	8000600 <__aeabi_dmul>
 80127fe:	2301      	movs	r3, #1
 8012800:	1064      	asrs	r4, r4, #1
 8012802:	3508      	adds	r5, #8
 8012804:	e762      	b.n	80126cc <_dtoa_r+0x39c>
 8012806:	2602      	movs	r6, #2
 8012808:	e765      	b.n	80126d6 <_dtoa_r+0x3a6>
 801280a:	46b8      	mov	r8, r7
 801280c:	9c03      	ldr	r4, [sp, #12]
 801280e:	e784      	b.n	801271a <_dtoa_r+0x3ea>
 8012810:	4b27      	ldr	r3, [pc, #156]	@ (80128b0 <_dtoa_r+0x580>)
 8012812:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012814:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012818:	4454      	add	r4, sl
 801281a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801281e:	2900      	cmp	r1, #0
 8012820:	d054      	beq.n	80128cc <_dtoa_r+0x59c>
 8012822:	2000      	movs	r0, #0
 8012824:	4928      	ldr	r1, [pc, #160]	@ (80128c8 <_dtoa_r+0x598>)
 8012826:	f7ee f815 	bl	8000854 <__aeabi_ddiv>
 801282a:	4633      	mov	r3, r6
 801282c:	4656      	mov	r6, sl
 801282e:	462a      	mov	r2, r5
 8012830:	f7ed fd2e 	bl	8000290 <__aeabi_dsub>
 8012834:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801283c:	f7ee f990 	bl	8000b60 <__aeabi_d2iz>
 8012840:	4605      	mov	r5, r0
 8012842:	f7ed fe73 	bl	800052c <__aeabi_i2d>
 8012846:	4602      	mov	r2, r0
 8012848:	460b      	mov	r3, r1
 801284a:	3530      	adds	r5, #48	@ 0x30
 801284c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012850:	f7ed fd1e 	bl	8000290 <__aeabi_dsub>
 8012854:	4602      	mov	r2, r0
 8012856:	460b      	mov	r3, r1
 8012858:	f806 5b01 	strb.w	r5, [r6], #1
 801285c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012860:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012864:	f7ee f93e 	bl	8000ae4 <__aeabi_dcmplt>
 8012868:	2800      	cmp	r0, #0
 801286a:	d172      	bne.n	8012952 <_dtoa_r+0x622>
 801286c:	2000      	movs	r0, #0
 801286e:	4912      	ldr	r1, [pc, #72]	@ (80128b8 <_dtoa_r+0x588>)
 8012870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012874:	f7ed fd0c 	bl	8000290 <__aeabi_dsub>
 8012878:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801287c:	f7ee f932 	bl	8000ae4 <__aeabi_dcmplt>
 8012880:	2800      	cmp	r0, #0
 8012882:	f040 80b4 	bne.w	80129ee <_dtoa_r+0x6be>
 8012886:	42a6      	cmp	r6, r4
 8012888:	f43f af70 	beq.w	801276c <_dtoa_r+0x43c>
 801288c:	2200      	movs	r2, #0
 801288e:	4b0b      	ldr	r3, [pc, #44]	@ (80128bc <_dtoa_r+0x58c>)
 8012890:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012894:	f7ed feb4 	bl	8000600 <__aeabi_dmul>
 8012898:	2200      	movs	r2, #0
 801289a:	4b08      	ldr	r3, [pc, #32]	@ (80128bc <_dtoa_r+0x58c>)
 801289c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80128a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128a4:	f7ed feac 	bl	8000600 <__aeabi_dmul>
 80128a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128ac:	e7c4      	b.n	8012838 <_dtoa_r+0x508>
 80128ae:	bf00      	nop
 80128b0:	08015be8 	.word	0x08015be8
 80128b4:	08015bc0 	.word	0x08015bc0
 80128b8:	3ff00000 	.word	0x3ff00000
 80128bc:	40240000 	.word	0x40240000
 80128c0:	401c0000 	.word	0x401c0000
 80128c4:	40140000 	.word	0x40140000
 80128c8:	3fe00000 	.word	0x3fe00000
 80128cc:	4631      	mov	r1, r6
 80128ce:	4656      	mov	r6, sl
 80128d0:	4628      	mov	r0, r5
 80128d2:	f7ed fe95 	bl	8000600 <__aeabi_dmul>
 80128d6:	9413      	str	r4, [sp, #76]	@ 0x4c
 80128d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80128dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128e0:	f7ee f93e 	bl	8000b60 <__aeabi_d2iz>
 80128e4:	4605      	mov	r5, r0
 80128e6:	f7ed fe21 	bl	800052c <__aeabi_i2d>
 80128ea:	4602      	mov	r2, r0
 80128ec:	3530      	adds	r5, #48	@ 0x30
 80128ee:	460b      	mov	r3, r1
 80128f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128f4:	f7ed fccc 	bl	8000290 <__aeabi_dsub>
 80128f8:	f806 5b01 	strb.w	r5, [r6], #1
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	42a6      	cmp	r6, r4
 8012902:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012906:	f04f 0200 	mov.w	r2, #0
 801290a:	d124      	bne.n	8012956 <_dtoa_r+0x626>
 801290c:	4baf      	ldr	r3, [pc, #700]	@ (8012bcc <_dtoa_r+0x89c>)
 801290e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012912:	f7ed fcbf 	bl	8000294 <__adddf3>
 8012916:	4602      	mov	r2, r0
 8012918:	460b      	mov	r3, r1
 801291a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801291e:	f7ee f8ff 	bl	8000b20 <__aeabi_dcmpgt>
 8012922:	2800      	cmp	r0, #0
 8012924:	d163      	bne.n	80129ee <_dtoa_r+0x6be>
 8012926:	2000      	movs	r0, #0
 8012928:	49a8      	ldr	r1, [pc, #672]	@ (8012bcc <_dtoa_r+0x89c>)
 801292a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801292e:	f7ed fcaf 	bl	8000290 <__aeabi_dsub>
 8012932:	4602      	mov	r2, r0
 8012934:	460b      	mov	r3, r1
 8012936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801293a:	f7ee f8d3 	bl	8000ae4 <__aeabi_dcmplt>
 801293e:	2800      	cmp	r0, #0
 8012940:	f43f af14 	beq.w	801276c <_dtoa_r+0x43c>
 8012944:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012946:	1e73      	subs	r3, r6, #1
 8012948:	9313      	str	r3, [sp, #76]	@ 0x4c
 801294a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801294e:	2b30      	cmp	r3, #48	@ 0x30
 8012950:	d0f8      	beq.n	8012944 <_dtoa_r+0x614>
 8012952:	4647      	mov	r7, r8
 8012954:	e03b      	b.n	80129ce <_dtoa_r+0x69e>
 8012956:	4b9e      	ldr	r3, [pc, #632]	@ (8012bd0 <_dtoa_r+0x8a0>)
 8012958:	f7ed fe52 	bl	8000600 <__aeabi_dmul>
 801295c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012960:	e7bc      	b.n	80128dc <_dtoa_r+0x5ac>
 8012962:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012966:	4656      	mov	r6, sl
 8012968:	4620      	mov	r0, r4
 801296a:	4629      	mov	r1, r5
 801296c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012970:	f7ed ff70 	bl	8000854 <__aeabi_ddiv>
 8012974:	f7ee f8f4 	bl	8000b60 <__aeabi_d2iz>
 8012978:	4680      	mov	r8, r0
 801297a:	f7ed fdd7 	bl	800052c <__aeabi_i2d>
 801297e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012982:	f7ed fe3d 	bl	8000600 <__aeabi_dmul>
 8012986:	4602      	mov	r2, r0
 8012988:	4620      	mov	r0, r4
 801298a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801298e:	460b      	mov	r3, r1
 8012990:	4629      	mov	r1, r5
 8012992:	f7ed fc7d 	bl	8000290 <__aeabi_dsub>
 8012996:	9d03      	ldr	r5, [sp, #12]
 8012998:	f806 4b01 	strb.w	r4, [r6], #1
 801299c:	eba6 040a 	sub.w	r4, r6, sl
 80129a0:	4602      	mov	r2, r0
 80129a2:	460b      	mov	r3, r1
 80129a4:	42a5      	cmp	r5, r4
 80129a6:	d133      	bne.n	8012a10 <_dtoa_r+0x6e0>
 80129a8:	f7ed fc74 	bl	8000294 <__adddf3>
 80129ac:	4604      	mov	r4, r0
 80129ae:	460d      	mov	r5, r1
 80129b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129b4:	f7ee f8b4 	bl	8000b20 <__aeabi_dcmpgt>
 80129b8:	b9c0      	cbnz	r0, 80129ec <_dtoa_r+0x6bc>
 80129ba:	4620      	mov	r0, r4
 80129bc:	4629      	mov	r1, r5
 80129be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129c2:	f7ee f885 	bl	8000ad0 <__aeabi_dcmpeq>
 80129c6:	b110      	cbz	r0, 80129ce <_dtoa_r+0x69e>
 80129c8:	f018 0f01 	tst.w	r8, #1
 80129cc:	d10e      	bne.n	80129ec <_dtoa_r+0x6bc>
 80129ce:	9902      	ldr	r1, [sp, #8]
 80129d0:	4648      	mov	r0, r9
 80129d2:	f000 fbbf 	bl	8013154 <_Bfree>
 80129d6:	2300      	movs	r3, #0
 80129d8:	3701      	adds	r7, #1
 80129da:	7033      	strb	r3, [r6, #0]
 80129dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80129de:	601f      	str	r7, [r3, #0]
 80129e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f000 824c 	beq.w	8012e80 <_dtoa_r+0xb50>
 80129e8:	601e      	str	r6, [r3, #0]
 80129ea:	e249      	b.n	8012e80 <_dtoa_r+0xb50>
 80129ec:	46b8      	mov	r8, r7
 80129ee:	4633      	mov	r3, r6
 80129f0:	461e      	mov	r6, r3
 80129f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129f6:	2a39      	cmp	r2, #57	@ 0x39
 80129f8:	d106      	bne.n	8012a08 <_dtoa_r+0x6d8>
 80129fa:	459a      	cmp	sl, r3
 80129fc:	d1f8      	bne.n	80129f0 <_dtoa_r+0x6c0>
 80129fe:	2230      	movs	r2, #48	@ 0x30
 8012a00:	f108 0801 	add.w	r8, r8, #1
 8012a04:	f88a 2000 	strb.w	r2, [sl]
 8012a08:	781a      	ldrb	r2, [r3, #0]
 8012a0a:	3201      	adds	r2, #1
 8012a0c:	701a      	strb	r2, [r3, #0]
 8012a0e:	e7a0      	b.n	8012952 <_dtoa_r+0x622>
 8012a10:	2200      	movs	r2, #0
 8012a12:	4b6f      	ldr	r3, [pc, #444]	@ (8012bd0 <_dtoa_r+0x8a0>)
 8012a14:	f7ed fdf4 	bl	8000600 <__aeabi_dmul>
 8012a18:	2200      	movs	r2, #0
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	460d      	mov	r5, r1
 8012a20:	f7ee f856 	bl	8000ad0 <__aeabi_dcmpeq>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d09f      	beq.n	8012968 <_dtoa_r+0x638>
 8012a28:	e7d1      	b.n	80129ce <_dtoa_r+0x69e>
 8012a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a2c:	2a00      	cmp	r2, #0
 8012a2e:	f000 80ea 	beq.w	8012c06 <_dtoa_r+0x8d6>
 8012a32:	9a07      	ldr	r2, [sp, #28]
 8012a34:	2a01      	cmp	r2, #1
 8012a36:	f300 80cd 	bgt.w	8012bd4 <_dtoa_r+0x8a4>
 8012a3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012a3c:	2a00      	cmp	r2, #0
 8012a3e:	f000 80c1 	beq.w	8012bc4 <_dtoa_r+0x894>
 8012a42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012a46:	9c08      	ldr	r4, [sp, #32]
 8012a48:	9e00      	ldr	r6, [sp, #0]
 8012a4a:	9a00      	ldr	r2, [sp, #0]
 8012a4c:	2101      	movs	r1, #1
 8012a4e:	4648      	mov	r0, r9
 8012a50:	441a      	add	r2, r3
 8012a52:	9200      	str	r2, [sp, #0]
 8012a54:	9a06      	ldr	r2, [sp, #24]
 8012a56:	441a      	add	r2, r3
 8012a58:	9206      	str	r2, [sp, #24]
 8012a5a:	f000 fc7b 	bl	8013354 <__i2b>
 8012a5e:	4605      	mov	r5, r0
 8012a60:	b166      	cbz	r6, 8012a7c <_dtoa_r+0x74c>
 8012a62:	9b06      	ldr	r3, [sp, #24]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	dd09      	ble.n	8012a7c <_dtoa_r+0x74c>
 8012a68:	42b3      	cmp	r3, r6
 8012a6a:	9a00      	ldr	r2, [sp, #0]
 8012a6c:	bfa8      	it	ge
 8012a6e:	4633      	movge	r3, r6
 8012a70:	1ad2      	subs	r2, r2, r3
 8012a72:	1af6      	subs	r6, r6, r3
 8012a74:	9200      	str	r2, [sp, #0]
 8012a76:	9a06      	ldr	r2, [sp, #24]
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	9306      	str	r3, [sp, #24]
 8012a7c:	9b08      	ldr	r3, [sp, #32]
 8012a7e:	b30b      	cbz	r3, 8012ac4 <_dtoa_r+0x794>
 8012a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f000 80c6 	beq.w	8012c14 <_dtoa_r+0x8e4>
 8012a88:	2c00      	cmp	r4, #0
 8012a8a:	f000 80c0 	beq.w	8012c0e <_dtoa_r+0x8de>
 8012a8e:	4629      	mov	r1, r5
 8012a90:	4622      	mov	r2, r4
 8012a92:	4648      	mov	r0, r9
 8012a94:	f000 fd18 	bl	80134c8 <__pow5mult>
 8012a98:	9a02      	ldr	r2, [sp, #8]
 8012a9a:	4601      	mov	r1, r0
 8012a9c:	4605      	mov	r5, r0
 8012a9e:	4648      	mov	r0, r9
 8012aa0:	f000 fc6e 	bl	8013380 <__multiply>
 8012aa4:	9902      	ldr	r1, [sp, #8]
 8012aa6:	4680      	mov	r8, r0
 8012aa8:	4648      	mov	r0, r9
 8012aaa:	f000 fb53 	bl	8013154 <_Bfree>
 8012aae:	9b08      	ldr	r3, [sp, #32]
 8012ab0:	1b1b      	subs	r3, r3, r4
 8012ab2:	9308      	str	r3, [sp, #32]
 8012ab4:	f000 80b1 	beq.w	8012c1a <_dtoa_r+0x8ea>
 8012ab8:	9a08      	ldr	r2, [sp, #32]
 8012aba:	4641      	mov	r1, r8
 8012abc:	4648      	mov	r0, r9
 8012abe:	f000 fd03 	bl	80134c8 <__pow5mult>
 8012ac2:	9002      	str	r0, [sp, #8]
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	4648      	mov	r0, r9
 8012ac8:	f000 fc44 	bl	8013354 <__i2b>
 8012acc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ace:	4604      	mov	r4, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 81d9 	beq.w	8012e88 <_dtoa_r+0xb58>
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	4601      	mov	r1, r0
 8012ada:	4648      	mov	r0, r9
 8012adc:	f000 fcf4 	bl	80134c8 <__pow5mult>
 8012ae0:	9b07      	ldr	r3, [sp, #28]
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	f300 809f 	bgt.w	8012c28 <_dtoa_r+0x8f8>
 8012aea:	9b04      	ldr	r3, [sp, #16]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f040 8097 	bne.w	8012c20 <_dtoa_r+0x8f0>
 8012af2:	9b05      	ldr	r3, [sp, #20]
 8012af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f040 8093 	bne.w	8012c24 <_dtoa_r+0x8f4>
 8012afe:	9b05      	ldr	r3, [sp, #20]
 8012b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b04:	0d1b      	lsrs	r3, r3, #20
 8012b06:	051b      	lsls	r3, r3, #20
 8012b08:	b133      	cbz	r3, 8012b18 <_dtoa_r+0x7e8>
 8012b0a:	9b00      	ldr	r3, [sp, #0]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	9300      	str	r3, [sp, #0]
 8012b10:	9b06      	ldr	r3, [sp, #24]
 8012b12:	3301      	adds	r3, #1
 8012b14:	9306      	str	r3, [sp, #24]
 8012b16:	2301      	movs	r3, #1
 8012b18:	9308      	str	r3, [sp, #32]
 8012b1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f000 81b9 	beq.w	8012e94 <_dtoa_r+0xb64>
 8012b22:	6923      	ldr	r3, [r4, #16]
 8012b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b28:	6918      	ldr	r0, [r3, #16]
 8012b2a:	f000 fbc7 	bl	80132bc <__hi0bits>
 8012b2e:	f1c0 0020 	rsb	r0, r0, #32
 8012b32:	9b06      	ldr	r3, [sp, #24]
 8012b34:	4418      	add	r0, r3
 8012b36:	f010 001f 	ands.w	r0, r0, #31
 8012b3a:	f000 8082 	beq.w	8012c42 <_dtoa_r+0x912>
 8012b3e:	f1c0 0320 	rsb	r3, r0, #32
 8012b42:	2b04      	cmp	r3, #4
 8012b44:	dd73      	ble.n	8012c2e <_dtoa_r+0x8fe>
 8012b46:	f1c0 001c 	rsb	r0, r0, #28
 8012b4a:	9b00      	ldr	r3, [sp, #0]
 8012b4c:	4403      	add	r3, r0
 8012b4e:	4406      	add	r6, r0
 8012b50:	9300      	str	r3, [sp, #0]
 8012b52:	9b06      	ldr	r3, [sp, #24]
 8012b54:	4403      	add	r3, r0
 8012b56:	9306      	str	r3, [sp, #24]
 8012b58:	9b00      	ldr	r3, [sp, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	dd05      	ble.n	8012b6a <_dtoa_r+0x83a>
 8012b5e:	461a      	mov	r2, r3
 8012b60:	9902      	ldr	r1, [sp, #8]
 8012b62:	4648      	mov	r0, r9
 8012b64:	f000 fd0a 	bl	801357c <__lshift>
 8012b68:	9002      	str	r0, [sp, #8]
 8012b6a:	9b06      	ldr	r3, [sp, #24]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	dd05      	ble.n	8012b7c <_dtoa_r+0x84c>
 8012b70:	4621      	mov	r1, r4
 8012b72:	461a      	mov	r2, r3
 8012b74:	4648      	mov	r0, r9
 8012b76:	f000 fd01 	bl	801357c <__lshift>
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d061      	beq.n	8012c46 <_dtoa_r+0x916>
 8012b82:	4621      	mov	r1, r4
 8012b84:	9802      	ldr	r0, [sp, #8]
 8012b86:	f000 fd65 	bl	8013654 <__mcmp>
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	da5b      	bge.n	8012c46 <_dtoa_r+0x916>
 8012b8e:	2300      	movs	r3, #0
 8012b90:	220a      	movs	r2, #10
 8012b92:	9902      	ldr	r1, [sp, #8]
 8012b94:	4648      	mov	r0, r9
 8012b96:	f000 faff 	bl	8013198 <__multadd>
 8012b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b9c:	f107 38ff 	add.w	r8, r7, #4294967295
 8012ba0:	9002      	str	r0, [sp, #8]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f000 8178 	beq.w	8012e98 <_dtoa_r+0xb68>
 8012ba8:	4629      	mov	r1, r5
 8012baa:	2300      	movs	r3, #0
 8012bac:	220a      	movs	r2, #10
 8012bae:	4648      	mov	r0, r9
 8012bb0:	f000 faf2 	bl	8013198 <__multadd>
 8012bb4:	f1bb 0f00 	cmp.w	fp, #0
 8012bb8:	4605      	mov	r5, r0
 8012bba:	dc6f      	bgt.n	8012c9c <_dtoa_r+0x96c>
 8012bbc:	9b07      	ldr	r3, [sp, #28]
 8012bbe:	2b02      	cmp	r3, #2
 8012bc0:	dc49      	bgt.n	8012c56 <_dtoa_r+0x926>
 8012bc2:	e06b      	b.n	8012c9c <_dtoa_r+0x96c>
 8012bc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012bc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012bca:	e73c      	b.n	8012a46 <_dtoa_r+0x716>
 8012bcc:	3fe00000 	.word	0x3fe00000
 8012bd0:	40240000 	.word	0x40240000
 8012bd4:	9b03      	ldr	r3, [sp, #12]
 8012bd6:	1e5c      	subs	r4, r3, #1
 8012bd8:	9b08      	ldr	r3, [sp, #32]
 8012bda:	42a3      	cmp	r3, r4
 8012bdc:	db09      	blt.n	8012bf2 <_dtoa_r+0x8c2>
 8012bde:	1b1c      	subs	r4, r3, r4
 8012be0:	9b03      	ldr	r3, [sp, #12]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f6bf af30 	bge.w	8012a48 <_dtoa_r+0x718>
 8012be8:	9b00      	ldr	r3, [sp, #0]
 8012bea:	9a03      	ldr	r2, [sp, #12]
 8012bec:	1a9e      	subs	r6, r3, r2
 8012bee:	2300      	movs	r3, #0
 8012bf0:	e72b      	b.n	8012a4a <_dtoa_r+0x71a>
 8012bf2:	9b08      	ldr	r3, [sp, #32]
 8012bf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012bf6:	1ae3      	subs	r3, r4, r3
 8012bf8:	9408      	str	r4, [sp, #32]
 8012bfa:	9e00      	ldr	r6, [sp, #0]
 8012bfc:	2400      	movs	r4, #0
 8012bfe:	441a      	add	r2, r3
 8012c00:	9b03      	ldr	r3, [sp, #12]
 8012c02:	920d      	str	r2, [sp, #52]	@ 0x34
 8012c04:	e721      	b.n	8012a4a <_dtoa_r+0x71a>
 8012c06:	9c08      	ldr	r4, [sp, #32]
 8012c08:	9e00      	ldr	r6, [sp, #0]
 8012c0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012c0c:	e728      	b.n	8012a60 <_dtoa_r+0x730>
 8012c0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012c12:	e751      	b.n	8012ab8 <_dtoa_r+0x788>
 8012c14:	9a08      	ldr	r2, [sp, #32]
 8012c16:	9902      	ldr	r1, [sp, #8]
 8012c18:	e750      	b.n	8012abc <_dtoa_r+0x78c>
 8012c1a:	f8cd 8008 	str.w	r8, [sp, #8]
 8012c1e:	e751      	b.n	8012ac4 <_dtoa_r+0x794>
 8012c20:	2300      	movs	r3, #0
 8012c22:	e779      	b.n	8012b18 <_dtoa_r+0x7e8>
 8012c24:	9b04      	ldr	r3, [sp, #16]
 8012c26:	e777      	b.n	8012b18 <_dtoa_r+0x7e8>
 8012c28:	2300      	movs	r3, #0
 8012c2a:	9308      	str	r3, [sp, #32]
 8012c2c:	e779      	b.n	8012b22 <_dtoa_r+0x7f2>
 8012c2e:	d093      	beq.n	8012b58 <_dtoa_r+0x828>
 8012c30:	331c      	adds	r3, #28
 8012c32:	9a00      	ldr	r2, [sp, #0]
 8012c34:	441a      	add	r2, r3
 8012c36:	441e      	add	r6, r3
 8012c38:	9200      	str	r2, [sp, #0]
 8012c3a:	9a06      	ldr	r2, [sp, #24]
 8012c3c:	441a      	add	r2, r3
 8012c3e:	9206      	str	r2, [sp, #24]
 8012c40:	e78a      	b.n	8012b58 <_dtoa_r+0x828>
 8012c42:	4603      	mov	r3, r0
 8012c44:	e7f4      	b.n	8012c30 <_dtoa_r+0x900>
 8012c46:	9b03      	ldr	r3, [sp, #12]
 8012c48:	46b8      	mov	r8, r7
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	dc20      	bgt.n	8012c90 <_dtoa_r+0x960>
 8012c4e:	469b      	mov	fp, r3
 8012c50:	9b07      	ldr	r3, [sp, #28]
 8012c52:	2b02      	cmp	r3, #2
 8012c54:	dd1e      	ble.n	8012c94 <_dtoa_r+0x964>
 8012c56:	f1bb 0f00 	cmp.w	fp, #0
 8012c5a:	f47f adb1 	bne.w	80127c0 <_dtoa_r+0x490>
 8012c5e:	4621      	mov	r1, r4
 8012c60:	465b      	mov	r3, fp
 8012c62:	2205      	movs	r2, #5
 8012c64:	4648      	mov	r0, r9
 8012c66:	f000 fa97 	bl	8013198 <__multadd>
 8012c6a:	4601      	mov	r1, r0
 8012c6c:	4604      	mov	r4, r0
 8012c6e:	9802      	ldr	r0, [sp, #8]
 8012c70:	f000 fcf0 	bl	8013654 <__mcmp>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	f77f ada3 	ble.w	80127c0 <_dtoa_r+0x490>
 8012c7a:	4656      	mov	r6, sl
 8012c7c:	2331      	movs	r3, #49	@ 0x31
 8012c7e:	f108 0801 	add.w	r8, r8, #1
 8012c82:	f806 3b01 	strb.w	r3, [r6], #1
 8012c86:	e59f      	b.n	80127c8 <_dtoa_r+0x498>
 8012c88:	46b8      	mov	r8, r7
 8012c8a:	9c03      	ldr	r4, [sp, #12]
 8012c8c:	4625      	mov	r5, r4
 8012c8e:	e7f4      	b.n	8012c7a <_dtoa_r+0x94a>
 8012c90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	f000 8102 	beq.w	8012ea0 <_dtoa_r+0xb70>
 8012c9c:	2e00      	cmp	r6, #0
 8012c9e:	dd05      	ble.n	8012cac <_dtoa_r+0x97c>
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	4632      	mov	r2, r6
 8012ca4:	4648      	mov	r0, r9
 8012ca6:	f000 fc69 	bl	801357c <__lshift>
 8012caa:	4605      	mov	r5, r0
 8012cac:	9b08      	ldr	r3, [sp, #32]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d05c      	beq.n	8012d6c <_dtoa_r+0xa3c>
 8012cb2:	6869      	ldr	r1, [r5, #4]
 8012cb4:	4648      	mov	r0, r9
 8012cb6:	f000 fa0d 	bl	80130d4 <_Balloc>
 8012cba:	4606      	mov	r6, r0
 8012cbc:	b928      	cbnz	r0, 8012cca <_dtoa_r+0x99a>
 8012cbe:	4b83      	ldr	r3, [pc, #524]	@ (8012ecc <_dtoa_r+0xb9c>)
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012cc6:	f7ff bb4a 	b.w	801235e <_dtoa_r+0x2e>
 8012cca:	692a      	ldr	r2, [r5, #16]
 8012ccc:	f105 010c 	add.w	r1, r5, #12
 8012cd0:	300c      	adds	r0, #12
 8012cd2:	3202      	adds	r2, #2
 8012cd4:	0092      	lsls	r2, r2, #2
 8012cd6:	f002 f93f 	bl	8014f58 <memcpy>
 8012cda:	2201      	movs	r2, #1
 8012cdc:	4631      	mov	r1, r6
 8012cde:	4648      	mov	r0, r9
 8012ce0:	f000 fc4c 	bl	801357c <__lshift>
 8012ce4:	f10a 0301 	add.w	r3, sl, #1
 8012ce8:	462f      	mov	r7, r5
 8012cea:	4605      	mov	r5, r0
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	eb0a 030b 	add.w	r3, sl, fp
 8012cf2:	9308      	str	r3, [sp, #32]
 8012cf4:	9b04      	ldr	r3, [sp, #16]
 8012cf6:	f003 0301 	and.w	r3, r3, #1
 8012cfa:	9306      	str	r3, [sp, #24]
 8012cfc:	9b00      	ldr	r3, [sp, #0]
 8012cfe:	4621      	mov	r1, r4
 8012d00:	9802      	ldr	r0, [sp, #8]
 8012d02:	f103 3bff 	add.w	fp, r3, #4294967295
 8012d06:	f7ff fa83 	bl	8012210 <quorem>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	4639      	mov	r1, r7
 8012d0e:	9003      	str	r0, [sp, #12]
 8012d10:	3330      	adds	r3, #48	@ 0x30
 8012d12:	9802      	ldr	r0, [sp, #8]
 8012d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d16:	f000 fc9d 	bl	8013654 <__mcmp>
 8012d1a:	462a      	mov	r2, r5
 8012d1c:	9004      	str	r0, [sp, #16]
 8012d1e:	4621      	mov	r1, r4
 8012d20:	4648      	mov	r0, r9
 8012d22:	f000 fcb3 	bl	801368c <__mdiff>
 8012d26:	68c2      	ldr	r2, [r0, #12]
 8012d28:	4606      	mov	r6, r0
 8012d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d2c:	bb02      	cbnz	r2, 8012d70 <_dtoa_r+0xa40>
 8012d2e:	4601      	mov	r1, r0
 8012d30:	9802      	ldr	r0, [sp, #8]
 8012d32:	f000 fc8f 	bl	8013654 <__mcmp>
 8012d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d38:	4602      	mov	r2, r0
 8012d3a:	4631      	mov	r1, r6
 8012d3c:	4648      	mov	r0, r9
 8012d3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d42:	f000 fa07 	bl	8013154 <_Bfree>
 8012d46:	9b07      	ldr	r3, [sp, #28]
 8012d48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012d4a:	9e00      	ldr	r6, [sp, #0]
 8012d4c:	ea42 0103 	orr.w	r1, r2, r3
 8012d50:	9b06      	ldr	r3, [sp, #24]
 8012d52:	4319      	orrs	r1, r3
 8012d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d56:	d10d      	bne.n	8012d74 <_dtoa_r+0xa44>
 8012d58:	2b39      	cmp	r3, #57	@ 0x39
 8012d5a:	d027      	beq.n	8012dac <_dtoa_r+0xa7c>
 8012d5c:	9a04      	ldr	r2, [sp, #16]
 8012d5e:	2a00      	cmp	r2, #0
 8012d60:	dd01      	ble.n	8012d66 <_dtoa_r+0xa36>
 8012d62:	9b03      	ldr	r3, [sp, #12]
 8012d64:	3331      	adds	r3, #49	@ 0x31
 8012d66:	f88b 3000 	strb.w	r3, [fp]
 8012d6a:	e52e      	b.n	80127ca <_dtoa_r+0x49a>
 8012d6c:	4628      	mov	r0, r5
 8012d6e:	e7b9      	b.n	8012ce4 <_dtoa_r+0x9b4>
 8012d70:	2201      	movs	r2, #1
 8012d72:	e7e2      	b.n	8012d3a <_dtoa_r+0xa0a>
 8012d74:	9904      	ldr	r1, [sp, #16]
 8012d76:	2900      	cmp	r1, #0
 8012d78:	db04      	blt.n	8012d84 <_dtoa_r+0xa54>
 8012d7a:	9807      	ldr	r0, [sp, #28]
 8012d7c:	4301      	orrs	r1, r0
 8012d7e:	9806      	ldr	r0, [sp, #24]
 8012d80:	4301      	orrs	r1, r0
 8012d82:	d120      	bne.n	8012dc6 <_dtoa_r+0xa96>
 8012d84:	2a00      	cmp	r2, #0
 8012d86:	ddee      	ble.n	8012d66 <_dtoa_r+0xa36>
 8012d88:	2201      	movs	r2, #1
 8012d8a:	9902      	ldr	r1, [sp, #8]
 8012d8c:	4648      	mov	r0, r9
 8012d8e:	9300      	str	r3, [sp, #0]
 8012d90:	f000 fbf4 	bl	801357c <__lshift>
 8012d94:	4621      	mov	r1, r4
 8012d96:	9002      	str	r0, [sp, #8]
 8012d98:	f000 fc5c 	bl	8013654 <__mcmp>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	9b00      	ldr	r3, [sp, #0]
 8012da0:	dc02      	bgt.n	8012da8 <_dtoa_r+0xa78>
 8012da2:	d1e0      	bne.n	8012d66 <_dtoa_r+0xa36>
 8012da4:	07da      	lsls	r2, r3, #31
 8012da6:	d5de      	bpl.n	8012d66 <_dtoa_r+0xa36>
 8012da8:	2b39      	cmp	r3, #57	@ 0x39
 8012daa:	d1da      	bne.n	8012d62 <_dtoa_r+0xa32>
 8012dac:	2339      	movs	r3, #57	@ 0x39
 8012dae:	f88b 3000 	strb.w	r3, [fp]
 8012db2:	4633      	mov	r3, r6
 8012db4:	461e      	mov	r6, r3
 8012db6:	3b01      	subs	r3, #1
 8012db8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012dbc:	2a39      	cmp	r2, #57	@ 0x39
 8012dbe:	d04f      	beq.n	8012e60 <_dtoa_r+0xb30>
 8012dc0:	3201      	adds	r2, #1
 8012dc2:	701a      	strb	r2, [r3, #0]
 8012dc4:	e501      	b.n	80127ca <_dtoa_r+0x49a>
 8012dc6:	2a00      	cmp	r2, #0
 8012dc8:	dd03      	ble.n	8012dd2 <_dtoa_r+0xaa2>
 8012dca:	2b39      	cmp	r3, #57	@ 0x39
 8012dcc:	d0ee      	beq.n	8012dac <_dtoa_r+0xa7c>
 8012dce:	3301      	adds	r3, #1
 8012dd0:	e7c9      	b.n	8012d66 <_dtoa_r+0xa36>
 8012dd2:	9a00      	ldr	r2, [sp, #0]
 8012dd4:	9908      	ldr	r1, [sp, #32]
 8012dd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012dda:	428a      	cmp	r2, r1
 8012ddc:	d029      	beq.n	8012e32 <_dtoa_r+0xb02>
 8012dde:	2300      	movs	r3, #0
 8012de0:	220a      	movs	r2, #10
 8012de2:	9902      	ldr	r1, [sp, #8]
 8012de4:	4648      	mov	r0, r9
 8012de6:	f000 f9d7 	bl	8013198 <__multadd>
 8012dea:	42af      	cmp	r7, r5
 8012dec:	9002      	str	r0, [sp, #8]
 8012dee:	f04f 0300 	mov.w	r3, #0
 8012df2:	f04f 020a 	mov.w	r2, #10
 8012df6:	4639      	mov	r1, r7
 8012df8:	4648      	mov	r0, r9
 8012dfa:	d107      	bne.n	8012e0c <_dtoa_r+0xadc>
 8012dfc:	f000 f9cc 	bl	8013198 <__multadd>
 8012e00:	4607      	mov	r7, r0
 8012e02:	4605      	mov	r5, r0
 8012e04:	9b00      	ldr	r3, [sp, #0]
 8012e06:	3301      	adds	r3, #1
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	e777      	b.n	8012cfc <_dtoa_r+0x9cc>
 8012e0c:	f000 f9c4 	bl	8013198 <__multadd>
 8012e10:	4629      	mov	r1, r5
 8012e12:	4607      	mov	r7, r0
 8012e14:	2300      	movs	r3, #0
 8012e16:	220a      	movs	r2, #10
 8012e18:	4648      	mov	r0, r9
 8012e1a:	f000 f9bd 	bl	8013198 <__multadd>
 8012e1e:	4605      	mov	r5, r0
 8012e20:	e7f0      	b.n	8012e04 <_dtoa_r+0xad4>
 8012e22:	f1bb 0f00 	cmp.w	fp, #0
 8012e26:	f04f 0700 	mov.w	r7, #0
 8012e2a:	bfcc      	ite	gt
 8012e2c:	465e      	movgt	r6, fp
 8012e2e:	2601      	movle	r6, #1
 8012e30:	4456      	add	r6, sl
 8012e32:	2201      	movs	r2, #1
 8012e34:	9902      	ldr	r1, [sp, #8]
 8012e36:	4648      	mov	r0, r9
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	f000 fb9f 	bl	801357c <__lshift>
 8012e3e:	4621      	mov	r1, r4
 8012e40:	9002      	str	r0, [sp, #8]
 8012e42:	f000 fc07 	bl	8013654 <__mcmp>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	dcb3      	bgt.n	8012db2 <_dtoa_r+0xa82>
 8012e4a:	d102      	bne.n	8012e52 <_dtoa_r+0xb22>
 8012e4c:	9b00      	ldr	r3, [sp, #0]
 8012e4e:	07db      	lsls	r3, r3, #31
 8012e50:	d4af      	bmi.n	8012db2 <_dtoa_r+0xa82>
 8012e52:	4633      	mov	r3, r6
 8012e54:	461e      	mov	r6, r3
 8012e56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e5a:	2a30      	cmp	r2, #48	@ 0x30
 8012e5c:	d0fa      	beq.n	8012e54 <_dtoa_r+0xb24>
 8012e5e:	e4b4      	b.n	80127ca <_dtoa_r+0x49a>
 8012e60:	459a      	cmp	sl, r3
 8012e62:	d1a7      	bne.n	8012db4 <_dtoa_r+0xa84>
 8012e64:	2331      	movs	r3, #49	@ 0x31
 8012e66:	f108 0801 	add.w	r8, r8, #1
 8012e6a:	f88a 3000 	strb.w	r3, [sl]
 8012e6e:	e4ac      	b.n	80127ca <_dtoa_r+0x49a>
 8012e70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012e72:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012ed0 <_dtoa_r+0xba0>
 8012e76:	b11b      	cbz	r3, 8012e80 <_dtoa_r+0xb50>
 8012e78:	f10a 0308 	add.w	r3, sl, #8
 8012e7c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012e7e:	6013      	str	r3, [r2, #0]
 8012e80:	4650      	mov	r0, sl
 8012e82:	b017      	add	sp, #92	@ 0x5c
 8012e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e88:	9b07      	ldr	r3, [sp, #28]
 8012e8a:	2b01      	cmp	r3, #1
 8012e8c:	f77f ae2d 	ble.w	8012aea <_dtoa_r+0x7ba>
 8012e90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e92:	9308      	str	r3, [sp, #32]
 8012e94:	2001      	movs	r0, #1
 8012e96:	e64c      	b.n	8012b32 <_dtoa_r+0x802>
 8012e98:	f1bb 0f00 	cmp.w	fp, #0
 8012e9c:	f77f aed8 	ble.w	8012c50 <_dtoa_r+0x920>
 8012ea0:	4656      	mov	r6, sl
 8012ea2:	4621      	mov	r1, r4
 8012ea4:	9802      	ldr	r0, [sp, #8]
 8012ea6:	f7ff f9b3 	bl	8012210 <quorem>
 8012eaa:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8012eae:	f806 3b01 	strb.w	r3, [r6], #1
 8012eb2:	eba6 020a 	sub.w	r2, r6, sl
 8012eb6:	4593      	cmp	fp, r2
 8012eb8:	ddb3      	ble.n	8012e22 <_dtoa_r+0xaf2>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	220a      	movs	r2, #10
 8012ebe:	9902      	ldr	r1, [sp, #8]
 8012ec0:	4648      	mov	r0, r9
 8012ec2:	f000 f969 	bl	8013198 <__multadd>
 8012ec6:	9002      	str	r0, [sp, #8]
 8012ec8:	e7eb      	b.n	8012ea2 <_dtoa_r+0xb72>
 8012eca:	bf00      	nop
 8012ecc:	08015a8d 	.word	0x08015a8d
 8012ed0:	08015a11 	.word	0x08015a11

08012ed4 <_free_r>:
 8012ed4:	b538      	push	{r3, r4, r5, lr}
 8012ed6:	4605      	mov	r5, r0
 8012ed8:	2900      	cmp	r1, #0
 8012eda:	d041      	beq.n	8012f60 <_free_r+0x8c>
 8012edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ee0:	1f0c      	subs	r4, r1, #4
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	bfb8      	it	lt
 8012ee6:	18e4      	addlt	r4, r4, r3
 8012ee8:	f000 f8e8 	bl	80130bc <__malloc_lock>
 8012eec:	4a1d      	ldr	r2, [pc, #116]	@ (8012f64 <_free_r+0x90>)
 8012eee:	6813      	ldr	r3, [r2, #0]
 8012ef0:	b933      	cbnz	r3, 8012f00 <_free_r+0x2c>
 8012ef2:	6063      	str	r3, [r4, #4]
 8012ef4:	6014      	str	r4, [r2, #0]
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012efc:	f000 b8e4 	b.w	80130c8 <__malloc_unlock>
 8012f00:	42a3      	cmp	r3, r4
 8012f02:	d908      	bls.n	8012f16 <_free_r+0x42>
 8012f04:	6820      	ldr	r0, [r4, #0]
 8012f06:	1821      	adds	r1, r4, r0
 8012f08:	428b      	cmp	r3, r1
 8012f0a:	bf01      	itttt	eq
 8012f0c:	6819      	ldreq	r1, [r3, #0]
 8012f0e:	685b      	ldreq	r3, [r3, #4]
 8012f10:	1809      	addeq	r1, r1, r0
 8012f12:	6021      	streq	r1, [r4, #0]
 8012f14:	e7ed      	b.n	8012ef2 <_free_r+0x1e>
 8012f16:	461a      	mov	r2, r3
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	b10b      	cbz	r3, 8012f20 <_free_r+0x4c>
 8012f1c:	42a3      	cmp	r3, r4
 8012f1e:	d9fa      	bls.n	8012f16 <_free_r+0x42>
 8012f20:	6811      	ldr	r1, [r2, #0]
 8012f22:	1850      	adds	r0, r2, r1
 8012f24:	42a0      	cmp	r0, r4
 8012f26:	d10b      	bne.n	8012f40 <_free_r+0x6c>
 8012f28:	6820      	ldr	r0, [r4, #0]
 8012f2a:	4401      	add	r1, r0
 8012f2c:	1850      	adds	r0, r2, r1
 8012f2e:	6011      	str	r1, [r2, #0]
 8012f30:	4283      	cmp	r3, r0
 8012f32:	d1e0      	bne.n	8012ef6 <_free_r+0x22>
 8012f34:	6818      	ldr	r0, [r3, #0]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	4408      	add	r0, r1
 8012f3a:	6053      	str	r3, [r2, #4]
 8012f3c:	6010      	str	r0, [r2, #0]
 8012f3e:	e7da      	b.n	8012ef6 <_free_r+0x22>
 8012f40:	d902      	bls.n	8012f48 <_free_r+0x74>
 8012f42:	230c      	movs	r3, #12
 8012f44:	602b      	str	r3, [r5, #0]
 8012f46:	e7d6      	b.n	8012ef6 <_free_r+0x22>
 8012f48:	6820      	ldr	r0, [r4, #0]
 8012f4a:	1821      	adds	r1, r4, r0
 8012f4c:	428b      	cmp	r3, r1
 8012f4e:	bf02      	ittt	eq
 8012f50:	6819      	ldreq	r1, [r3, #0]
 8012f52:	685b      	ldreq	r3, [r3, #4]
 8012f54:	1809      	addeq	r1, r1, r0
 8012f56:	6063      	str	r3, [r4, #4]
 8012f58:	bf08      	it	eq
 8012f5a:	6021      	streq	r1, [r4, #0]
 8012f5c:	6054      	str	r4, [r2, #4]
 8012f5e:	e7ca      	b.n	8012ef6 <_free_r+0x22>
 8012f60:	bd38      	pop	{r3, r4, r5, pc}
 8012f62:	bf00      	nop
 8012f64:	20000a30 	.word	0x20000a30

08012f68 <malloc>:
 8012f68:	4b02      	ldr	r3, [pc, #8]	@ (8012f74 <malloc+0xc>)
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	f000 b825 	b.w	8012fbc <_malloc_r>
 8012f72:	bf00      	nop
 8012f74:	2000017c 	.word	0x2000017c

08012f78 <sbrk_aligned>:
 8012f78:	b570      	push	{r4, r5, r6, lr}
 8012f7a:	4e0f      	ldr	r6, [pc, #60]	@ (8012fb8 <sbrk_aligned+0x40>)
 8012f7c:	460c      	mov	r4, r1
 8012f7e:	4605      	mov	r5, r0
 8012f80:	6831      	ldr	r1, [r6, #0]
 8012f82:	b911      	cbnz	r1, 8012f8a <sbrk_aligned+0x12>
 8012f84:	f001 ffd8 	bl	8014f38 <_sbrk_r>
 8012f88:	6030      	str	r0, [r6, #0]
 8012f8a:	4621      	mov	r1, r4
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	f001 ffd3 	bl	8014f38 <_sbrk_r>
 8012f92:	1c43      	adds	r3, r0, #1
 8012f94:	d103      	bne.n	8012f9e <sbrk_aligned+0x26>
 8012f96:	f04f 34ff 	mov.w	r4, #4294967295
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	bd70      	pop	{r4, r5, r6, pc}
 8012f9e:	1cc4      	adds	r4, r0, #3
 8012fa0:	f024 0403 	bic.w	r4, r4, #3
 8012fa4:	42a0      	cmp	r0, r4
 8012fa6:	d0f8      	beq.n	8012f9a <sbrk_aligned+0x22>
 8012fa8:	1a21      	subs	r1, r4, r0
 8012faa:	4628      	mov	r0, r5
 8012fac:	f001 ffc4 	bl	8014f38 <_sbrk_r>
 8012fb0:	3001      	adds	r0, #1
 8012fb2:	d1f2      	bne.n	8012f9a <sbrk_aligned+0x22>
 8012fb4:	e7ef      	b.n	8012f96 <sbrk_aligned+0x1e>
 8012fb6:	bf00      	nop
 8012fb8:	20000a2c 	.word	0x20000a2c

08012fbc <_malloc_r>:
 8012fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fc0:	1ccd      	adds	r5, r1, #3
 8012fc2:	4606      	mov	r6, r0
 8012fc4:	f025 0503 	bic.w	r5, r5, #3
 8012fc8:	3508      	adds	r5, #8
 8012fca:	2d0c      	cmp	r5, #12
 8012fcc:	bf38      	it	cc
 8012fce:	250c      	movcc	r5, #12
 8012fd0:	2d00      	cmp	r5, #0
 8012fd2:	db01      	blt.n	8012fd8 <_malloc_r+0x1c>
 8012fd4:	42a9      	cmp	r1, r5
 8012fd6:	d904      	bls.n	8012fe2 <_malloc_r+0x26>
 8012fd8:	230c      	movs	r3, #12
 8012fda:	6033      	str	r3, [r6, #0]
 8012fdc:	2000      	movs	r0, #0
 8012fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80130b8 <_malloc_r+0xfc>
 8012fe6:	f000 f869 	bl	80130bc <__malloc_lock>
 8012fea:	f8d8 3000 	ldr.w	r3, [r8]
 8012fee:	461c      	mov	r4, r3
 8012ff0:	bb44      	cbnz	r4, 8013044 <_malloc_r+0x88>
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	f7ff ffbf 	bl	8012f78 <sbrk_aligned>
 8012ffa:	1c43      	adds	r3, r0, #1
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	d158      	bne.n	80130b2 <_malloc_r+0xf6>
 8013000:	f8d8 4000 	ldr.w	r4, [r8]
 8013004:	4627      	mov	r7, r4
 8013006:	2f00      	cmp	r7, #0
 8013008:	d143      	bne.n	8013092 <_malloc_r+0xd6>
 801300a:	2c00      	cmp	r4, #0
 801300c:	d04b      	beq.n	80130a6 <_malloc_r+0xea>
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	4639      	mov	r1, r7
 8013012:	4630      	mov	r0, r6
 8013014:	eb04 0903 	add.w	r9, r4, r3
 8013018:	f001 ff8e 	bl	8014f38 <_sbrk_r>
 801301c:	4581      	cmp	r9, r0
 801301e:	d142      	bne.n	80130a6 <_malloc_r+0xea>
 8013020:	6821      	ldr	r1, [r4, #0]
 8013022:	4630      	mov	r0, r6
 8013024:	1a6d      	subs	r5, r5, r1
 8013026:	4629      	mov	r1, r5
 8013028:	f7ff ffa6 	bl	8012f78 <sbrk_aligned>
 801302c:	3001      	adds	r0, #1
 801302e:	d03a      	beq.n	80130a6 <_malloc_r+0xea>
 8013030:	6823      	ldr	r3, [r4, #0]
 8013032:	442b      	add	r3, r5
 8013034:	6023      	str	r3, [r4, #0]
 8013036:	f8d8 3000 	ldr.w	r3, [r8]
 801303a:	685a      	ldr	r2, [r3, #4]
 801303c:	bb62      	cbnz	r2, 8013098 <_malloc_r+0xdc>
 801303e:	f8c8 7000 	str.w	r7, [r8]
 8013042:	e00f      	b.n	8013064 <_malloc_r+0xa8>
 8013044:	6822      	ldr	r2, [r4, #0]
 8013046:	1b52      	subs	r2, r2, r5
 8013048:	d420      	bmi.n	801308c <_malloc_r+0xd0>
 801304a:	2a0b      	cmp	r2, #11
 801304c:	d917      	bls.n	801307e <_malloc_r+0xc2>
 801304e:	1961      	adds	r1, r4, r5
 8013050:	42a3      	cmp	r3, r4
 8013052:	6025      	str	r5, [r4, #0]
 8013054:	bf18      	it	ne
 8013056:	6059      	strne	r1, [r3, #4]
 8013058:	6863      	ldr	r3, [r4, #4]
 801305a:	bf08      	it	eq
 801305c:	f8c8 1000 	streq.w	r1, [r8]
 8013060:	5162      	str	r2, [r4, r5]
 8013062:	604b      	str	r3, [r1, #4]
 8013064:	4630      	mov	r0, r6
 8013066:	f000 f82f 	bl	80130c8 <__malloc_unlock>
 801306a:	f104 000b 	add.w	r0, r4, #11
 801306e:	1d23      	adds	r3, r4, #4
 8013070:	f020 0007 	bic.w	r0, r0, #7
 8013074:	1ac2      	subs	r2, r0, r3
 8013076:	bf1c      	itt	ne
 8013078:	1a1b      	subne	r3, r3, r0
 801307a:	50a3      	strne	r3, [r4, r2]
 801307c:	e7af      	b.n	8012fde <_malloc_r+0x22>
 801307e:	6862      	ldr	r2, [r4, #4]
 8013080:	42a3      	cmp	r3, r4
 8013082:	bf0c      	ite	eq
 8013084:	f8c8 2000 	streq.w	r2, [r8]
 8013088:	605a      	strne	r2, [r3, #4]
 801308a:	e7eb      	b.n	8013064 <_malloc_r+0xa8>
 801308c:	4623      	mov	r3, r4
 801308e:	6864      	ldr	r4, [r4, #4]
 8013090:	e7ae      	b.n	8012ff0 <_malloc_r+0x34>
 8013092:	463c      	mov	r4, r7
 8013094:	687f      	ldr	r7, [r7, #4]
 8013096:	e7b6      	b.n	8013006 <_malloc_r+0x4a>
 8013098:	461a      	mov	r2, r3
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	42a3      	cmp	r3, r4
 801309e:	d1fb      	bne.n	8013098 <_malloc_r+0xdc>
 80130a0:	2300      	movs	r3, #0
 80130a2:	6053      	str	r3, [r2, #4]
 80130a4:	e7de      	b.n	8013064 <_malloc_r+0xa8>
 80130a6:	230c      	movs	r3, #12
 80130a8:	4630      	mov	r0, r6
 80130aa:	6033      	str	r3, [r6, #0]
 80130ac:	f000 f80c 	bl	80130c8 <__malloc_unlock>
 80130b0:	e794      	b.n	8012fdc <_malloc_r+0x20>
 80130b2:	6005      	str	r5, [r0, #0]
 80130b4:	e7d6      	b.n	8013064 <_malloc_r+0xa8>
 80130b6:	bf00      	nop
 80130b8:	20000a30 	.word	0x20000a30

080130bc <__malloc_lock>:
 80130bc:	4801      	ldr	r0, [pc, #4]	@ (80130c4 <__malloc_lock+0x8>)
 80130be:	f7ff b890 	b.w	80121e2 <__retarget_lock_acquire_recursive>
 80130c2:	bf00      	nop
 80130c4:	20000a28 	.word	0x20000a28

080130c8 <__malloc_unlock>:
 80130c8:	4801      	ldr	r0, [pc, #4]	@ (80130d0 <__malloc_unlock+0x8>)
 80130ca:	f7ff b88b 	b.w	80121e4 <__retarget_lock_release_recursive>
 80130ce:	bf00      	nop
 80130d0:	20000a28 	.word	0x20000a28

080130d4 <_Balloc>:
 80130d4:	b570      	push	{r4, r5, r6, lr}
 80130d6:	69c6      	ldr	r6, [r0, #28]
 80130d8:	4604      	mov	r4, r0
 80130da:	460d      	mov	r5, r1
 80130dc:	b976      	cbnz	r6, 80130fc <_Balloc+0x28>
 80130de:	2010      	movs	r0, #16
 80130e0:	f7ff ff42 	bl	8012f68 <malloc>
 80130e4:	4602      	mov	r2, r0
 80130e6:	61e0      	str	r0, [r4, #28]
 80130e8:	b920      	cbnz	r0, 80130f4 <_Balloc+0x20>
 80130ea:	4b18      	ldr	r3, [pc, #96]	@ (801314c <_Balloc+0x78>)
 80130ec:	216b      	movs	r1, #107	@ 0x6b
 80130ee:	4818      	ldr	r0, [pc, #96]	@ (8013150 <_Balloc+0x7c>)
 80130f0:	f001 ff4a 	bl	8014f88 <__assert_func>
 80130f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130f8:	6006      	str	r6, [r0, #0]
 80130fa:	60c6      	str	r6, [r0, #12]
 80130fc:	69e6      	ldr	r6, [r4, #28]
 80130fe:	68f3      	ldr	r3, [r6, #12]
 8013100:	b183      	cbz	r3, 8013124 <_Balloc+0x50>
 8013102:	69e3      	ldr	r3, [r4, #28]
 8013104:	68db      	ldr	r3, [r3, #12]
 8013106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801310a:	b9b8      	cbnz	r0, 801313c <_Balloc+0x68>
 801310c:	2101      	movs	r1, #1
 801310e:	4620      	mov	r0, r4
 8013110:	fa01 f605 	lsl.w	r6, r1, r5
 8013114:	1d72      	adds	r2, r6, #5
 8013116:	0092      	lsls	r2, r2, #2
 8013118:	f001 ff54 	bl	8014fc4 <_calloc_r>
 801311c:	b160      	cbz	r0, 8013138 <_Balloc+0x64>
 801311e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013122:	e00e      	b.n	8013142 <_Balloc+0x6e>
 8013124:	2221      	movs	r2, #33	@ 0x21
 8013126:	2104      	movs	r1, #4
 8013128:	4620      	mov	r0, r4
 801312a:	f001 ff4b 	bl	8014fc4 <_calloc_r>
 801312e:	69e3      	ldr	r3, [r4, #28]
 8013130:	60f0      	str	r0, [r6, #12]
 8013132:	68db      	ldr	r3, [r3, #12]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d1e4      	bne.n	8013102 <_Balloc+0x2e>
 8013138:	2000      	movs	r0, #0
 801313a:	bd70      	pop	{r4, r5, r6, pc}
 801313c:	6802      	ldr	r2, [r0, #0]
 801313e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013142:	2300      	movs	r3, #0
 8013144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013148:	e7f7      	b.n	801313a <_Balloc+0x66>
 801314a:	bf00      	nop
 801314c:	08015a1e 	.word	0x08015a1e
 8013150:	08015a9e 	.word	0x08015a9e

08013154 <_Bfree>:
 8013154:	b570      	push	{r4, r5, r6, lr}
 8013156:	69c6      	ldr	r6, [r0, #28]
 8013158:	4605      	mov	r5, r0
 801315a:	460c      	mov	r4, r1
 801315c:	b976      	cbnz	r6, 801317c <_Bfree+0x28>
 801315e:	2010      	movs	r0, #16
 8013160:	f7ff ff02 	bl	8012f68 <malloc>
 8013164:	4602      	mov	r2, r0
 8013166:	61e8      	str	r0, [r5, #28]
 8013168:	b920      	cbnz	r0, 8013174 <_Bfree+0x20>
 801316a:	4b09      	ldr	r3, [pc, #36]	@ (8013190 <_Bfree+0x3c>)
 801316c:	218f      	movs	r1, #143	@ 0x8f
 801316e:	4809      	ldr	r0, [pc, #36]	@ (8013194 <_Bfree+0x40>)
 8013170:	f001 ff0a 	bl	8014f88 <__assert_func>
 8013174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013178:	6006      	str	r6, [r0, #0]
 801317a:	60c6      	str	r6, [r0, #12]
 801317c:	b13c      	cbz	r4, 801318e <_Bfree+0x3a>
 801317e:	69eb      	ldr	r3, [r5, #28]
 8013180:	6862      	ldr	r2, [r4, #4]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013188:	6021      	str	r1, [r4, #0]
 801318a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801318e:	bd70      	pop	{r4, r5, r6, pc}
 8013190:	08015a1e 	.word	0x08015a1e
 8013194:	08015a9e 	.word	0x08015a9e

08013198 <__multadd>:
 8013198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801319c:	f101 0c14 	add.w	ip, r1, #20
 80131a0:	4607      	mov	r7, r0
 80131a2:	460c      	mov	r4, r1
 80131a4:	461e      	mov	r6, r3
 80131a6:	690d      	ldr	r5, [r1, #16]
 80131a8:	2000      	movs	r0, #0
 80131aa:	f8dc 3000 	ldr.w	r3, [ip]
 80131ae:	3001      	adds	r0, #1
 80131b0:	b299      	uxth	r1, r3
 80131b2:	4285      	cmp	r5, r0
 80131b4:	fb02 6101 	mla	r1, r2, r1, r6
 80131b8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131bc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80131c0:	b289      	uxth	r1, r1
 80131c2:	fb02 3306 	mla	r3, r2, r6, r3
 80131c6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80131ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131ce:	f84c 1b04 	str.w	r1, [ip], #4
 80131d2:	dcea      	bgt.n	80131aa <__multadd+0x12>
 80131d4:	b30e      	cbz	r6, 801321a <__multadd+0x82>
 80131d6:	68a3      	ldr	r3, [r4, #8]
 80131d8:	42ab      	cmp	r3, r5
 80131da:	dc19      	bgt.n	8013210 <__multadd+0x78>
 80131dc:	6861      	ldr	r1, [r4, #4]
 80131de:	4638      	mov	r0, r7
 80131e0:	3101      	adds	r1, #1
 80131e2:	f7ff ff77 	bl	80130d4 <_Balloc>
 80131e6:	4680      	mov	r8, r0
 80131e8:	b928      	cbnz	r0, 80131f6 <__multadd+0x5e>
 80131ea:	4602      	mov	r2, r0
 80131ec:	4b0c      	ldr	r3, [pc, #48]	@ (8013220 <__multadd+0x88>)
 80131ee:	21ba      	movs	r1, #186	@ 0xba
 80131f0:	480c      	ldr	r0, [pc, #48]	@ (8013224 <__multadd+0x8c>)
 80131f2:	f001 fec9 	bl	8014f88 <__assert_func>
 80131f6:	6922      	ldr	r2, [r4, #16]
 80131f8:	f104 010c 	add.w	r1, r4, #12
 80131fc:	300c      	adds	r0, #12
 80131fe:	3202      	adds	r2, #2
 8013200:	0092      	lsls	r2, r2, #2
 8013202:	f001 fea9 	bl	8014f58 <memcpy>
 8013206:	4621      	mov	r1, r4
 8013208:	4644      	mov	r4, r8
 801320a:	4638      	mov	r0, r7
 801320c:	f7ff ffa2 	bl	8013154 <_Bfree>
 8013210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013214:	3501      	adds	r5, #1
 8013216:	615e      	str	r6, [r3, #20]
 8013218:	6125      	str	r5, [r4, #16]
 801321a:	4620      	mov	r0, r4
 801321c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013220:	08015a8d 	.word	0x08015a8d
 8013224:	08015a9e 	.word	0x08015a9e

08013228 <__s2b>:
 8013228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801322c:	4615      	mov	r5, r2
 801322e:	461f      	mov	r7, r3
 8013230:	2209      	movs	r2, #9
 8013232:	3308      	adds	r3, #8
 8013234:	460c      	mov	r4, r1
 8013236:	4606      	mov	r6, r0
 8013238:	2100      	movs	r1, #0
 801323a:	fb93 f3f2 	sdiv	r3, r3, r2
 801323e:	2201      	movs	r2, #1
 8013240:	429a      	cmp	r2, r3
 8013242:	db09      	blt.n	8013258 <__s2b+0x30>
 8013244:	4630      	mov	r0, r6
 8013246:	f7ff ff45 	bl	80130d4 <_Balloc>
 801324a:	b940      	cbnz	r0, 801325e <__s2b+0x36>
 801324c:	4602      	mov	r2, r0
 801324e:	4b19      	ldr	r3, [pc, #100]	@ (80132b4 <__s2b+0x8c>)
 8013250:	21d3      	movs	r1, #211	@ 0xd3
 8013252:	4819      	ldr	r0, [pc, #100]	@ (80132b8 <__s2b+0x90>)
 8013254:	f001 fe98 	bl	8014f88 <__assert_func>
 8013258:	0052      	lsls	r2, r2, #1
 801325a:	3101      	adds	r1, #1
 801325c:	e7f0      	b.n	8013240 <__s2b+0x18>
 801325e:	9b08      	ldr	r3, [sp, #32]
 8013260:	2d09      	cmp	r5, #9
 8013262:	6143      	str	r3, [r0, #20]
 8013264:	f04f 0301 	mov.w	r3, #1
 8013268:	6103      	str	r3, [r0, #16]
 801326a:	dd16      	ble.n	801329a <__s2b+0x72>
 801326c:	f104 0909 	add.w	r9, r4, #9
 8013270:	442c      	add	r4, r5
 8013272:	46c8      	mov	r8, r9
 8013274:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013278:	4601      	mov	r1, r0
 801327a:	220a      	movs	r2, #10
 801327c:	4630      	mov	r0, r6
 801327e:	3b30      	subs	r3, #48	@ 0x30
 8013280:	f7ff ff8a 	bl	8013198 <__multadd>
 8013284:	45a0      	cmp	r8, r4
 8013286:	d1f5      	bne.n	8013274 <__s2b+0x4c>
 8013288:	f1a5 0408 	sub.w	r4, r5, #8
 801328c:	444c      	add	r4, r9
 801328e:	1b2d      	subs	r5, r5, r4
 8013290:	1963      	adds	r3, r4, r5
 8013292:	42bb      	cmp	r3, r7
 8013294:	db04      	blt.n	80132a0 <__s2b+0x78>
 8013296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801329a:	340a      	adds	r4, #10
 801329c:	2509      	movs	r5, #9
 801329e:	e7f6      	b.n	801328e <__s2b+0x66>
 80132a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80132a4:	4601      	mov	r1, r0
 80132a6:	220a      	movs	r2, #10
 80132a8:	4630      	mov	r0, r6
 80132aa:	3b30      	subs	r3, #48	@ 0x30
 80132ac:	f7ff ff74 	bl	8013198 <__multadd>
 80132b0:	e7ee      	b.n	8013290 <__s2b+0x68>
 80132b2:	bf00      	nop
 80132b4:	08015a8d 	.word	0x08015a8d
 80132b8:	08015a9e 	.word	0x08015a9e

080132bc <__hi0bits>:
 80132bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80132c0:	4603      	mov	r3, r0
 80132c2:	bf36      	itet	cc
 80132c4:	0403      	lslcc	r3, r0, #16
 80132c6:	2000      	movcs	r0, #0
 80132c8:	2010      	movcc	r0, #16
 80132ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80132ce:	bf3c      	itt	cc
 80132d0:	021b      	lslcc	r3, r3, #8
 80132d2:	3008      	addcc	r0, #8
 80132d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80132d8:	bf3c      	itt	cc
 80132da:	011b      	lslcc	r3, r3, #4
 80132dc:	3004      	addcc	r0, #4
 80132de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80132e2:	bf3c      	itt	cc
 80132e4:	009b      	lslcc	r3, r3, #2
 80132e6:	3002      	addcc	r0, #2
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	db05      	blt.n	80132f8 <__hi0bits+0x3c>
 80132ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80132f0:	f100 0001 	add.w	r0, r0, #1
 80132f4:	bf08      	it	eq
 80132f6:	2020      	moveq	r0, #32
 80132f8:	4770      	bx	lr

080132fa <__lo0bits>:
 80132fa:	6803      	ldr	r3, [r0, #0]
 80132fc:	4602      	mov	r2, r0
 80132fe:	f013 0007 	ands.w	r0, r3, #7
 8013302:	d00b      	beq.n	801331c <__lo0bits+0x22>
 8013304:	07d9      	lsls	r1, r3, #31
 8013306:	d421      	bmi.n	801334c <__lo0bits+0x52>
 8013308:	0798      	lsls	r0, r3, #30
 801330a:	bf47      	ittee	mi
 801330c:	085b      	lsrmi	r3, r3, #1
 801330e:	2001      	movmi	r0, #1
 8013310:	089b      	lsrpl	r3, r3, #2
 8013312:	2002      	movpl	r0, #2
 8013314:	bf4c      	ite	mi
 8013316:	6013      	strmi	r3, [r2, #0]
 8013318:	6013      	strpl	r3, [r2, #0]
 801331a:	4770      	bx	lr
 801331c:	b299      	uxth	r1, r3
 801331e:	b909      	cbnz	r1, 8013324 <__lo0bits+0x2a>
 8013320:	0c1b      	lsrs	r3, r3, #16
 8013322:	2010      	movs	r0, #16
 8013324:	b2d9      	uxtb	r1, r3
 8013326:	b909      	cbnz	r1, 801332c <__lo0bits+0x32>
 8013328:	3008      	adds	r0, #8
 801332a:	0a1b      	lsrs	r3, r3, #8
 801332c:	0719      	lsls	r1, r3, #28
 801332e:	bf04      	itt	eq
 8013330:	091b      	lsreq	r3, r3, #4
 8013332:	3004      	addeq	r0, #4
 8013334:	0799      	lsls	r1, r3, #30
 8013336:	bf04      	itt	eq
 8013338:	089b      	lsreq	r3, r3, #2
 801333a:	3002      	addeq	r0, #2
 801333c:	07d9      	lsls	r1, r3, #31
 801333e:	d403      	bmi.n	8013348 <__lo0bits+0x4e>
 8013340:	085b      	lsrs	r3, r3, #1
 8013342:	f100 0001 	add.w	r0, r0, #1
 8013346:	d003      	beq.n	8013350 <__lo0bits+0x56>
 8013348:	6013      	str	r3, [r2, #0]
 801334a:	4770      	bx	lr
 801334c:	2000      	movs	r0, #0
 801334e:	4770      	bx	lr
 8013350:	2020      	movs	r0, #32
 8013352:	4770      	bx	lr

08013354 <__i2b>:
 8013354:	b510      	push	{r4, lr}
 8013356:	460c      	mov	r4, r1
 8013358:	2101      	movs	r1, #1
 801335a:	f7ff febb 	bl	80130d4 <_Balloc>
 801335e:	4602      	mov	r2, r0
 8013360:	b928      	cbnz	r0, 801336e <__i2b+0x1a>
 8013362:	4b05      	ldr	r3, [pc, #20]	@ (8013378 <__i2b+0x24>)
 8013364:	f240 1145 	movw	r1, #325	@ 0x145
 8013368:	4804      	ldr	r0, [pc, #16]	@ (801337c <__i2b+0x28>)
 801336a:	f001 fe0d 	bl	8014f88 <__assert_func>
 801336e:	2301      	movs	r3, #1
 8013370:	6144      	str	r4, [r0, #20]
 8013372:	6103      	str	r3, [r0, #16]
 8013374:	bd10      	pop	{r4, pc}
 8013376:	bf00      	nop
 8013378:	08015a8d 	.word	0x08015a8d
 801337c:	08015a9e 	.word	0x08015a9e

08013380 <__multiply>:
 8013380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013384:	4617      	mov	r7, r2
 8013386:	690a      	ldr	r2, [r1, #16]
 8013388:	4689      	mov	r9, r1
 801338a:	b085      	sub	sp, #20
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	429a      	cmp	r2, r3
 8013390:	bfa2      	ittt	ge
 8013392:	463b      	movge	r3, r7
 8013394:	460f      	movge	r7, r1
 8013396:	4699      	movge	r9, r3
 8013398:	693d      	ldr	r5, [r7, #16]
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80133a0:	6879      	ldr	r1, [r7, #4]
 80133a2:	eb05 060a 	add.w	r6, r5, sl
 80133a6:	42b3      	cmp	r3, r6
 80133a8:	bfb8      	it	lt
 80133aa:	3101      	addlt	r1, #1
 80133ac:	f7ff fe92 	bl	80130d4 <_Balloc>
 80133b0:	b930      	cbnz	r0, 80133c0 <__multiply+0x40>
 80133b2:	4602      	mov	r2, r0
 80133b4:	4b42      	ldr	r3, [pc, #264]	@ (80134c0 <__multiply+0x140>)
 80133b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80133ba:	4842      	ldr	r0, [pc, #264]	@ (80134c4 <__multiply+0x144>)
 80133bc:	f001 fde4 	bl	8014f88 <__assert_func>
 80133c0:	f100 0414 	add.w	r4, r0, #20
 80133c4:	2200      	movs	r2, #0
 80133c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80133ca:	4623      	mov	r3, r4
 80133cc:	4573      	cmp	r3, lr
 80133ce:	d320      	bcc.n	8013412 <__multiply+0x92>
 80133d0:	f107 0814 	add.w	r8, r7, #20
 80133d4:	f109 0114 	add.w	r1, r9, #20
 80133d8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80133dc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80133e0:	9302      	str	r3, [sp, #8]
 80133e2:	1beb      	subs	r3, r5, r7
 80133e4:	3715      	adds	r7, #21
 80133e6:	3b15      	subs	r3, #21
 80133e8:	f023 0303 	bic.w	r3, r3, #3
 80133ec:	3304      	adds	r3, #4
 80133ee:	42bd      	cmp	r5, r7
 80133f0:	bf38      	it	cc
 80133f2:	2304      	movcc	r3, #4
 80133f4:	9301      	str	r3, [sp, #4]
 80133f6:	9b02      	ldr	r3, [sp, #8]
 80133f8:	9103      	str	r1, [sp, #12]
 80133fa:	428b      	cmp	r3, r1
 80133fc:	d80c      	bhi.n	8013418 <__multiply+0x98>
 80133fe:	2e00      	cmp	r6, #0
 8013400:	dd03      	ble.n	801340a <__multiply+0x8a>
 8013402:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013406:	2b00      	cmp	r3, #0
 8013408:	d057      	beq.n	80134ba <__multiply+0x13a>
 801340a:	6106      	str	r6, [r0, #16]
 801340c:	b005      	add	sp, #20
 801340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013412:	f843 2b04 	str.w	r2, [r3], #4
 8013416:	e7d9      	b.n	80133cc <__multiply+0x4c>
 8013418:	f8b1 a000 	ldrh.w	sl, [r1]
 801341c:	f1ba 0f00 	cmp.w	sl, #0
 8013420:	d021      	beq.n	8013466 <__multiply+0xe6>
 8013422:	46c4      	mov	ip, r8
 8013424:	46a1      	mov	r9, r4
 8013426:	2700      	movs	r7, #0
 8013428:	f85c 2b04 	ldr.w	r2, [ip], #4
 801342c:	f8d9 3000 	ldr.w	r3, [r9]
 8013430:	fa1f fb82 	uxth.w	fp, r2
 8013434:	4565      	cmp	r5, ip
 8013436:	b29b      	uxth	r3, r3
 8013438:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801343c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013440:	443b      	add	r3, r7
 8013442:	f8d9 7000 	ldr.w	r7, [r9]
 8013446:	ea4f 4717 	mov.w	r7, r7, lsr #16
 801344a:	fb0a 7202 	mla	r2, sl, r2, r7
 801344e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013452:	b29b      	uxth	r3, r3
 8013454:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801345c:	f849 3b04 	str.w	r3, [r9], #4
 8013460:	d8e2      	bhi.n	8013428 <__multiply+0xa8>
 8013462:	9b01      	ldr	r3, [sp, #4]
 8013464:	50e7      	str	r7, [r4, r3]
 8013466:	9b03      	ldr	r3, [sp, #12]
 8013468:	3104      	adds	r1, #4
 801346a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801346e:	f1b9 0f00 	cmp.w	r9, #0
 8013472:	d020      	beq.n	80134b6 <__multiply+0x136>
 8013474:	6823      	ldr	r3, [r4, #0]
 8013476:	4647      	mov	r7, r8
 8013478:	46a4      	mov	ip, r4
 801347a:	f04f 0a00 	mov.w	sl, #0
 801347e:	f8b7 b000 	ldrh.w	fp, [r7]
 8013482:	b29b      	uxth	r3, r3
 8013484:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013488:	fb09 220b 	mla	r2, r9, fp, r2
 801348c:	4452      	add	r2, sl
 801348e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013492:	f84c 3b04 	str.w	r3, [ip], #4
 8013496:	f857 3b04 	ldr.w	r3, [r7], #4
 801349a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801349e:	f8bc 3000 	ldrh.w	r3, [ip]
 80134a2:	42bd      	cmp	r5, r7
 80134a4:	fb09 330a 	mla	r3, r9, sl, r3
 80134a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80134ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80134b0:	d8e5      	bhi.n	801347e <__multiply+0xfe>
 80134b2:	9a01      	ldr	r2, [sp, #4]
 80134b4:	50a3      	str	r3, [r4, r2]
 80134b6:	3404      	adds	r4, #4
 80134b8:	e79d      	b.n	80133f6 <__multiply+0x76>
 80134ba:	3e01      	subs	r6, #1
 80134bc:	e79f      	b.n	80133fe <__multiply+0x7e>
 80134be:	bf00      	nop
 80134c0:	08015a8d 	.word	0x08015a8d
 80134c4:	08015a9e 	.word	0x08015a9e

080134c8 <__pow5mult>:
 80134c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134cc:	4615      	mov	r5, r2
 80134ce:	f012 0203 	ands.w	r2, r2, #3
 80134d2:	4607      	mov	r7, r0
 80134d4:	460e      	mov	r6, r1
 80134d6:	d007      	beq.n	80134e8 <__pow5mult+0x20>
 80134d8:	3a01      	subs	r2, #1
 80134da:	4c25      	ldr	r4, [pc, #148]	@ (8013570 <__pow5mult+0xa8>)
 80134dc:	2300      	movs	r3, #0
 80134de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80134e2:	f7ff fe59 	bl	8013198 <__multadd>
 80134e6:	4606      	mov	r6, r0
 80134e8:	10ad      	asrs	r5, r5, #2
 80134ea:	d03d      	beq.n	8013568 <__pow5mult+0xa0>
 80134ec:	69fc      	ldr	r4, [r7, #28]
 80134ee:	b97c      	cbnz	r4, 8013510 <__pow5mult+0x48>
 80134f0:	2010      	movs	r0, #16
 80134f2:	f7ff fd39 	bl	8012f68 <malloc>
 80134f6:	4602      	mov	r2, r0
 80134f8:	61f8      	str	r0, [r7, #28]
 80134fa:	b928      	cbnz	r0, 8013508 <__pow5mult+0x40>
 80134fc:	4b1d      	ldr	r3, [pc, #116]	@ (8013574 <__pow5mult+0xac>)
 80134fe:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013502:	481d      	ldr	r0, [pc, #116]	@ (8013578 <__pow5mult+0xb0>)
 8013504:	f001 fd40 	bl	8014f88 <__assert_func>
 8013508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801350c:	6004      	str	r4, [r0, #0]
 801350e:	60c4      	str	r4, [r0, #12]
 8013510:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013518:	b94c      	cbnz	r4, 801352e <__pow5mult+0x66>
 801351a:	f240 2171 	movw	r1, #625	@ 0x271
 801351e:	4638      	mov	r0, r7
 8013520:	f7ff ff18 	bl	8013354 <__i2b>
 8013524:	2300      	movs	r3, #0
 8013526:	4604      	mov	r4, r0
 8013528:	f8c8 0008 	str.w	r0, [r8, #8]
 801352c:	6003      	str	r3, [r0, #0]
 801352e:	f04f 0900 	mov.w	r9, #0
 8013532:	07eb      	lsls	r3, r5, #31
 8013534:	d50a      	bpl.n	801354c <__pow5mult+0x84>
 8013536:	4631      	mov	r1, r6
 8013538:	4622      	mov	r2, r4
 801353a:	4638      	mov	r0, r7
 801353c:	f7ff ff20 	bl	8013380 <__multiply>
 8013540:	4680      	mov	r8, r0
 8013542:	4631      	mov	r1, r6
 8013544:	4638      	mov	r0, r7
 8013546:	4646      	mov	r6, r8
 8013548:	f7ff fe04 	bl	8013154 <_Bfree>
 801354c:	106d      	asrs	r5, r5, #1
 801354e:	d00b      	beq.n	8013568 <__pow5mult+0xa0>
 8013550:	6820      	ldr	r0, [r4, #0]
 8013552:	b938      	cbnz	r0, 8013564 <__pow5mult+0x9c>
 8013554:	4622      	mov	r2, r4
 8013556:	4621      	mov	r1, r4
 8013558:	4638      	mov	r0, r7
 801355a:	f7ff ff11 	bl	8013380 <__multiply>
 801355e:	6020      	str	r0, [r4, #0]
 8013560:	f8c0 9000 	str.w	r9, [r0]
 8013564:	4604      	mov	r4, r0
 8013566:	e7e4      	b.n	8013532 <__pow5mult+0x6a>
 8013568:	4630      	mov	r0, r6
 801356a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801356e:	bf00      	nop
 8013570:	08015bb0 	.word	0x08015bb0
 8013574:	08015a1e 	.word	0x08015a1e
 8013578:	08015a9e 	.word	0x08015a9e

0801357c <__lshift>:
 801357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013580:	460c      	mov	r4, r1
 8013582:	4607      	mov	r7, r0
 8013584:	4691      	mov	r9, r2
 8013586:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801358a:	6923      	ldr	r3, [r4, #16]
 801358c:	6849      	ldr	r1, [r1, #4]
 801358e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013592:	68a3      	ldr	r3, [r4, #8]
 8013594:	f108 0601 	add.w	r6, r8, #1
 8013598:	42b3      	cmp	r3, r6
 801359a:	db0b      	blt.n	80135b4 <__lshift+0x38>
 801359c:	4638      	mov	r0, r7
 801359e:	f7ff fd99 	bl	80130d4 <_Balloc>
 80135a2:	4605      	mov	r5, r0
 80135a4:	b948      	cbnz	r0, 80135ba <__lshift+0x3e>
 80135a6:	4602      	mov	r2, r0
 80135a8:	4b28      	ldr	r3, [pc, #160]	@ (801364c <__lshift+0xd0>)
 80135aa:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80135ae:	4828      	ldr	r0, [pc, #160]	@ (8013650 <__lshift+0xd4>)
 80135b0:	f001 fcea 	bl	8014f88 <__assert_func>
 80135b4:	3101      	adds	r1, #1
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	e7ee      	b.n	8013598 <__lshift+0x1c>
 80135ba:	2300      	movs	r3, #0
 80135bc:	f100 0114 	add.w	r1, r0, #20
 80135c0:	f100 0210 	add.w	r2, r0, #16
 80135c4:	4618      	mov	r0, r3
 80135c6:	4553      	cmp	r3, sl
 80135c8:	db33      	blt.n	8013632 <__lshift+0xb6>
 80135ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80135ce:	f104 0314 	add.w	r3, r4, #20
 80135d2:	6920      	ldr	r0, [r4, #16]
 80135d4:	f019 091f 	ands.w	r9, r9, #31
 80135d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80135dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80135e0:	d02b      	beq.n	801363a <__lshift+0xbe>
 80135e2:	f1c9 0e20 	rsb	lr, r9, #32
 80135e6:	468a      	mov	sl, r1
 80135e8:	2200      	movs	r2, #0
 80135ea:	6818      	ldr	r0, [r3, #0]
 80135ec:	fa00 f009 	lsl.w	r0, r0, r9
 80135f0:	4310      	orrs	r0, r2
 80135f2:	f84a 0b04 	str.w	r0, [sl], #4
 80135f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80135fa:	459c      	cmp	ip, r3
 80135fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8013600:	d8f3      	bhi.n	80135ea <__lshift+0x6e>
 8013602:	ebac 0304 	sub.w	r3, ip, r4
 8013606:	f104 0015 	add.w	r0, r4, #21
 801360a:	3b15      	subs	r3, #21
 801360c:	f023 0303 	bic.w	r3, r3, #3
 8013610:	3304      	adds	r3, #4
 8013612:	4560      	cmp	r0, ip
 8013614:	bf88      	it	hi
 8013616:	2304      	movhi	r3, #4
 8013618:	50ca      	str	r2, [r1, r3]
 801361a:	b10a      	cbz	r2, 8013620 <__lshift+0xa4>
 801361c:	f108 0602 	add.w	r6, r8, #2
 8013620:	3e01      	subs	r6, #1
 8013622:	4638      	mov	r0, r7
 8013624:	4621      	mov	r1, r4
 8013626:	612e      	str	r6, [r5, #16]
 8013628:	f7ff fd94 	bl	8013154 <_Bfree>
 801362c:	4628      	mov	r0, r5
 801362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013632:	3301      	adds	r3, #1
 8013634:	f842 0f04 	str.w	r0, [r2, #4]!
 8013638:	e7c5      	b.n	80135c6 <__lshift+0x4a>
 801363a:	3904      	subs	r1, #4
 801363c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013640:	459c      	cmp	ip, r3
 8013642:	f841 2f04 	str.w	r2, [r1, #4]!
 8013646:	d8f9      	bhi.n	801363c <__lshift+0xc0>
 8013648:	e7ea      	b.n	8013620 <__lshift+0xa4>
 801364a:	bf00      	nop
 801364c:	08015a8d 	.word	0x08015a8d
 8013650:	08015a9e 	.word	0x08015a9e

08013654 <__mcmp>:
 8013654:	4603      	mov	r3, r0
 8013656:	690a      	ldr	r2, [r1, #16]
 8013658:	6900      	ldr	r0, [r0, #16]
 801365a:	1a80      	subs	r0, r0, r2
 801365c:	b530      	push	{r4, r5, lr}
 801365e:	d10e      	bne.n	801367e <__mcmp+0x2a>
 8013660:	3314      	adds	r3, #20
 8013662:	3114      	adds	r1, #20
 8013664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801366c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013674:	4295      	cmp	r5, r2
 8013676:	d003      	beq.n	8013680 <__mcmp+0x2c>
 8013678:	d205      	bcs.n	8013686 <__mcmp+0x32>
 801367a:	f04f 30ff 	mov.w	r0, #4294967295
 801367e:	bd30      	pop	{r4, r5, pc}
 8013680:	42a3      	cmp	r3, r4
 8013682:	d3f3      	bcc.n	801366c <__mcmp+0x18>
 8013684:	e7fb      	b.n	801367e <__mcmp+0x2a>
 8013686:	2001      	movs	r0, #1
 8013688:	e7f9      	b.n	801367e <__mcmp+0x2a>
	...

0801368c <__mdiff>:
 801368c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013690:	4689      	mov	r9, r1
 8013692:	4606      	mov	r6, r0
 8013694:	4611      	mov	r1, r2
 8013696:	4614      	mov	r4, r2
 8013698:	4648      	mov	r0, r9
 801369a:	f7ff ffdb 	bl	8013654 <__mcmp>
 801369e:	1e05      	subs	r5, r0, #0
 80136a0:	d112      	bne.n	80136c8 <__mdiff+0x3c>
 80136a2:	4629      	mov	r1, r5
 80136a4:	4630      	mov	r0, r6
 80136a6:	f7ff fd15 	bl	80130d4 <_Balloc>
 80136aa:	4602      	mov	r2, r0
 80136ac:	b928      	cbnz	r0, 80136ba <__mdiff+0x2e>
 80136ae:	4b41      	ldr	r3, [pc, #260]	@ (80137b4 <__mdiff+0x128>)
 80136b0:	f240 2137 	movw	r1, #567	@ 0x237
 80136b4:	4840      	ldr	r0, [pc, #256]	@ (80137b8 <__mdiff+0x12c>)
 80136b6:	f001 fc67 	bl	8014f88 <__assert_func>
 80136ba:	2301      	movs	r3, #1
 80136bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80136c0:	4610      	mov	r0, r2
 80136c2:	b003      	add	sp, #12
 80136c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c8:	bfbc      	itt	lt
 80136ca:	464b      	movlt	r3, r9
 80136cc:	46a1      	movlt	r9, r4
 80136ce:	4630      	mov	r0, r6
 80136d0:	bfb8      	it	lt
 80136d2:	2501      	movlt	r5, #1
 80136d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80136d8:	bfb4      	ite	lt
 80136da:	461c      	movlt	r4, r3
 80136dc:	2500      	movge	r5, #0
 80136de:	f7ff fcf9 	bl	80130d4 <_Balloc>
 80136e2:	4602      	mov	r2, r0
 80136e4:	b918      	cbnz	r0, 80136ee <__mdiff+0x62>
 80136e6:	4b33      	ldr	r3, [pc, #204]	@ (80137b4 <__mdiff+0x128>)
 80136e8:	f240 2145 	movw	r1, #581	@ 0x245
 80136ec:	e7e2      	b.n	80136b4 <__mdiff+0x28>
 80136ee:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80136f2:	f104 0e14 	add.w	lr, r4, #20
 80136f6:	6926      	ldr	r6, [r4, #16]
 80136f8:	f100 0b14 	add.w	fp, r0, #20
 80136fc:	60c5      	str	r5, [r0, #12]
 80136fe:	f109 0514 	add.w	r5, r9, #20
 8013702:	f109 0310 	add.w	r3, r9, #16
 8013706:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801370a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801370e:	46d9      	mov	r9, fp
 8013710:	f04f 0c00 	mov.w	ip, #0
 8013714:	9301      	str	r3, [sp, #4]
 8013716:	9b01      	ldr	r3, [sp, #4]
 8013718:	f85e 0b04 	ldr.w	r0, [lr], #4
 801371c:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013720:	4576      	cmp	r6, lr
 8013722:	9301      	str	r3, [sp, #4]
 8013724:	fa1f f38a 	uxth.w	r3, sl
 8013728:	4619      	mov	r1, r3
 801372a:	b283      	uxth	r3, r0
 801372c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8013730:	eba1 0303 	sub.w	r3, r1, r3
 8013734:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013738:	4463      	add	r3, ip
 801373a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801373e:	b29b      	uxth	r3, r3
 8013740:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013748:	f849 3b04 	str.w	r3, [r9], #4
 801374c:	d8e3      	bhi.n	8013716 <__mdiff+0x8a>
 801374e:	1b33      	subs	r3, r6, r4
 8013750:	3415      	adds	r4, #21
 8013752:	3b15      	subs	r3, #21
 8013754:	f023 0303 	bic.w	r3, r3, #3
 8013758:	3304      	adds	r3, #4
 801375a:	42a6      	cmp	r6, r4
 801375c:	bf38      	it	cc
 801375e:	2304      	movcc	r3, #4
 8013760:	441d      	add	r5, r3
 8013762:	445b      	add	r3, fp
 8013764:	462c      	mov	r4, r5
 8013766:	461e      	mov	r6, r3
 8013768:	4544      	cmp	r4, r8
 801376a:	d30e      	bcc.n	801378a <__mdiff+0xfe>
 801376c:	f108 0103 	add.w	r1, r8, #3
 8013770:	1b49      	subs	r1, r1, r5
 8013772:	3d03      	subs	r5, #3
 8013774:	f021 0103 	bic.w	r1, r1, #3
 8013778:	45a8      	cmp	r8, r5
 801377a:	bf38      	it	cc
 801377c:	2100      	movcc	r1, #0
 801377e:	440b      	add	r3, r1
 8013780:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013784:	b199      	cbz	r1, 80137ae <__mdiff+0x122>
 8013786:	6117      	str	r7, [r2, #16]
 8013788:	e79a      	b.n	80136c0 <__mdiff+0x34>
 801378a:	f854 1b04 	ldr.w	r1, [r4], #4
 801378e:	46e6      	mov	lr, ip
 8013790:	fa1f fc81 	uxth.w	ip, r1
 8013794:	0c08      	lsrs	r0, r1, #16
 8013796:	4471      	add	r1, lr
 8013798:	44f4      	add	ip, lr
 801379a:	b289      	uxth	r1, r1
 801379c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80137a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80137a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80137a8:	f846 1b04 	str.w	r1, [r6], #4
 80137ac:	e7dc      	b.n	8013768 <__mdiff+0xdc>
 80137ae:	3f01      	subs	r7, #1
 80137b0:	e7e6      	b.n	8013780 <__mdiff+0xf4>
 80137b2:	bf00      	nop
 80137b4:	08015a8d 	.word	0x08015a8d
 80137b8:	08015a9e 	.word	0x08015a9e

080137bc <__ulp>:
 80137bc:	b082      	sub	sp, #8
 80137be:	4b11      	ldr	r3, [pc, #68]	@ (8013804 <__ulp+0x48>)
 80137c0:	ed8d 0b00 	vstr	d0, [sp]
 80137c4:	9a01      	ldr	r2, [sp, #4]
 80137c6:	4013      	ands	r3, r2
 80137c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	dc08      	bgt.n	80137e2 <__ulp+0x26>
 80137d0:	425b      	negs	r3, r3
 80137d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80137d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80137da:	da04      	bge.n	80137e6 <__ulp+0x2a>
 80137dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80137e0:	4113      	asrs	r3, r2
 80137e2:	2200      	movs	r2, #0
 80137e4:	e008      	b.n	80137f8 <__ulp+0x3c>
 80137e6:	f1a2 0314 	sub.w	r3, r2, #20
 80137ea:	2b1e      	cmp	r3, #30
 80137ec:	bfd6      	itet	le
 80137ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80137f2:	2201      	movgt	r2, #1
 80137f4:	40da      	lsrle	r2, r3
 80137f6:	2300      	movs	r3, #0
 80137f8:	4619      	mov	r1, r3
 80137fa:	4610      	mov	r0, r2
 80137fc:	ec41 0b10 	vmov	d0, r0, r1
 8013800:	b002      	add	sp, #8
 8013802:	4770      	bx	lr
 8013804:	7ff00000 	.word	0x7ff00000

08013808 <__b2d>:
 8013808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801380c:	6906      	ldr	r6, [r0, #16]
 801380e:	f100 0814 	add.w	r8, r0, #20
 8013812:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013816:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801381a:	1f37      	subs	r7, r6, #4
 801381c:	4610      	mov	r0, r2
 801381e:	f7ff fd4d 	bl	80132bc <__hi0bits>
 8013822:	f1c0 0320 	rsb	r3, r0, #32
 8013826:	280a      	cmp	r0, #10
 8013828:	600b      	str	r3, [r1, #0]
 801382a:	491d      	ldr	r1, [pc, #116]	@ (80138a0 <__b2d+0x98>)
 801382c:	dc16      	bgt.n	801385c <__b2d+0x54>
 801382e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013832:	45b8      	cmp	r8, r7
 8013834:	f100 0015 	add.w	r0, r0, #21
 8013838:	fa22 f30c 	lsr.w	r3, r2, ip
 801383c:	fa02 f000 	lsl.w	r0, r2, r0
 8013840:	ea43 0501 	orr.w	r5, r3, r1
 8013844:	bf34      	ite	cc
 8013846:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801384a:	2300      	movcs	r3, #0
 801384c:	fa23 f30c 	lsr.w	r3, r3, ip
 8013850:	4303      	orrs	r3, r0
 8013852:	461c      	mov	r4, r3
 8013854:	ec45 4b10 	vmov	d0, r4, r5
 8013858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801385c:	45b8      	cmp	r8, r7
 801385e:	bf3a      	itte	cc
 8013860:	f1a6 0708 	subcc.w	r7, r6, #8
 8013864:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013868:	2300      	movcs	r3, #0
 801386a:	380b      	subs	r0, #11
 801386c:	d014      	beq.n	8013898 <__b2d+0x90>
 801386e:	f1c0 0120 	rsb	r1, r0, #32
 8013872:	4082      	lsls	r2, r0
 8013874:	4547      	cmp	r7, r8
 8013876:	fa23 f401 	lsr.w	r4, r3, r1
 801387a:	fa03 f300 	lsl.w	r3, r3, r0
 801387e:	ea42 0204 	orr.w	r2, r2, r4
 8013882:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013886:	bf8c      	ite	hi
 8013888:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801388c:	2200      	movls	r2, #0
 801388e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013892:	40ca      	lsrs	r2, r1
 8013894:	4313      	orrs	r3, r2
 8013896:	e7dc      	b.n	8013852 <__b2d+0x4a>
 8013898:	ea42 0501 	orr.w	r5, r2, r1
 801389c:	e7d9      	b.n	8013852 <__b2d+0x4a>
 801389e:	bf00      	nop
 80138a0:	3ff00000 	.word	0x3ff00000

080138a4 <__d2b>:
 80138a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80138a8:	460f      	mov	r7, r1
 80138aa:	2101      	movs	r1, #1
 80138ac:	4616      	mov	r6, r2
 80138ae:	ec59 8b10 	vmov	r8, r9, d0
 80138b2:	f7ff fc0f 	bl	80130d4 <_Balloc>
 80138b6:	4604      	mov	r4, r0
 80138b8:	b930      	cbnz	r0, 80138c8 <__d2b+0x24>
 80138ba:	4602      	mov	r2, r0
 80138bc:	4b23      	ldr	r3, [pc, #140]	@ (801394c <__d2b+0xa8>)
 80138be:	f240 310f 	movw	r1, #783	@ 0x30f
 80138c2:	4823      	ldr	r0, [pc, #140]	@ (8013950 <__d2b+0xac>)
 80138c4:	f001 fb60 	bl	8014f88 <__assert_func>
 80138c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80138cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80138d0:	b10d      	cbz	r5, 80138d6 <__d2b+0x32>
 80138d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80138d6:	9301      	str	r3, [sp, #4]
 80138d8:	f1b8 0300 	subs.w	r3, r8, #0
 80138dc:	d023      	beq.n	8013926 <__d2b+0x82>
 80138de:	4668      	mov	r0, sp
 80138e0:	9300      	str	r3, [sp, #0]
 80138e2:	f7ff fd0a 	bl	80132fa <__lo0bits>
 80138e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80138ea:	b1d0      	cbz	r0, 8013922 <__d2b+0x7e>
 80138ec:	f1c0 0320 	rsb	r3, r0, #32
 80138f0:	fa02 f303 	lsl.w	r3, r2, r3
 80138f4:	40c2      	lsrs	r2, r0
 80138f6:	430b      	orrs	r3, r1
 80138f8:	9201      	str	r2, [sp, #4]
 80138fa:	6163      	str	r3, [r4, #20]
 80138fc:	9b01      	ldr	r3, [sp, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	61a3      	str	r3, [r4, #24]
 8013902:	bf0c      	ite	eq
 8013904:	2201      	moveq	r2, #1
 8013906:	2202      	movne	r2, #2
 8013908:	6122      	str	r2, [r4, #16]
 801390a:	b1a5      	cbz	r5, 8013936 <__d2b+0x92>
 801390c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013910:	4405      	add	r5, r0
 8013912:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013916:	603d      	str	r5, [r7, #0]
 8013918:	6030      	str	r0, [r6, #0]
 801391a:	4620      	mov	r0, r4
 801391c:	b003      	add	sp, #12
 801391e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013922:	6161      	str	r1, [r4, #20]
 8013924:	e7ea      	b.n	80138fc <__d2b+0x58>
 8013926:	a801      	add	r0, sp, #4
 8013928:	f7ff fce7 	bl	80132fa <__lo0bits>
 801392c:	9b01      	ldr	r3, [sp, #4]
 801392e:	3020      	adds	r0, #32
 8013930:	2201      	movs	r2, #1
 8013932:	6163      	str	r3, [r4, #20]
 8013934:	e7e8      	b.n	8013908 <__d2b+0x64>
 8013936:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801393a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801393e:	6038      	str	r0, [r7, #0]
 8013940:	6918      	ldr	r0, [r3, #16]
 8013942:	f7ff fcbb 	bl	80132bc <__hi0bits>
 8013946:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801394a:	e7e5      	b.n	8013918 <__d2b+0x74>
 801394c:	08015a8d 	.word	0x08015a8d
 8013950:	08015a9e 	.word	0x08015a9e

08013954 <__ratio>:
 8013954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013958:	b085      	sub	sp, #20
 801395a:	e9cd 1000 	strd	r1, r0, [sp]
 801395e:	a902      	add	r1, sp, #8
 8013960:	f7ff ff52 	bl	8013808 <__b2d>
 8013964:	a903      	add	r1, sp, #12
 8013966:	9800      	ldr	r0, [sp, #0]
 8013968:	ec55 4b10 	vmov	r4, r5, d0
 801396c:	f7ff ff4c 	bl	8013808 <__b2d>
 8013970:	9b01      	ldr	r3, [sp, #4]
 8013972:	462f      	mov	r7, r5
 8013974:	4620      	mov	r0, r4
 8013976:	6919      	ldr	r1, [r3, #16]
 8013978:	9b00      	ldr	r3, [sp, #0]
 801397a:	691b      	ldr	r3, [r3, #16]
 801397c:	1ac9      	subs	r1, r1, r3
 801397e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013982:	ec5b ab10 	vmov	sl, fp, d0
 8013986:	1a9b      	subs	r3, r3, r2
 8013988:	46d9      	mov	r9, fp
 801398a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801398e:	2b00      	cmp	r3, #0
 8013990:	bfcd      	iteet	gt
 8013992:	462a      	movgt	r2, r5
 8013994:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013998:	465a      	movle	r2, fp
 801399a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801399e:	bfd8      	it	le
 80139a0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80139a4:	4652      	mov	r2, sl
 80139a6:	4639      	mov	r1, r7
 80139a8:	464b      	mov	r3, r9
 80139aa:	f7ec ff53 	bl	8000854 <__aeabi_ddiv>
 80139ae:	ec41 0b10 	vmov	d0, r0, r1
 80139b2:	b005      	add	sp, #20
 80139b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080139b8 <__copybits>:
 80139b8:	3901      	subs	r1, #1
 80139ba:	f102 0314 	add.w	r3, r2, #20
 80139be:	1149      	asrs	r1, r1, #5
 80139c0:	b570      	push	{r4, r5, r6, lr}
 80139c2:	3101      	adds	r1, #1
 80139c4:	6914      	ldr	r4, [r2, #16]
 80139c6:	1f05      	subs	r5, r0, #4
 80139c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80139cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80139d0:	42a3      	cmp	r3, r4
 80139d2:	d30c      	bcc.n	80139ee <__copybits+0x36>
 80139d4:	1aa3      	subs	r3, r4, r2
 80139d6:	3211      	adds	r2, #17
 80139d8:	3b11      	subs	r3, #17
 80139da:	f023 0303 	bic.w	r3, r3, #3
 80139de:	42a2      	cmp	r2, r4
 80139e0:	bf88      	it	hi
 80139e2:	2300      	movhi	r3, #0
 80139e4:	4418      	add	r0, r3
 80139e6:	2300      	movs	r3, #0
 80139e8:	4288      	cmp	r0, r1
 80139ea:	d305      	bcc.n	80139f8 <__copybits+0x40>
 80139ec:	bd70      	pop	{r4, r5, r6, pc}
 80139ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80139f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80139f6:	e7eb      	b.n	80139d0 <__copybits+0x18>
 80139f8:	f840 3b04 	str.w	r3, [r0], #4
 80139fc:	e7f4      	b.n	80139e8 <__copybits+0x30>

080139fe <__any_on>:
 80139fe:	f100 0214 	add.w	r2, r0, #20
 8013a02:	114b      	asrs	r3, r1, #5
 8013a04:	6900      	ldr	r0, [r0, #16]
 8013a06:	4298      	cmp	r0, r3
 8013a08:	b510      	push	{r4, lr}
 8013a0a:	db11      	blt.n	8013a30 <__any_on+0x32>
 8013a0c:	dd0a      	ble.n	8013a24 <__any_on+0x26>
 8013a0e:	f011 011f 	ands.w	r1, r1, #31
 8013a12:	d007      	beq.n	8013a24 <__any_on+0x26>
 8013a14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013a18:	fa24 f001 	lsr.w	r0, r4, r1
 8013a1c:	fa00 f101 	lsl.w	r1, r0, r1
 8013a20:	428c      	cmp	r4, r1
 8013a22:	d10b      	bne.n	8013a3c <__any_on+0x3e>
 8013a24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d803      	bhi.n	8013a34 <__any_on+0x36>
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	bd10      	pop	{r4, pc}
 8013a30:	4603      	mov	r3, r0
 8013a32:	e7f7      	b.n	8013a24 <__any_on+0x26>
 8013a34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013a38:	2900      	cmp	r1, #0
 8013a3a:	d0f5      	beq.n	8013a28 <__any_on+0x2a>
 8013a3c:	2001      	movs	r0, #1
 8013a3e:	e7f6      	b.n	8013a2e <__any_on+0x30>

08013a40 <sulp>:
 8013a40:	b570      	push	{r4, r5, r6, lr}
 8013a42:	4604      	mov	r4, r0
 8013a44:	460d      	mov	r5, r1
 8013a46:	4616      	mov	r6, r2
 8013a48:	ec45 4b10 	vmov	d0, r4, r5
 8013a4c:	f7ff feb6 	bl	80137bc <__ulp>
 8013a50:	ec51 0b10 	vmov	r0, r1, d0
 8013a54:	b17e      	cbz	r6, 8013a76 <sulp+0x36>
 8013a56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013a5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	dd09      	ble.n	8013a76 <sulp+0x36>
 8013a62:	051b      	lsls	r3, r3, #20
 8013a64:	2400      	movs	r4, #0
 8013a66:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013a6a:	4622      	mov	r2, r4
 8013a6c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013a70:	462b      	mov	r3, r5
 8013a72:	f7ec fdc5 	bl	8000600 <__aeabi_dmul>
 8013a76:	ec41 0b10 	vmov	d0, r0, r1
 8013a7a:	bd70      	pop	{r4, r5, r6, pc}
 8013a7c:	0000      	movs	r0, r0
	...

08013a80 <_strtod_l>:
 8013a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a84:	b09f      	sub	sp, #124	@ 0x7c
 8013a86:	460c      	mov	r4, r1
 8013a88:	f04f 0a00 	mov.w	sl, #0
 8013a8c:	f04f 0b00 	mov.w	fp, #0
 8013a90:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013a92:	2200      	movs	r2, #0
 8013a94:	9005      	str	r0, [sp, #20]
 8013a96:	921a      	str	r2, [sp, #104]	@ 0x68
 8013a98:	460a      	mov	r2, r1
 8013a9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a9c:	7811      	ldrb	r1, [r2, #0]
 8013a9e:	292b      	cmp	r1, #43	@ 0x2b
 8013aa0:	d04a      	beq.n	8013b38 <_strtod_l+0xb8>
 8013aa2:	d838      	bhi.n	8013b16 <_strtod_l+0x96>
 8013aa4:	290d      	cmp	r1, #13
 8013aa6:	d832      	bhi.n	8013b0e <_strtod_l+0x8e>
 8013aa8:	2908      	cmp	r1, #8
 8013aaa:	d832      	bhi.n	8013b12 <_strtod_l+0x92>
 8013aac:	2900      	cmp	r1, #0
 8013aae:	d03b      	beq.n	8013b28 <_strtod_l+0xa8>
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	920e      	str	r2, [sp, #56]	@ 0x38
 8013ab4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013ab6:	782a      	ldrb	r2, [r5, #0]
 8013ab8:	2a30      	cmp	r2, #48	@ 0x30
 8013aba:	f040 80b2 	bne.w	8013c22 <_strtod_l+0x1a2>
 8013abe:	786a      	ldrb	r2, [r5, #1]
 8013ac0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013ac4:	2a58      	cmp	r2, #88	@ 0x58
 8013ac6:	d16e      	bne.n	8013ba6 <_strtod_l+0x126>
 8013ac8:	9302      	str	r3, [sp, #8]
 8013aca:	a919      	add	r1, sp, #100	@ 0x64
 8013acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ace:	4a90      	ldr	r2, [pc, #576]	@ (8013d10 <_strtod_l+0x290>)
 8013ad0:	9301      	str	r3, [sp, #4]
 8013ad2:	ab1a      	add	r3, sp, #104	@ 0x68
 8013ad4:	9805      	ldr	r0, [sp, #20]
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013ada:	f001 faed 	bl	80150b8 <__gethex>
 8013ade:	f010 060f 	ands.w	r6, r0, #15
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	d005      	beq.n	8013af2 <_strtod_l+0x72>
 8013ae6:	2e06      	cmp	r6, #6
 8013ae8:	d128      	bne.n	8013b3c <_strtod_l+0xbc>
 8013aea:	3501      	adds	r5, #1
 8013aec:	2300      	movs	r3, #0
 8013aee:	9519      	str	r5, [sp, #100]	@ 0x64
 8013af0:	930e      	str	r3, [sp, #56]	@ 0x38
 8013af2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f040 858e 	bne.w	8014616 <_strtod_l+0xb96>
 8013afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013afc:	b1cb      	cbz	r3, 8013b32 <_strtod_l+0xb2>
 8013afe:	4652      	mov	r2, sl
 8013b00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013b04:	ec43 2b10 	vmov	d0, r2, r3
 8013b08:	b01f      	add	sp, #124	@ 0x7c
 8013b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0e:	2920      	cmp	r1, #32
 8013b10:	d1ce      	bne.n	8013ab0 <_strtod_l+0x30>
 8013b12:	3201      	adds	r2, #1
 8013b14:	e7c1      	b.n	8013a9a <_strtod_l+0x1a>
 8013b16:	292d      	cmp	r1, #45	@ 0x2d
 8013b18:	d1ca      	bne.n	8013ab0 <_strtod_l+0x30>
 8013b1a:	2101      	movs	r1, #1
 8013b1c:	910e      	str	r1, [sp, #56]	@ 0x38
 8013b1e:	1c51      	adds	r1, r2, #1
 8013b20:	9119      	str	r1, [sp, #100]	@ 0x64
 8013b22:	7852      	ldrb	r2, [r2, #1]
 8013b24:	2a00      	cmp	r2, #0
 8013b26:	d1c5      	bne.n	8013ab4 <_strtod_l+0x34>
 8013b28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013b2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	f040 8570 	bne.w	8014612 <_strtod_l+0xb92>
 8013b32:	4652      	mov	r2, sl
 8013b34:	465b      	mov	r3, fp
 8013b36:	e7e5      	b.n	8013b04 <_strtod_l+0x84>
 8013b38:	2100      	movs	r1, #0
 8013b3a:	e7ef      	b.n	8013b1c <_strtod_l+0x9c>
 8013b3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013b3e:	b13a      	cbz	r2, 8013b50 <_strtod_l+0xd0>
 8013b40:	2135      	movs	r1, #53	@ 0x35
 8013b42:	a81c      	add	r0, sp, #112	@ 0x70
 8013b44:	f7ff ff38 	bl	80139b8 <__copybits>
 8013b48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013b4a:	9805      	ldr	r0, [sp, #20]
 8013b4c:	f7ff fb02 	bl	8013154 <_Bfree>
 8013b50:	3e01      	subs	r6, #1
 8013b52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013b54:	2e04      	cmp	r6, #4
 8013b56:	d806      	bhi.n	8013b66 <_strtod_l+0xe6>
 8013b58:	e8df f006 	tbb	[pc, r6]
 8013b5c:	201d0314 	.word	0x201d0314
 8013b60:	14          	.byte	0x14
 8013b61:	00          	.byte	0x00
 8013b62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013b66:	05e1      	lsls	r1, r4, #23
 8013b68:	bf48      	it	mi
 8013b6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013b6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013b72:	0d1b      	lsrs	r3, r3, #20
 8013b74:	051b      	lsls	r3, r3, #20
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d1bb      	bne.n	8013af2 <_strtod_l+0x72>
 8013b7a:	f7fe fb07 	bl	801218c <__errno>
 8013b7e:	2322      	movs	r3, #34	@ 0x22
 8013b80:	6003      	str	r3, [r0, #0]
 8013b82:	e7b6      	b.n	8013af2 <_strtod_l+0x72>
 8013b84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013b88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013b8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013b90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013b94:	e7e7      	b.n	8013b66 <_strtod_l+0xe6>
 8013b96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013d18 <_strtod_l+0x298>
 8013b9a:	e7e4      	b.n	8013b66 <_strtod_l+0xe6>
 8013b9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013ba0:	f04f 3aff 	mov.w	sl, #4294967295
 8013ba4:	e7df      	b.n	8013b66 <_strtod_l+0xe6>
 8013ba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ba8:	1c5a      	adds	r2, r3, #1
 8013baa:	9219      	str	r2, [sp, #100]	@ 0x64
 8013bac:	785b      	ldrb	r3, [r3, #1]
 8013bae:	2b30      	cmp	r3, #48	@ 0x30
 8013bb0:	d0f9      	beq.n	8013ba6 <_strtod_l+0x126>
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d09d      	beq.n	8013af2 <_strtod_l+0x72>
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	2700      	movs	r7, #0
 8013bba:	9308      	str	r3, [sp, #32]
 8013bbc:	220a      	movs	r2, #10
 8013bbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bc0:	46b9      	mov	r9, r7
 8013bc2:	970b      	str	r7, [sp, #44]	@ 0x2c
 8013bc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8013bc6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013bc8:	7805      	ldrb	r5, [r0, #0]
 8013bca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013bce:	b2d9      	uxtb	r1, r3
 8013bd0:	2909      	cmp	r1, #9
 8013bd2:	d928      	bls.n	8013c26 <_strtod_l+0x1a6>
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	494f      	ldr	r1, [pc, #316]	@ (8013d14 <_strtod_l+0x294>)
 8013bd8:	f001 f979 	bl	8014ece <strncmp>
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d032      	beq.n	8013c46 <_strtod_l+0x1c6>
 8013be0:	2000      	movs	r0, #0
 8013be2:	462a      	mov	r2, r5
 8013be4:	464d      	mov	r5, r9
 8013be6:	4603      	mov	r3, r0
 8013be8:	900a      	str	r0, [sp, #40]	@ 0x28
 8013bea:	2a65      	cmp	r2, #101	@ 0x65
 8013bec:	d001      	beq.n	8013bf2 <_strtod_l+0x172>
 8013bee:	2a45      	cmp	r2, #69	@ 0x45
 8013bf0:	d114      	bne.n	8013c1c <_strtod_l+0x19c>
 8013bf2:	b91d      	cbnz	r5, 8013bfc <_strtod_l+0x17c>
 8013bf4:	9a08      	ldr	r2, [sp, #32]
 8013bf6:	4302      	orrs	r2, r0
 8013bf8:	d096      	beq.n	8013b28 <_strtod_l+0xa8>
 8013bfa:	2500      	movs	r5, #0
 8013bfc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013bfe:	1c62      	adds	r2, r4, #1
 8013c00:	9219      	str	r2, [sp, #100]	@ 0x64
 8013c02:	7862      	ldrb	r2, [r4, #1]
 8013c04:	2a2b      	cmp	r2, #43	@ 0x2b
 8013c06:	d079      	beq.n	8013cfc <_strtod_l+0x27c>
 8013c08:	2a2d      	cmp	r2, #45	@ 0x2d
 8013c0a:	d07d      	beq.n	8013d08 <_strtod_l+0x288>
 8013c0c:	f04f 0c00 	mov.w	ip, #0
 8013c10:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013c14:	2909      	cmp	r1, #9
 8013c16:	f240 8085 	bls.w	8013d24 <_strtod_l+0x2a4>
 8013c1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8013c1c:	f04f 0800 	mov.w	r8, #0
 8013c20:	e0a5      	b.n	8013d6e <_strtod_l+0x2ee>
 8013c22:	2300      	movs	r3, #0
 8013c24:	e7c8      	b.n	8013bb8 <_strtod_l+0x138>
 8013c26:	f1b9 0f08 	cmp.w	r9, #8
 8013c2a:	f100 0001 	add.w	r0, r0, #1
 8013c2e:	f109 0901 	add.w	r9, r9, #1
 8013c32:	bfd4      	ite	le
 8013c34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8013c36:	fb02 3707 	mlagt	r7, r2, r7, r3
 8013c3a:	9019      	str	r0, [sp, #100]	@ 0x64
 8013c3c:	bfdc      	itt	le
 8013c3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8013c42:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8013c44:	e7bf      	b.n	8013bc6 <_strtod_l+0x146>
 8013c46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c48:	1c5a      	adds	r2, r3, #1
 8013c4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8013c4c:	785a      	ldrb	r2, [r3, #1]
 8013c4e:	f1b9 0f00 	cmp.w	r9, #0
 8013c52:	d03a      	beq.n	8013cca <_strtod_l+0x24a>
 8013c54:	464d      	mov	r5, r9
 8013c56:	900a      	str	r0, [sp, #40]	@ 0x28
 8013c58:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013c5c:	2b09      	cmp	r3, #9
 8013c5e:	d912      	bls.n	8013c86 <_strtod_l+0x206>
 8013c60:	2301      	movs	r3, #1
 8013c62:	e7c2      	b.n	8013bea <_strtod_l+0x16a>
 8013c64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c66:	3001      	adds	r0, #1
 8013c68:	1c5a      	adds	r2, r3, #1
 8013c6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8013c6c:	785a      	ldrb	r2, [r3, #1]
 8013c6e:	2a30      	cmp	r2, #48	@ 0x30
 8013c70:	d0f8      	beq.n	8013c64 <_strtod_l+0x1e4>
 8013c72:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013c76:	2b08      	cmp	r3, #8
 8013c78:	f200 84d2 	bhi.w	8014620 <_strtod_l+0xba0>
 8013c7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8013c7e:	2000      	movs	r0, #0
 8013c80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c82:	4605      	mov	r5, r0
 8013c84:	930c      	str	r3, [sp, #48]	@ 0x30
 8013c86:	3a30      	subs	r2, #48	@ 0x30
 8013c88:	f100 0301 	add.w	r3, r0, #1
 8013c8c:	d017      	beq.n	8013cbe <_strtod_l+0x23e>
 8013c8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013c90:	462e      	mov	r6, r5
 8013c92:	f04f 0e0a 	mov.w	lr, #10
 8013c96:	4419      	add	r1, r3
 8013c98:	910a      	str	r1, [sp, #40]	@ 0x28
 8013c9a:	1c71      	adds	r1, r6, #1
 8013c9c:	eba1 0c05 	sub.w	ip, r1, r5
 8013ca0:	4563      	cmp	r3, ip
 8013ca2:	dc14      	bgt.n	8013cce <_strtod_l+0x24e>
 8013ca4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013ca8:	182b      	adds	r3, r5, r0
 8013caa:	3501      	adds	r5, #1
 8013cac:	2b08      	cmp	r3, #8
 8013cae:	4405      	add	r5, r0
 8013cb0:	dc1a      	bgt.n	8013ce8 <_strtod_l+0x268>
 8013cb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013cb4:	230a      	movs	r3, #10
 8013cb6:	fb03 2301 	mla	r3, r3, r1, r2
 8013cba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	1c51      	adds	r1, r2, #1
 8013cc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8013cc6:	7852      	ldrb	r2, [r2, #1]
 8013cc8:	e7c6      	b.n	8013c58 <_strtod_l+0x1d8>
 8013cca:	4648      	mov	r0, r9
 8013ccc:	e7cf      	b.n	8013c6e <_strtod_l+0x1ee>
 8013cce:	2e08      	cmp	r6, #8
 8013cd0:	dc05      	bgt.n	8013cde <_strtod_l+0x25e>
 8013cd2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013cd4:	fb0e f606 	mul.w	r6, lr, r6
 8013cd8:	960b      	str	r6, [sp, #44]	@ 0x2c
 8013cda:	460e      	mov	r6, r1
 8013cdc:	e7dd      	b.n	8013c9a <_strtod_l+0x21a>
 8013cde:	2910      	cmp	r1, #16
 8013ce0:	bfd8      	it	le
 8013ce2:	fb0e f707 	mulle.w	r7, lr, r7
 8013ce6:	e7f8      	b.n	8013cda <_strtod_l+0x25a>
 8013ce8:	2b0f      	cmp	r3, #15
 8013cea:	bfdc      	itt	le
 8013cec:	230a      	movle	r3, #10
 8013cee:	fb03 2707 	mlale	r7, r3, r7, r2
 8013cf2:	e7e3      	b.n	8013cbc <_strtod_l+0x23c>
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e77b      	b.n	8013bf4 <_strtod_l+0x174>
 8013cfc:	f04f 0c00 	mov.w	ip, #0
 8013d00:	1ca2      	adds	r2, r4, #2
 8013d02:	9219      	str	r2, [sp, #100]	@ 0x64
 8013d04:	78a2      	ldrb	r2, [r4, #2]
 8013d06:	e783      	b.n	8013c10 <_strtod_l+0x190>
 8013d08:	f04f 0c01 	mov.w	ip, #1
 8013d0c:	e7f8      	b.n	8013d00 <_strtod_l+0x280>
 8013d0e:	bf00      	nop
 8013d10:	08015cc4 	.word	0x08015cc4
 8013d14:	08015af7 	.word	0x08015af7
 8013d18:	7ff00000 	.word	0x7ff00000
 8013d1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013d1e:	1c51      	adds	r1, r2, #1
 8013d20:	9119      	str	r1, [sp, #100]	@ 0x64
 8013d22:	7852      	ldrb	r2, [r2, #1]
 8013d24:	2a30      	cmp	r2, #48	@ 0x30
 8013d26:	d0f9      	beq.n	8013d1c <_strtod_l+0x29c>
 8013d28:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013d2c:	2908      	cmp	r1, #8
 8013d2e:	f63f af75 	bhi.w	8013c1c <_strtod_l+0x19c>
 8013d32:	3a30      	subs	r2, #48	@ 0x30
 8013d34:	f04f 080a 	mov.w	r8, #10
 8013d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013d3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013d3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013d40:	1c56      	adds	r6, r2, #1
 8013d42:	9619      	str	r6, [sp, #100]	@ 0x64
 8013d44:	7852      	ldrb	r2, [r2, #1]
 8013d46:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013d4a:	f1be 0f09 	cmp.w	lr, #9
 8013d4e:	d939      	bls.n	8013dc4 <_strtod_l+0x344>
 8013d50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013d52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013d56:	1a76      	subs	r6, r6, r1
 8013d58:	2e08      	cmp	r6, #8
 8013d5a:	dc03      	bgt.n	8013d64 <_strtod_l+0x2e4>
 8013d5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013d5e:	4588      	cmp	r8, r1
 8013d60:	bfa8      	it	ge
 8013d62:	4688      	movge	r8, r1
 8013d64:	f1bc 0f00 	cmp.w	ip, #0
 8013d68:	d001      	beq.n	8013d6e <_strtod_l+0x2ee>
 8013d6a:	f1c8 0800 	rsb	r8, r8, #0
 8013d6e:	2d00      	cmp	r5, #0
 8013d70:	d14e      	bne.n	8013e10 <_strtod_l+0x390>
 8013d72:	9908      	ldr	r1, [sp, #32]
 8013d74:	4308      	orrs	r0, r1
 8013d76:	f47f aebc 	bne.w	8013af2 <_strtod_l+0x72>
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	f47f aed4 	bne.w	8013b28 <_strtod_l+0xa8>
 8013d80:	2a69      	cmp	r2, #105	@ 0x69
 8013d82:	d028      	beq.n	8013dd6 <_strtod_l+0x356>
 8013d84:	dc25      	bgt.n	8013dd2 <_strtod_l+0x352>
 8013d86:	2a49      	cmp	r2, #73	@ 0x49
 8013d88:	d025      	beq.n	8013dd6 <_strtod_l+0x356>
 8013d8a:	2a4e      	cmp	r2, #78	@ 0x4e
 8013d8c:	f47f aecc 	bne.w	8013b28 <_strtod_l+0xa8>
 8013d90:	499a      	ldr	r1, [pc, #616]	@ (8013ffc <_strtod_l+0x57c>)
 8013d92:	a819      	add	r0, sp, #100	@ 0x64
 8013d94:	f001 fbb0 	bl	80154f8 <__match>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	f43f aec5 	beq.w	8013b28 <_strtod_l+0xa8>
 8013d9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	2b28      	cmp	r3, #40	@ 0x28
 8013da4:	d12e      	bne.n	8013e04 <_strtod_l+0x384>
 8013da6:	aa1c      	add	r2, sp, #112	@ 0x70
 8013da8:	4995      	ldr	r1, [pc, #596]	@ (8014000 <_strtod_l+0x580>)
 8013daa:	a819      	add	r0, sp, #100	@ 0x64
 8013dac:	f001 fbb8 	bl	8015520 <__hexnan>
 8013db0:	2805      	cmp	r0, #5
 8013db2:	d127      	bne.n	8013e04 <_strtod_l+0x384>
 8013db4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013db6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013dba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013dbe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013dc2:	e696      	b.n	8013af2 <_strtod_l+0x72>
 8013dc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013dc6:	fb08 2101 	mla	r1, r8, r1, r2
 8013dca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8013dd0:	e7b5      	b.n	8013d3e <_strtod_l+0x2be>
 8013dd2:	2a6e      	cmp	r2, #110	@ 0x6e
 8013dd4:	e7da      	b.n	8013d8c <_strtod_l+0x30c>
 8013dd6:	498b      	ldr	r1, [pc, #556]	@ (8014004 <_strtod_l+0x584>)
 8013dd8:	a819      	add	r0, sp, #100	@ 0x64
 8013dda:	f001 fb8d 	bl	80154f8 <__match>
 8013dde:	2800      	cmp	r0, #0
 8013de0:	f43f aea2 	beq.w	8013b28 <_strtod_l+0xa8>
 8013de4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013de6:	a819      	add	r0, sp, #100	@ 0x64
 8013de8:	4987      	ldr	r1, [pc, #540]	@ (8014008 <_strtod_l+0x588>)
 8013dea:	3b01      	subs	r3, #1
 8013dec:	9319      	str	r3, [sp, #100]	@ 0x64
 8013dee:	f001 fb83 	bl	80154f8 <__match>
 8013df2:	b910      	cbnz	r0, 8013dfa <_strtod_l+0x37a>
 8013df4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013df6:	3301      	adds	r3, #1
 8013df8:	9319      	str	r3, [sp, #100]	@ 0x64
 8013dfa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8014018 <_strtod_l+0x598>
 8013dfe:	f04f 0a00 	mov.w	sl, #0
 8013e02:	e676      	b.n	8013af2 <_strtod_l+0x72>
 8013e04:	4881      	ldr	r0, [pc, #516]	@ (801400c <_strtod_l+0x58c>)
 8013e06:	f001 f8b7 	bl	8014f78 <nan>
 8013e0a:	ec5b ab10 	vmov	sl, fp, d0
 8013e0e:	e670      	b.n	8013af2 <_strtod_l+0x72>
 8013e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e12:	f1b9 0f00 	cmp.w	r9, #0
 8013e16:	bf08      	it	eq
 8013e18:	46a9      	moveq	r9, r5
 8013e1a:	2d10      	cmp	r5, #16
 8013e1c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013e1e:	eba8 0303 	sub.w	r3, r8, r3
 8013e22:	462c      	mov	r4, r5
 8013e24:	bfa8      	it	ge
 8013e26:	2410      	movge	r4, #16
 8013e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e2a:	f7ec fb6f 	bl	800050c <__aeabi_ui2d>
 8013e2e:	2d09      	cmp	r5, #9
 8013e30:	4682      	mov	sl, r0
 8013e32:	468b      	mov	fp, r1
 8013e34:	dc13      	bgt.n	8013e5e <_strtod_l+0x3de>
 8013e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	f43f ae5a 	beq.w	8013af2 <_strtod_l+0x72>
 8013e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e40:	dd78      	ble.n	8013f34 <_strtod_l+0x4b4>
 8013e42:	2b16      	cmp	r3, #22
 8013e44:	dc5f      	bgt.n	8013f06 <_strtod_l+0x486>
 8013e46:	4972      	ldr	r1, [pc, #456]	@ (8014010 <_strtod_l+0x590>)
 8013e48:	4652      	mov	r2, sl
 8013e4a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013e4e:	465b      	mov	r3, fp
 8013e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e54:	f7ec fbd4 	bl	8000600 <__aeabi_dmul>
 8013e58:	4682      	mov	sl, r0
 8013e5a:	468b      	mov	fp, r1
 8013e5c:	e649      	b.n	8013af2 <_strtod_l+0x72>
 8013e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8014010 <_strtod_l+0x590>)
 8013e60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013e64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013e68:	f7ec fbca 	bl	8000600 <__aeabi_dmul>
 8013e6c:	4682      	mov	sl, r0
 8013e6e:	468b      	mov	fp, r1
 8013e70:	4638      	mov	r0, r7
 8013e72:	f7ec fb4b 	bl	800050c <__aeabi_ui2d>
 8013e76:	4602      	mov	r2, r0
 8013e78:	460b      	mov	r3, r1
 8013e7a:	4650      	mov	r0, sl
 8013e7c:	4659      	mov	r1, fp
 8013e7e:	f7ec fa09 	bl	8000294 <__adddf3>
 8013e82:	2d0f      	cmp	r5, #15
 8013e84:	4682      	mov	sl, r0
 8013e86:	468b      	mov	fp, r1
 8013e88:	ddd5      	ble.n	8013e36 <_strtod_l+0x3b6>
 8013e8a:	1b2c      	subs	r4, r5, r4
 8013e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e8e:	441c      	add	r4, r3
 8013e90:	2c00      	cmp	r4, #0
 8013e92:	f340 8093 	ble.w	8013fbc <_strtod_l+0x53c>
 8013e96:	f014 030f 	ands.w	r3, r4, #15
 8013e9a:	d00a      	beq.n	8013eb2 <_strtod_l+0x432>
 8013e9c:	495c      	ldr	r1, [pc, #368]	@ (8014010 <_strtod_l+0x590>)
 8013e9e:	4652      	mov	r2, sl
 8013ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013ea4:	465b      	mov	r3, fp
 8013ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013eaa:	f7ec fba9 	bl	8000600 <__aeabi_dmul>
 8013eae:	4682      	mov	sl, r0
 8013eb0:	468b      	mov	fp, r1
 8013eb2:	f034 040f 	bics.w	r4, r4, #15
 8013eb6:	d073      	beq.n	8013fa0 <_strtod_l+0x520>
 8013eb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013ebc:	dd49      	ble.n	8013f52 <_strtod_l+0x4d2>
 8013ebe:	2400      	movs	r4, #0
 8013ec0:	46a0      	mov	r8, r4
 8013ec2:	46a1      	mov	r9, r4
 8013ec4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013ec6:	2322      	movs	r3, #34	@ 0x22
 8013ec8:	9a05      	ldr	r2, [sp, #20]
 8013eca:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8014018 <_strtod_l+0x598>
 8013ece:	f04f 0a00 	mov.w	sl, #0
 8013ed2:	6013      	str	r3, [r2, #0]
 8013ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	f43f ae0b 	beq.w	8013af2 <_strtod_l+0x72>
 8013edc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ede:	9805      	ldr	r0, [sp, #20]
 8013ee0:	f7ff f938 	bl	8013154 <_Bfree>
 8013ee4:	4649      	mov	r1, r9
 8013ee6:	9805      	ldr	r0, [sp, #20]
 8013ee8:	f7ff f934 	bl	8013154 <_Bfree>
 8013eec:	4641      	mov	r1, r8
 8013eee:	9805      	ldr	r0, [sp, #20]
 8013ef0:	f7ff f930 	bl	8013154 <_Bfree>
 8013ef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013ef6:	9805      	ldr	r0, [sp, #20]
 8013ef8:	f7ff f92c 	bl	8013154 <_Bfree>
 8013efc:	4621      	mov	r1, r4
 8013efe:	9805      	ldr	r0, [sp, #20]
 8013f00:	f7ff f928 	bl	8013154 <_Bfree>
 8013f04:	e5f5      	b.n	8013af2 <_strtod_l+0x72>
 8013f06:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013f0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	dbbc      	blt.n	8013e8a <_strtod_l+0x40a>
 8013f10:	f1c5 050f 	rsb	r5, r5, #15
 8013f14:	4c3e      	ldr	r4, [pc, #248]	@ (8014010 <_strtod_l+0x590>)
 8013f16:	4652      	mov	r2, sl
 8013f18:	465b      	mov	r3, fp
 8013f1a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f22:	f7ec fb6d 	bl	8000600 <__aeabi_dmul>
 8013f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f28:	1b5d      	subs	r5, r3, r5
 8013f2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013f2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013f32:	e78f      	b.n	8013e54 <_strtod_l+0x3d4>
 8013f34:	3316      	adds	r3, #22
 8013f36:	dba8      	blt.n	8013e8a <_strtod_l+0x40a>
 8013f38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f3a:	4650      	mov	r0, sl
 8013f3c:	4659      	mov	r1, fp
 8013f3e:	eba3 0808 	sub.w	r8, r3, r8
 8013f42:	4b33      	ldr	r3, [pc, #204]	@ (8014010 <_strtod_l+0x590>)
 8013f44:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013f48:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013f4c:	f7ec fc82 	bl	8000854 <__aeabi_ddiv>
 8013f50:	e782      	b.n	8013e58 <_strtod_l+0x3d8>
 8013f52:	2300      	movs	r3, #0
 8013f54:	1124      	asrs	r4, r4, #4
 8013f56:	4650      	mov	r0, sl
 8013f58:	4659      	mov	r1, fp
 8013f5a:	4f2e      	ldr	r7, [pc, #184]	@ (8014014 <_strtod_l+0x594>)
 8013f5c:	461e      	mov	r6, r3
 8013f5e:	2c01      	cmp	r4, #1
 8013f60:	dc21      	bgt.n	8013fa6 <_strtod_l+0x526>
 8013f62:	b10b      	cbz	r3, 8013f68 <_strtod_l+0x4e8>
 8013f64:	4682      	mov	sl, r0
 8013f66:	468b      	mov	fp, r1
 8013f68:	492a      	ldr	r1, [pc, #168]	@ (8014014 <_strtod_l+0x594>)
 8013f6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013f6e:	4652      	mov	r2, sl
 8013f70:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013f74:	465b      	mov	r3, fp
 8013f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f7a:	f7ec fb41 	bl	8000600 <__aeabi_dmul>
 8013f7e:	4b26      	ldr	r3, [pc, #152]	@ (8014018 <_strtod_l+0x598>)
 8013f80:	460a      	mov	r2, r1
 8013f82:	4682      	mov	sl, r0
 8013f84:	400b      	ands	r3, r1
 8013f86:	4925      	ldr	r1, [pc, #148]	@ (801401c <_strtod_l+0x59c>)
 8013f88:	428b      	cmp	r3, r1
 8013f8a:	d898      	bhi.n	8013ebe <_strtod_l+0x43e>
 8013f8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013f90:	428b      	cmp	r3, r1
 8013f92:	bf86      	itte	hi
 8013f94:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8014020 <_strtod_l+0x5a0>
 8013f98:	f04f 3aff 	movhi.w	sl, #4294967295
 8013f9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	9308      	str	r3, [sp, #32]
 8013fa4:	e076      	b.n	8014094 <_strtod_l+0x614>
 8013fa6:	07e2      	lsls	r2, r4, #31
 8013fa8:	d504      	bpl.n	8013fb4 <_strtod_l+0x534>
 8013faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013fae:	f7ec fb27 	bl	8000600 <__aeabi_dmul>
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	3601      	adds	r6, #1
 8013fb6:	1064      	asrs	r4, r4, #1
 8013fb8:	3708      	adds	r7, #8
 8013fba:	e7d0      	b.n	8013f5e <_strtod_l+0x4de>
 8013fbc:	d0f0      	beq.n	8013fa0 <_strtod_l+0x520>
 8013fbe:	4264      	negs	r4, r4
 8013fc0:	f014 020f 	ands.w	r2, r4, #15
 8013fc4:	d00a      	beq.n	8013fdc <_strtod_l+0x55c>
 8013fc6:	4b12      	ldr	r3, [pc, #72]	@ (8014010 <_strtod_l+0x590>)
 8013fc8:	4650      	mov	r0, sl
 8013fca:	4659      	mov	r1, fp
 8013fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd4:	f7ec fc3e 	bl	8000854 <__aeabi_ddiv>
 8013fd8:	4682      	mov	sl, r0
 8013fda:	468b      	mov	fp, r1
 8013fdc:	1124      	asrs	r4, r4, #4
 8013fde:	d0df      	beq.n	8013fa0 <_strtod_l+0x520>
 8013fe0:	2c1f      	cmp	r4, #31
 8013fe2:	dd1f      	ble.n	8014024 <_strtod_l+0x5a4>
 8013fe4:	2400      	movs	r4, #0
 8013fe6:	46a0      	mov	r8, r4
 8013fe8:	46a1      	mov	r9, r4
 8013fea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013fec:	2322      	movs	r3, #34	@ 0x22
 8013fee:	9a05      	ldr	r2, [sp, #20]
 8013ff0:	f04f 0a00 	mov.w	sl, #0
 8013ff4:	f04f 0b00 	mov.w	fp, #0
 8013ff8:	6013      	str	r3, [r2, #0]
 8013ffa:	e76b      	b.n	8013ed4 <_strtod_l+0x454>
 8013ffc:	080159e5 	.word	0x080159e5
 8014000:	08015cb0 	.word	0x08015cb0
 8014004:	080159dd 	.word	0x080159dd
 8014008:	08015a14 	.word	0x08015a14
 801400c:	08015b4d 	.word	0x08015b4d
 8014010:	08015be8 	.word	0x08015be8
 8014014:	08015bc0 	.word	0x08015bc0
 8014018:	7ff00000 	.word	0x7ff00000
 801401c:	7ca00000 	.word	0x7ca00000
 8014020:	7fefffff 	.word	0x7fefffff
 8014024:	f014 0310 	ands.w	r3, r4, #16
 8014028:	4650      	mov	r0, sl
 801402a:	4659      	mov	r1, fp
 801402c:	4ea9      	ldr	r6, [pc, #676]	@ (80142d4 <_strtod_l+0x854>)
 801402e:	bf18      	it	ne
 8014030:	236a      	movne	r3, #106	@ 0x6a
 8014032:	9308      	str	r3, [sp, #32]
 8014034:	2300      	movs	r3, #0
 8014036:	07e7      	lsls	r7, r4, #31
 8014038:	d504      	bpl.n	8014044 <_strtod_l+0x5c4>
 801403a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801403e:	f7ec fadf 	bl	8000600 <__aeabi_dmul>
 8014042:	2301      	movs	r3, #1
 8014044:	1064      	asrs	r4, r4, #1
 8014046:	f106 0608 	add.w	r6, r6, #8
 801404a:	d1f4      	bne.n	8014036 <_strtod_l+0x5b6>
 801404c:	b10b      	cbz	r3, 8014052 <_strtod_l+0x5d2>
 801404e:	4682      	mov	sl, r0
 8014050:	468b      	mov	fp, r1
 8014052:	9b08      	ldr	r3, [sp, #32]
 8014054:	b1b3      	cbz	r3, 8014084 <_strtod_l+0x604>
 8014056:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801405a:	4659      	mov	r1, fp
 801405c:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8014060:	2b00      	cmp	r3, #0
 8014062:	dd0f      	ble.n	8014084 <_strtod_l+0x604>
 8014064:	2b1f      	cmp	r3, #31
 8014066:	dd56      	ble.n	8014116 <_strtod_l+0x696>
 8014068:	2b34      	cmp	r3, #52	@ 0x34
 801406a:	f04f 0a00 	mov.w	sl, #0
 801406e:	bfdb      	ittet	le
 8014070:	f04f 33ff 	movle.w	r3, #4294967295
 8014074:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8014078:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801407c:	4093      	lslle	r3, r2
 801407e:	bfd8      	it	le
 8014080:	ea03 0b01 	andle.w	fp, r3, r1
 8014084:	2200      	movs	r2, #0
 8014086:	2300      	movs	r3, #0
 8014088:	4650      	mov	r0, sl
 801408a:	4659      	mov	r1, fp
 801408c:	f7ec fd20 	bl	8000ad0 <__aeabi_dcmpeq>
 8014090:	2800      	cmp	r0, #0
 8014092:	d1a7      	bne.n	8013fe4 <_strtod_l+0x564>
 8014094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014096:	464a      	mov	r2, r9
 8014098:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	462b      	mov	r3, r5
 801409e:	9805      	ldr	r0, [sp, #20]
 80140a0:	f7ff f8c2 	bl	8013228 <__s2b>
 80140a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80140a6:	2800      	cmp	r0, #0
 80140a8:	f43f af09 	beq.w	8013ebe <_strtod_l+0x43e>
 80140ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140ae:	2400      	movs	r4, #0
 80140b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140b2:	2a00      	cmp	r2, #0
 80140b4:	eba3 0308 	sub.w	r3, r3, r8
 80140b8:	46a0      	mov	r8, r4
 80140ba:	bfa8      	it	ge
 80140bc:	2300      	movge	r3, #0
 80140be:	9312      	str	r3, [sp, #72]	@ 0x48
 80140c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80140c4:	9316      	str	r3, [sp, #88]	@ 0x58
 80140c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140c8:	9805      	ldr	r0, [sp, #20]
 80140ca:	6859      	ldr	r1, [r3, #4]
 80140cc:	f7ff f802 	bl	80130d4 <_Balloc>
 80140d0:	4681      	mov	r9, r0
 80140d2:	2800      	cmp	r0, #0
 80140d4:	f43f aef7 	beq.w	8013ec6 <_strtod_l+0x446>
 80140d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140da:	300c      	adds	r0, #12
 80140dc:	691a      	ldr	r2, [r3, #16]
 80140de:	f103 010c 	add.w	r1, r3, #12
 80140e2:	3202      	adds	r2, #2
 80140e4:	0092      	lsls	r2, r2, #2
 80140e6:	f000 ff37 	bl	8014f58 <memcpy>
 80140ea:	aa1c      	add	r2, sp, #112	@ 0x70
 80140ec:	a91b      	add	r1, sp, #108	@ 0x6c
 80140ee:	9805      	ldr	r0, [sp, #20]
 80140f0:	ec4b ab10 	vmov	d0, sl, fp
 80140f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80140f8:	f7ff fbd4 	bl	80138a4 <__d2b>
 80140fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80140fe:	2800      	cmp	r0, #0
 8014100:	f43f aee1 	beq.w	8013ec6 <_strtod_l+0x446>
 8014104:	2101      	movs	r1, #1
 8014106:	9805      	ldr	r0, [sp, #20]
 8014108:	f7ff f924 	bl	8013354 <__i2b>
 801410c:	4680      	mov	r8, r0
 801410e:	b948      	cbnz	r0, 8014124 <_strtod_l+0x6a4>
 8014110:	f04f 0800 	mov.w	r8, #0
 8014114:	e6d7      	b.n	8013ec6 <_strtod_l+0x446>
 8014116:	f04f 32ff 	mov.w	r2, #4294967295
 801411a:	fa02 f303 	lsl.w	r3, r2, r3
 801411e:	ea03 0a0a 	and.w	sl, r3, sl
 8014122:	e7af      	b.n	8014084 <_strtod_l+0x604>
 8014124:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8014126:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014128:	2d00      	cmp	r5, #0
 801412a:	bfa9      	itett	ge
 801412c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801412e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8014130:	18ef      	addge	r7, r5, r3
 8014132:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8014134:	bfb8      	it	lt
 8014136:	1b5e      	sublt	r6, r3, r5
 8014138:	9b08      	ldr	r3, [sp, #32]
 801413a:	bfb8      	it	lt
 801413c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801413e:	1aed      	subs	r5, r5, r3
 8014140:	4b65      	ldr	r3, [pc, #404]	@ (80142d8 <_strtod_l+0x858>)
 8014142:	4415      	add	r5, r2
 8014144:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014148:	3d01      	subs	r5, #1
 801414a:	429d      	cmp	r5, r3
 801414c:	da4f      	bge.n	80141ee <_strtod_l+0x76e>
 801414e:	1b5b      	subs	r3, r3, r5
 8014150:	2101      	movs	r1, #1
 8014152:	2b1f      	cmp	r3, #31
 8014154:	eba2 0203 	sub.w	r2, r2, r3
 8014158:	dc3d      	bgt.n	80141d6 <_strtod_l+0x756>
 801415a:	fa01 f303 	lsl.w	r3, r1, r3
 801415e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014160:	2300      	movs	r3, #0
 8014162:	9310      	str	r3, [sp, #64]	@ 0x40
 8014164:	18bd      	adds	r5, r7, r2
 8014166:	9b08      	ldr	r3, [sp, #32]
 8014168:	4416      	add	r6, r2
 801416a:	42af      	cmp	r7, r5
 801416c:	441e      	add	r6, r3
 801416e:	463b      	mov	r3, r7
 8014170:	bfa8      	it	ge
 8014172:	462b      	movge	r3, r5
 8014174:	42b3      	cmp	r3, r6
 8014176:	bfa8      	it	ge
 8014178:	4633      	movge	r3, r6
 801417a:	2b00      	cmp	r3, #0
 801417c:	bfc2      	ittt	gt
 801417e:	1aed      	subgt	r5, r5, r3
 8014180:	1af6      	subgt	r6, r6, r3
 8014182:	1aff      	subgt	r7, r7, r3
 8014184:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014186:	2b00      	cmp	r3, #0
 8014188:	dd16      	ble.n	80141b8 <_strtod_l+0x738>
 801418a:	4641      	mov	r1, r8
 801418c:	461a      	mov	r2, r3
 801418e:	9805      	ldr	r0, [sp, #20]
 8014190:	f7ff f99a 	bl	80134c8 <__pow5mult>
 8014194:	4680      	mov	r8, r0
 8014196:	2800      	cmp	r0, #0
 8014198:	d0ba      	beq.n	8014110 <_strtod_l+0x690>
 801419a:	4601      	mov	r1, r0
 801419c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801419e:	9805      	ldr	r0, [sp, #20]
 80141a0:	f7ff f8ee 	bl	8013380 <__multiply>
 80141a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80141a6:	2800      	cmp	r0, #0
 80141a8:	f43f ae8d 	beq.w	8013ec6 <_strtod_l+0x446>
 80141ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80141ae:	9805      	ldr	r0, [sp, #20]
 80141b0:	f7fe ffd0 	bl	8013154 <_Bfree>
 80141b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80141b8:	2d00      	cmp	r5, #0
 80141ba:	dc1d      	bgt.n	80141f8 <_strtod_l+0x778>
 80141bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141be:	2b00      	cmp	r3, #0
 80141c0:	dd23      	ble.n	801420a <_strtod_l+0x78a>
 80141c2:	4649      	mov	r1, r9
 80141c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80141c6:	9805      	ldr	r0, [sp, #20]
 80141c8:	f7ff f97e 	bl	80134c8 <__pow5mult>
 80141cc:	4681      	mov	r9, r0
 80141ce:	b9e0      	cbnz	r0, 801420a <_strtod_l+0x78a>
 80141d0:	f04f 0900 	mov.w	r9, #0
 80141d4:	e677      	b.n	8013ec6 <_strtod_l+0x446>
 80141d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80141da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80141dc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80141e0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80141e4:	35e2      	adds	r5, #226	@ 0xe2
 80141e6:	fa01 f305 	lsl.w	r3, r1, r5
 80141ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80141ec:	e7ba      	b.n	8014164 <_strtod_l+0x6e4>
 80141ee:	2300      	movs	r3, #0
 80141f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80141f2:	2301      	movs	r3, #1
 80141f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80141f6:	e7b5      	b.n	8014164 <_strtod_l+0x6e4>
 80141f8:	462a      	mov	r2, r5
 80141fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80141fc:	9805      	ldr	r0, [sp, #20]
 80141fe:	f7ff f9bd 	bl	801357c <__lshift>
 8014202:	901a      	str	r0, [sp, #104]	@ 0x68
 8014204:	2800      	cmp	r0, #0
 8014206:	d1d9      	bne.n	80141bc <_strtod_l+0x73c>
 8014208:	e65d      	b.n	8013ec6 <_strtod_l+0x446>
 801420a:	2e00      	cmp	r6, #0
 801420c:	dd07      	ble.n	801421e <_strtod_l+0x79e>
 801420e:	4649      	mov	r1, r9
 8014210:	4632      	mov	r2, r6
 8014212:	9805      	ldr	r0, [sp, #20]
 8014214:	f7ff f9b2 	bl	801357c <__lshift>
 8014218:	4681      	mov	r9, r0
 801421a:	2800      	cmp	r0, #0
 801421c:	d0d8      	beq.n	80141d0 <_strtod_l+0x750>
 801421e:	2f00      	cmp	r7, #0
 8014220:	dd08      	ble.n	8014234 <_strtod_l+0x7b4>
 8014222:	4641      	mov	r1, r8
 8014224:	463a      	mov	r2, r7
 8014226:	9805      	ldr	r0, [sp, #20]
 8014228:	f7ff f9a8 	bl	801357c <__lshift>
 801422c:	4680      	mov	r8, r0
 801422e:	2800      	cmp	r0, #0
 8014230:	f43f ae49 	beq.w	8013ec6 <_strtod_l+0x446>
 8014234:	464a      	mov	r2, r9
 8014236:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014238:	9805      	ldr	r0, [sp, #20]
 801423a:	f7ff fa27 	bl	801368c <__mdiff>
 801423e:	4604      	mov	r4, r0
 8014240:	2800      	cmp	r0, #0
 8014242:	f43f ae40 	beq.w	8013ec6 <_strtod_l+0x446>
 8014246:	68c3      	ldr	r3, [r0, #12]
 8014248:	4641      	mov	r1, r8
 801424a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801424c:	2300      	movs	r3, #0
 801424e:	60c3      	str	r3, [r0, #12]
 8014250:	f7ff fa00 	bl	8013654 <__mcmp>
 8014254:	2800      	cmp	r0, #0
 8014256:	da45      	bge.n	80142e4 <_strtod_l+0x864>
 8014258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801425a:	ea53 030a 	orrs.w	r3, r3, sl
 801425e:	d16b      	bne.n	8014338 <_strtod_l+0x8b8>
 8014260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014264:	2b00      	cmp	r3, #0
 8014266:	d167      	bne.n	8014338 <_strtod_l+0x8b8>
 8014268:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801426c:	0d1b      	lsrs	r3, r3, #20
 801426e:	051b      	lsls	r3, r3, #20
 8014270:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014274:	d960      	bls.n	8014338 <_strtod_l+0x8b8>
 8014276:	6963      	ldr	r3, [r4, #20]
 8014278:	b913      	cbnz	r3, 8014280 <_strtod_l+0x800>
 801427a:	6923      	ldr	r3, [r4, #16]
 801427c:	2b01      	cmp	r3, #1
 801427e:	dd5b      	ble.n	8014338 <_strtod_l+0x8b8>
 8014280:	4621      	mov	r1, r4
 8014282:	2201      	movs	r2, #1
 8014284:	9805      	ldr	r0, [sp, #20]
 8014286:	f7ff f979 	bl	801357c <__lshift>
 801428a:	4641      	mov	r1, r8
 801428c:	4604      	mov	r4, r0
 801428e:	f7ff f9e1 	bl	8013654 <__mcmp>
 8014292:	2800      	cmp	r0, #0
 8014294:	dd50      	ble.n	8014338 <_strtod_l+0x8b8>
 8014296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801429a:	9a08      	ldr	r2, [sp, #32]
 801429c:	0d1b      	lsrs	r3, r3, #20
 801429e:	051b      	lsls	r3, r3, #20
 80142a0:	2a00      	cmp	r2, #0
 80142a2:	d06a      	beq.n	801437a <_strtod_l+0x8fa>
 80142a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80142a8:	d867      	bhi.n	801437a <_strtod_l+0x8fa>
 80142aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80142ae:	f67f ae9d 	bls.w	8013fec <_strtod_l+0x56c>
 80142b2:	4b0a      	ldr	r3, [pc, #40]	@ (80142dc <_strtod_l+0x85c>)
 80142b4:	4650      	mov	r0, sl
 80142b6:	4659      	mov	r1, fp
 80142b8:	2200      	movs	r2, #0
 80142ba:	f7ec f9a1 	bl	8000600 <__aeabi_dmul>
 80142be:	4b08      	ldr	r3, [pc, #32]	@ (80142e0 <_strtod_l+0x860>)
 80142c0:	4682      	mov	sl, r0
 80142c2:	468b      	mov	fp, r1
 80142c4:	400b      	ands	r3, r1
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	f47f ae08 	bne.w	8013edc <_strtod_l+0x45c>
 80142cc:	2322      	movs	r3, #34	@ 0x22
 80142ce:	9a05      	ldr	r2, [sp, #20]
 80142d0:	6013      	str	r3, [r2, #0]
 80142d2:	e603      	b.n	8013edc <_strtod_l+0x45c>
 80142d4:	08015cd8 	.word	0x08015cd8
 80142d8:	fffffc02 	.word	0xfffffc02
 80142dc:	39500000 	.word	0x39500000
 80142e0:	7ff00000 	.word	0x7ff00000
 80142e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80142e8:	d165      	bne.n	80143b6 <_strtod_l+0x936>
 80142ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80142ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142f0:	b35a      	cbz	r2, 801434a <_strtod_l+0x8ca>
 80142f2:	4a9f      	ldr	r2, [pc, #636]	@ (8014570 <_strtod_l+0xaf0>)
 80142f4:	4293      	cmp	r3, r2
 80142f6:	d12b      	bne.n	8014350 <_strtod_l+0x8d0>
 80142f8:	9b08      	ldr	r3, [sp, #32]
 80142fa:	4651      	mov	r1, sl
 80142fc:	b303      	cbz	r3, 8014340 <_strtod_l+0x8c0>
 80142fe:	465a      	mov	r2, fp
 8014300:	4b9c      	ldr	r3, [pc, #624]	@ (8014574 <_strtod_l+0xaf4>)
 8014302:	4013      	ands	r3, r2
 8014304:	f04f 32ff 	mov.w	r2, #4294967295
 8014308:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801430c:	d81b      	bhi.n	8014346 <_strtod_l+0x8c6>
 801430e:	0d1b      	lsrs	r3, r3, #20
 8014310:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014314:	fa02 f303 	lsl.w	r3, r2, r3
 8014318:	4299      	cmp	r1, r3
 801431a:	d119      	bne.n	8014350 <_strtod_l+0x8d0>
 801431c:	4b96      	ldr	r3, [pc, #600]	@ (8014578 <_strtod_l+0xaf8>)
 801431e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014320:	429a      	cmp	r2, r3
 8014322:	d102      	bne.n	801432a <_strtod_l+0x8aa>
 8014324:	3101      	adds	r1, #1
 8014326:	f43f adce 	beq.w	8013ec6 <_strtod_l+0x446>
 801432a:	4b92      	ldr	r3, [pc, #584]	@ (8014574 <_strtod_l+0xaf4>)
 801432c:	f04f 0a00 	mov.w	sl, #0
 8014330:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014332:	401a      	ands	r2, r3
 8014334:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8014338:	9b08      	ldr	r3, [sp, #32]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d1b9      	bne.n	80142b2 <_strtod_l+0x832>
 801433e:	e5cd      	b.n	8013edc <_strtod_l+0x45c>
 8014340:	f04f 33ff 	mov.w	r3, #4294967295
 8014344:	e7e8      	b.n	8014318 <_strtod_l+0x898>
 8014346:	4613      	mov	r3, r2
 8014348:	e7e6      	b.n	8014318 <_strtod_l+0x898>
 801434a:	ea53 030a 	orrs.w	r3, r3, sl
 801434e:	d0a2      	beq.n	8014296 <_strtod_l+0x816>
 8014350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014352:	b1db      	cbz	r3, 801438c <_strtod_l+0x90c>
 8014354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014356:	4213      	tst	r3, r2
 8014358:	d0ee      	beq.n	8014338 <_strtod_l+0x8b8>
 801435a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801435c:	4650      	mov	r0, sl
 801435e:	9a08      	ldr	r2, [sp, #32]
 8014360:	4659      	mov	r1, fp
 8014362:	b1bb      	cbz	r3, 8014394 <_strtod_l+0x914>
 8014364:	f7ff fb6c 	bl	8013a40 <sulp>
 8014368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801436c:	ec53 2b10 	vmov	r2, r3, d0
 8014370:	f7eb ff90 	bl	8000294 <__adddf3>
 8014374:	4682      	mov	sl, r0
 8014376:	468b      	mov	fp, r1
 8014378:	e7de      	b.n	8014338 <_strtod_l+0x8b8>
 801437a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801437e:	f04f 3aff 	mov.w	sl, #4294967295
 8014382:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014386:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801438a:	e7d5      	b.n	8014338 <_strtod_l+0x8b8>
 801438c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801438e:	ea13 0f0a 	tst.w	r3, sl
 8014392:	e7e1      	b.n	8014358 <_strtod_l+0x8d8>
 8014394:	f7ff fb54 	bl	8013a40 <sulp>
 8014398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801439c:	ec53 2b10 	vmov	r2, r3, d0
 80143a0:	f7eb ff76 	bl	8000290 <__aeabi_dsub>
 80143a4:	2200      	movs	r2, #0
 80143a6:	2300      	movs	r3, #0
 80143a8:	4682      	mov	sl, r0
 80143aa:	468b      	mov	fp, r1
 80143ac:	f7ec fb90 	bl	8000ad0 <__aeabi_dcmpeq>
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d0c1      	beq.n	8014338 <_strtod_l+0x8b8>
 80143b4:	e61a      	b.n	8013fec <_strtod_l+0x56c>
 80143b6:	4641      	mov	r1, r8
 80143b8:	4620      	mov	r0, r4
 80143ba:	f7ff facb 	bl	8013954 <__ratio>
 80143be:	2200      	movs	r2, #0
 80143c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80143c4:	ec57 6b10 	vmov	r6, r7, d0
 80143c8:	4630      	mov	r0, r6
 80143ca:	4639      	mov	r1, r7
 80143cc:	f7ec fb94 	bl	8000af8 <__aeabi_dcmple>
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d06f      	beq.n	80144b4 <_strtod_l+0xa34>
 80143d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d17a      	bne.n	80144d0 <_strtod_l+0xa50>
 80143da:	f1ba 0f00 	cmp.w	sl, #0
 80143de:	d158      	bne.n	8014492 <_strtod_l+0xa12>
 80143e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80143e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d15a      	bne.n	80144a0 <_strtod_l+0xa20>
 80143ea:	2200      	movs	r2, #0
 80143ec:	4b63      	ldr	r3, [pc, #396]	@ (801457c <_strtod_l+0xafc>)
 80143ee:	4630      	mov	r0, r6
 80143f0:	4639      	mov	r1, r7
 80143f2:	f7ec fb77 	bl	8000ae4 <__aeabi_dcmplt>
 80143f6:	2800      	cmp	r0, #0
 80143f8:	d159      	bne.n	80144ae <_strtod_l+0xa2e>
 80143fa:	4630      	mov	r0, r6
 80143fc:	4639      	mov	r1, r7
 80143fe:	2200      	movs	r2, #0
 8014400:	4b5f      	ldr	r3, [pc, #380]	@ (8014580 <_strtod_l+0xb00>)
 8014402:	f7ec f8fd 	bl	8000600 <__aeabi_dmul>
 8014406:	4606      	mov	r6, r0
 8014408:	460f      	mov	r7, r1
 801440a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801440e:	9606      	str	r6, [sp, #24]
 8014410:	9307      	str	r3, [sp, #28]
 8014412:	4d58      	ldr	r5, [pc, #352]	@ (8014574 <_strtod_l+0xaf4>)
 8014414:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014418:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801441c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801441e:	401d      	ands	r5, r3
 8014420:	4b58      	ldr	r3, [pc, #352]	@ (8014584 <_strtod_l+0xb04>)
 8014422:	429d      	cmp	r5, r3
 8014424:	f040 80b2 	bne.w	801458c <_strtod_l+0xb0c>
 8014428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801442a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801442e:	ec4b ab10 	vmov	d0, sl, fp
 8014432:	f7ff f9c3 	bl	80137bc <__ulp>
 8014436:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801443a:	ec51 0b10 	vmov	r0, r1, d0
 801443e:	f7ec f8df 	bl	8000600 <__aeabi_dmul>
 8014442:	4652      	mov	r2, sl
 8014444:	465b      	mov	r3, fp
 8014446:	f7eb ff25 	bl	8000294 <__adddf3>
 801444a:	460b      	mov	r3, r1
 801444c:	4949      	ldr	r1, [pc, #292]	@ (8014574 <_strtod_l+0xaf4>)
 801444e:	4682      	mov	sl, r0
 8014450:	4a4d      	ldr	r2, [pc, #308]	@ (8014588 <_strtod_l+0xb08>)
 8014452:	4019      	ands	r1, r3
 8014454:	4291      	cmp	r1, r2
 8014456:	d942      	bls.n	80144de <_strtod_l+0xa5e>
 8014458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801445a:	4b47      	ldr	r3, [pc, #284]	@ (8014578 <_strtod_l+0xaf8>)
 801445c:	429a      	cmp	r2, r3
 801445e:	d103      	bne.n	8014468 <_strtod_l+0x9e8>
 8014460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014462:	3301      	adds	r3, #1
 8014464:	f43f ad2f 	beq.w	8013ec6 <_strtod_l+0x446>
 8014468:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014578 <_strtod_l+0xaf8>
 801446c:	f04f 3aff 	mov.w	sl, #4294967295
 8014470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014472:	9805      	ldr	r0, [sp, #20]
 8014474:	f7fe fe6e 	bl	8013154 <_Bfree>
 8014478:	4649      	mov	r1, r9
 801447a:	9805      	ldr	r0, [sp, #20]
 801447c:	f7fe fe6a 	bl	8013154 <_Bfree>
 8014480:	4641      	mov	r1, r8
 8014482:	9805      	ldr	r0, [sp, #20]
 8014484:	f7fe fe66 	bl	8013154 <_Bfree>
 8014488:	4621      	mov	r1, r4
 801448a:	9805      	ldr	r0, [sp, #20]
 801448c:	f7fe fe62 	bl	8013154 <_Bfree>
 8014490:	e619      	b.n	80140c6 <_strtod_l+0x646>
 8014492:	f1ba 0f01 	cmp.w	sl, #1
 8014496:	d103      	bne.n	80144a0 <_strtod_l+0xa20>
 8014498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801449a:	2b00      	cmp	r3, #0
 801449c:	f43f ada6 	beq.w	8013fec <_strtod_l+0x56c>
 80144a0:	2600      	movs	r6, #0
 80144a2:	4f36      	ldr	r7, [pc, #216]	@ (801457c <_strtod_l+0xafc>)
 80144a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014550 <_strtod_l+0xad0>
 80144a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80144ac:	e7b1      	b.n	8014412 <_strtod_l+0x992>
 80144ae:	2600      	movs	r6, #0
 80144b0:	4f33      	ldr	r7, [pc, #204]	@ (8014580 <_strtod_l+0xb00>)
 80144b2:	e7aa      	b.n	801440a <_strtod_l+0x98a>
 80144b4:	4b32      	ldr	r3, [pc, #200]	@ (8014580 <_strtod_l+0xb00>)
 80144b6:	4630      	mov	r0, r6
 80144b8:	4639      	mov	r1, r7
 80144ba:	2200      	movs	r2, #0
 80144bc:	f7ec f8a0 	bl	8000600 <__aeabi_dmul>
 80144c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144c2:	4606      	mov	r6, r0
 80144c4:	460f      	mov	r7, r1
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d09f      	beq.n	801440a <_strtod_l+0x98a>
 80144ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80144ce:	e7a0      	b.n	8014412 <_strtod_l+0x992>
 80144d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014558 <_strtod_l+0xad8>
 80144d4:	ec57 6b17 	vmov	r6, r7, d7
 80144d8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80144dc:	e799      	b.n	8014412 <_strtod_l+0x992>
 80144de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80144e2:	9b08      	ldr	r3, [sp, #32]
 80144e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d1c1      	bne.n	8014470 <_strtod_l+0x9f0>
 80144ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80144f0:	0d1b      	lsrs	r3, r3, #20
 80144f2:	051b      	lsls	r3, r3, #20
 80144f4:	429d      	cmp	r5, r3
 80144f6:	d1bb      	bne.n	8014470 <_strtod_l+0x9f0>
 80144f8:	4630      	mov	r0, r6
 80144fa:	4639      	mov	r1, r7
 80144fc:	f7ec fbe0 	bl	8000cc0 <__aeabi_d2lz>
 8014500:	f7ec f850 	bl	80005a4 <__aeabi_l2d>
 8014504:	4602      	mov	r2, r0
 8014506:	460b      	mov	r3, r1
 8014508:	4630      	mov	r0, r6
 801450a:	4639      	mov	r1, r7
 801450c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014510:	f7eb febe 	bl	8000290 <__aeabi_dsub>
 8014514:	460b      	mov	r3, r1
 8014516:	4602      	mov	r2, r0
 8014518:	ea46 060a 	orr.w	r6, r6, sl
 801451c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014522:	431e      	orrs	r6, r3
 8014524:	d06f      	beq.n	8014606 <_strtod_l+0xb86>
 8014526:	a30e      	add	r3, pc, #56	@ (adr r3, 8014560 <_strtod_l+0xae0>)
 8014528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801452c:	f7ec fada 	bl	8000ae4 <__aeabi_dcmplt>
 8014530:	2800      	cmp	r0, #0
 8014532:	f47f acd3 	bne.w	8013edc <_strtod_l+0x45c>
 8014536:	a30c      	add	r3, pc, #48	@ (adr r3, 8014568 <_strtod_l+0xae8>)
 8014538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014540:	f7ec faee 	bl	8000b20 <__aeabi_dcmpgt>
 8014544:	2800      	cmp	r0, #0
 8014546:	d093      	beq.n	8014470 <_strtod_l+0x9f0>
 8014548:	e4c8      	b.n	8013edc <_strtod_l+0x45c>
 801454a:	bf00      	nop
 801454c:	f3af 8000 	nop.w
 8014550:	00000000 	.word	0x00000000
 8014554:	bff00000 	.word	0xbff00000
 8014558:	00000000 	.word	0x00000000
 801455c:	3ff00000 	.word	0x3ff00000
 8014560:	94a03595 	.word	0x94a03595
 8014564:	3fdfffff 	.word	0x3fdfffff
 8014568:	35afe535 	.word	0x35afe535
 801456c:	3fe00000 	.word	0x3fe00000
 8014570:	000fffff 	.word	0x000fffff
 8014574:	7ff00000 	.word	0x7ff00000
 8014578:	7fefffff 	.word	0x7fefffff
 801457c:	3ff00000 	.word	0x3ff00000
 8014580:	3fe00000 	.word	0x3fe00000
 8014584:	7fe00000 	.word	0x7fe00000
 8014588:	7c9fffff 	.word	0x7c9fffff
 801458c:	9b08      	ldr	r3, [sp, #32]
 801458e:	b323      	cbz	r3, 80145da <_strtod_l+0xb5a>
 8014590:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8014594:	d821      	bhi.n	80145da <_strtod_l+0xb5a>
 8014596:	4630      	mov	r0, r6
 8014598:	4639      	mov	r1, r7
 801459a:	a327      	add	r3, pc, #156	@ (adr r3, 8014638 <_strtod_l+0xbb8>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	f7ec faaa 	bl	8000af8 <__aeabi_dcmple>
 80145a4:	b1a0      	cbz	r0, 80145d0 <_strtod_l+0xb50>
 80145a6:	4639      	mov	r1, r7
 80145a8:	4630      	mov	r0, r6
 80145aa:	f7ec fb01 	bl	8000bb0 <__aeabi_d2uiz>
 80145ae:	2801      	cmp	r0, #1
 80145b0:	bf38      	it	cc
 80145b2:	2001      	movcc	r0, #1
 80145b4:	f7eb ffaa 	bl	800050c <__aeabi_ui2d>
 80145b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145ba:	4606      	mov	r6, r0
 80145bc:	460f      	mov	r7, r1
 80145be:	b9fb      	cbnz	r3, 8014600 <_strtod_l+0xb80>
 80145c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80145c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80145c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80145c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80145cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80145d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80145d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80145d6:	1b5b      	subs	r3, r3, r5
 80145d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80145da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80145de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80145e2:	f7ff f8eb 	bl	80137bc <__ulp>
 80145e6:	4650      	mov	r0, sl
 80145e8:	4659      	mov	r1, fp
 80145ea:	ec53 2b10 	vmov	r2, r3, d0
 80145ee:	f7ec f807 	bl	8000600 <__aeabi_dmul>
 80145f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80145f6:	f7eb fe4d 	bl	8000294 <__adddf3>
 80145fa:	4682      	mov	sl, r0
 80145fc:	468b      	mov	fp, r1
 80145fe:	e770      	b.n	80144e2 <_strtod_l+0xa62>
 8014600:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8014604:	e7e0      	b.n	80145c8 <_strtod_l+0xb48>
 8014606:	a30e      	add	r3, pc, #56	@ (adr r3, 8014640 <_strtod_l+0xbc0>)
 8014608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460c:	f7ec fa6a 	bl	8000ae4 <__aeabi_dcmplt>
 8014610:	e798      	b.n	8014544 <_strtod_l+0xac4>
 8014612:	2300      	movs	r3, #0
 8014614:	930e      	str	r3, [sp, #56]	@ 0x38
 8014616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014618:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801461a:	6013      	str	r3, [r2, #0]
 801461c:	f7ff ba6d 	b.w	8013afa <_strtod_l+0x7a>
 8014620:	2a65      	cmp	r2, #101	@ 0x65
 8014622:	f43f ab67 	beq.w	8013cf4 <_strtod_l+0x274>
 8014626:	2a45      	cmp	r2, #69	@ 0x45
 8014628:	f43f ab64 	beq.w	8013cf4 <_strtod_l+0x274>
 801462c:	2301      	movs	r3, #1
 801462e:	f7ff bba0 	b.w	8013d72 <_strtod_l+0x2f2>
 8014632:	bf00      	nop
 8014634:	f3af 8000 	nop.w
 8014638:	ffc00000 	.word	0xffc00000
 801463c:	41dfffff 	.word	0x41dfffff
 8014640:	94a03595 	.word	0x94a03595
 8014644:	3fcfffff 	.word	0x3fcfffff

08014648 <_strtod_r>:
 8014648:	4b01      	ldr	r3, [pc, #4]	@ (8014650 <_strtod_r+0x8>)
 801464a:	f7ff ba19 	b.w	8013a80 <_strtod_l>
 801464e:	bf00      	nop
 8014650:	200001cc 	.word	0x200001cc

08014654 <_strtol_l.isra.0>:
 8014654:	2b24      	cmp	r3, #36	@ 0x24
 8014656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801465a:	4686      	mov	lr, r0
 801465c:	4690      	mov	r8, r2
 801465e:	d801      	bhi.n	8014664 <_strtol_l.isra.0+0x10>
 8014660:	2b01      	cmp	r3, #1
 8014662:	d106      	bne.n	8014672 <_strtol_l.isra.0+0x1e>
 8014664:	f7fd fd92 	bl	801218c <__errno>
 8014668:	2316      	movs	r3, #22
 801466a:	6003      	str	r3, [r0, #0]
 801466c:	2000      	movs	r0, #0
 801466e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014672:	460d      	mov	r5, r1
 8014674:	4833      	ldr	r0, [pc, #204]	@ (8014744 <_strtol_l.isra.0+0xf0>)
 8014676:	462a      	mov	r2, r5
 8014678:	f815 4b01 	ldrb.w	r4, [r5], #1
 801467c:	5d06      	ldrb	r6, [r0, r4]
 801467e:	f016 0608 	ands.w	r6, r6, #8
 8014682:	d1f8      	bne.n	8014676 <_strtol_l.isra.0+0x22>
 8014684:	2c2d      	cmp	r4, #45	@ 0x2d
 8014686:	d110      	bne.n	80146aa <_strtol_l.isra.0+0x56>
 8014688:	782c      	ldrb	r4, [r5, #0]
 801468a:	2601      	movs	r6, #1
 801468c:	1c95      	adds	r5, r2, #2
 801468e:	f033 0210 	bics.w	r2, r3, #16
 8014692:	d115      	bne.n	80146c0 <_strtol_l.isra.0+0x6c>
 8014694:	2c30      	cmp	r4, #48	@ 0x30
 8014696:	d10d      	bne.n	80146b4 <_strtol_l.isra.0+0x60>
 8014698:	782a      	ldrb	r2, [r5, #0]
 801469a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801469e:	2a58      	cmp	r2, #88	@ 0x58
 80146a0:	d108      	bne.n	80146b4 <_strtol_l.isra.0+0x60>
 80146a2:	786c      	ldrb	r4, [r5, #1]
 80146a4:	3502      	adds	r5, #2
 80146a6:	2310      	movs	r3, #16
 80146a8:	e00a      	b.n	80146c0 <_strtol_l.isra.0+0x6c>
 80146aa:	2c2b      	cmp	r4, #43	@ 0x2b
 80146ac:	bf04      	itt	eq
 80146ae:	782c      	ldrbeq	r4, [r5, #0]
 80146b0:	1c95      	addeq	r5, r2, #2
 80146b2:	e7ec      	b.n	801468e <_strtol_l.isra.0+0x3a>
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d1f6      	bne.n	80146a6 <_strtol_l.isra.0+0x52>
 80146b8:	2c30      	cmp	r4, #48	@ 0x30
 80146ba:	bf14      	ite	ne
 80146bc:	230a      	movne	r3, #10
 80146be:	2308      	moveq	r3, #8
 80146c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80146c4:	2200      	movs	r2, #0
 80146c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80146ca:	4610      	mov	r0, r2
 80146cc:	fbbc f9f3 	udiv	r9, ip, r3
 80146d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80146d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80146d8:	2f09      	cmp	r7, #9
 80146da:	d80f      	bhi.n	80146fc <_strtol_l.isra.0+0xa8>
 80146dc:	463c      	mov	r4, r7
 80146de:	42a3      	cmp	r3, r4
 80146e0:	dd1b      	ble.n	801471a <_strtol_l.isra.0+0xc6>
 80146e2:	1c57      	adds	r7, r2, #1
 80146e4:	d007      	beq.n	80146f6 <_strtol_l.isra.0+0xa2>
 80146e6:	4581      	cmp	r9, r0
 80146e8:	d314      	bcc.n	8014714 <_strtol_l.isra.0+0xc0>
 80146ea:	d101      	bne.n	80146f0 <_strtol_l.isra.0+0x9c>
 80146ec:	45a2      	cmp	sl, r4
 80146ee:	db11      	blt.n	8014714 <_strtol_l.isra.0+0xc0>
 80146f0:	fb00 4003 	mla	r0, r0, r3, r4
 80146f4:	2201      	movs	r2, #1
 80146f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80146fa:	e7eb      	b.n	80146d4 <_strtol_l.isra.0+0x80>
 80146fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014700:	2f19      	cmp	r7, #25
 8014702:	d801      	bhi.n	8014708 <_strtol_l.isra.0+0xb4>
 8014704:	3c37      	subs	r4, #55	@ 0x37
 8014706:	e7ea      	b.n	80146de <_strtol_l.isra.0+0x8a>
 8014708:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801470c:	2f19      	cmp	r7, #25
 801470e:	d804      	bhi.n	801471a <_strtol_l.isra.0+0xc6>
 8014710:	3c57      	subs	r4, #87	@ 0x57
 8014712:	e7e4      	b.n	80146de <_strtol_l.isra.0+0x8a>
 8014714:	f04f 32ff 	mov.w	r2, #4294967295
 8014718:	e7ed      	b.n	80146f6 <_strtol_l.isra.0+0xa2>
 801471a:	1c53      	adds	r3, r2, #1
 801471c:	d108      	bne.n	8014730 <_strtol_l.isra.0+0xdc>
 801471e:	2322      	movs	r3, #34	@ 0x22
 8014720:	4660      	mov	r0, ip
 8014722:	f8ce 3000 	str.w	r3, [lr]
 8014726:	f1b8 0f00 	cmp.w	r8, #0
 801472a:	d0a0      	beq.n	801466e <_strtol_l.isra.0+0x1a>
 801472c:	1e69      	subs	r1, r5, #1
 801472e:	e006      	b.n	801473e <_strtol_l.isra.0+0xea>
 8014730:	b106      	cbz	r6, 8014734 <_strtol_l.isra.0+0xe0>
 8014732:	4240      	negs	r0, r0
 8014734:	f1b8 0f00 	cmp.w	r8, #0
 8014738:	d099      	beq.n	801466e <_strtol_l.isra.0+0x1a>
 801473a:	2a00      	cmp	r2, #0
 801473c:	d1f6      	bne.n	801472c <_strtol_l.isra.0+0xd8>
 801473e:	f8c8 1000 	str.w	r1, [r8]
 8014742:	e794      	b.n	801466e <_strtol_l.isra.0+0x1a>
 8014744:	08015d01 	.word	0x08015d01

08014748 <_strtol_r>:
 8014748:	f7ff bf84 	b.w	8014654 <_strtol_l.isra.0>

0801474c <__ssputs_r>:
 801474c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014750:	461f      	mov	r7, r3
 8014752:	688e      	ldr	r6, [r1, #8]
 8014754:	4682      	mov	sl, r0
 8014756:	460c      	mov	r4, r1
 8014758:	42be      	cmp	r6, r7
 801475a:	4690      	mov	r8, r2
 801475c:	680b      	ldr	r3, [r1, #0]
 801475e:	d82d      	bhi.n	80147bc <__ssputs_r+0x70>
 8014760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014768:	d026      	beq.n	80147b8 <__ssputs_r+0x6c>
 801476a:	6965      	ldr	r5, [r4, #20]
 801476c:	6909      	ldr	r1, [r1, #16]
 801476e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014772:	eba3 0901 	sub.w	r9, r3, r1
 8014776:	1c7b      	adds	r3, r7, #1
 8014778:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801477c:	444b      	add	r3, r9
 801477e:	106d      	asrs	r5, r5, #1
 8014780:	429d      	cmp	r5, r3
 8014782:	bf38      	it	cc
 8014784:	461d      	movcc	r5, r3
 8014786:	0553      	lsls	r3, r2, #21
 8014788:	d527      	bpl.n	80147da <__ssputs_r+0x8e>
 801478a:	4629      	mov	r1, r5
 801478c:	f7fe fc16 	bl	8012fbc <_malloc_r>
 8014790:	4606      	mov	r6, r0
 8014792:	b360      	cbz	r0, 80147ee <__ssputs_r+0xa2>
 8014794:	464a      	mov	r2, r9
 8014796:	6921      	ldr	r1, [r4, #16]
 8014798:	f000 fbde 	bl	8014f58 <memcpy>
 801479c:	89a3      	ldrh	r3, [r4, #12]
 801479e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80147a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147a6:	81a3      	strh	r3, [r4, #12]
 80147a8:	6126      	str	r6, [r4, #16]
 80147aa:	444e      	add	r6, r9
 80147ac:	6165      	str	r5, [r4, #20]
 80147ae:	eba5 0509 	sub.w	r5, r5, r9
 80147b2:	6026      	str	r6, [r4, #0]
 80147b4:	463e      	mov	r6, r7
 80147b6:	60a5      	str	r5, [r4, #8]
 80147b8:	42be      	cmp	r6, r7
 80147ba:	d900      	bls.n	80147be <__ssputs_r+0x72>
 80147bc:	463e      	mov	r6, r7
 80147be:	4632      	mov	r2, r6
 80147c0:	4641      	mov	r1, r8
 80147c2:	6820      	ldr	r0, [r4, #0]
 80147c4:	f000 fb69 	bl	8014e9a <memmove>
 80147c8:	68a3      	ldr	r3, [r4, #8]
 80147ca:	2000      	movs	r0, #0
 80147cc:	1b9b      	subs	r3, r3, r6
 80147ce:	60a3      	str	r3, [r4, #8]
 80147d0:	6823      	ldr	r3, [r4, #0]
 80147d2:	4433      	add	r3, r6
 80147d4:	6023      	str	r3, [r4, #0]
 80147d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147da:	462a      	mov	r2, r5
 80147dc:	f000 ff4d 	bl	801567a <_realloc_r>
 80147e0:	4606      	mov	r6, r0
 80147e2:	2800      	cmp	r0, #0
 80147e4:	d1e0      	bne.n	80147a8 <__ssputs_r+0x5c>
 80147e6:	6921      	ldr	r1, [r4, #16]
 80147e8:	4650      	mov	r0, sl
 80147ea:	f7fe fb73 	bl	8012ed4 <_free_r>
 80147ee:	230c      	movs	r3, #12
 80147f0:	f04f 30ff 	mov.w	r0, #4294967295
 80147f4:	f8ca 3000 	str.w	r3, [sl]
 80147f8:	89a3      	ldrh	r3, [r4, #12]
 80147fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147fe:	81a3      	strh	r3, [r4, #12]
 8014800:	e7e9      	b.n	80147d6 <__ssputs_r+0x8a>
	...

08014804 <_svfiprintf_r>:
 8014804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014808:	4698      	mov	r8, r3
 801480a:	898b      	ldrh	r3, [r1, #12]
 801480c:	b09d      	sub	sp, #116	@ 0x74
 801480e:	4607      	mov	r7, r0
 8014810:	061b      	lsls	r3, r3, #24
 8014812:	460d      	mov	r5, r1
 8014814:	4614      	mov	r4, r2
 8014816:	d510      	bpl.n	801483a <_svfiprintf_r+0x36>
 8014818:	690b      	ldr	r3, [r1, #16]
 801481a:	b973      	cbnz	r3, 801483a <_svfiprintf_r+0x36>
 801481c:	2140      	movs	r1, #64	@ 0x40
 801481e:	f7fe fbcd 	bl	8012fbc <_malloc_r>
 8014822:	6028      	str	r0, [r5, #0]
 8014824:	6128      	str	r0, [r5, #16]
 8014826:	b930      	cbnz	r0, 8014836 <_svfiprintf_r+0x32>
 8014828:	230c      	movs	r3, #12
 801482a:	603b      	str	r3, [r7, #0]
 801482c:	f04f 30ff 	mov.w	r0, #4294967295
 8014830:	b01d      	add	sp, #116	@ 0x74
 8014832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014836:	2340      	movs	r3, #64	@ 0x40
 8014838:	616b      	str	r3, [r5, #20]
 801483a:	2300      	movs	r3, #0
 801483c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014840:	f04f 0901 	mov.w	r9, #1
 8014844:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80149e8 <_svfiprintf_r+0x1e4>
 8014848:	9309      	str	r3, [sp, #36]	@ 0x24
 801484a:	2320      	movs	r3, #32
 801484c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014850:	2330      	movs	r3, #48	@ 0x30
 8014852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014856:	4623      	mov	r3, r4
 8014858:	469a      	mov	sl, r3
 801485a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801485e:	b10a      	cbz	r2, 8014864 <_svfiprintf_r+0x60>
 8014860:	2a25      	cmp	r2, #37	@ 0x25
 8014862:	d1f9      	bne.n	8014858 <_svfiprintf_r+0x54>
 8014864:	ebba 0b04 	subs.w	fp, sl, r4
 8014868:	d00b      	beq.n	8014882 <_svfiprintf_r+0x7e>
 801486a:	465b      	mov	r3, fp
 801486c:	4622      	mov	r2, r4
 801486e:	4629      	mov	r1, r5
 8014870:	4638      	mov	r0, r7
 8014872:	f7ff ff6b 	bl	801474c <__ssputs_r>
 8014876:	3001      	adds	r0, #1
 8014878:	f000 80a7 	beq.w	80149ca <_svfiprintf_r+0x1c6>
 801487c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801487e:	445a      	add	r2, fp
 8014880:	9209      	str	r2, [sp, #36]	@ 0x24
 8014882:	f89a 3000 	ldrb.w	r3, [sl]
 8014886:	2b00      	cmp	r3, #0
 8014888:	f000 809f 	beq.w	80149ca <_svfiprintf_r+0x1c6>
 801488c:	2300      	movs	r3, #0
 801488e:	f04f 32ff 	mov.w	r2, #4294967295
 8014892:	f10a 0a01 	add.w	sl, sl, #1
 8014896:	9304      	str	r3, [sp, #16]
 8014898:	9307      	str	r3, [sp, #28]
 801489a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801489e:	931a      	str	r3, [sp, #104]	@ 0x68
 80148a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148a4:	4654      	mov	r4, sl
 80148a6:	2205      	movs	r2, #5
 80148a8:	484f      	ldr	r0, [pc, #316]	@ (80149e8 <_svfiprintf_r+0x1e4>)
 80148aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148ae:	f7fd fc9a 	bl	80121e6 <memchr>
 80148b2:	9a04      	ldr	r2, [sp, #16]
 80148b4:	b9d8      	cbnz	r0, 80148ee <_svfiprintf_r+0xea>
 80148b6:	06d0      	lsls	r0, r2, #27
 80148b8:	bf44      	itt	mi
 80148ba:	2320      	movmi	r3, #32
 80148bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148c0:	0711      	lsls	r1, r2, #28
 80148c2:	bf44      	itt	mi
 80148c4:	232b      	movmi	r3, #43	@ 0x2b
 80148c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148ca:	f89a 3000 	ldrb.w	r3, [sl]
 80148ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80148d0:	d015      	beq.n	80148fe <_svfiprintf_r+0xfa>
 80148d2:	9a07      	ldr	r2, [sp, #28]
 80148d4:	4654      	mov	r4, sl
 80148d6:	2000      	movs	r0, #0
 80148d8:	f04f 0c0a 	mov.w	ip, #10
 80148dc:	4621      	mov	r1, r4
 80148de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148e2:	3b30      	subs	r3, #48	@ 0x30
 80148e4:	2b09      	cmp	r3, #9
 80148e6:	d94b      	bls.n	8014980 <_svfiprintf_r+0x17c>
 80148e8:	b1b0      	cbz	r0, 8014918 <_svfiprintf_r+0x114>
 80148ea:	9207      	str	r2, [sp, #28]
 80148ec:	e014      	b.n	8014918 <_svfiprintf_r+0x114>
 80148ee:	eba0 0308 	sub.w	r3, r0, r8
 80148f2:	46a2      	mov	sl, r4
 80148f4:	fa09 f303 	lsl.w	r3, r9, r3
 80148f8:	4313      	orrs	r3, r2
 80148fa:	9304      	str	r3, [sp, #16]
 80148fc:	e7d2      	b.n	80148a4 <_svfiprintf_r+0xa0>
 80148fe:	9b03      	ldr	r3, [sp, #12]
 8014900:	1d19      	adds	r1, r3, #4
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	9103      	str	r1, [sp, #12]
 8014908:	bfbb      	ittet	lt
 801490a:	425b      	neglt	r3, r3
 801490c:	f042 0202 	orrlt.w	r2, r2, #2
 8014910:	9307      	strge	r3, [sp, #28]
 8014912:	9307      	strlt	r3, [sp, #28]
 8014914:	bfb8      	it	lt
 8014916:	9204      	strlt	r2, [sp, #16]
 8014918:	7823      	ldrb	r3, [r4, #0]
 801491a:	2b2e      	cmp	r3, #46	@ 0x2e
 801491c:	d10a      	bne.n	8014934 <_svfiprintf_r+0x130>
 801491e:	7863      	ldrb	r3, [r4, #1]
 8014920:	2b2a      	cmp	r3, #42	@ 0x2a
 8014922:	d132      	bne.n	801498a <_svfiprintf_r+0x186>
 8014924:	9b03      	ldr	r3, [sp, #12]
 8014926:	3402      	adds	r4, #2
 8014928:	1d1a      	adds	r2, r3, #4
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014930:	9203      	str	r2, [sp, #12]
 8014932:	9305      	str	r3, [sp, #20]
 8014934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80149f8 <_svfiprintf_r+0x1f4>
 8014938:	2203      	movs	r2, #3
 801493a:	7821      	ldrb	r1, [r4, #0]
 801493c:	4650      	mov	r0, sl
 801493e:	f7fd fc52 	bl	80121e6 <memchr>
 8014942:	b138      	cbz	r0, 8014954 <_svfiprintf_r+0x150>
 8014944:	eba0 000a 	sub.w	r0, r0, sl
 8014948:	2240      	movs	r2, #64	@ 0x40
 801494a:	9b04      	ldr	r3, [sp, #16]
 801494c:	3401      	adds	r4, #1
 801494e:	4082      	lsls	r2, r0
 8014950:	4313      	orrs	r3, r2
 8014952:	9304      	str	r3, [sp, #16]
 8014954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014958:	2206      	movs	r2, #6
 801495a:	4824      	ldr	r0, [pc, #144]	@ (80149ec <_svfiprintf_r+0x1e8>)
 801495c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014960:	f7fd fc41 	bl	80121e6 <memchr>
 8014964:	2800      	cmp	r0, #0
 8014966:	d036      	beq.n	80149d6 <_svfiprintf_r+0x1d2>
 8014968:	4b21      	ldr	r3, [pc, #132]	@ (80149f0 <_svfiprintf_r+0x1ec>)
 801496a:	bb1b      	cbnz	r3, 80149b4 <_svfiprintf_r+0x1b0>
 801496c:	9b03      	ldr	r3, [sp, #12]
 801496e:	3307      	adds	r3, #7
 8014970:	f023 0307 	bic.w	r3, r3, #7
 8014974:	3308      	adds	r3, #8
 8014976:	9303      	str	r3, [sp, #12]
 8014978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801497a:	4433      	add	r3, r6
 801497c:	9309      	str	r3, [sp, #36]	@ 0x24
 801497e:	e76a      	b.n	8014856 <_svfiprintf_r+0x52>
 8014980:	fb0c 3202 	mla	r2, ip, r2, r3
 8014984:	460c      	mov	r4, r1
 8014986:	2001      	movs	r0, #1
 8014988:	e7a8      	b.n	80148dc <_svfiprintf_r+0xd8>
 801498a:	2300      	movs	r3, #0
 801498c:	3401      	adds	r4, #1
 801498e:	f04f 0c0a 	mov.w	ip, #10
 8014992:	4619      	mov	r1, r3
 8014994:	9305      	str	r3, [sp, #20]
 8014996:	4620      	mov	r0, r4
 8014998:	f810 2b01 	ldrb.w	r2, [r0], #1
 801499c:	3a30      	subs	r2, #48	@ 0x30
 801499e:	2a09      	cmp	r2, #9
 80149a0:	d903      	bls.n	80149aa <_svfiprintf_r+0x1a6>
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d0c6      	beq.n	8014934 <_svfiprintf_r+0x130>
 80149a6:	9105      	str	r1, [sp, #20]
 80149a8:	e7c4      	b.n	8014934 <_svfiprintf_r+0x130>
 80149aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80149ae:	4604      	mov	r4, r0
 80149b0:	2301      	movs	r3, #1
 80149b2:	e7f0      	b.n	8014996 <_svfiprintf_r+0x192>
 80149b4:	ab03      	add	r3, sp, #12
 80149b6:	462a      	mov	r2, r5
 80149b8:	a904      	add	r1, sp, #16
 80149ba:	4638      	mov	r0, r7
 80149bc:	9300      	str	r3, [sp, #0]
 80149be:	4b0d      	ldr	r3, [pc, #52]	@ (80149f4 <_svfiprintf_r+0x1f0>)
 80149c0:	f7fc fb9e 	bl	8011100 <_printf_float>
 80149c4:	1c42      	adds	r2, r0, #1
 80149c6:	4606      	mov	r6, r0
 80149c8:	d1d6      	bne.n	8014978 <_svfiprintf_r+0x174>
 80149ca:	89ab      	ldrh	r3, [r5, #12]
 80149cc:	065b      	lsls	r3, r3, #25
 80149ce:	f53f af2d 	bmi.w	801482c <_svfiprintf_r+0x28>
 80149d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80149d4:	e72c      	b.n	8014830 <_svfiprintf_r+0x2c>
 80149d6:	ab03      	add	r3, sp, #12
 80149d8:	462a      	mov	r2, r5
 80149da:	a904      	add	r1, sp, #16
 80149dc:	4638      	mov	r0, r7
 80149de:	9300      	str	r3, [sp, #0]
 80149e0:	4b04      	ldr	r3, [pc, #16]	@ (80149f4 <_svfiprintf_r+0x1f0>)
 80149e2:	f7fc fe29 	bl	8011638 <_printf_i>
 80149e6:	e7ed      	b.n	80149c4 <_svfiprintf_r+0x1c0>
 80149e8:	08015af9 	.word	0x08015af9
 80149ec:	08015b03 	.word	0x08015b03
 80149f0:	08011101 	.word	0x08011101
 80149f4:	0801474d 	.word	0x0801474d
 80149f8:	08015aff 	.word	0x08015aff

080149fc <__sfputc_r>:
 80149fc:	6893      	ldr	r3, [r2, #8]
 80149fe:	3b01      	subs	r3, #1
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	b410      	push	{r4}
 8014a04:	6093      	str	r3, [r2, #8]
 8014a06:	da08      	bge.n	8014a1a <__sfputc_r+0x1e>
 8014a08:	6994      	ldr	r4, [r2, #24]
 8014a0a:	42a3      	cmp	r3, r4
 8014a0c:	db01      	blt.n	8014a12 <__sfputc_r+0x16>
 8014a0e:	290a      	cmp	r1, #10
 8014a10:	d103      	bne.n	8014a1a <__sfputc_r+0x1e>
 8014a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a16:	f7fd bad2 	b.w	8011fbe <__swbuf_r>
 8014a1a:	6813      	ldr	r3, [r2, #0]
 8014a1c:	1c58      	adds	r0, r3, #1
 8014a1e:	6010      	str	r0, [r2, #0]
 8014a20:	4608      	mov	r0, r1
 8014a22:	7019      	strb	r1, [r3, #0]
 8014a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a28:	4770      	bx	lr

08014a2a <__sfputs_r>:
 8014a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a2c:	4606      	mov	r6, r0
 8014a2e:	460f      	mov	r7, r1
 8014a30:	4614      	mov	r4, r2
 8014a32:	18d5      	adds	r5, r2, r3
 8014a34:	42ac      	cmp	r4, r5
 8014a36:	d101      	bne.n	8014a3c <__sfputs_r+0x12>
 8014a38:	2000      	movs	r0, #0
 8014a3a:	e007      	b.n	8014a4c <__sfputs_r+0x22>
 8014a3c:	463a      	mov	r2, r7
 8014a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a42:	4630      	mov	r0, r6
 8014a44:	f7ff ffda 	bl	80149fc <__sfputc_r>
 8014a48:	1c43      	adds	r3, r0, #1
 8014a4a:	d1f3      	bne.n	8014a34 <__sfputs_r+0xa>
 8014a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a50 <_vfiprintf_r>:
 8014a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a54:	460d      	mov	r5, r1
 8014a56:	b09d      	sub	sp, #116	@ 0x74
 8014a58:	4614      	mov	r4, r2
 8014a5a:	4698      	mov	r8, r3
 8014a5c:	4606      	mov	r6, r0
 8014a5e:	b118      	cbz	r0, 8014a68 <_vfiprintf_r+0x18>
 8014a60:	6a03      	ldr	r3, [r0, #32]
 8014a62:	b90b      	cbnz	r3, 8014a68 <_vfiprintf_r+0x18>
 8014a64:	f7fd f9a0 	bl	8011da8 <__sinit>
 8014a68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a6a:	07d9      	lsls	r1, r3, #31
 8014a6c:	d405      	bmi.n	8014a7a <_vfiprintf_r+0x2a>
 8014a6e:	89ab      	ldrh	r3, [r5, #12]
 8014a70:	059a      	lsls	r2, r3, #22
 8014a72:	d402      	bmi.n	8014a7a <_vfiprintf_r+0x2a>
 8014a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a76:	f7fd fbb4 	bl	80121e2 <__retarget_lock_acquire_recursive>
 8014a7a:	89ab      	ldrh	r3, [r5, #12]
 8014a7c:	071b      	lsls	r3, r3, #28
 8014a7e:	d501      	bpl.n	8014a84 <_vfiprintf_r+0x34>
 8014a80:	692b      	ldr	r3, [r5, #16]
 8014a82:	b99b      	cbnz	r3, 8014aac <_vfiprintf_r+0x5c>
 8014a84:	4629      	mov	r1, r5
 8014a86:	4630      	mov	r0, r6
 8014a88:	f7fd fad8 	bl	801203c <__swsetup_r>
 8014a8c:	b170      	cbz	r0, 8014aac <_vfiprintf_r+0x5c>
 8014a8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a90:	07dc      	lsls	r4, r3, #31
 8014a92:	d504      	bpl.n	8014a9e <_vfiprintf_r+0x4e>
 8014a94:	f04f 30ff 	mov.w	r0, #4294967295
 8014a98:	b01d      	add	sp, #116	@ 0x74
 8014a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a9e:	89ab      	ldrh	r3, [r5, #12]
 8014aa0:	0598      	lsls	r0, r3, #22
 8014aa2:	d4f7      	bmi.n	8014a94 <_vfiprintf_r+0x44>
 8014aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014aa6:	f7fd fb9d 	bl	80121e4 <__retarget_lock_release_recursive>
 8014aaa:	e7f3      	b.n	8014a94 <_vfiprintf_r+0x44>
 8014aac:	2300      	movs	r3, #0
 8014aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ab2:	f04f 0901 	mov.w	r9, #1
 8014ab6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8014c6c <_vfiprintf_r+0x21c>
 8014aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8014abc:	2320      	movs	r3, #32
 8014abe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014ac2:	2330      	movs	r3, #48	@ 0x30
 8014ac4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014ac8:	4623      	mov	r3, r4
 8014aca:	469a      	mov	sl, r3
 8014acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ad0:	b10a      	cbz	r2, 8014ad6 <_vfiprintf_r+0x86>
 8014ad2:	2a25      	cmp	r2, #37	@ 0x25
 8014ad4:	d1f9      	bne.n	8014aca <_vfiprintf_r+0x7a>
 8014ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8014ada:	d00b      	beq.n	8014af4 <_vfiprintf_r+0xa4>
 8014adc:	465b      	mov	r3, fp
 8014ade:	4622      	mov	r2, r4
 8014ae0:	4629      	mov	r1, r5
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	f7ff ffa1 	bl	8014a2a <__sfputs_r>
 8014ae8:	3001      	adds	r0, #1
 8014aea:	f000 80a7 	beq.w	8014c3c <_vfiprintf_r+0x1ec>
 8014aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014af0:	445a      	add	r2, fp
 8014af2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014af4:	f89a 3000 	ldrb.w	r3, [sl]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	f000 809f 	beq.w	8014c3c <_vfiprintf_r+0x1ec>
 8014afe:	2300      	movs	r3, #0
 8014b00:	f04f 32ff 	mov.w	r2, #4294967295
 8014b04:	f10a 0a01 	add.w	sl, sl, #1
 8014b08:	9304      	str	r3, [sp, #16]
 8014b0a:	9307      	str	r3, [sp, #28]
 8014b0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b10:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b16:	4654      	mov	r4, sl
 8014b18:	2205      	movs	r2, #5
 8014b1a:	4854      	ldr	r0, [pc, #336]	@ (8014c6c <_vfiprintf_r+0x21c>)
 8014b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b20:	f7fd fb61 	bl	80121e6 <memchr>
 8014b24:	9a04      	ldr	r2, [sp, #16]
 8014b26:	b9d8      	cbnz	r0, 8014b60 <_vfiprintf_r+0x110>
 8014b28:	06d1      	lsls	r1, r2, #27
 8014b2a:	bf44      	itt	mi
 8014b2c:	2320      	movmi	r3, #32
 8014b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b32:	0713      	lsls	r3, r2, #28
 8014b34:	bf44      	itt	mi
 8014b36:	232b      	movmi	r3, #43	@ 0x2b
 8014b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8014b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b42:	d015      	beq.n	8014b70 <_vfiprintf_r+0x120>
 8014b44:	9a07      	ldr	r2, [sp, #28]
 8014b46:	4654      	mov	r4, sl
 8014b48:	2000      	movs	r0, #0
 8014b4a:	f04f 0c0a 	mov.w	ip, #10
 8014b4e:	4621      	mov	r1, r4
 8014b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b54:	3b30      	subs	r3, #48	@ 0x30
 8014b56:	2b09      	cmp	r3, #9
 8014b58:	d94b      	bls.n	8014bf2 <_vfiprintf_r+0x1a2>
 8014b5a:	b1b0      	cbz	r0, 8014b8a <_vfiprintf_r+0x13a>
 8014b5c:	9207      	str	r2, [sp, #28]
 8014b5e:	e014      	b.n	8014b8a <_vfiprintf_r+0x13a>
 8014b60:	eba0 0308 	sub.w	r3, r0, r8
 8014b64:	46a2      	mov	sl, r4
 8014b66:	fa09 f303 	lsl.w	r3, r9, r3
 8014b6a:	4313      	orrs	r3, r2
 8014b6c:	9304      	str	r3, [sp, #16]
 8014b6e:	e7d2      	b.n	8014b16 <_vfiprintf_r+0xc6>
 8014b70:	9b03      	ldr	r3, [sp, #12]
 8014b72:	1d19      	adds	r1, r3, #4
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	9103      	str	r1, [sp, #12]
 8014b7a:	bfbb      	ittet	lt
 8014b7c:	425b      	neglt	r3, r3
 8014b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8014b82:	9307      	strge	r3, [sp, #28]
 8014b84:	9307      	strlt	r3, [sp, #28]
 8014b86:	bfb8      	it	lt
 8014b88:	9204      	strlt	r2, [sp, #16]
 8014b8a:	7823      	ldrb	r3, [r4, #0]
 8014b8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b8e:	d10a      	bne.n	8014ba6 <_vfiprintf_r+0x156>
 8014b90:	7863      	ldrb	r3, [r4, #1]
 8014b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b94:	d132      	bne.n	8014bfc <_vfiprintf_r+0x1ac>
 8014b96:	9b03      	ldr	r3, [sp, #12]
 8014b98:	3402      	adds	r4, #2
 8014b9a:	1d1a      	adds	r2, r3, #4
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014ba2:	9203      	str	r2, [sp, #12]
 8014ba4:	9305      	str	r3, [sp, #20]
 8014ba6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014c7c <_vfiprintf_r+0x22c>
 8014baa:	2203      	movs	r2, #3
 8014bac:	7821      	ldrb	r1, [r4, #0]
 8014bae:	4650      	mov	r0, sl
 8014bb0:	f7fd fb19 	bl	80121e6 <memchr>
 8014bb4:	b138      	cbz	r0, 8014bc6 <_vfiprintf_r+0x176>
 8014bb6:	eba0 000a 	sub.w	r0, r0, sl
 8014bba:	2240      	movs	r2, #64	@ 0x40
 8014bbc:	9b04      	ldr	r3, [sp, #16]
 8014bbe:	3401      	adds	r4, #1
 8014bc0:	4082      	lsls	r2, r0
 8014bc2:	4313      	orrs	r3, r2
 8014bc4:	9304      	str	r3, [sp, #16]
 8014bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bca:	2206      	movs	r2, #6
 8014bcc:	4828      	ldr	r0, [pc, #160]	@ (8014c70 <_vfiprintf_r+0x220>)
 8014bce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014bd2:	f7fd fb08 	bl	80121e6 <memchr>
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	d03f      	beq.n	8014c5a <_vfiprintf_r+0x20a>
 8014bda:	4b26      	ldr	r3, [pc, #152]	@ (8014c74 <_vfiprintf_r+0x224>)
 8014bdc:	bb1b      	cbnz	r3, 8014c26 <_vfiprintf_r+0x1d6>
 8014bde:	9b03      	ldr	r3, [sp, #12]
 8014be0:	3307      	adds	r3, #7
 8014be2:	f023 0307 	bic.w	r3, r3, #7
 8014be6:	3308      	adds	r3, #8
 8014be8:	9303      	str	r3, [sp, #12]
 8014bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bec:	443b      	add	r3, r7
 8014bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8014bf0:	e76a      	b.n	8014ac8 <_vfiprintf_r+0x78>
 8014bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bf6:	460c      	mov	r4, r1
 8014bf8:	2001      	movs	r0, #1
 8014bfa:	e7a8      	b.n	8014b4e <_vfiprintf_r+0xfe>
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	3401      	adds	r4, #1
 8014c00:	f04f 0c0a 	mov.w	ip, #10
 8014c04:	4619      	mov	r1, r3
 8014c06:	9305      	str	r3, [sp, #20]
 8014c08:	4620      	mov	r0, r4
 8014c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c0e:	3a30      	subs	r2, #48	@ 0x30
 8014c10:	2a09      	cmp	r2, #9
 8014c12:	d903      	bls.n	8014c1c <_vfiprintf_r+0x1cc>
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d0c6      	beq.n	8014ba6 <_vfiprintf_r+0x156>
 8014c18:	9105      	str	r1, [sp, #20]
 8014c1a:	e7c4      	b.n	8014ba6 <_vfiprintf_r+0x156>
 8014c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c20:	4604      	mov	r4, r0
 8014c22:	2301      	movs	r3, #1
 8014c24:	e7f0      	b.n	8014c08 <_vfiprintf_r+0x1b8>
 8014c26:	ab03      	add	r3, sp, #12
 8014c28:	462a      	mov	r2, r5
 8014c2a:	a904      	add	r1, sp, #16
 8014c2c:	4630      	mov	r0, r6
 8014c2e:	9300      	str	r3, [sp, #0]
 8014c30:	4b11      	ldr	r3, [pc, #68]	@ (8014c78 <_vfiprintf_r+0x228>)
 8014c32:	f7fc fa65 	bl	8011100 <_printf_float>
 8014c36:	4607      	mov	r7, r0
 8014c38:	1c78      	adds	r0, r7, #1
 8014c3a:	d1d6      	bne.n	8014bea <_vfiprintf_r+0x19a>
 8014c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c3e:	07d9      	lsls	r1, r3, #31
 8014c40:	d405      	bmi.n	8014c4e <_vfiprintf_r+0x1fe>
 8014c42:	89ab      	ldrh	r3, [r5, #12]
 8014c44:	059a      	lsls	r2, r3, #22
 8014c46:	d402      	bmi.n	8014c4e <_vfiprintf_r+0x1fe>
 8014c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c4a:	f7fd facb 	bl	80121e4 <__retarget_lock_release_recursive>
 8014c4e:	89ab      	ldrh	r3, [r5, #12]
 8014c50:	065b      	lsls	r3, r3, #25
 8014c52:	f53f af1f 	bmi.w	8014a94 <_vfiprintf_r+0x44>
 8014c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c58:	e71e      	b.n	8014a98 <_vfiprintf_r+0x48>
 8014c5a:	ab03      	add	r3, sp, #12
 8014c5c:	462a      	mov	r2, r5
 8014c5e:	a904      	add	r1, sp, #16
 8014c60:	4630      	mov	r0, r6
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	4b04      	ldr	r3, [pc, #16]	@ (8014c78 <_vfiprintf_r+0x228>)
 8014c66:	f7fc fce7 	bl	8011638 <_printf_i>
 8014c6a:	e7e4      	b.n	8014c36 <_vfiprintf_r+0x1e6>
 8014c6c:	08015af9 	.word	0x08015af9
 8014c70:	08015b03 	.word	0x08015b03
 8014c74:	08011101 	.word	0x08011101
 8014c78:	08014a2b 	.word	0x08014a2b
 8014c7c:	08015aff 	.word	0x08015aff

08014c80 <__sflush_r>:
 8014c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c88:	0716      	lsls	r6, r2, #28
 8014c8a:	4605      	mov	r5, r0
 8014c8c:	460c      	mov	r4, r1
 8014c8e:	d454      	bmi.n	8014d3a <__sflush_r+0xba>
 8014c90:	684b      	ldr	r3, [r1, #4]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	dc02      	bgt.n	8014c9c <__sflush_r+0x1c>
 8014c96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	dd48      	ble.n	8014d2e <__sflush_r+0xae>
 8014c9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c9e:	2e00      	cmp	r6, #0
 8014ca0:	d045      	beq.n	8014d2e <__sflush_r+0xae>
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014ca8:	682f      	ldr	r7, [r5, #0]
 8014caa:	6a21      	ldr	r1, [r4, #32]
 8014cac:	602b      	str	r3, [r5, #0]
 8014cae:	d030      	beq.n	8014d12 <__sflush_r+0x92>
 8014cb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014cb2:	89a3      	ldrh	r3, [r4, #12]
 8014cb4:	0759      	lsls	r1, r3, #29
 8014cb6:	d505      	bpl.n	8014cc4 <__sflush_r+0x44>
 8014cb8:	6863      	ldr	r3, [r4, #4]
 8014cba:	1ad2      	subs	r2, r2, r3
 8014cbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014cbe:	b10b      	cbz	r3, 8014cc4 <__sflush_r+0x44>
 8014cc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014cc2:	1ad2      	subs	r2, r2, r3
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014cc8:	6a21      	ldr	r1, [r4, #32]
 8014cca:	4628      	mov	r0, r5
 8014ccc:	47b0      	blx	r6
 8014cce:	1c43      	adds	r3, r0, #1
 8014cd0:	89a3      	ldrh	r3, [r4, #12]
 8014cd2:	d106      	bne.n	8014ce2 <__sflush_r+0x62>
 8014cd4:	6829      	ldr	r1, [r5, #0]
 8014cd6:	291d      	cmp	r1, #29
 8014cd8:	d82b      	bhi.n	8014d32 <__sflush_r+0xb2>
 8014cda:	4a2a      	ldr	r2, [pc, #168]	@ (8014d84 <__sflush_r+0x104>)
 8014cdc:	40ca      	lsrs	r2, r1
 8014cde:	07d6      	lsls	r6, r2, #31
 8014ce0:	d527      	bpl.n	8014d32 <__sflush_r+0xb2>
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	04d9      	lsls	r1, r3, #19
 8014ce6:	6062      	str	r2, [r4, #4]
 8014ce8:	6922      	ldr	r2, [r4, #16]
 8014cea:	6022      	str	r2, [r4, #0]
 8014cec:	d504      	bpl.n	8014cf8 <__sflush_r+0x78>
 8014cee:	1c42      	adds	r2, r0, #1
 8014cf0:	d101      	bne.n	8014cf6 <__sflush_r+0x76>
 8014cf2:	682b      	ldr	r3, [r5, #0]
 8014cf4:	b903      	cbnz	r3, 8014cf8 <__sflush_r+0x78>
 8014cf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8014cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014cfa:	602f      	str	r7, [r5, #0]
 8014cfc:	b1b9      	cbz	r1, 8014d2e <__sflush_r+0xae>
 8014cfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d02:	4299      	cmp	r1, r3
 8014d04:	d002      	beq.n	8014d0c <__sflush_r+0x8c>
 8014d06:	4628      	mov	r0, r5
 8014d08:	f7fe f8e4 	bl	8012ed4 <_free_r>
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d10:	e00d      	b.n	8014d2e <__sflush_r+0xae>
 8014d12:	2301      	movs	r3, #1
 8014d14:	4628      	mov	r0, r5
 8014d16:	47b0      	blx	r6
 8014d18:	4602      	mov	r2, r0
 8014d1a:	1c50      	adds	r0, r2, #1
 8014d1c:	d1c9      	bne.n	8014cb2 <__sflush_r+0x32>
 8014d1e:	682b      	ldr	r3, [r5, #0]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d0c6      	beq.n	8014cb2 <__sflush_r+0x32>
 8014d24:	2b1d      	cmp	r3, #29
 8014d26:	d001      	beq.n	8014d2c <__sflush_r+0xac>
 8014d28:	2b16      	cmp	r3, #22
 8014d2a:	d11d      	bne.n	8014d68 <__sflush_r+0xe8>
 8014d2c:	602f      	str	r7, [r5, #0]
 8014d2e:	2000      	movs	r0, #0
 8014d30:	e021      	b.n	8014d76 <__sflush_r+0xf6>
 8014d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d36:	b21b      	sxth	r3, r3
 8014d38:	e01a      	b.n	8014d70 <__sflush_r+0xf0>
 8014d3a:	690f      	ldr	r7, [r1, #16]
 8014d3c:	2f00      	cmp	r7, #0
 8014d3e:	d0f6      	beq.n	8014d2e <__sflush_r+0xae>
 8014d40:	0793      	lsls	r3, r2, #30
 8014d42:	680e      	ldr	r6, [r1, #0]
 8014d44:	600f      	str	r7, [r1, #0]
 8014d46:	bf0c      	ite	eq
 8014d48:	694b      	ldreq	r3, [r1, #20]
 8014d4a:	2300      	movne	r3, #0
 8014d4c:	eba6 0807 	sub.w	r8, r6, r7
 8014d50:	608b      	str	r3, [r1, #8]
 8014d52:	f1b8 0f00 	cmp.w	r8, #0
 8014d56:	ddea      	ble.n	8014d2e <__sflush_r+0xae>
 8014d58:	4643      	mov	r3, r8
 8014d5a:	463a      	mov	r2, r7
 8014d5c:	6a21      	ldr	r1, [r4, #32]
 8014d5e:	4628      	mov	r0, r5
 8014d60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014d62:	47b0      	blx	r6
 8014d64:	2800      	cmp	r0, #0
 8014d66:	dc08      	bgt.n	8014d7a <__sflush_r+0xfa>
 8014d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d70:	f04f 30ff 	mov.w	r0, #4294967295
 8014d74:	81a3      	strh	r3, [r4, #12]
 8014d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d7a:	4407      	add	r7, r0
 8014d7c:	eba8 0800 	sub.w	r8, r8, r0
 8014d80:	e7e7      	b.n	8014d52 <__sflush_r+0xd2>
 8014d82:	bf00      	nop
 8014d84:	20400001 	.word	0x20400001

08014d88 <_fflush_r>:
 8014d88:	b538      	push	{r3, r4, r5, lr}
 8014d8a:	690b      	ldr	r3, [r1, #16]
 8014d8c:	4605      	mov	r5, r0
 8014d8e:	460c      	mov	r4, r1
 8014d90:	b913      	cbnz	r3, 8014d98 <_fflush_r+0x10>
 8014d92:	2500      	movs	r5, #0
 8014d94:	4628      	mov	r0, r5
 8014d96:	bd38      	pop	{r3, r4, r5, pc}
 8014d98:	b118      	cbz	r0, 8014da2 <_fflush_r+0x1a>
 8014d9a:	6a03      	ldr	r3, [r0, #32]
 8014d9c:	b90b      	cbnz	r3, 8014da2 <_fflush_r+0x1a>
 8014d9e:	f7fd f803 	bl	8011da8 <__sinit>
 8014da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d0f3      	beq.n	8014d92 <_fflush_r+0xa>
 8014daa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014dac:	07d0      	lsls	r0, r2, #31
 8014dae:	d404      	bmi.n	8014dba <_fflush_r+0x32>
 8014db0:	0599      	lsls	r1, r3, #22
 8014db2:	d402      	bmi.n	8014dba <_fflush_r+0x32>
 8014db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014db6:	f7fd fa14 	bl	80121e2 <__retarget_lock_acquire_recursive>
 8014dba:	4628      	mov	r0, r5
 8014dbc:	4621      	mov	r1, r4
 8014dbe:	f7ff ff5f 	bl	8014c80 <__sflush_r>
 8014dc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014dc4:	4605      	mov	r5, r0
 8014dc6:	07da      	lsls	r2, r3, #31
 8014dc8:	d4e4      	bmi.n	8014d94 <_fflush_r+0xc>
 8014dca:	89a3      	ldrh	r3, [r4, #12]
 8014dcc:	059b      	lsls	r3, r3, #22
 8014dce:	d4e1      	bmi.n	8014d94 <_fflush_r+0xc>
 8014dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014dd2:	f7fd fa07 	bl	80121e4 <__retarget_lock_release_recursive>
 8014dd6:	e7dd      	b.n	8014d94 <_fflush_r+0xc>

08014dd8 <__swhatbuf_r>:
 8014dd8:	b570      	push	{r4, r5, r6, lr}
 8014dda:	460c      	mov	r4, r1
 8014ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014de0:	b096      	sub	sp, #88	@ 0x58
 8014de2:	4615      	mov	r5, r2
 8014de4:	2900      	cmp	r1, #0
 8014de6:	461e      	mov	r6, r3
 8014de8:	da0c      	bge.n	8014e04 <__swhatbuf_r+0x2c>
 8014dea:	89a3      	ldrh	r3, [r4, #12]
 8014dec:	2100      	movs	r1, #0
 8014dee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014df2:	bf14      	ite	ne
 8014df4:	2340      	movne	r3, #64	@ 0x40
 8014df6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	6031      	str	r1, [r6, #0]
 8014dfe:	602b      	str	r3, [r5, #0]
 8014e00:	b016      	add	sp, #88	@ 0x58
 8014e02:	bd70      	pop	{r4, r5, r6, pc}
 8014e04:	466a      	mov	r2, sp
 8014e06:	f000 f875 	bl	8014ef4 <_fstat_r>
 8014e0a:	2800      	cmp	r0, #0
 8014e0c:	dbed      	blt.n	8014dea <__swhatbuf_r+0x12>
 8014e0e:	9901      	ldr	r1, [sp, #4]
 8014e10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e18:	4259      	negs	r1, r3
 8014e1a:	4159      	adcs	r1, r3
 8014e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e20:	e7eb      	b.n	8014dfa <__swhatbuf_r+0x22>

08014e22 <__smakebuf_r>:
 8014e22:	898b      	ldrh	r3, [r1, #12]
 8014e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e26:	079d      	lsls	r5, r3, #30
 8014e28:	4606      	mov	r6, r0
 8014e2a:	460c      	mov	r4, r1
 8014e2c:	d507      	bpl.n	8014e3e <__smakebuf_r+0x1c>
 8014e2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e32:	6023      	str	r3, [r4, #0]
 8014e34:	6123      	str	r3, [r4, #16]
 8014e36:	2301      	movs	r3, #1
 8014e38:	6163      	str	r3, [r4, #20]
 8014e3a:	b003      	add	sp, #12
 8014e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e3e:	ab01      	add	r3, sp, #4
 8014e40:	466a      	mov	r2, sp
 8014e42:	f7ff ffc9 	bl	8014dd8 <__swhatbuf_r>
 8014e46:	9f00      	ldr	r7, [sp, #0]
 8014e48:	4605      	mov	r5, r0
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	4639      	mov	r1, r7
 8014e4e:	f7fe f8b5 	bl	8012fbc <_malloc_r>
 8014e52:	b948      	cbnz	r0, 8014e68 <__smakebuf_r+0x46>
 8014e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e58:	059a      	lsls	r2, r3, #22
 8014e5a:	d4ee      	bmi.n	8014e3a <__smakebuf_r+0x18>
 8014e5c:	f023 0303 	bic.w	r3, r3, #3
 8014e60:	f043 0302 	orr.w	r3, r3, #2
 8014e64:	81a3      	strh	r3, [r4, #12]
 8014e66:	e7e2      	b.n	8014e2e <__smakebuf_r+0xc>
 8014e68:	89a3      	ldrh	r3, [r4, #12]
 8014e6a:	6020      	str	r0, [r4, #0]
 8014e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e70:	81a3      	strh	r3, [r4, #12]
 8014e72:	9b01      	ldr	r3, [sp, #4]
 8014e74:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014e78:	b15b      	cbz	r3, 8014e92 <__smakebuf_r+0x70>
 8014e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e7e:	4630      	mov	r0, r6
 8014e80:	f000 f84a 	bl	8014f18 <_isatty_r>
 8014e84:	b128      	cbz	r0, 8014e92 <__smakebuf_r+0x70>
 8014e86:	89a3      	ldrh	r3, [r4, #12]
 8014e88:	f023 0303 	bic.w	r3, r3, #3
 8014e8c:	f043 0301 	orr.w	r3, r3, #1
 8014e90:	81a3      	strh	r3, [r4, #12]
 8014e92:	89a3      	ldrh	r3, [r4, #12]
 8014e94:	431d      	orrs	r5, r3
 8014e96:	81a5      	strh	r5, [r4, #12]
 8014e98:	e7cf      	b.n	8014e3a <__smakebuf_r+0x18>

08014e9a <memmove>:
 8014e9a:	4288      	cmp	r0, r1
 8014e9c:	b510      	push	{r4, lr}
 8014e9e:	eb01 0402 	add.w	r4, r1, r2
 8014ea2:	d902      	bls.n	8014eaa <memmove+0x10>
 8014ea4:	4284      	cmp	r4, r0
 8014ea6:	4623      	mov	r3, r4
 8014ea8:	d807      	bhi.n	8014eba <memmove+0x20>
 8014eaa:	1e43      	subs	r3, r0, #1
 8014eac:	42a1      	cmp	r1, r4
 8014eae:	d008      	beq.n	8014ec2 <memmove+0x28>
 8014eb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014eb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014eb8:	e7f8      	b.n	8014eac <memmove+0x12>
 8014eba:	4402      	add	r2, r0
 8014ebc:	4601      	mov	r1, r0
 8014ebe:	428a      	cmp	r2, r1
 8014ec0:	d100      	bne.n	8014ec4 <memmove+0x2a>
 8014ec2:	bd10      	pop	{r4, pc}
 8014ec4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ec8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ecc:	e7f7      	b.n	8014ebe <memmove+0x24>

08014ece <strncmp>:
 8014ece:	b510      	push	{r4, lr}
 8014ed0:	b16a      	cbz	r2, 8014eee <strncmp+0x20>
 8014ed2:	3901      	subs	r1, #1
 8014ed4:	1884      	adds	r4, r0, r2
 8014ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014eda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d103      	bne.n	8014eea <strncmp+0x1c>
 8014ee2:	42a0      	cmp	r0, r4
 8014ee4:	d001      	beq.n	8014eea <strncmp+0x1c>
 8014ee6:	2a00      	cmp	r2, #0
 8014ee8:	d1f5      	bne.n	8014ed6 <strncmp+0x8>
 8014eea:	1ad0      	subs	r0, r2, r3
 8014eec:	bd10      	pop	{r4, pc}
 8014eee:	4610      	mov	r0, r2
 8014ef0:	e7fc      	b.n	8014eec <strncmp+0x1e>
	...

08014ef4 <_fstat_r>:
 8014ef4:	b538      	push	{r3, r4, r5, lr}
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	4d06      	ldr	r5, [pc, #24]	@ (8014f14 <_fstat_r+0x20>)
 8014efa:	4604      	mov	r4, r0
 8014efc:	4608      	mov	r0, r1
 8014efe:	4611      	mov	r1, r2
 8014f00:	602b      	str	r3, [r5, #0]
 8014f02:	f7ed f845 	bl	8001f90 <_fstat>
 8014f06:	1c43      	adds	r3, r0, #1
 8014f08:	d102      	bne.n	8014f10 <_fstat_r+0x1c>
 8014f0a:	682b      	ldr	r3, [r5, #0]
 8014f0c:	b103      	cbz	r3, 8014f10 <_fstat_r+0x1c>
 8014f0e:	6023      	str	r3, [r4, #0]
 8014f10:	bd38      	pop	{r3, r4, r5, pc}
 8014f12:	bf00      	nop
 8014f14:	20000a24 	.word	0x20000a24

08014f18 <_isatty_r>:
 8014f18:	b538      	push	{r3, r4, r5, lr}
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	4d05      	ldr	r5, [pc, #20]	@ (8014f34 <_isatty_r+0x1c>)
 8014f1e:	4604      	mov	r4, r0
 8014f20:	4608      	mov	r0, r1
 8014f22:	602b      	str	r3, [r5, #0]
 8014f24:	f7ed f844 	bl	8001fb0 <_isatty>
 8014f28:	1c43      	adds	r3, r0, #1
 8014f2a:	d102      	bne.n	8014f32 <_isatty_r+0x1a>
 8014f2c:	682b      	ldr	r3, [r5, #0]
 8014f2e:	b103      	cbz	r3, 8014f32 <_isatty_r+0x1a>
 8014f30:	6023      	str	r3, [r4, #0]
 8014f32:	bd38      	pop	{r3, r4, r5, pc}
 8014f34:	20000a24 	.word	0x20000a24

08014f38 <_sbrk_r>:
 8014f38:	b538      	push	{r3, r4, r5, lr}
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	4d05      	ldr	r5, [pc, #20]	@ (8014f54 <_sbrk_r+0x1c>)
 8014f3e:	4604      	mov	r4, r0
 8014f40:	4608      	mov	r0, r1
 8014f42:	602b      	str	r3, [r5, #0]
 8014f44:	f7ed f84c 	bl	8001fe0 <_sbrk>
 8014f48:	1c43      	adds	r3, r0, #1
 8014f4a:	d102      	bne.n	8014f52 <_sbrk_r+0x1a>
 8014f4c:	682b      	ldr	r3, [r5, #0]
 8014f4e:	b103      	cbz	r3, 8014f52 <_sbrk_r+0x1a>
 8014f50:	6023      	str	r3, [r4, #0]
 8014f52:	bd38      	pop	{r3, r4, r5, pc}
 8014f54:	20000a24 	.word	0x20000a24

08014f58 <memcpy>:
 8014f58:	440a      	add	r2, r1
 8014f5a:	1e43      	subs	r3, r0, #1
 8014f5c:	4291      	cmp	r1, r2
 8014f5e:	d100      	bne.n	8014f62 <memcpy+0xa>
 8014f60:	4770      	bx	lr
 8014f62:	b510      	push	{r4, lr}
 8014f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f68:	4291      	cmp	r1, r2
 8014f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f6e:	d1f9      	bne.n	8014f64 <memcpy+0xc>
 8014f70:	bd10      	pop	{r4, pc}
 8014f72:	0000      	movs	r0, r0
 8014f74:	0000      	movs	r0, r0
	...

08014f78 <nan>:
 8014f78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014f80 <nan+0x8>
 8014f7c:	4770      	bx	lr
 8014f7e:	bf00      	nop
 8014f80:	00000000 	.word	0x00000000
 8014f84:	7ff80000 	.word	0x7ff80000

08014f88 <__assert_func>:
 8014f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f8a:	4614      	mov	r4, r2
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	4b09      	ldr	r3, [pc, #36]	@ (8014fb4 <__assert_func+0x2c>)
 8014f90:	4605      	mov	r5, r0
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	68d8      	ldr	r0, [r3, #12]
 8014f96:	b14c      	cbz	r4, 8014fac <__assert_func+0x24>
 8014f98:	4b07      	ldr	r3, [pc, #28]	@ (8014fb8 <__assert_func+0x30>)
 8014f9a:	9100      	str	r1, [sp, #0]
 8014f9c:	4907      	ldr	r1, [pc, #28]	@ (8014fbc <__assert_func+0x34>)
 8014f9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014fa2:	462b      	mov	r3, r5
 8014fa4:	f000 fba4 	bl	80156f0 <fiprintf>
 8014fa8:	f000 fbb4 	bl	8015714 <abort>
 8014fac:	4b04      	ldr	r3, [pc, #16]	@ (8014fc0 <__assert_func+0x38>)
 8014fae:	461c      	mov	r4, r3
 8014fb0:	e7f3      	b.n	8014f9a <__assert_func+0x12>
 8014fb2:	bf00      	nop
 8014fb4:	2000017c 	.word	0x2000017c
 8014fb8:	08015b12 	.word	0x08015b12
 8014fbc:	08015b1f 	.word	0x08015b1f
 8014fc0:	08015b4d 	.word	0x08015b4d

08014fc4 <_calloc_r>:
 8014fc4:	b570      	push	{r4, r5, r6, lr}
 8014fc6:	fba1 5402 	umull	r5, r4, r1, r2
 8014fca:	b934      	cbnz	r4, 8014fda <_calloc_r+0x16>
 8014fcc:	4629      	mov	r1, r5
 8014fce:	f7fd fff5 	bl	8012fbc <_malloc_r>
 8014fd2:	4606      	mov	r6, r0
 8014fd4:	b928      	cbnz	r0, 8014fe2 <_calloc_r+0x1e>
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	bd70      	pop	{r4, r5, r6, pc}
 8014fda:	220c      	movs	r2, #12
 8014fdc:	2600      	movs	r6, #0
 8014fde:	6002      	str	r2, [r0, #0]
 8014fe0:	e7f9      	b.n	8014fd6 <_calloc_r+0x12>
 8014fe2:	462a      	mov	r2, r5
 8014fe4:	4621      	mov	r1, r4
 8014fe6:	f7fd f87f 	bl	80120e8 <memset>
 8014fea:	e7f4      	b.n	8014fd6 <_calloc_r+0x12>

08014fec <rshift>:
 8014fec:	6903      	ldr	r3, [r0, #16]
 8014fee:	114a      	asrs	r2, r1, #5
 8014ff0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ff8:	f100 0414 	add.w	r4, r0, #20
 8014ffc:	dd45      	ble.n	801508a <rshift+0x9e>
 8014ffe:	f011 011f 	ands.w	r1, r1, #31
 8015002:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015006:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801500a:	d10c      	bne.n	8015026 <rshift+0x3a>
 801500c:	f100 0710 	add.w	r7, r0, #16
 8015010:	4629      	mov	r1, r5
 8015012:	42b1      	cmp	r1, r6
 8015014:	d334      	bcc.n	8015080 <rshift+0x94>
 8015016:	1a9b      	subs	r3, r3, r2
 8015018:	1eea      	subs	r2, r5, #3
 801501a:	009b      	lsls	r3, r3, #2
 801501c:	4296      	cmp	r6, r2
 801501e:	bf38      	it	cc
 8015020:	2300      	movcc	r3, #0
 8015022:	4423      	add	r3, r4
 8015024:	e015      	b.n	8015052 <rshift+0x66>
 8015026:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801502a:	f1c1 0820 	rsb	r8, r1, #32
 801502e:	f105 0e04 	add.w	lr, r5, #4
 8015032:	46a1      	mov	r9, r4
 8015034:	40cf      	lsrs	r7, r1
 8015036:	4576      	cmp	r6, lr
 8015038:	46f4      	mov	ip, lr
 801503a:	d815      	bhi.n	8015068 <rshift+0x7c>
 801503c:	1a9a      	subs	r2, r3, r2
 801503e:	3501      	adds	r5, #1
 8015040:	0092      	lsls	r2, r2, #2
 8015042:	3a04      	subs	r2, #4
 8015044:	42ae      	cmp	r6, r5
 8015046:	bf38      	it	cc
 8015048:	2200      	movcc	r2, #0
 801504a:	18a3      	adds	r3, r4, r2
 801504c:	50a7      	str	r7, [r4, r2]
 801504e:	b107      	cbz	r7, 8015052 <rshift+0x66>
 8015050:	3304      	adds	r3, #4
 8015052:	1b1a      	subs	r2, r3, r4
 8015054:	42a3      	cmp	r3, r4
 8015056:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801505a:	bf08      	it	eq
 801505c:	2300      	moveq	r3, #0
 801505e:	6102      	str	r2, [r0, #16]
 8015060:	bf08      	it	eq
 8015062:	6143      	streq	r3, [r0, #20]
 8015064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015068:	f8dc c000 	ldr.w	ip, [ip]
 801506c:	fa0c fc08 	lsl.w	ip, ip, r8
 8015070:	ea4c 0707 	orr.w	r7, ip, r7
 8015074:	f849 7b04 	str.w	r7, [r9], #4
 8015078:	f85e 7b04 	ldr.w	r7, [lr], #4
 801507c:	40cf      	lsrs	r7, r1
 801507e:	e7da      	b.n	8015036 <rshift+0x4a>
 8015080:	f851 cb04 	ldr.w	ip, [r1], #4
 8015084:	f847 cf04 	str.w	ip, [r7, #4]!
 8015088:	e7c3      	b.n	8015012 <rshift+0x26>
 801508a:	4623      	mov	r3, r4
 801508c:	e7e1      	b.n	8015052 <rshift+0x66>

0801508e <__hexdig_fun>:
 801508e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015092:	2b09      	cmp	r3, #9
 8015094:	d802      	bhi.n	801509c <__hexdig_fun+0xe>
 8015096:	3820      	subs	r0, #32
 8015098:	b2c0      	uxtb	r0, r0
 801509a:	4770      	bx	lr
 801509c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80150a0:	2b05      	cmp	r3, #5
 80150a2:	d801      	bhi.n	80150a8 <__hexdig_fun+0x1a>
 80150a4:	3847      	subs	r0, #71	@ 0x47
 80150a6:	e7f7      	b.n	8015098 <__hexdig_fun+0xa>
 80150a8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80150ac:	2b05      	cmp	r3, #5
 80150ae:	d801      	bhi.n	80150b4 <__hexdig_fun+0x26>
 80150b0:	3827      	subs	r0, #39	@ 0x27
 80150b2:	e7f1      	b.n	8015098 <__hexdig_fun+0xa>
 80150b4:	2000      	movs	r0, #0
 80150b6:	4770      	bx	lr

080150b8 <__gethex>:
 80150b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150bc:	b085      	sub	sp, #20
 80150be:	468a      	mov	sl, r1
 80150c0:	4690      	mov	r8, r2
 80150c2:	9302      	str	r3, [sp, #8]
 80150c4:	680b      	ldr	r3, [r1, #0]
 80150c6:	9001      	str	r0, [sp, #4]
 80150c8:	1c9c      	adds	r4, r3, #2
 80150ca:	46a1      	mov	r9, r4
 80150cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80150d0:	2830      	cmp	r0, #48	@ 0x30
 80150d2:	d0fa      	beq.n	80150ca <__gethex+0x12>
 80150d4:	eba9 0303 	sub.w	r3, r9, r3
 80150d8:	f1a3 0b02 	sub.w	fp, r3, #2
 80150dc:	f7ff ffd7 	bl	801508e <__hexdig_fun>
 80150e0:	4605      	mov	r5, r0
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d166      	bne.n	80151b4 <__gethex+0xfc>
 80150e6:	2201      	movs	r2, #1
 80150e8:	499e      	ldr	r1, [pc, #632]	@ (8015364 <__gethex+0x2ac>)
 80150ea:	4648      	mov	r0, r9
 80150ec:	f7ff feef 	bl	8014ece <strncmp>
 80150f0:	4607      	mov	r7, r0
 80150f2:	2800      	cmp	r0, #0
 80150f4:	d165      	bne.n	80151c2 <__gethex+0x10a>
 80150f6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80150fa:	4626      	mov	r6, r4
 80150fc:	f7ff ffc7 	bl	801508e <__hexdig_fun>
 8015100:	2800      	cmp	r0, #0
 8015102:	d060      	beq.n	80151c6 <__gethex+0x10e>
 8015104:	4623      	mov	r3, r4
 8015106:	7818      	ldrb	r0, [r3, #0]
 8015108:	4699      	mov	r9, r3
 801510a:	3301      	adds	r3, #1
 801510c:	2830      	cmp	r0, #48	@ 0x30
 801510e:	d0fa      	beq.n	8015106 <__gethex+0x4e>
 8015110:	f7ff ffbd 	bl	801508e <__hexdig_fun>
 8015114:	fab0 f580 	clz	r5, r0
 8015118:	f04f 0b01 	mov.w	fp, #1
 801511c:	096d      	lsrs	r5, r5, #5
 801511e:	464a      	mov	r2, r9
 8015120:	4616      	mov	r6, r2
 8015122:	3201      	adds	r2, #1
 8015124:	7830      	ldrb	r0, [r6, #0]
 8015126:	f7ff ffb2 	bl	801508e <__hexdig_fun>
 801512a:	2800      	cmp	r0, #0
 801512c:	d1f8      	bne.n	8015120 <__gethex+0x68>
 801512e:	2201      	movs	r2, #1
 8015130:	498c      	ldr	r1, [pc, #560]	@ (8015364 <__gethex+0x2ac>)
 8015132:	4630      	mov	r0, r6
 8015134:	f7ff fecb 	bl	8014ece <strncmp>
 8015138:	2800      	cmp	r0, #0
 801513a:	d13e      	bne.n	80151ba <__gethex+0x102>
 801513c:	b944      	cbnz	r4, 8015150 <__gethex+0x98>
 801513e:	1c74      	adds	r4, r6, #1
 8015140:	4622      	mov	r2, r4
 8015142:	4616      	mov	r6, r2
 8015144:	3201      	adds	r2, #1
 8015146:	7830      	ldrb	r0, [r6, #0]
 8015148:	f7ff ffa1 	bl	801508e <__hexdig_fun>
 801514c:	2800      	cmp	r0, #0
 801514e:	d1f8      	bne.n	8015142 <__gethex+0x8a>
 8015150:	1ba4      	subs	r4, r4, r6
 8015152:	00a7      	lsls	r7, r4, #2
 8015154:	7833      	ldrb	r3, [r6, #0]
 8015156:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801515a:	2b50      	cmp	r3, #80	@ 0x50
 801515c:	d13d      	bne.n	80151da <__gethex+0x122>
 801515e:	7873      	ldrb	r3, [r6, #1]
 8015160:	2b2b      	cmp	r3, #43	@ 0x2b
 8015162:	d032      	beq.n	80151ca <__gethex+0x112>
 8015164:	2b2d      	cmp	r3, #45	@ 0x2d
 8015166:	d033      	beq.n	80151d0 <__gethex+0x118>
 8015168:	1c71      	adds	r1, r6, #1
 801516a:	2400      	movs	r4, #0
 801516c:	7808      	ldrb	r0, [r1, #0]
 801516e:	f7ff ff8e 	bl	801508e <__hexdig_fun>
 8015172:	1e43      	subs	r3, r0, #1
 8015174:	b2db      	uxtb	r3, r3
 8015176:	2b18      	cmp	r3, #24
 8015178:	d82f      	bhi.n	80151da <__gethex+0x122>
 801517a:	f1a0 0210 	sub.w	r2, r0, #16
 801517e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015182:	f7ff ff84 	bl	801508e <__hexdig_fun>
 8015186:	f100 3cff 	add.w	ip, r0, #4294967295
 801518a:	230a      	movs	r3, #10
 801518c:	fa5f fc8c 	uxtb.w	ip, ip
 8015190:	f1bc 0f18 	cmp.w	ip, #24
 8015194:	d91e      	bls.n	80151d4 <__gethex+0x11c>
 8015196:	b104      	cbz	r4, 801519a <__gethex+0xe2>
 8015198:	4252      	negs	r2, r2
 801519a:	4417      	add	r7, r2
 801519c:	f8ca 1000 	str.w	r1, [sl]
 80151a0:	b1ed      	cbz	r5, 80151de <__gethex+0x126>
 80151a2:	f1bb 0f00 	cmp.w	fp, #0
 80151a6:	bf0c      	ite	eq
 80151a8:	2506      	moveq	r5, #6
 80151aa:	2500      	movne	r5, #0
 80151ac:	4628      	mov	r0, r5
 80151ae:	b005      	add	sp, #20
 80151b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b4:	2500      	movs	r5, #0
 80151b6:	462c      	mov	r4, r5
 80151b8:	e7b1      	b.n	801511e <__gethex+0x66>
 80151ba:	2c00      	cmp	r4, #0
 80151bc:	d1c8      	bne.n	8015150 <__gethex+0x98>
 80151be:	4627      	mov	r7, r4
 80151c0:	e7c8      	b.n	8015154 <__gethex+0x9c>
 80151c2:	464e      	mov	r6, r9
 80151c4:	462f      	mov	r7, r5
 80151c6:	2501      	movs	r5, #1
 80151c8:	e7c4      	b.n	8015154 <__gethex+0x9c>
 80151ca:	2400      	movs	r4, #0
 80151cc:	1cb1      	adds	r1, r6, #2
 80151ce:	e7cd      	b.n	801516c <__gethex+0xb4>
 80151d0:	2401      	movs	r4, #1
 80151d2:	e7fb      	b.n	80151cc <__gethex+0x114>
 80151d4:	fb03 0002 	mla	r0, r3, r2, r0
 80151d8:	e7cf      	b.n	801517a <__gethex+0xc2>
 80151da:	4631      	mov	r1, r6
 80151dc:	e7de      	b.n	801519c <__gethex+0xe4>
 80151de:	eba6 0309 	sub.w	r3, r6, r9
 80151e2:	4629      	mov	r1, r5
 80151e4:	3b01      	subs	r3, #1
 80151e6:	2b07      	cmp	r3, #7
 80151e8:	dc0a      	bgt.n	8015200 <__gethex+0x148>
 80151ea:	9801      	ldr	r0, [sp, #4]
 80151ec:	f7fd ff72 	bl	80130d4 <_Balloc>
 80151f0:	4604      	mov	r4, r0
 80151f2:	b940      	cbnz	r0, 8015206 <__gethex+0x14e>
 80151f4:	4b5c      	ldr	r3, [pc, #368]	@ (8015368 <__gethex+0x2b0>)
 80151f6:	4602      	mov	r2, r0
 80151f8:	21e4      	movs	r1, #228	@ 0xe4
 80151fa:	485c      	ldr	r0, [pc, #368]	@ (801536c <__gethex+0x2b4>)
 80151fc:	f7ff fec4 	bl	8014f88 <__assert_func>
 8015200:	3101      	adds	r1, #1
 8015202:	105b      	asrs	r3, r3, #1
 8015204:	e7ef      	b.n	80151e6 <__gethex+0x12e>
 8015206:	f100 0a14 	add.w	sl, r0, #20
 801520a:	2300      	movs	r3, #0
 801520c:	4655      	mov	r5, sl
 801520e:	469b      	mov	fp, r3
 8015210:	45b1      	cmp	r9, r6
 8015212:	d337      	bcc.n	8015284 <__gethex+0x1cc>
 8015214:	f845 bb04 	str.w	fp, [r5], #4
 8015218:	eba5 050a 	sub.w	r5, r5, sl
 801521c:	4658      	mov	r0, fp
 801521e:	10ad      	asrs	r5, r5, #2
 8015220:	6125      	str	r5, [r4, #16]
 8015222:	016d      	lsls	r5, r5, #5
 8015224:	f7fe f84a 	bl	80132bc <__hi0bits>
 8015228:	f8d8 6000 	ldr.w	r6, [r8]
 801522c:	1a2d      	subs	r5, r5, r0
 801522e:	42b5      	cmp	r5, r6
 8015230:	dd54      	ble.n	80152dc <__gethex+0x224>
 8015232:	1bad      	subs	r5, r5, r6
 8015234:	4620      	mov	r0, r4
 8015236:	4629      	mov	r1, r5
 8015238:	f7fe fbe1 	bl	80139fe <__any_on>
 801523c:	4681      	mov	r9, r0
 801523e:	b178      	cbz	r0, 8015260 <__gethex+0x1a8>
 8015240:	1e6b      	subs	r3, r5, #1
 8015242:	f04f 0901 	mov.w	r9, #1
 8015246:	1159      	asrs	r1, r3, #5
 8015248:	f003 021f 	and.w	r2, r3, #31
 801524c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015250:	fa09 f202 	lsl.w	r2, r9, r2
 8015254:	420a      	tst	r2, r1
 8015256:	d003      	beq.n	8015260 <__gethex+0x1a8>
 8015258:	454b      	cmp	r3, r9
 801525a:	dc36      	bgt.n	80152ca <__gethex+0x212>
 801525c:	f04f 0902 	mov.w	r9, #2
 8015260:	442f      	add	r7, r5
 8015262:	4629      	mov	r1, r5
 8015264:	4620      	mov	r0, r4
 8015266:	f7ff fec1 	bl	8014fec <rshift>
 801526a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801526e:	42bb      	cmp	r3, r7
 8015270:	da42      	bge.n	80152f8 <__gethex+0x240>
 8015272:	4621      	mov	r1, r4
 8015274:	9801      	ldr	r0, [sp, #4]
 8015276:	f7fd ff6d 	bl	8013154 <_Bfree>
 801527a:	2300      	movs	r3, #0
 801527c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801527e:	25a3      	movs	r5, #163	@ 0xa3
 8015280:	6013      	str	r3, [r2, #0]
 8015282:	e793      	b.n	80151ac <__gethex+0xf4>
 8015284:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015288:	2a2e      	cmp	r2, #46	@ 0x2e
 801528a:	d012      	beq.n	80152b2 <__gethex+0x1fa>
 801528c:	2b20      	cmp	r3, #32
 801528e:	d104      	bne.n	801529a <__gethex+0x1e2>
 8015290:	f845 bb04 	str.w	fp, [r5], #4
 8015294:	f04f 0b00 	mov.w	fp, #0
 8015298:	465b      	mov	r3, fp
 801529a:	7830      	ldrb	r0, [r6, #0]
 801529c:	9303      	str	r3, [sp, #12]
 801529e:	f7ff fef6 	bl	801508e <__hexdig_fun>
 80152a2:	9b03      	ldr	r3, [sp, #12]
 80152a4:	f000 000f 	and.w	r0, r0, #15
 80152a8:	4098      	lsls	r0, r3
 80152aa:	3304      	adds	r3, #4
 80152ac:	ea4b 0b00 	orr.w	fp, fp, r0
 80152b0:	e7ae      	b.n	8015210 <__gethex+0x158>
 80152b2:	45b1      	cmp	r9, r6
 80152b4:	d8ea      	bhi.n	801528c <__gethex+0x1d4>
 80152b6:	2201      	movs	r2, #1
 80152b8:	492a      	ldr	r1, [pc, #168]	@ (8015364 <__gethex+0x2ac>)
 80152ba:	4630      	mov	r0, r6
 80152bc:	9303      	str	r3, [sp, #12]
 80152be:	f7ff fe06 	bl	8014ece <strncmp>
 80152c2:	9b03      	ldr	r3, [sp, #12]
 80152c4:	2800      	cmp	r0, #0
 80152c6:	d1e1      	bne.n	801528c <__gethex+0x1d4>
 80152c8:	e7a2      	b.n	8015210 <__gethex+0x158>
 80152ca:	1ea9      	subs	r1, r5, #2
 80152cc:	4620      	mov	r0, r4
 80152ce:	f7fe fb96 	bl	80139fe <__any_on>
 80152d2:	2800      	cmp	r0, #0
 80152d4:	d0c2      	beq.n	801525c <__gethex+0x1a4>
 80152d6:	f04f 0903 	mov.w	r9, #3
 80152da:	e7c1      	b.n	8015260 <__gethex+0x1a8>
 80152dc:	da09      	bge.n	80152f2 <__gethex+0x23a>
 80152de:	1b75      	subs	r5, r6, r5
 80152e0:	4621      	mov	r1, r4
 80152e2:	9801      	ldr	r0, [sp, #4]
 80152e4:	462a      	mov	r2, r5
 80152e6:	1b7f      	subs	r7, r7, r5
 80152e8:	f7fe f948 	bl	801357c <__lshift>
 80152ec:	4604      	mov	r4, r0
 80152ee:	f100 0a14 	add.w	sl, r0, #20
 80152f2:	f04f 0900 	mov.w	r9, #0
 80152f6:	e7b8      	b.n	801526a <__gethex+0x1b2>
 80152f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80152fc:	42bd      	cmp	r5, r7
 80152fe:	dd6f      	ble.n	80153e0 <__gethex+0x328>
 8015300:	1bed      	subs	r5, r5, r7
 8015302:	42ae      	cmp	r6, r5
 8015304:	dc34      	bgt.n	8015370 <__gethex+0x2b8>
 8015306:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801530a:	2b02      	cmp	r3, #2
 801530c:	d022      	beq.n	8015354 <__gethex+0x29c>
 801530e:	2b03      	cmp	r3, #3
 8015310:	d024      	beq.n	801535c <__gethex+0x2a4>
 8015312:	2b01      	cmp	r3, #1
 8015314:	d115      	bne.n	8015342 <__gethex+0x28a>
 8015316:	42ae      	cmp	r6, r5
 8015318:	d113      	bne.n	8015342 <__gethex+0x28a>
 801531a:	2e01      	cmp	r6, #1
 801531c:	d10b      	bne.n	8015336 <__gethex+0x27e>
 801531e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015322:	2562      	movs	r5, #98	@ 0x62
 8015324:	9a02      	ldr	r2, [sp, #8]
 8015326:	6013      	str	r3, [r2, #0]
 8015328:	2301      	movs	r3, #1
 801532a:	6123      	str	r3, [r4, #16]
 801532c:	f8ca 3000 	str.w	r3, [sl]
 8015330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015332:	601c      	str	r4, [r3, #0]
 8015334:	e73a      	b.n	80151ac <__gethex+0xf4>
 8015336:	1e71      	subs	r1, r6, #1
 8015338:	4620      	mov	r0, r4
 801533a:	f7fe fb60 	bl	80139fe <__any_on>
 801533e:	2800      	cmp	r0, #0
 8015340:	d1ed      	bne.n	801531e <__gethex+0x266>
 8015342:	4621      	mov	r1, r4
 8015344:	9801      	ldr	r0, [sp, #4]
 8015346:	f7fd ff05 	bl	8013154 <_Bfree>
 801534a:	2300      	movs	r3, #0
 801534c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801534e:	2550      	movs	r5, #80	@ 0x50
 8015350:	6013      	str	r3, [r2, #0]
 8015352:	e72b      	b.n	80151ac <__gethex+0xf4>
 8015354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015356:	2b00      	cmp	r3, #0
 8015358:	d1f3      	bne.n	8015342 <__gethex+0x28a>
 801535a:	e7e0      	b.n	801531e <__gethex+0x266>
 801535c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801535e:	2b00      	cmp	r3, #0
 8015360:	d1dd      	bne.n	801531e <__gethex+0x266>
 8015362:	e7ee      	b.n	8015342 <__gethex+0x28a>
 8015364:	08015af7 	.word	0x08015af7
 8015368:	08015a8d 	.word	0x08015a8d
 801536c:	08015b4e 	.word	0x08015b4e
 8015370:	1e6f      	subs	r7, r5, #1
 8015372:	f1b9 0f00 	cmp.w	r9, #0
 8015376:	d130      	bne.n	80153da <__gethex+0x322>
 8015378:	b127      	cbz	r7, 8015384 <__gethex+0x2cc>
 801537a:	4639      	mov	r1, r7
 801537c:	4620      	mov	r0, r4
 801537e:	f7fe fb3e 	bl	80139fe <__any_on>
 8015382:	4681      	mov	r9, r0
 8015384:	117a      	asrs	r2, r7, #5
 8015386:	2301      	movs	r3, #1
 8015388:	f007 071f 	and.w	r7, r7, #31
 801538c:	4629      	mov	r1, r5
 801538e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015392:	4620      	mov	r0, r4
 8015394:	40bb      	lsls	r3, r7
 8015396:	1b76      	subs	r6, r6, r5
 8015398:	2502      	movs	r5, #2
 801539a:	4213      	tst	r3, r2
 801539c:	bf18      	it	ne
 801539e:	f049 0902 	orrne.w	r9, r9, #2
 80153a2:	f7ff fe23 	bl	8014fec <rshift>
 80153a6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80153aa:	f1b9 0f00 	cmp.w	r9, #0
 80153ae:	d047      	beq.n	8015440 <__gethex+0x388>
 80153b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80153b4:	2b02      	cmp	r3, #2
 80153b6:	d015      	beq.n	80153e4 <__gethex+0x32c>
 80153b8:	2b03      	cmp	r3, #3
 80153ba:	d017      	beq.n	80153ec <__gethex+0x334>
 80153bc:	2b01      	cmp	r3, #1
 80153be:	d109      	bne.n	80153d4 <__gethex+0x31c>
 80153c0:	f019 0f02 	tst.w	r9, #2
 80153c4:	d006      	beq.n	80153d4 <__gethex+0x31c>
 80153c6:	f8da 3000 	ldr.w	r3, [sl]
 80153ca:	ea49 0903 	orr.w	r9, r9, r3
 80153ce:	f019 0f01 	tst.w	r9, #1
 80153d2:	d10e      	bne.n	80153f2 <__gethex+0x33a>
 80153d4:	f045 0510 	orr.w	r5, r5, #16
 80153d8:	e032      	b.n	8015440 <__gethex+0x388>
 80153da:	f04f 0901 	mov.w	r9, #1
 80153de:	e7d1      	b.n	8015384 <__gethex+0x2cc>
 80153e0:	2501      	movs	r5, #1
 80153e2:	e7e2      	b.n	80153aa <__gethex+0x2f2>
 80153e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153e6:	f1c3 0301 	rsb	r3, r3, #1
 80153ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80153ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d0f0      	beq.n	80153d4 <__gethex+0x31c>
 80153f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80153f6:	f104 0314 	add.w	r3, r4, #20
 80153fa:	f04f 0c00 	mov.w	ip, #0
 80153fe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015402:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015406:	4618      	mov	r0, r3
 8015408:	f853 2b04 	ldr.w	r2, [r3], #4
 801540c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015410:	d01b      	beq.n	801544a <__gethex+0x392>
 8015412:	3201      	adds	r2, #1
 8015414:	6002      	str	r2, [r0, #0]
 8015416:	2d02      	cmp	r5, #2
 8015418:	f104 0314 	add.w	r3, r4, #20
 801541c:	d13c      	bne.n	8015498 <__gethex+0x3e0>
 801541e:	f8d8 2000 	ldr.w	r2, [r8]
 8015422:	3a01      	subs	r2, #1
 8015424:	42b2      	cmp	r2, r6
 8015426:	d109      	bne.n	801543c <__gethex+0x384>
 8015428:	1171      	asrs	r1, r6, #5
 801542a:	2201      	movs	r2, #1
 801542c:	f006 061f 	and.w	r6, r6, #31
 8015430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015434:	fa02 f606 	lsl.w	r6, r2, r6
 8015438:	421e      	tst	r6, r3
 801543a:	d13a      	bne.n	80154b2 <__gethex+0x3fa>
 801543c:	f045 0520 	orr.w	r5, r5, #32
 8015440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015442:	601c      	str	r4, [r3, #0]
 8015444:	9b02      	ldr	r3, [sp, #8]
 8015446:	601f      	str	r7, [r3, #0]
 8015448:	e6b0      	b.n	80151ac <__gethex+0xf4>
 801544a:	4299      	cmp	r1, r3
 801544c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015450:	d8d9      	bhi.n	8015406 <__gethex+0x34e>
 8015452:	68a3      	ldr	r3, [r4, #8]
 8015454:	459b      	cmp	fp, r3
 8015456:	db17      	blt.n	8015488 <__gethex+0x3d0>
 8015458:	6861      	ldr	r1, [r4, #4]
 801545a:	9801      	ldr	r0, [sp, #4]
 801545c:	3101      	adds	r1, #1
 801545e:	f7fd fe39 	bl	80130d4 <_Balloc>
 8015462:	4681      	mov	r9, r0
 8015464:	b918      	cbnz	r0, 801546e <__gethex+0x3b6>
 8015466:	4b1a      	ldr	r3, [pc, #104]	@ (80154d0 <__gethex+0x418>)
 8015468:	4602      	mov	r2, r0
 801546a:	2184      	movs	r1, #132	@ 0x84
 801546c:	e6c5      	b.n	80151fa <__gethex+0x142>
 801546e:	6922      	ldr	r2, [r4, #16]
 8015470:	f104 010c 	add.w	r1, r4, #12
 8015474:	300c      	adds	r0, #12
 8015476:	3202      	adds	r2, #2
 8015478:	0092      	lsls	r2, r2, #2
 801547a:	f7ff fd6d 	bl	8014f58 <memcpy>
 801547e:	4621      	mov	r1, r4
 8015480:	464c      	mov	r4, r9
 8015482:	9801      	ldr	r0, [sp, #4]
 8015484:	f7fd fe66 	bl	8013154 <_Bfree>
 8015488:	6923      	ldr	r3, [r4, #16]
 801548a:	1c5a      	adds	r2, r3, #1
 801548c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015490:	6122      	str	r2, [r4, #16]
 8015492:	2201      	movs	r2, #1
 8015494:	615a      	str	r2, [r3, #20]
 8015496:	e7be      	b.n	8015416 <__gethex+0x35e>
 8015498:	6922      	ldr	r2, [r4, #16]
 801549a:	455a      	cmp	r2, fp
 801549c:	dd0b      	ble.n	80154b6 <__gethex+0x3fe>
 801549e:	2101      	movs	r1, #1
 80154a0:	4620      	mov	r0, r4
 80154a2:	f7ff fda3 	bl	8014fec <rshift>
 80154a6:	3701      	adds	r7, #1
 80154a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80154ac:	42bb      	cmp	r3, r7
 80154ae:	f6ff aee0 	blt.w	8015272 <__gethex+0x1ba>
 80154b2:	2501      	movs	r5, #1
 80154b4:	e7c2      	b.n	801543c <__gethex+0x384>
 80154b6:	f016 061f 	ands.w	r6, r6, #31
 80154ba:	d0fa      	beq.n	80154b2 <__gethex+0x3fa>
 80154bc:	4453      	add	r3, sl
 80154be:	f1c6 0620 	rsb	r6, r6, #32
 80154c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80154c6:	f7fd fef9 	bl	80132bc <__hi0bits>
 80154ca:	42b0      	cmp	r0, r6
 80154cc:	dbe7      	blt.n	801549e <__gethex+0x3e6>
 80154ce:	e7f0      	b.n	80154b2 <__gethex+0x3fa>
 80154d0:	08015a8d 	.word	0x08015a8d

080154d4 <L_shift>:
 80154d4:	f1c2 0208 	rsb	r2, r2, #8
 80154d8:	0092      	lsls	r2, r2, #2
 80154da:	b570      	push	{r4, r5, r6, lr}
 80154dc:	f1c2 0620 	rsb	r6, r2, #32
 80154e0:	6843      	ldr	r3, [r0, #4]
 80154e2:	6804      	ldr	r4, [r0, #0]
 80154e4:	fa03 f506 	lsl.w	r5, r3, r6
 80154e8:	40d3      	lsrs	r3, r2
 80154ea:	432c      	orrs	r4, r5
 80154ec:	6004      	str	r4, [r0, #0]
 80154ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80154f2:	4288      	cmp	r0, r1
 80154f4:	d3f4      	bcc.n	80154e0 <L_shift+0xc>
 80154f6:	bd70      	pop	{r4, r5, r6, pc}

080154f8 <__match>:
 80154f8:	6803      	ldr	r3, [r0, #0]
 80154fa:	3301      	adds	r3, #1
 80154fc:	b530      	push	{r4, r5, lr}
 80154fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015502:	b914      	cbnz	r4, 801550a <__match+0x12>
 8015504:	6003      	str	r3, [r0, #0]
 8015506:	2001      	movs	r0, #1
 8015508:	bd30      	pop	{r4, r5, pc}
 801550a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801550e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015512:	2d19      	cmp	r5, #25
 8015514:	bf98      	it	ls
 8015516:	3220      	addls	r2, #32
 8015518:	42a2      	cmp	r2, r4
 801551a:	d0f0      	beq.n	80154fe <__match+0x6>
 801551c:	2000      	movs	r0, #0
 801551e:	e7f3      	b.n	8015508 <__match+0x10>

08015520 <__hexnan>:
 8015520:	680b      	ldr	r3, [r1, #0]
 8015522:	6801      	ldr	r1, [r0, #0]
 8015524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015528:	115e      	asrs	r6, r3, #5
 801552a:	f013 031f 	ands.w	r3, r3, #31
 801552e:	f04f 0500 	mov.w	r5, #0
 8015532:	b087      	sub	sp, #28
 8015534:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015538:	4682      	mov	sl, r0
 801553a:	4690      	mov	r8, r2
 801553c:	46ab      	mov	fp, r5
 801553e:	bf18      	it	ne
 8015540:	3604      	addne	r6, #4
 8015542:	9301      	str	r3, [sp, #4]
 8015544:	9502      	str	r5, [sp, #8]
 8015546:	1f37      	subs	r7, r6, #4
 8015548:	f846 5c04 	str.w	r5, [r6, #-4]
 801554c:	46b9      	mov	r9, r7
 801554e:	463c      	mov	r4, r7
 8015550:	1c4b      	adds	r3, r1, #1
 8015552:	784a      	ldrb	r2, [r1, #1]
 8015554:	9303      	str	r3, [sp, #12]
 8015556:	b342      	cbz	r2, 80155aa <__hexnan+0x8a>
 8015558:	4610      	mov	r0, r2
 801555a:	9105      	str	r1, [sp, #20]
 801555c:	9204      	str	r2, [sp, #16]
 801555e:	f7ff fd96 	bl	801508e <__hexdig_fun>
 8015562:	2800      	cmp	r0, #0
 8015564:	d151      	bne.n	801560a <__hexnan+0xea>
 8015566:	9a04      	ldr	r2, [sp, #16]
 8015568:	9905      	ldr	r1, [sp, #20]
 801556a:	2a20      	cmp	r2, #32
 801556c:	d818      	bhi.n	80155a0 <__hexnan+0x80>
 801556e:	9b02      	ldr	r3, [sp, #8]
 8015570:	459b      	cmp	fp, r3
 8015572:	dd13      	ble.n	801559c <__hexnan+0x7c>
 8015574:	454c      	cmp	r4, r9
 8015576:	d206      	bcs.n	8015586 <__hexnan+0x66>
 8015578:	2d07      	cmp	r5, #7
 801557a:	dc04      	bgt.n	8015586 <__hexnan+0x66>
 801557c:	462a      	mov	r2, r5
 801557e:	4649      	mov	r1, r9
 8015580:	4620      	mov	r0, r4
 8015582:	f7ff ffa7 	bl	80154d4 <L_shift>
 8015586:	4544      	cmp	r4, r8
 8015588:	d951      	bls.n	801562e <__hexnan+0x10e>
 801558a:	2300      	movs	r3, #0
 801558c:	f1a4 0904 	sub.w	r9, r4, #4
 8015590:	f8cd b008 	str.w	fp, [sp, #8]
 8015594:	f844 3c04 	str.w	r3, [r4, #-4]
 8015598:	461d      	mov	r5, r3
 801559a:	464c      	mov	r4, r9
 801559c:	9903      	ldr	r1, [sp, #12]
 801559e:	e7d7      	b.n	8015550 <__hexnan+0x30>
 80155a0:	2a29      	cmp	r2, #41	@ 0x29
 80155a2:	d156      	bne.n	8015652 <__hexnan+0x132>
 80155a4:	3102      	adds	r1, #2
 80155a6:	f8ca 1000 	str.w	r1, [sl]
 80155aa:	f1bb 0f00 	cmp.w	fp, #0
 80155ae:	d050      	beq.n	8015652 <__hexnan+0x132>
 80155b0:	454c      	cmp	r4, r9
 80155b2:	d206      	bcs.n	80155c2 <__hexnan+0xa2>
 80155b4:	2d07      	cmp	r5, #7
 80155b6:	dc04      	bgt.n	80155c2 <__hexnan+0xa2>
 80155b8:	462a      	mov	r2, r5
 80155ba:	4649      	mov	r1, r9
 80155bc:	4620      	mov	r0, r4
 80155be:	f7ff ff89 	bl	80154d4 <L_shift>
 80155c2:	4544      	cmp	r4, r8
 80155c4:	d935      	bls.n	8015632 <__hexnan+0x112>
 80155c6:	f1a8 0204 	sub.w	r2, r8, #4
 80155ca:	4623      	mov	r3, r4
 80155cc:	f853 1b04 	ldr.w	r1, [r3], #4
 80155d0:	429f      	cmp	r7, r3
 80155d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80155d6:	d2f9      	bcs.n	80155cc <__hexnan+0xac>
 80155d8:	1b3b      	subs	r3, r7, r4
 80155da:	3e03      	subs	r6, #3
 80155dc:	3401      	adds	r4, #1
 80155de:	2200      	movs	r2, #0
 80155e0:	f023 0303 	bic.w	r3, r3, #3
 80155e4:	3304      	adds	r3, #4
 80155e6:	42b4      	cmp	r4, r6
 80155e8:	bf88      	it	hi
 80155ea:	2304      	movhi	r3, #4
 80155ec:	4443      	add	r3, r8
 80155ee:	f843 2b04 	str.w	r2, [r3], #4
 80155f2:	429f      	cmp	r7, r3
 80155f4:	d2fb      	bcs.n	80155ee <__hexnan+0xce>
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	b91b      	cbnz	r3, 8015602 <__hexnan+0xe2>
 80155fa:	4547      	cmp	r7, r8
 80155fc:	d127      	bne.n	801564e <__hexnan+0x12e>
 80155fe:	2301      	movs	r3, #1
 8015600:	603b      	str	r3, [r7, #0]
 8015602:	2005      	movs	r0, #5
 8015604:	b007      	add	sp, #28
 8015606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801560a:	3501      	adds	r5, #1
 801560c:	f10b 0b01 	add.w	fp, fp, #1
 8015610:	2d08      	cmp	r5, #8
 8015612:	dd05      	ble.n	8015620 <__hexnan+0x100>
 8015614:	4544      	cmp	r4, r8
 8015616:	d9c1      	bls.n	801559c <__hexnan+0x7c>
 8015618:	2300      	movs	r3, #0
 801561a:	3c04      	subs	r4, #4
 801561c:	2501      	movs	r5, #1
 801561e:	6023      	str	r3, [r4, #0]
 8015620:	6822      	ldr	r2, [r4, #0]
 8015622:	f000 000f 	and.w	r0, r0, #15
 8015626:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801562a:	6020      	str	r0, [r4, #0]
 801562c:	e7b6      	b.n	801559c <__hexnan+0x7c>
 801562e:	2508      	movs	r5, #8
 8015630:	e7b4      	b.n	801559c <__hexnan+0x7c>
 8015632:	9b01      	ldr	r3, [sp, #4]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d0de      	beq.n	80155f6 <__hexnan+0xd6>
 8015638:	f1c3 0320 	rsb	r3, r3, #32
 801563c:	f04f 32ff 	mov.w	r2, #4294967295
 8015640:	40da      	lsrs	r2, r3
 8015642:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015646:	4013      	ands	r3, r2
 8015648:	f846 3c04 	str.w	r3, [r6, #-4]
 801564c:	e7d3      	b.n	80155f6 <__hexnan+0xd6>
 801564e:	3f04      	subs	r7, #4
 8015650:	e7d1      	b.n	80155f6 <__hexnan+0xd6>
 8015652:	2004      	movs	r0, #4
 8015654:	e7d6      	b.n	8015604 <__hexnan+0xe4>

08015656 <__ascii_mbtowc>:
 8015656:	b082      	sub	sp, #8
 8015658:	b901      	cbnz	r1, 801565c <__ascii_mbtowc+0x6>
 801565a:	a901      	add	r1, sp, #4
 801565c:	b142      	cbz	r2, 8015670 <__ascii_mbtowc+0x1a>
 801565e:	b14b      	cbz	r3, 8015674 <__ascii_mbtowc+0x1e>
 8015660:	7813      	ldrb	r3, [r2, #0]
 8015662:	600b      	str	r3, [r1, #0]
 8015664:	7812      	ldrb	r2, [r2, #0]
 8015666:	1e10      	subs	r0, r2, #0
 8015668:	bf18      	it	ne
 801566a:	2001      	movne	r0, #1
 801566c:	b002      	add	sp, #8
 801566e:	4770      	bx	lr
 8015670:	4610      	mov	r0, r2
 8015672:	e7fb      	b.n	801566c <__ascii_mbtowc+0x16>
 8015674:	f06f 0001 	mvn.w	r0, #1
 8015678:	e7f8      	b.n	801566c <__ascii_mbtowc+0x16>

0801567a <_realloc_r>:
 801567a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801567e:	4607      	mov	r7, r0
 8015680:	4614      	mov	r4, r2
 8015682:	460d      	mov	r5, r1
 8015684:	b921      	cbnz	r1, 8015690 <_realloc_r+0x16>
 8015686:	4611      	mov	r1, r2
 8015688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801568c:	f7fd bc96 	b.w	8012fbc <_malloc_r>
 8015690:	b92a      	cbnz	r2, 801569e <_realloc_r+0x24>
 8015692:	4625      	mov	r5, r4
 8015694:	f7fd fc1e 	bl	8012ed4 <_free_r>
 8015698:	4628      	mov	r0, r5
 801569a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801569e:	f000 f840 	bl	8015722 <_malloc_usable_size_r>
 80156a2:	4284      	cmp	r4, r0
 80156a4:	4606      	mov	r6, r0
 80156a6:	d802      	bhi.n	80156ae <_realloc_r+0x34>
 80156a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80156ac:	d8f4      	bhi.n	8015698 <_realloc_r+0x1e>
 80156ae:	4621      	mov	r1, r4
 80156b0:	4638      	mov	r0, r7
 80156b2:	f7fd fc83 	bl	8012fbc <_malloc_r>
 80156b6:	4680      	mov	r8, r0
 80156b8:	b908      	cbnz	r0, 80156be <_realloc_r+0x44>
 80156ba:	4645      	mov	r5, r8
 80156bc:	e7ec      	b.n	8015698 <_realloc_r+0x1e>
 80156be:	42b4      	cmp	r4, r6
 80156c0:	4622      	mov	r2, r4
 80156c2:	4629      	mov	r1, r5
 80156c4:	bf28      	it	cs
 80156c6:	4632      	movcs	r2, r6
 80156c8:	f7ff fc46 	bl	8014f58 <memcpy>
 80156cc:	4629      	mov	r1, r5
 80156ce:	4638      	mov	r0, r7
 80156d0:	f7fd fc00 	bl	8012ed4 <_free_r>
 80156d4:	e7f1      	b.n	80156ba <_realloc_r+0x40>

080156d6 <__ascii_wctomb>:
 80156d6:	4603      	mov	r3, r0
 80156d8:	4608      	mov	r0, r1
 80156da:	b141      	cbz	r1, 80156ee <__ascii_wctomb+0x18>
 80156dc:	2aff      	cmp	r2, #255	@ 0xff
 80156de:	d904      	bls.n	80156ea <__ascii_wctomb+0x14>
 80156e0:	228a      	movs	r2, #138	@ 0x8a
 80156e2:	f04f 30ff 	mov.w	r0, #4294967295
 80156e6:	601a      	str	r2, [r3, #0]
 80156e8:	4770      	bx	lr
 80156ea:	2001      	movs	r0, #1
 80156ec:	700a      	strb	r2, [r1, #0]
 80156ee:	4770      	bx	lr

080156f0 <fiprintf>:
 80156f0:	b40e      	push	{r1, r2, r3}
 80156f2:	b503      	push	{r0, r1, lr}
 80156f4:	ab03      	add	r3, sp, #12
 80156f6:	4601      	mov	r1, r0
 80156f8:	4805      	ldr	r0, [pc, #20]	@ (8015710 <fiprintf+0x20>)
 80156fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80156fe:	6800      	ldr	r0, [r0, #0]
 8015700:	9301      	str	r3, [sp, #4]
 8015702:	f7ff f9a5 	bl	8014a50 <_vfiprintf_r>
 8015706:	b002      	add	sp, #8
 8015708:	f85d eb04 	ldr.w	lr, [sp], #4
 801570c:	b003      	add	sp, #12
 801570e:	4770      	bx	lr
 8015710:	2000017c 	.word	0x2000017c

08015714 <abort>:
 8015714:	2006      	movs	r0, #6
 8015716:	b508      	push	{r3, lr}
 8015718:	f000 f834 	bl	8015784 <raise>
 801571c:	2001      	movs	r0, #1
 801571e:	f7ec fc03 	bl	8001f28 <_exit>

08015722 <_malloc_usable_size_r>:
 8015722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015726:	1f18      	subs	r0, r3, #4
 8015728:	2b00      	cmp	r3, #0
 801572a:	bfbc      	itt	lt
 801572c:	580b      	ldrlt	r3, [r1, r0]
 801572e:	18c0      	addlt	r0, r0, r3
 8015730:	4770      	bx	lr

08015732 <_raise_r>:
 8015732:	291f      	cmp	r1, #31
 8015734:	b538      	push	{r3, r4, r5, lr}
 8015736:	4605      	mov	r5, r0
 8015738:	460c      	mov	r4, r1
 801573a:	d904      	bls.n	8015746 <_raise_r+0x14>
 801573c:	2316      	movs	r3, #22
 801573e:	6003      	str	r3, [r0, #0]
 8015740:	f04f 30ff 	mov.w	r0, #4294967295
 8015744:	bd38      	pop	{r3, r4, r5, pc}
 8015746:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015748:	b112      	cbz	r2, 8015750 <_raise_r+0x1e>
 801574a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801574e:	b94b      	cbnz	r3, 8015764 <_raise_r+0x32>
 8015750:	4628      	mov	r0, r5
 8015752:	f000 f831 	bl	80157b8 <_getpid_r>
 8015756:	4622      	mov	r2, r4
 8015758:	4601      	mov	r1, r0
 801575a:	4628      	mov	r0, r5
 801575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015760:	f000 b818 	b.w	8015794 <_kill_r>
 8015764:	2b01      	cmp	r3, #1
 8015766:	d00a      	beq.n	801577e <_raise_r+0x4c>
 8015768:	1c59      	adds	r1, r3, #1
 801576a:	d103      	bne.n	8015774 <_raise_r+0x42>
 801576c:	2316      	movs	r3, #22
 801576e:	6003      	str	r3, [r0, #0]
 8015770:	2001      	movs	r0, #1
 8015772:	e7e7      	b.n	8015744 <_raise_r+0x12>
 8015774:	2100      	movs	r1, #0
 8015776:	4620      	mov	r0, r4
 8015778:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801577c:	4798      	blx	r3
 801577e:	2000      	movs	r0, #0
 8015780:	e7e0      	b.n	8015744 <_raise_r+0x12>
	...

08015784 <raise>:
 8015784:	4b02      	ldr	r3, [pc, #8]	@ (8015790 <raise+0xc>)
 8015786:	4601      	mov	r1, r0
 8015788:	6818      	ldr	r0, [r3, #0]
 801578a:	f7ff bfd2 	b.w	8015732 <_raise_r>
 801578e:	bf00      	nop
 8015790:	2000017c 	.word	0x2000017c

08015794 <_kill_r>:
 8015794:	b538      	push	{r3, r4, r5, lr}
 8015796:	2300      	movs	r3, #0
 8015798:	4d06      	ldr	r5, [pc, #24]	@ (80157b4 <_kill_r+0x20>)
 801579a:	4604      	mov	r4, r0
 801579c:	4608      	mov	r0, r1
 801579e:	4611      	mov	r1, r2
 80157a0:	602b      	str	r3, [r5, #0]
 80157a2:	f7ec fbb1 	bl	8001f08 <_kill>
 80157a6:	1c43      	adds	r3, r0, #1
 80157a8:	d102      	bne.n	80157b0 <_kill_r+0x1c>
 80157aa:	682b      	ldr	r3, [r5, #0]
 80157ac:	b103      	cbz	r3, 80157b0 <_kill_r+0x1c>
 80157ae:	6023      	str	r3, [r4, #0]
 80157b0:	bd38      	pop	{r3, r4, r5, pc}
 80157b2:	bf00      	nop
 80157b4:	20000a24 	.word	0x20000a24

080157b8 <_getpid_r>:
 80157b8:	f7ec bb9e 	b.w	8001ef8 <_getpid>

080157bc <_init>:
 80157bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157be:	bf00      	nop
 80157c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157c2:	bc08      	pop	{r3}
 80157c4:	469e      	mov	lr, r3
 80157c6:	4770      	bx	lr

080157c8 <_fini>:
 80157c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ca:	bf00      	nop
 80157cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157ce:	bc08      	pop	{r3}
 80157d0:	469e      	mov	lr, r3
 80157d2:	4770      	bx	lr
