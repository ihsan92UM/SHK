
SensonTileBoxPro_all_sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015364  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d6  080155a0  080155a0  000165a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015d78  08015d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015d80  08015d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015d84  08015d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000338  20000000  08015d88  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006fc  20000338  080160c0  00017338  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000a34  080160c0  00017a34  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00017338  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039ac6  00000000  00000000  0001736e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005465  00000000  00000000  00050e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e98  00000000  00000000  000562a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002429  00000000  00000000  00059138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d566  00000000  00000000  0005b561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031c45  00000000  00000000  00098ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f4f8  00000000  00000000  000ca70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00249c04  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000de38  00000000  00000000  00249c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000085  00000000  00000000  00257a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000338 	.word	0x20000338
 8000254:	00000000 	.word	0x00000000
 8000258:	08015584 	.word	0x08015584

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000033c 	.word	0x2000033c
 8000274:	08015584 	.word	0x08015584

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b4 	b.w	8001010 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	460c      	mov	r4, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14d      	bne.n	8000dd4 <__udivmoddi4+0xa8>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	4696      	mov	lr, r2
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	d960      	bls.n	8000e08 <__udivmoddi4+0xdc>
 8000d46:	b14b      	cbz	r3, 8000d5c <__udivmoddi4+0x30>
 8000d48:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d4c:	f1c3 0220 	rsb	r2, r3, #32
 8000d50:	409f      	lsls	r7, r3
 8000d52:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d56:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5a:	4317      	orrs	r7, r2
 8000d5c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d60:	fa1f f48e 	uxth.w	r4, lr
 8000d64:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d68:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d6c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d70:	fb01 f004 	mul.w	r0, r1, r4
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x62>
 8000d7c:	eb1e 0202 	adds.w	r2, lr, r2
 8000d80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x60>
 8000d86:	4290      	cmp	r0, r2
 8000d88:	f200 812d 	bhi.w	8000fe6 <__udivmoddi4+0x2ba>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	1a12      	subs	r2, r2, r0
 8000d90:	fa1f fc8c 	uxth.w	ip, ip
 8000d94:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d98:	fb06 2210 	mls	r2, r6, r0, r2
 8000d9c:	fb00 f404 	mul.w	r4, r0, r4
 8000da0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da4:	4564      	cmp	r4, ip
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	4564      	cmp	r4, ip
 8000db4:	f200 811a 	bhi.w	8000fec <__udivmoddi4+0x2c0>
 8000db8:	4610      	mov	r0, r2
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	ebac 0c04 	sub.w	ip, ip, r4
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b125      	cbz	r5, 8000dd0 <__udivmoddi4+0xa4>
 8000dc6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d905      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd8:	b10d      	cbz	r5, 8000dde <__udivmoddi4+0xb2>
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	2100      	movs	r1, #0
 8000de0:	4608      	mov	r0, r1
 8000de2:	e7f5      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d14d      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4290      	cmp	r0, r2
 8000df4:	f080 80ef 	bcs.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0e6      	beq.n	8000dd0 <__udivmoddi4+0xa4>
 8000e02:	e9c5 6300 	strd	r6, r3, [r5]
 8000e06:	e7e3      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80a2 	bne.w	8000f52 <__udivmoddi4+0x226>
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa1f f68e 	uxth.w	r6, lr
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2a:	fb06 f004 	mul.w	r0, r6, r4
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1e 0202 	adds.w	r2, lr, r2
 8000e36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80c8 	beq.w	8000fe0 <__udivmoddi4+0x2b4>
 8000e50:	4644      	mov	r4, r8
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	fa1f fc8c 	uxth.w	ip, ip
 8000e58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e60:	fb00 f606 	mul.w	r6, r0, r6
 8000e64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e68:	4566      	cmp	r6, ip
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x150>
 8000e76:	4566      	cmp	r6, ip
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2c6>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000e82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e92:	fa22 f706 	lsr.w	r7, r2, r6
 8000e96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e9a:	40f4      	lsrs	r4, r6
 8000e9c:	408a      	lsls	r2, r1
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ea4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ea8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eb8:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ec4:	45a1      	cmp	r9, r4
 8000ec6:	d90e      	bls.n	8000ee6 <__udivmoddi4+0x1ba>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ece:	bf2c      	ite	cs
 8000ed0:	f04f 0b01 	movcs.w	fp, #1
 8000ed4:	f04f 0b00 	movcc.w	fp, #0
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d903      	bls.n	8000ee4 <__udivmoddi4+0x1b8>
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	f000 8093 	beq.w	800100a <__udivmoddi4+0x2de>
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	eba4 0409 	sub.w	r4, r4, r9
 8000eea:	fa1f f983 	uxth.w	r9, r3
 8000eee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ef2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ef6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d906      	bls.n	8000f10 <__udivmoddi4+0x1e4>
 8000f02:	193c      	adds	r4, r7, r4
 8000f04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x1e2>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d87a      	bhi.n	8001004 <__udivmoddi4+0x2d8>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f14:	eba4 040c 	sub.w	r4, r4, ip
 8000f18:	fba0 9802 	umull	r9, r8, r0, r2
 8000f1c:	4544      	cmp	r4, r8
 8000f1e:	46cc      	mov	ip, r9
 8000f20:	4643      	mov	r3, r8
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0x1fe>
 8000f24:	d106      	bne.n	8000f34 <__udivmoddi4+0x208>
 8000f26:	45ce      	cmp	lr, r9
 8000f28:	d204      	bcs.n	8000f34 <__udivmoddi4+0x208>
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f30:	eb68 0307 	sbc.w	r3, r8, r7
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x222>
 8000f36:	ebbe 020c 	subs.w	r2, lr, ip
 8000f3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f42:	fa22 f301 	lsr.w	r3, r2, r1
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	431e      	orrs	r6, r3
 8000f4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e73e      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000f52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f56:	f1c3 0120 	rsb	r1, r3, #32
 8000f5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f68:	fa20 f101 	lsr.w	r1, r0, r1
 8000f6c:	fa1f f68e 	uxth.w	r6, lr
 8000f70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f74:	430a      	orrs	r2, r1
 8000f76:	fb07 4410 	mls	r4, r7, r0, r4
 8000f7a:	0c11      	lsrs	r1, r2, #16
 8000f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f80:	fb00 f406 	mul.w	r4, r0, r6
 8000f84:	428c      	cmp	r4, r1
 8000f86:	d90e      	bls.n	8000fa6 <__udivmoddi4+0x27a>
 8000f88:	eb1e 0101 	adds.w	r1, lr, r1
 8000f8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f90:	bf2c      	ite	cs
 8000f92:	f04f 0901 	movcs.w	r9, #1
 8000f96:	f04f 0900 	movcc.w	r9, #0
 8000f9a:	428c      	cmp	r4, r1
 8000f9c:	d902      	bls.n	8000fa4 <__udivmoddi4+0x278>
 8000f9e:	f1b9 0f00 	cmp.w	r9, #0
 8000fa2:	d02c      	beq.n	8000ffe <__udivmoddi4+0x2d2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	1b09      	subs	r1, r1, r4
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb6:	fb04 f106 	mul.w	r1, r4, r6
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x2a2>
 8000fbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000fc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fc6:	d201      	bcs.n	8000fcc <__udivmoddi4+0x2a0>
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d815      	bhi.n	8000ff8 <__udivmoddi4+0x2cc>
 8000fcc:	4644      	mov	r4, r8
 8000fce:	1a52      	subs	r2, r2, r1
 8000fd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fd4:	e721      	b.n	8000e1a <__udivmoddi4+0xee>
 8000fd6:	1a86      	subs	r6, r0, r2
 8000fd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e70e      	b.n	8000dfe <__udivmoddi4+0xd2>
 8000fe0:	3c02      	subs	r4, #2
 8000fe2:	4472      	add	r2, lr
 8000fe4:	e735      	b.n	8000e52 <__udivmoddi4+0x126>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4472      	add	r2, lr
 8000fea:	e6d0      	b.n	8000d8e <__udivmoddi4+0x62>
 8000fec:	44f4      	add	ip, lr
 8000fee:	3802      	subs	r0, #2
 8000ff0:	e6e3      	b.n	8000dba <__udivmoddi4+0x8e>
 8000ff2:	44f4      	add	ip, lr
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x152>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e7e7      	b.n	8000fce <__udivmoddi4+0x2a2>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4471      	add	r1, lr
 8001002:	e7d0      	b.n	8000fa6 <__udivmoddi4+0x27a>
 8001004:	3b02      	subs	r3, #2
 8001006:	443c      	add	r4, r7
 8001008:	e782      	b.n	8000f10 <__udivmoddi4+0x1e4>
 800100a:	3802      	subs	r0, #2
 800100c:	443c      	add	r4, r7
 800100e:	e76a      	b.n	8000ee6 <__udivmoddi4+0x1ba>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001020:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800102c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001030:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001034:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800103c:	e000      	b.n	8001040 <ITM_SendChar+0x2c>
    {
      __NOP();
 800103e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001040:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f9      	beq.n	800103e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800104a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	@ 0x30
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f007 fd81 	bl	8008b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f8e7 	bl	8001240 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize ICache */
  MX_ICACHE_Init();
 8001072:	f000 fa06 	bl	8001482 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED_GREEN);
 8001076:	2003      	movs	r0, #3
 8001078:	f006 fad4 	bl	8007624 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800107c:	2001      	movs	r0, #1
 800107e:	f006 fad1 	bl	8007624 <BSP_LED_Init>
  /* RED is activated by default */
  BSP_LED_Off(LED_RED);
 8001082:	2001      	movs	r0, #1
 8001084:	f006 fae0 	bl	8007648 <BSP_LED_Off>

  /* Enable Button in Interrupt mode */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001088:	2101      	movs	r1, #1
 800108a:	2000      	movs	r0, #0
 800108c:	f006 fc0c 	bl	80078a8 <BSP_PB_Init>

  /* Init UART for printf */
  BSP_COM_Init(COM1);
 8001090:	2000      	movs	r0, #0
 8001092:	f006 fcc5 	bl	8007a20 <BSP_COM_Init>
  //BSP_MOTION_SENSOR_Init(LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
  //BSP_MOTION_SENSOR_Init(LIS2DU12_0, MOTION_ACCELERO);
  //BSP_MOTION_SENSOR_Init(LIS2MDL_0, MOTION_MAGNETO);

  //init using printf confirmation
  if (BSP_ENV_SENSOR_Init(STTS22H_0, ENV_TEMPERATURE) != BSP_ERROR_NONE)
 8001096:	2101      	movs	r1, #1
 8001098:	2000      	movs	r0, #0
 800109a:	f006 ffe7 	bl	800806c <BSP_ENV_SENSOR_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <main+0x46>
  {
      //Error_Handler();
	  printf("STTS22H Ready");
 80010a4:	4859      	ldr	r0, [pc, #356]	@ (800120c <main+0x1a8>)
 80010a6:	f010 fda5 	bl	8011bf4 <iprintf>
  }

  if (BSP_ENV_SENSOR_Init(LPS22DF_0, ENV_PRESSURE | ENV_TEMPERATURE) != BSP_ERROR_NONE)
 80010aa:	2103      	movs	r1, #3
 80010ac:	2001      	movs	r0, #1
 80010ae:	f006 ffdd 	bl	800806c <BSP_ENV_SENSOR_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <main+0x5a>
  {
      //Error_Handler();
	  printf("LPS22DF Ready");
 80010b8:	4855      	ldr	r0, [pc, #340]	@ (8001210 <main+0x1ac>)
 80010ba:	f010 fd9b 	bl	8011bf4 <iprintf>
  }

  if (BSP_MOTION_SENSOR_Init(LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO) != BSP_ERROR_NONE)
 80010be:	2103      	movs	r1, #3
 80010c0:	2002      	movs	r0, #2
 80010c2:	f007 fa0f 	bl	80084e4 <BSP_MOTION_SENSOR_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <main+0x6e>
  {
      //Error_Handler();
	  printf("LSM6DSV16X Ready");
 80010cc:	4851      	ldr	r0, [pc, #324]	@ (8001214 <main+0x1b0>)
 80010ce:	f010 fd91 	bl	8011bf4 <iprintf>
  }

  if (BSP_MOTION_SENSOR_Init(LIS2MDL_0, MOTION_MAGNETO) != BSP_ERROR_NONE)
 80010d2:	2104      	movs	r1, #4
 80010d4:	2000      	movs	r0, #0
 80010d6:	f007 fa05 	bl	80084e4 <BSP_MOTION_SENSOR_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <main+0x82>
  {
      //Error_Handler();
	  printf("LIS2MDL Ready");
 80010e0:	484d      	ldr	r0, [pc, #308]	@ (8001218 <main+0x1b4>)
 80010e2:	f010 fd87 	bl	8011bf4 <iprintf>
  }

  if (BSP_MOTION_SENSOR_Init(LIS2DU12_0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 80010e6:	2102      	movs	r1, #2
 80010e8:	2001      	movs	r0, #1
 80010ea:	f007 f9fb 	bl	80084e4 <BSP_MOTION_SENSOR_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <main+0x96>
  {
      //Error_Handler();
	  printf("LIS2DU12 Ready");
 80010f4:	4849      	ldr	r0, [pc, #292]	@ (800121c <main+0x1b8>)
 80010f6:	f010 fd7d 	bl	8011bf4 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    float temp_stts22h = 0.0f, temp_lps22df = 0.0f, pressure = 0.0f;
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
	    BSP_MOTION_SENSOR_Axes_t acc_axes, gyro_axes, mag_axes;

	    // STTS22H
	    if (BSP_ENV_SENSOR_GetValue(STTS22H_0, ENV_TEMPERATURE, &temp_stts22h) == BSP_ERROR_NONE)
 800110c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001110:	461a      	mov	r2, r3
 8001112:	2101      	movs	r1, #1
 8001114:	2000      	movs	r0, #0
 8001116:	f007 f859 	bl	80081cc <BSP_ENV_SENSOR_GetValue>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <main+0xce>
	    {
	        printf("STTS22H Temp: %.2f °C\r\n", temp_stts22h);
 8001120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa14 	bl	8000550 <__aeabi_f2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	483c      	ldr	r0, [pc, #240]	@ (8001220 <main+0x1bc>)
 800112e:	f010 fd61 	bl	8011bf4 <iprintf>
	    }
	    // LPS22DF
	    if (BSP_ENV_SENSOR_GetValue(LPS22DF_0, ENV_TEMPERATURE, &temp_lps22df) == BSP_ERROR_NONE)
 8001132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001136:	461a      	mov	r2, r3
 8001138:	2101      	movs	r1, #1
 800113a:	2001      	movs	r0, #1
 800113c:	f007 f846 	bl	80081cc <BSP_ENV_SENSOR_GetValue>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d108      	bne.n	8001158 <main+0xf4>
	    {
	        printf("LPS22DF Temp: %.2f °C\r\n", temp_lps22df);
 8001146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa01 	bl	8000550 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4834      	ldr	r0, [pc, #208]	@ (8001224 <main+0x1c0>)
 8001154:	f010 fd4e 	bl	8011bf4 <iprintf>
	    }

	    if (BSP_ENV_SENSOR_GetValue(LPS22DF_0, ENV_PRESSURE, &pressure) == BSP_ERROR_NONE)
 8001158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115c:	461a      	mov	r2, r3
 800115e:	2102      	movs	r1, #2
 8001160:	2001      	movs	r0, #1
 8001162:	f007 f833 	bl	80081cc <BSP_ENV_SENSOR_GetValue>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d108      	bne.n	800117e <main+0x11a>
	    {
	        printf("LPS22DF Pressure: %.2f hPa\r\n", pressure);
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9ee 	bl	8000550 <__aeabi_f2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	482b      	ldr	r0, [pc, #172]	@ (8001228 <main+0x1c4>)
 800117a:	f010 fd3b 	bl	8011bf4 <iprintf>
	    }

	    // LIS2DU12
	    if (BSP_MOTION_SENSOR_GetAxes(LIS2DU12_0, MOTION_ACCELERO, &acc_axes) == BSP_ERROR_NONE)
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	461a      	mov	r2, r3
 8001184:	2102      	movs	r1, #2
 8001186:	2001      	movs	r0, #1
 8001188:	f007 faa8 	bl	80086dc <BSP_MOTION_SENSOR_GetAxes>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d105      	bne.n	800119e <main+0x13a>
	    {
	        printf("LIS2DU12 ACC: X=%ld Y=%ld Z=%ld\r\n", acc_axes.x, acc_axes.y, acc_axes.z);
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	4824      	ldr	r0, [pc, #144]	@ (800122c <main+0x1c8>)
 800119a:	f010 fd2b 	bl	8011bf4 <iprintf>
	    }

	    // LSM6DSV16X
	    if (BSP_MOTION_SENSOR_GetAxes(LSM6DSV16X_0, MOTION_ACCELERO, &acc_axes) == BSP_ERROR_NONE)
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	461a      	mov	r2, r3
 80011a4:	2102      	movs	r1, #2
 80011a6:	2002      	movs	r0, #2
 80011a8:	f007 fa98 	bl	80086dc <BSP_MOTION_SENSOR_GetAxes>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <main+0x15a>
	    {
	        printf("LSM6DSV16X ACC: X=%ld Y=%ld Z=%ld\r\n", acc_axes.x, acc_axes.y, acc_axes.z);
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	481d      	ldr	r0, [pc, #116]	@ (8001230 <main+0x1cc>)
 80011ba:	f010 fd1b 	bl	8011bf4 <iprintf>
	    }

	    if (BSP_MOTION_SENSOR_GetAxes(LSM6DSV16X_0, MOTION_GYRO, &gyro_axes) == BSP_ERROR_NONE)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	461a      	mov	r2, r3
 80011c4:	2101      	movs	r1, #1
 80011c6:	2002      	movs	r0, #2
 80011c8:	f007 fa88 	bl	80086dc <BSP_MOTION_SENSOR_GetAxes>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <main+0x17a>
	    {
	        printf("LSM6DSV16X GYRO: X=%ld Y=%ld Z=%ld\r\n", gyro_axes.x, gyro_axes.y, gyro_axes.z);
 80011d2:	68f9      	ldr	r1, [r7, #12]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	4816      	ldr	r0, [pc, #88]	@ (8001234 <main+0x1d0>)
 80011da:	f010 fd0b 	bl	8011bf4 <iprintf>
	    }

	    // LIS2MDL
	    if (BSP_MOTION_SENSOR_GetAxes(LIS2MDL_0, MOTION_MAGNETO, &mag_axes) == BSP_ERROR_NONE)
 80011de:	463b      	mov	r3, r7
 80011e0:	461a      	mov	r2, r3
 80011e2:	2104      	movs	r1, #4
 80011e4:	2000      	movs	r0, #0
 80011e6:	f007 fa79 	bl	80086dc <BSP_MOTION_SENSOR_GetAxes>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <main+0x198>
	    {
	        printf("LIS2MDL MAG: X=%ld Y=%ld Z=%ld\r\n", mag_axes.x, mag_axes.y, mag_axes.z);
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4810      	ldr	r0, [pc, #64]	@ (8001238 <main+0x1d4>)
 80011f8:	f010 fcfc 	bl	8011bf4 <iprintf>
	    }

	    printf("--------------------------------------------------\r\n");
 80011fc:	480f      	ldr	r0, [pc, #60]	@ (800123c <main+0x1d8>)
 80011fe:	f010 fd61 	bl	8011cc4 <puts>
	    HAL_Delay(1000); // Delay 1 second
 8001202:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001206:	f007 fd79 	bl	8008cfc <HAL_Delay>
  {
 800120a:	e776      	b.n	80010fa <main+0x96>
 800120c:	080155a0 	.word	0x080155a0
 8001210:	080155b0 	.word	0x080155b0
 8001214:	080155c0 	.word	0x080155c0
 8001218:	080155d4 	.word	0x080155d4
 800121c:	080155e4 	.word	0x080155e4
 8001220:	080155f4 	.word	0x080155f4
 8001224:	08015610 	.word	0x08015610
 8001228:	0801562c 	.word	0x0801562c
 800122c:	0801564c 	.word	0x0801564c
 8001230:	08015670 	.word	0x08015670
 8001234:	08015694 	.word	0x08015694
 8001238:	080156bc 	.word	0x080156bc
 800123c:	080156e0 	.word	0x080156e0

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0d0      	sub	sp, #320	@ 0x140
 8001244:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800124a:	2260      	movs	r2, #96	@ 0x60
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f010 fe38 	bl	8011ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001266:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800126a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800126e:	4618      	mov	r0, r3
 8001270:	23c8      	movs	r3, #200	@ 0xc8
 8001272:	461a      	mov	r2, r3
 8001274:	2100      	movs	r1, #0
 8001276:	f010 fe25 	bl	8011ec4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800127a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800127e:	f00a fd7f 	bl	800bd80 <HAL_PWREx_ControlVoltageScaling>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8001288:	f000 f90e 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800128c:	232b      	movs	r3, #43	@ 0x2b
 800128e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800129e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012aa:	2310      	movs	r3, #16
 80012ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012b0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012d6:	230a      	movs	r3, #10
 80012d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  RCC_OscInitStruct.PLL.PLLP = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  RCC_OscInitStruct.PLL.PLLR = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80012ee:	230c      	movs	r3, #12
 80012f0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80012fe:	4618      	mov	r0, r3
 8001300:	f00a fdea 	bl	800bed8 <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xce>
  {
	  Error_Handler();
 800130a:	f000 f8cd 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	231f      	movs	r3, #31
 8001310:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2303      	movs	r3, #3
 8001316:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001332:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001336:	2104      	movs	r1, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f00b fca9 	bl	800cc90 <HAL_RCC_ClockConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x108>
  {
	  Error_Handler();
 8001344:	f000 f8b0 	bl	80014a8 <Error_Handler>
  }

    /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_MDF1|RCC_PERIPHCLK_ADF1
 8001348:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800134c:	f5a3 71a0 	sub.w	r1, r3, #320	@ 0x140
 8001350:	f44f 3260 	mov.w	r2, #229376	@ 0x38000
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9c1 2300 	strd	r2, r3, [r1]
                              |RCC_PERIPHCLK_ADCDAC;
  PeriphClkInit.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_PLL3;
 800135c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001360:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001364:	2202      	movs	r2, #2
 8001366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_PLL3;
 800136a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800136e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001372:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 800137a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800137e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001386:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 800138a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800138e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001392:	2203      	movs	r2, #3
 8001394:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit.PLL3.PLL3M = 2;
 8001396:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800139a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800139e:	2202      	movs	r2, #2
 80013a0:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit.PLL3.PLL3N = 48;
 80013a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013a6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013aa:	2230      	movs	r2, #48	@ 0x30
 80013ac:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit.PLL3.PLL3P = 2;
 80013ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013b2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013b6:	2202      	movs	r2, #2
 80013b8:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit.PLL3.PLL3Q = 25;
 80013ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013be:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013c2:	2219      	movs	r2, #25
 80013c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  PeriphClkInit.PLL3.PLL3R = 2;
 80013c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013ce:	2202      	movs	r2, #2
 80013d0:	641a      	str	r2, [r3, #64]	@ 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_1;
 80013d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013d6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013da:	220c      	movs	r2, #12
 80013dc:	645a      	str	r2, [r3, #68]	@ 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 80013de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013e2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013e6:	2200      	movs	r2, #0
 80013e8:	649a      	str	r2, [r3, #72]	@ 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVQ;
 80013ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ee:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80013f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001400:	2203      	movs	r2, #3
 8001402:	609a      	str	r2, [r3, #8]
  PeriphClkInit.PLL2.PLL2M = 2;
 8001404:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001408:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800140c:	2202      	movs	r2, #2
 800140e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.PLL2.PLL2N = 48;
 8001410:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001414:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001418:	2230      	movs	r2, #48	@ 0x30
 800141a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 800141c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001420:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001424:	2202      	movs	r2, #2
 8001426:	615a      	str	r2, [r3, #20]
  PeriphClkInit.PLL2.PLL2Q = 7;
 8001428:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800142c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001430:	2207      	movs	r2, #7
 8001432:	619a      	str	r2, [r3, #24]
  PeriphClkInit.PLL2.PLL2R = 25;
 8001434:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001438:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800143c:	2219      	movs	r2, #25
 800143e:	61da      	str	r2, [r3, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001440:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001444:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001448:	220c      	movs	r2, #12
 800144a:	621a      	str	r2, [r3, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 800144c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001450:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8001458:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800145c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001460:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001464:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4618      	mov	r0, r3
 800146a:	f00b ffe1 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x238>
  {
	  Error_Handler();
 8001474:	f000 f818 	bl	80014a8 <Error_Handler>
  }
}
 8001478:	bf00      	nop
 800147a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001486:	2000      	movs	r0, #0
 8001488:	f00a fc4a 	bl	800bd20 <HAL_ICACHE_ConfigAssociativityMode>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ICACHE_Init+0x14>
  {
	  Error_Handler();
 8001492:	f000 f809 	bl	80014a8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001496:	f00a fc63 	bl	800bd60 <HAL_ICACHE_Enable>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ICACHE_Init+0x22>
  {
	  Error_Handler();
 80014a0:	f000 f802 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <Error_Handler>:
  * @param char *File Name
  * @param int32_t Line number
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <Error_Handler+0x8>

080014b4 <_write>:
  return FinishGood;
}


int _write(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e009      	b.n	80014da <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	60ba      	str	r2, [r7, #8]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fda0 	bl	8001014 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dbf1      	blt.n	80014c6 <_write+0x12>

  }
  return len;
 80014e2:	687b      	ldr	r3, [r7, #4]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HAL_MspInit+0x34>)
 80014f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f8:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <HAL_MspInit+0x34>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <HAL_MspInit+0x34>)
 8001504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001510:	f00a fcc2 	bl	800be98 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8001514:	f00a fcd0 	bl	800beb8 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	46020c00 	.word	0x46020c00

08001524 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0c2      	sub	sp, #264	@ 0x108
 8001528:	af00      	add	r7, sp, #0
 800152a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800152e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001532:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001548:	22c8      	movs	r2, #200	@ 0xc8
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f010 fcb9 	bl	8011ec4 <memset>
  if(hi2c->Instance==I2C1)
 8001552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4aa8      	ldr	r2, [pc, #672]	@ (8001800 <HAL_I2C_MspInit+0x2dc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	f040 80eb 	bne.w	800173c <HAL_I2C_MspInit+0x218>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001566:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800157c:	4618      	mov	r0, r3
 800157e:	f00b ff57 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_I2C_MspInit+0x68>
    {
      Error_Handler();
 8001588:	f7ff ff8e 	bl	80014a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b9d      	ldr	r3, [pc, #628]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 800158e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001592:	4a9c      	ldr	r2, [pc, #624]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800159c:	4b99      	ldr	r3, [pc, #612]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 800159e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015aa:	23c0      	movs	r3, #192	@ 0xc0
 80015ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b0:	2312      	movs	r3, #18
 80015b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c2:	2304      	movs	r3, #4
 80015c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80015cc:	4619      	mov	r1, r3
 80015ce:	488e      	ldr	r0, [pc, #568]	@ (8001808 <HAL_I2C_MspInit+0x2e4>)
 80015d0:	f008 fc3e 	bl	8009e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 80015d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015da:	4a8a      	ldr	r2, [pc, #552]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 80015dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015e0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015e4:	4b87      	ldr	r3, [pc, #540]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 80015e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ee:	623b      	str	r3, [r7, #32]
 80015f0:	6a3b      	ldr	r3, [r7, #32]

    /* I2C1 DMA Init */
    /* GPDMA1_REQUEST_I2C1_TX Init */
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80015f2:	4b86      	ldr	r3, [pc, #536]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 80015f4:	4a86      	ldr	r2, [pc, #536]	@ (8001810 <HAL_I2C_MspInit+0x2ec>)
 80015f6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C1_TX;
 80015f8:	4b84      	ldr	r3, [pc, #528]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 80015fa:	220d      	movs	r2, #13
 80015fc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80015fe:	4b83      	ldr	r3, [pc, #524]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001604:	4b81      	ldr	r3, [pc, #516]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800160a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 800160c:	4b7f      	ldr	r3, [pc, #508]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 800160e:	2208      	movs	r2, #8
 8001610:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001612:	4b7e      	ldr	r3, [pc, #504]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001618:	4b7c      	ldr	r3, [pc, #496]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800161e:	4b7b      	ldr	r3, [pc, #492]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001624:	4b79      	ldr	r3, [pc, #484]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 800162a:	4b78      	ldr	r3, [pc, #480]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 800162c:	2201      	movs	r2, #1
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001630:	4b76      	ldr	r3, [pc, #472]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001632:	2201      	movs	r2, #1
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001636:	4b75      	ldr	r3, [pc, #468]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001638:	2200      	movs	r2, #0
 800163a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800163c:	4b73      	ldr	r3, [pc, #460]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 800163e:	2200      	movs	r2, #0
 8001640:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001642:	4b72      	ldr	r3, [pc, #456]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001644:	2200      	movs	r2, #0
 8001646:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001648:	4870      	ldr	r0, [pc, #448]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 800164a:	f007 fd41 	bl	80090d0 <HAL_DMA_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_MspInit+0x134>
    {
      Error_Handler();
 8001654:	f7ff ff28 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 8001658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800165c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6a      	ldr	r2, [pc, #424]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001664:	639a      	str	r2, [r3, #56]	@ 0x38
 8001666:	4a69      	ldr	r2, [pc, #420]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800166c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001674:	2110      	movs	r1, #16
 8001676:	4865      	ldr	r0, [pc, #404]	@ (800180c <HAL_I2C_MspInit+0x2e8>)
 8001678:	f008 f8de 	bl	8009838 <HAL_DMA_ConfigChannelAttributes>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_MspInit+0x162>
    {
      Error_Handler();
 8001682:	f7ff ff11 	bl	80014a8 <Error_Handler>
    }

    /* GPDMA1_REQUEST_I2C1_RX Init */
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001686:	4b63      	ldr	r3, [pc, #396]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 8001688:	4a63      	ldr	r2, [pc, #396]	@ (8001818 <HAL_I2C_MspInit+0x2f4>)
 800168a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C1_RX;
 800168c:	4b61      	ldr	r3, [pc, #388]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 800168e:	220c      	movs	r2, #12
 8001690:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001692:	4b60      	ldr	r3, [pc, #384]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001698:	4b5e      	ldr	r3, [pc, #376]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80016a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016aa:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80016ac:	4b59      	ldr	r3, [pc, #356]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80016b2:	4b58      	ldr	r3, [pc, #352]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80016b8:	4b56      	ldr	r3, [pc, #344]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80016be:	4b55      	ldr	r3, [pc, #340]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80016ca:	4b52      	ldr	r3, [pc, #328]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80016d0:	4b50      	ldr	r3, [pc, #320]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80016d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80016dc:	484d      	ldr	r0, [pc, #308]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016de:	f007 fcf7 	bl	80090d0 <HAL_DMA_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_I2C_MspInit+0x1c8>
    {
      Error_Handler();
 80016e8:	f7ff fede 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 80016ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80016f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a47      	ldr	r2, [pc, #284]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016fa:	4a46      	ldr	r2, [pc, #280]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 80016fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001708:	2110      	movs	r1, #16
 800170a:	4842      	ldr	r0, [pc, #264]	@ (8001814 <HAL_I2C_MspInit+0x2f0>)
 800170c:	f008 f894 	bl	8009838 <HAL_DMA_ConfigChannelAttributes>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_MspInit+0x1f6>
    {
      Error_Handler();
 8001716:	f7ff fec7 	bl	80014a8 <Error_Handler>
    }

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2037      	movs	r0, #55	@ 0x37
 8001720:	f007 fbec 	bl	8008efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001724:	2037      	movs	r0, #55	@ 0x37
 8001726:	f007 fc03 	bl	8008f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2038      	movs	r0, #56	@ 0x38
 8001730:	f007 fbe4 	bl	8008efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001734:	2038      	movs	r0, #56	@ 0x38
 8001736:	f007 fbfb 	bl	8008f30 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 800173a:	e12a      	b.n	8001992 <HAL_I2C_MspInit+0x46e>
  else if(hi2c->Instance==I2C2)
 800173c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001740:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a34      	ldr	r2, [pc, #208]	@ (800181c <HAL_I2C_MspInit+0x2f8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d168      	bne.n	8001820 <HAL_I2C_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800174e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001764:	4618      	mov	r0, r3
 8001766:	f00b fe63 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_MspInit+0x250>
      Error_Handler();
 8001770:	f7ff fe9a 	bl	80014a8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 8001776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177a:	4a22      	ldr	r2, [pc, #136]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 8001786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001792:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001796:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017ac:	2304      	movs	r3, #4
 80017ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4813      	ldr	r0, [pc, #76]	@ (8001808 <HAL_I2C_MspInit+0x2e4>)
 80017ba:	f008 fb49 	bl	8009e50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 80017c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 80017c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017ca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <HAL_I2C_MspInit+0x2e0>)
 80017d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	2039      	movs	r0, #57	@ 0x39
 80017e2:	f007 fb8b 	bl	8008efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80017e6:	2039      	movs	r0, #57	@ 0x39
 80017e8:	f007 fba2 	bl	8008f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	203a      	movs	r0, #58	@ 0x3a
 80017f2:	f007 fb83 	bl	8008efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80017f6:	203a      	movs	r0, #58	@ 0x3a
 80017f8:	f007 fb9a 	bl	8008f30 <HAL_NVIC_EnableIRQ>
}
 80017fc:	e0c9      	b.n	8001992 <HAL_I2C_MspInit+0x46e>
 80017fe:	bf00      	nop
 8001800:	40005400 	.word	0x40005400
 8001804:	46020c00 	.word	0x46020c00
 8001808:	42020400 	.word	0x42020400
 800180c:	2000066c 	.word	0x2000066c
 8001810:	400201d0 	.word	0x400201d0
 8001814:	200006e4 	.word	0x200006e4
 8001818:	40020150 	.word	0x40020150
 800181c:	40005800 	.word	0x40005800
  else if(hi2c->Instance==I2C3)
 8001820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a5b      	ldr	r2, [pc, #364]	@ (800199c <HAL_I2C_MspInit+0x478>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d147      	bne.n	80018c2 <HAL_I2C_MspInit+0x39e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001832:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001848:	4618      	mov	r0, r3
 800184a:	f00b fdf1 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_I2C_MspInit+0x334>
      Error_Handler();
 8001854:	f7ff fe28 	bl	80014a8 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001858:	4b51      	ldr	r3, [pc, #324]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 800185a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185e:	4a50      	ldr	r2, [pc, #320]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 8001860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001864:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001868:	4b4d      	ldr	r3, [pc, #308]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 800186a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001876:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800187a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	2312      	movs	r3, #18
 8001880:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001890:	2304      	movs	r3, #4
 8001892:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001896:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800189a:	4619      	mov	r1, r3
 800189c:	4841      	ldr	r0, [pc, #260]	@ (80019a4 <HAL_I2C_MspInit+0x480>)
 800189e:	f008 fad7 	bl	8009e50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018a2:	4b3f      	ldr	r3, [pc, #252]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 80018a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80018a8:	4a3d      	ldr	r2, [pc, #244]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ae:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80018b2:	4b3b      	ldr	r3, [pc, #236]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 80018b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80018b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
}
 80018c0:	e067      	b.n	8001992 <HAL_I2C_MspInit+0x46e>
  else if(hi2c->Instance==I2C4)
 80018c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a36      	ldr	r2, [pc, #216]	@ (80019a8 <HAL_I2C_MspInit+0x484>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d15e      	bne.n	8001992 <HAL_I2C_MspInit+0x46e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80018d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00b fda0 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_MspInit+0x3d6>
      Error_Handler();
 80018f6:	f7ff fdd7 	bl	80014a8 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fa:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 80018fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001900:	4a27      	ldr	r2, [pc, #156]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800190a:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 800190c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001918:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800191c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	2312      	movs	r3, #18
 8001922:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001932:	2304      	movs	r3, #4
 8001934:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800193c:	4619      	mov	r1, r3
 800193e:	481b      	ldr	r0, [pc, #108]	@ (80019ac <HAL_I2C_MspInit+0x488>)
 8001940:	f008 fa86 	bl	8009e50 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 8001946:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800194a:	4a15      	ldr	r2, [pc, #84]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_I2C_MspInit+0x47c>)
 8001956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800195a:	f003 0202 	and.w	r2, r3, #2
 800195e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001962:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800196c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001970:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2065      	movs	r0, #101	@ 0x65
 8001978:	f007 fac0 	bl	8008efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800197c:	2065      	movs	r0, #101	@ 0x65
 800197e:	f007 fad7 	bl	8008f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	2064      	movs	r0, #100	@ 0x64
 8001988:	f007 fab8 	bl	8008efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800198c:	2064      	movs	r0, #100	@ 0x64
 800198e:	f007 facf 	bl	8008f30 <HAL_NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	46002800 	.word	0x46002800
 80019a0:	46020c00 	.word	0x46020c00
 80019a4:	42021800 	.word	0x42021800
 80019a8:	40008400 	.word	0x40008400
 80019ac:	42020c00 	.word	0x42020c00

080019b0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab0 <HAL_I2C_MspDeInit+0x100>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d120      	bne.n	8001a04 <HAL_I2C_MspDeInit+0x54>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80019c2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab4 <HAL_I2C_MspDeInit+0x104>)
 80019c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019c8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab4 <HAL_I2C_MspDeInit+0x104>)
 80019ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80019d2:	2140      	movs	r1, #64	@ 0x40
 80019d4:	4838      	ldr	r0, [pc, #224]	@ (8001ab8 <HAL_I2C_MspDeInit+0x108>)
 80019d6:	f008 fc1b 	bl	800a210 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	4836      	ldr	r0, [pc, #216]	@ (8001ab8 <HAL_I2C_MspDeInit+0x108>)
 80019de:	f008 fc17 	bl	800a210 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e6:	4618      	mov	r0, r3
 80019e8:	f007 fcb4 	bl	8009354 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f0:	4618      	mov	r0, r3
 80019f2:	f007 fcaf 	bl	8009354 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80019f6:	2037      	movs	r0, #55	@ 0x37
 80019f8:	f007 faa8 	bl	8008f4c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80019fc:	2038      	movs	r0, #56	@ 0x38
 80019fe:	f007 faa5 	bl	8008f4c <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001a02:	e051      	b.n	8001aa8 <HAL_I2C_MspDeInit+0xf8>
  else if(hi2c->Instance==I2C2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2c      	ldr	r2, [pc, #176]	@ (8001abc <HAL_I2C_MspDeInit+0x10c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d118      	bne.n	8001a40 <HAL_I2C_MspDeInit+0x90>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001a0e:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <HAL_I2C_MspDeInit+0x104>)
 8001a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a14:	4a27      	ldr	r2, [pc, #156]	@ (8001ab4 <HAL_I2C_MspDeInit+0x104>)
 8001a16:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 8001a1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a22:	4825      	ldr	r0, [pc, #148]	@ (8001ab8 <HAL_I2C_MspDeInit+0x108>)
 8001a24:	f008 fbf4 	bl	800a210 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 8001a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a2c:	4822      	ldr	r0, [pc, #136]	@ (8001ab8 <HAL_I2C_MspDeInit+0x108>)
 8001a2e:	f008 fbef 	bl	800a210 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8001a32:	2039      	movs	r0, #57	@ 0x39
 8001a34:	f007 fa8a 	bl	8008f4c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8001a38:	203a      	movs	r0, #58	@ 0x3a
 8001a3a:	f007 fa87 	bl	8008f4c <HAL_NVIC_DisableIRQ>
}
 8001a3e:	e033      	b.n	8001aa8 <HAL_I2C_MspDeInit+0xf8>
  else if(hi2c->Instance==I2C3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac0 <HAL_I2C_MspDeInit+0x110>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d111      	bne.n	8001a6e <HAL_I2C_MspDeInit+0xbe>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_I2C_MspDeInit+0x104>)
 8001a4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001a50:	4a18      	ldr	r2, [pc, #96]	@ (8001ab4 <HAL_I2C_MspDeInit+0x104>)
 8001a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a56:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_7);
 8001a5a:	2180      	movs	r1, #128	@ 0x80
 8001a5c:	4819      	ldr	r0, [pc, #100]	@ (8001ac4 <HAL_I2C_MspDeInit+0x114>)
 8001a5e:	f008 fbd7 	bl	800a210 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_8);
 8001a62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a66:	4817      	ldr	r0, [pc, #92]	@ (8001ac4 <HAL_I2C_MspDeInit+0x114>)
 8001a68:	f008 fbd2 	bl	800a210 <HAL_GPIO_DeInit>
}
 8001a6c:	e01c      	b.n	8001aa8 <HAL_I2C_MspDeInit+0xf8>
  else if(hi2c->Instance==I2C4)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a15      	ldr	r2, [pc, #84]	@ (8001ac8 <HAL_I2C_MspDeInit+0x118>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d117      	bne.n	8001aa8 <HAL_I2C_MspDeInit+0xf8>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_I2C_MspDeInit+0x104>)
 8001a7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_I2C_MspDeInit+0x104>)
 8001a80:	f023 0302 	bic.w	r3, r3, #2
 8001a84:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001a88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a8c:	480f      	ldr	r0, [pc, #60]	@ (8001acc <HAL_I2C_MspDeInit+0x11c>)
 8001a8e:	f008 fbbf 	bl	800a210 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8001a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a96:	480d      	ldr	r0, [pc, #52]	@ (8001acc <HAL_I2C_MspDeInit+0x11c>)
 8001a98:	f008 fbba 	bl	800a210 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8001a9c:	2065      	movs	r0, #101	@ 0x65
 8001a9e:	f007 fa55 	bl	8008f4c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 8001aa2:	2064      	movs	r0, #100	@ 0x64
 8001aa4:	f007 fa52 	bl	8008f4c <HAL_NVIC_DisableIRQ>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	46020c00 	.word	0x46020c00
 8001ab8:	42020400 	.word	0x42020400
 8001abc:	40005800 	.word	0x40005800
 8001ac0:	46002800 	.word	0x46002800
 8001ac4:	42021800 	.word	0x42021800
 8001ac8:	40008400 	.word	0x40008400
 8001acc:	42020c00 	.word	0x42020c00

08001ad0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0be      	sub	sp, #248	@ 0xf8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	22c8      	movs	r2, #200	@ 0xc8
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f010 f9e7 	bl	8011ec4 <memset>
  if(huart->Instance==UART4)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a4b      	ldr	r2, [pc, #300]	@ (8001c28 <HAL_UART_MspInit+0x158>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d145      	bne.n	8001b8c <HAL_UART_MspInit+0xbc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b00:	f04f 0208 	mov.w	r2, #8
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00b fc8b 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001b20:	f7ff fcc2 	bl	80014a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b24:	4b41      	ldr	r3, [pc, #260]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b2a:	4a40      	ldr	r2, [pc, #256]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001b2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b30:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b34:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b48:	4a38      	ldr	r2, [pc, #224]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b52:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b82:	4619      	mov	r1, r3
 8001b84:	482a      	ldr	r0, [pc, #168]	@ (8001c30 <HAL_UART_MspInit+0x160>)
 8001b86:	f008 f963 	bl	8009e50 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b8a:	e049      	b.n	8001c20 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <HAL_UART_MspInit+0x164>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d144      	bne.n	8001c20 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b96:	f04f 0202 	mov.w	r2, #2
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00b fc40 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_MspInit+0xea>
      Error_Handler();
 8001bb6:	f7ff fc77 	bl	80014a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bde:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_UART_MspInit+0x15c>)
 8001bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001bf6:	2360      	movs	r3, #96	@ 0x60
 8001bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c14:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <HAL_UART_MspInit+0x168>)
 8001c1c:	f008 f918 	bl	8009e50 <HAL_GPIO_Init>
}
 8001c20:	bf00      	nop
 8001c22:	37f8      	adds	r7, #248	@ 0xf8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40004c00 	.word	0x40004c00
 8001c2c:	46020c00 	.word	0x46020c00
 8001c30:	42020000 	.word	0x42020000
 8001c34:	40004400 	.word	0x40004400
 8001c38:	42020c00 	.word	0x42020c00

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <NMI_Handler+0x4>

08001c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <MemManage_Handler+0x4>

08001c54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c92:	f007 f813 	bl	8008cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f008 fbac 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8001cac:	2002      	movs	r0, #2
 8001cae:	f008 fba5 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8001cba:	2004      	movs	r0, #4
 8001cbc:	f008 fb9e 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WC_INTB_Pin);
 8001cc8:	2008      	movs	r0, #8
 8001cca:	f008 fb97 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8001cd6:	2010      	movs	r0, #16
 8001cd8:	f008 fb90 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_Pin);
 8001ce4:	2020      	movs	r0, #32
 8001ce6:	f008 fb89 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}

08001cee <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 8001cf2:	2040      	movs	r0, #64	@ 0x40
 8001cf4:	f008 fb82 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PRESS_INT_Pin);
 8001d00:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d04:	f008 fb7a 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001d10:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d14:	f008 fb72 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8001d20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d24:	f008 fb6a 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 8001d30:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001d34:	f008 fb62 	bl	800a3fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */

  /* USER CODE END EXTI15_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001d42:	f007 fc0a 	bl	800955a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200005f4 	.word	0x200005f4

08001d50 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001d56:	f007 fc00 	bl	800955a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000057c 	.word	0x2000057c

08001d64 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001d6a:	f007 fbf6 	bl	800955a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200006e4 	.word	0x200006e4

08001d78 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <GPDMA1_Channel3_IRQHandler+0x10>)
 8001d7e:	f007 fbec 	bl	800955a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000066c 	.word	0x2000066c

08001d8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <I2C1_EV_IRQHandler+0x10>)
 8001d92:	f008 fe67 	bl	800aa64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000524 	.word	0x20000524

08001da0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <I2C1_ER_IRQHandler+0x10>)
 8001da6:	f008 fe77 	bl	800aa98 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000524 	.word	0x20000524

08001db4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <I2C2_EV_IRQHandler+0x10>)
 8001dba:	f008 fe53 	bl	800aa64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200003ec 	.word	0x200003ec

08001dc8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <I2C2_ER_IRQHandler+0x10>)
 8001dce:	f008 fe63 	bl	800aa98 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200003ec 	.word	0x200003ec

08001ddc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <SPI2_IRQHandler+0x10>)
 8001de2:	f00e f805 	bl	800fdf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000494 	.word	0x20000494

08001df0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 Event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <I2C4_EV_IRQHandler+0x10>)
 8001df6:	f008 fe35 	bl	800aa64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000440 	.word	0x20000440

08001e04 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 Error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <I2C4_ER_IRQHandler+0x10>)
 8001e0a:	f008 fe45 	bl	800aa98 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000440 	.word	0x20000440

08001e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_kill>:

int _kill(int pid, int sig)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e32:	f010 f899 	bl	8011f68 <__errno>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2216      	movs	r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe7 	bl	8001e28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e5a:	bf00      	nop
 8001e5c:	e7fd      	b.n	8001e5a <_exit+0x12>

08001e5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e00a      	b.n	8001e86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e70:	f3af 8000 	nop.w
 8001e74:	4601      	mov	r1, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	60ba      	str	r2, [r7, #8]
 8001e7c:	b2ca      	uxtb	r2, r1
 8001e7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3301      	adds	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbf0      	blt.n	8001e70 <_read+0x12>
  }

  return len;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_isatty>:

int _isatty(int file)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed8:	2301      	movs	r3, #1
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f010 f81a 	bl	8011f68 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200c0000 	.word	0x200c0000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	20000354 	.word	0x20000354
 8001f68:	20000a38 	.word	0x20000a38

08001f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f70:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <SystemInit+0x68>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	4a17      	ldr	r2, [pc, #92]	@ (8001fd4 <SystemInit+0x68>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <SystemInit+0x6c>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001f86:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <SystemInit+0x6c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <SystemInit+0x6c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <SystemInit+0x6c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001f98:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <SystemInit+0x6c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd8 <SystemInit+0x6c>)
 8001f9e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001fa2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001fa6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <SystemInit+0x6c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <SystemInit+0x6c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a09      	ldr	r2, [pc, #36]	@ (8001fd8 <SystemInit+0x6c>)
 8001fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <SystemInit+0x6c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc0:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SystemInit+0x68>)
 8001fc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fc6:	609a      	str	r2, [r3, #8]
  #endif
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	46020c00 	.word	0x46020c00

08001fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002014 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fe0:	f7ff ffc4 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fe4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fe6:	e003      	b.n	8001ff0 <LoopCopyDataInit>

08001fe8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fee:	3104      	adds	r1, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ff0:	480a      	ldr	r0, [pc, #40]	@ (800201c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ff4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ff6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ff8:	d3f6      	bcc.n	8001fe8 <CopyDataInit>
	ldr	r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ffc:	e002      	b.n	8002004 <LoopFillZerobss>

08001ffe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ffe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002000:	f842 3b04 	str.w	r3, [r2], #4

08002004 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <LoopForever+0x16>)
	cmp	r2, r3
 8002006:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002008:	d3f9      	bcc.n	8001ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200a:	f00f ffb3 	bl	8011f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800200e:	f7ff f829 	bl	8001064 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002014:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002018:	08015d88 	.word	0x08015d88
	ldr	r0, =_sdata
 800201c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002020:	20000338 	.word	0x20000338
	ldr	r2, =_sbss
 8002024:	20000338 	.word	0x20000338
	ldr	r3, = _ebss
 8002028:	20000a34 	.word	0x20000a34

0800202c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_IRQHandler>
	...

08002030 <LIS2DU12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_RegisterBusIO(LIS2DU12_Object_t *pObj, LIS2DU12_IO_t *pIO)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DU12_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d103      	bne.n	800204c <LIS2DU12_RegisterBusIO+0x1c>
  {
    ret = LIS2DU12_ERROR;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	e051      	b.n	80020f0 <LIS2DU12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	7b1a      	ldrb	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <LIS2DU12_RegisterBusIO+0xcc>)
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1c      	ldr	r2, [pc, #112]	@ (8002100 <LIS2DU12_RegisterBusIO+0xd0>)
 800208e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <LIS2DU12_RegisterBusIO+0x7e>
    {
      ret = LIS2DU12_ERROR;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e020      	b.n	80020f0 <LIS2DU12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DU12_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4798      	blx	r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <LIS2DU12_RegisterBusIO+0x92>
    {
      ret = LIS2DU12_ERROR;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e016      	b.n	80020f0 <LIS2DU12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DU12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d112      	bne.n	80020f0 <LIS2DU12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10d      	bne.n	80020f0 <LIS2DU12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 80020d4:	2350      	movs	r3, #80	@ 0x50
 80020d6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DU12_Write_Reg(pObj, LIS2DU12_CTRL1, data) != LIS2DU12_OK)
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	461a      	mov	r2, r3
 80020dc:	2110      	movs	r1, #16
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fb1b 	bl	800271a <LIS2DU12_Write_Reg>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <LIS2DU12_RegisterBusIO+0xc0>
          {
            ret = LIS2DU12_ERROR;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80020f0:	68fb      	ldr	r3, [r7, #12]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	08002a81 	.word	0x08002a81
 8002100:	08002ab7 	.word	0x08002ab7

08002104 <LIS2DU12_Init>:
  * @brief  Initialize the LIS2DU12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_Init(LIS2DU12_Object_t *pObj)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LIS2DU12_I3C_BUS)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d00b      	beq.n	800212c <LIS2DU12_Init+0x28>
  {
    /* Disable I3C */
    if (lis2du12_bus_mode_set(&(pObj->Ctx), LIS2DU12_I3C_DISABLE) != LIS2DU12_OK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3320      	adds	r3, #32
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fdbd 	bl	8002c9a <lis2du12_bus_mode_set>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <LIS2DU12_Init+0x28>
    {
      return LIS2DU12_ERROR;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e040      	b.n	80021ae <LIS2DU12_Init+0xaa>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2du12_init_set(&(pObj->Ctx), LIS2DU12_DRV_RDY) != LIS2DU12_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3320      	adds	r3, #32
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fdff 	bl	8002d36 <lis2du12_init_set>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <LIS2DU12_Init+0x40>
  {
    return LIS2DU12_ERROR;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e034      	b.n	80021ae <LIS2DU12_Init+0xaa>
  }

  /* FIFO mode selection */
  lis2du12_fifo_md_t fifo_mode =
 8002144:	2300      	movs	r3, #0
 8002146:	733b      	strb	r3, [r7, #12]
 8002148:	2301      	movs	r3, #1
 800214a:	737b      	strb	r3, [r7, #13]
 800214c:	2300      	movs	r3, #0
 800214e:	73bb      	strb	r3, [r7, #14]
    .operation = LIS2DU12_BYPASS,
    .store     = LIS2DU12_16_BIT,
    .watermark = 0,
  };

  if (lis2du12_fifo_mode_set(&(pObj->Ctx), &fifo_mode) != LIS2DU12_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3320      	adds	r3, #32
 8002154:	f107 020c 	add.w	r2, r7, #12
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f001 f820 	bl	80031a0 <lis2du12_fifo_mode_set>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <LIS2DU12_Init+0x68>
  {
    return LIS2DU12_ERROR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e020      	b.n	80021ae <LIS2DU12_Init+0xaa>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <LIS2DU12_Init+0xb4>)
 8002170:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default ultra low power (disabled). */
  pObj->acc_ultra_low_power = LIS2DU12_ULTRA_LOW_POWER_DISABLE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2du12_md_t mode =
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	2100      	movs	r1, #0
 8002180:	460a      	mov	r2, r1
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	460a      	mov	r2, r1
 8002186:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DU12_OFF,
    .fs  = LIS2DU12_2g,
  };

  if (lis2du12_mode_set(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3320      	adds	r3, #32
 800218c:	f107 0208 	add.w	r2, r7, #8
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fe37 	bl	8002e06 <lis2du12_mode_set>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <LIS2DU12_Init+0xa0>
  {
    return LIS2DU12_ERROR;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e004      	b.n	80021ae <LIS2DU12_Init+0xaa>
  }

  pObj->is_initialized = 1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DU12_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	42c80000 	.word	0x42c80000

080021bc <LIS2DU12_DeInit>:
  * @brief  Deinitialize the LIS2DU12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_DeInit(LIS2DU12_Object_t *pObj)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DU12_ACC_Disable(pObj) != LIS2DU12_OK)
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f887 	bl	80022d8 <LIS2DU12_ACC_Disable>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <LIS2DU12_DeInit+0x1a>
  {
    return LIS2DU12_ERROR;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295
 80021d4:	e00c      	b.n	80021f0 <LIS2DU12_DeInit+0x34>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset ultra low power to default value (disabled). */
  pObj->acc_ultra_low_power = LIS2DU12_ULTRA_LOW_POWER_DISABLE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DU12_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <LIS2DU12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ReadID(LIS2DU12_Object_t *pObj, uint8_t *Id)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  lis2du12_id_t val;

  if (lis2du12_id_get(&(pObj->Ctx), &val) != LIS2DU12_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3320      	adds	r3, #32
 8002206:	f107 020c 	add.w	r2, r7, #12
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fd2f 	bl	8002c70 <lis2du12_id_get>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <LIS2DU12_ReadID+0x26>
  {
    return LIS2DU12_ERROR;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	e003      	b.n	8002226 <LIS2DU12_ReadID+0x2e>
  }

  *Id = val.whoami;
 800221e:	7b3a      	ldrb	r2, [r7, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	701a      	strb	r2, [r3, #0]

  return LIS2DU12_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <LIS2DU12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DU12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_GetCapabilities(LIS2DU12_Object_t *pObj, LIS2DU12_Capabilities_t *Capabilities)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2210      	movs	r2, #16
 800225c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4a06      	ldr	r2, [pc, #24]	@ (8002288 <LIS2DU12_GetCapabilities+0x58>)
 8002270:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  return LIS2DU12_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	44480000 	.word	0x44480000

0800228c <LIS2DU12_ACC_Enable>:
  * @brief  Enable the LIS2DU12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_Enable(LIS2DU12_Object_t *pObj)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <LIS2DU12_ACC_Enable+0x16>
  {
    return LIS2DU12_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e016      	b.n	80022d0 <LIS2DU12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DU12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_ultra_low_power) != LIS2DU12_OK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ae:	4619      	mov	r1, r3
 80022b0:	eeb0 0a67 	vmov.f32	s0, s15
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fa4b 	bl	8002750 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <LIS2DU12_ACC_Enable+0x3a>
  {
    return LIS2DU12_ERROR;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	e004      	b.n	80022d0 <LIS2DU12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DU12_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <LIS2DU12_ACC_Disable>:
  * @brief  Disable the LIS2DU12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_Disable(LIS2DU12_Object_t *pObj)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <LIS2DU12_ACC_Disable+0x16>
  {
    return LIS2DU12_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e022      	b.n	8002334 <LIS2DU12_ACC_Disable+0x5c>
  }

  /* Output data rate selection - power down. */
  lis2du12_md_t mode;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3320      	adds	r3, #32
 80022f2:	f107 020c 	add.w	r2, r7, #12
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fdbd 	bl	8002e78 <lis2du12_mode_get>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <LIS2DU12_ACC_Disable+0x32>
  {
    return LIS2DU12_ERROR;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	e014      	b.n	8002334 <LIS2DU12_ACC_Disable+0x5c>
  }

  mode.odr = LIS2DU12_OFF;
 800230a:	2300      	movs	r3, #0
 800230c:	733b      	strb	r3, [r7, #12]

  if (lis2du12_mode_set(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3320      	adds	r3, #32
 8002312:	f107 020c 	add.w	r2, r7, #12
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fd74 	bl	8002e06 <lis2du12_mode_set>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <LIS2DU12_ACC_Disable+0x52>
  {
    return LIS2DU12_ERROR;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
 8002328:	e004      	b.n	8002334 <LIS2DU12_ACC_Disable+0x5c>
  }

  pObj->acc_is_enabled = 0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DU12_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <LIS2DU12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetSensitivity(LIS2DU12_Object_t *pObj, float *Sensitivity)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3320      	adds	r3, #32
 800234a:	f107 020c 	add.w	r2, r7, #12
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fd91 	bl	8002e78 <lis2du12_mode_get>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <LIS2DU12_ACC_GetSensitivity+0x26>
  {
    return LIS2DU12_ERROR;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
 8002360:	e025      	b.n	80023ae <LIS2DU12_ACC_GetSensitivity+0x72>
  }

  switch (mode.fs)
 8002362:	7b7b      	ldrb	r3, [r7, #13]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d81b      	bhi.n	80023a0 <LIS2DU12_ACC_GetSensitivity+0x64>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <LIS2DU12_ACC_GetSensitivity+0x34>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002381 	.word	0x08002381
 8002374:	08002389 	.word	0x08002389
 8002378:	08002391 	.word	0x08002391
 800237c:	08002399 	.word	0x08002399
  {
    case LIS2DU12_2g:
      *Sensitivity = LIS2DU12_ACC_SENSITIVITY_FOR_FS_2G;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <LIS2DU12_ACC_GetSensitivity+0x7c>)
 8002384:	601a      	str	r2, [r3, #0]
      break;
 8002386:	e011      	b.n	80023ac <LIS2DU12_ACC_GetSensitivity+0x70>

    case LIS2DU12_4g:
      *Sensitivity = LIS2DU12_ACC_SENSITIVITY_FOR_FS_4G;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4a0c      	ldr	r2, [pc, #48]	@ (80023bc <LIS2DU12_ACC_GetSensitivity+0x80>)
 800238c:	601a      	str	r2, [r3, #0]
      break;
 800238e:	e00d      	b.n	80023ac <LIS2DU12_ACC_GetSensitivity+0x70>

    case LIS2DU12_8g:
      *Sensitivity = LIS2DU12_ACC_SENSITIVITY_FOR_FS_8G;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4a0b      	ldr	r2, [pc, #44]	@ (80023c0 <LIS2DU12_ACC_GetSensitivity+0x84>)
 8002394:	601a      	str	r2, [r3, #0]
      break;
 8002396:	e009      	b.n	80023ac <LIS2DU12_ACC_GetSensitivity+0x70>

    case LIS2DU12_16g:
      *Sensitivity = LIS2DU12_ACC_SENSITIVITY_FOR_FS_16G;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <LIS2DU12_ACC_GetSensitivity+0x88>)
 800239c:	601a      	str	r2, [r3, #0]
      break;
 800239e:	e005      	b.n	80023ac <LIS2DU12_ACC_GetSensitivity+0x70>

    default:
      *Sensitivity = -1.0f;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4a09      	ldr	r2, [pc, #36]	@ (80023c8 <LIS2DU12_ACC_GetSensitivity+0x8c>)
 80023a4:	601a      	str	r2, [r3, #0]
      return LIS2DU12_ERROR;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e000      	b.n	80023ae <LIS2DU12_ACC_GetSensitivity+0x72>
  }

  return LIS2DU12_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	3f79db23 	.word	0x3f79db23
 80023bc:	3ff9db23 	.word	0x3ff9db23
 80023c0:	4079db23 	.word	0x4079db23
 80023c4:	40f9db23 	.word	0x40f9db23
 80023c8:	bf800000 	.word	0xbf800000

080023cc <LIS2DU12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetOutputDataRate(LIS2DU12_Object_t *pObj, float *Odr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3320      	adds	r3, #32
 80023da:	f107 020c 	add.w	r2, r7, #12
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fd49 	bl	8002e78 <lis2du12_mode_get>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <LIS2DU12_ACC_GetOutputDataRate+0x26>
  {
    return LIS2DU12_ERROR;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	e05b      	b.n	80024aa <LIS2DU12_ACC_GetOutputDataRate+0xde>
  }

  switch (mode.odr)
 80023f2:	7b3b      	ldrb	r3, [r7, #12]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d851      	bhi.n	800249c <LIS2DU12_ACC_GetOutputDataRate+0xd0>
 80023f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002400 <LIS2DU12_ACC_GetOutputDataRate+0x34>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	08002441 	.word	0x08002441
 8002404:	0800244b 	.word	0x0800244b
 8002408:	08002455 	.word	0x08002455
 800240c:	0800245d 	.word	0x0800245d
 8002410:	0800245d 	.word	0x0800245d
 8002414:	08002465 	.word	0x08002465
 8002418:	0800246d 	.word	0x0800246d
 800241c:	08002475 	.word	0x08002475
 8002420:	0800247d 	.word	0x0800247d
 8002424:	08002485 	.word	0x08002485
 8002428:	0800248d 	.word	0x0800248d
 800242c:	08002495 	.word	0x08002495
 8002430:	0800249d 	.word	0x0800249d
 8002434:	0800249d 	.word	0x0800249d
 8002438:	08002441 	.word	0x08002441
 800243c:	08002441 	.word	0x08002441
  {
    case LIS2DU12_OFF:
    case LIS2DU12_TRIG_PIN:
    case LIS2DU12_TRIG_SW:
      *Odr = 0.0f;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
      break;
 8002448:	e02e      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_1Hz5_ULP:
      *Odr = 1.5f;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002450:	601a      	str	r2, [r3, #0]
      break;
 8002452:	e029      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_3Hz_ULP:
      *Odr = 3.0f;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4a17      	ldr	r2, [pc, #92]	@ (80024b4 <LIS2DU12_ACC_GetOutputDataRate+0xe8>)
 8002458:	601a      	str	r2, [r3, #0]
      break;
 800245a:	e025      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_6Hz_ULP:
    case LIS2DU12_6Hz:
      *Odr = 6.0f;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <LIS2DU12_ACC_GetOutputDataRate+0xec>)
 8002460:	601a      	str	r2, [r3, #0]
      break;
 8002462:	e021      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_12Hz5:
      *Odr = 12.5f;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4a15      	ldr	r2, [pc, #84]	@ (80024bc <LIS2DU12_ACC_GetOutputDataRate+0xf0>)
 8002468:	601a      	str	r2, [r3, #0]
      break;
 800246a:	e01d      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_25Hz:
      *Odr = 25.0f;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4a14      	ldr	r2, [pc, #80]	@ (80024c0 <LIS2DU12_ACC_GetOutputDataRate+0xf4>)
 8002470:	601a      	str	r2, [r3, #0]
      break;
 8002472:	e019      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_50Hz:
      *Odr = 50.0f;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4a13      	ldr	r2, [pc, #76]	@ (80024c4 <LIS2DU12_ACC_GetOutputDataRate+0xf8>)
 8002478:	601a      	str	r2, [r3, #0]
      break;
 800247a:	e015      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_100Hz:
      *Odr = 100.0f;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4a12      	ldr	r2, [pc, #72]	@ (80024c8 <LIS2DU12_ACC_GetOutputDataRate+0xfc>)
 8002480:	601a      	str	r2, [r3, #0]
      break;
 8002482:	e011      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_200Hz:
      *Odr = 200.0f;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4a11      	ldr	r2, [pc, #68]	@ (80024cc <LIS2DU12_ACC_GetOutputDataRate+0x100>)
 8002488:	601a      	str	r2, [r3, #0]
      break;
 800248a:	e00d      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_400Hz:
      *Odr = 400.0f;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4a10      	ldr	r2, [pc, #64]	@ (80024d0 <LIS2DU12_ACC_GetOutputDataRate+0x104>)
 8002490:	601a      	str	r2, [r3, #0]
      break;
 8002492:	e009      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    case LIS2DU12_800Hz:
      *Odr = 800.0f;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4a0f      	ldr	r2, [pc, #60]	@ (80024d4 <LIS2DU12_ACC_GetOutputDataRate+0x108>)
 8002498:	601a      	str	r2, [r3, #0]
      break;
 800249a:	e005      	b.n	80024a8 <LIS2DU12_ACC_GetOutputDataRate+0xdc>

    default:
      *Odr = -1.0f;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4a0e      	ldr	r2, [pc, #56]	@ (80024d8 <LIS2DU12_ACC_GetOutputDataRate+0x10c>)
 80024a0:	601a      	str	r2, [r3, #0]
      return LIS2DU12_ERROR;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	e000      	b.n	80024aa <LIS2DU12_ACC_GetOutputDataRate+0xde>
  }

  return LIS2DU12_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40400000 	.word	0x40400000
 80024b8:	40c00000 	.word	0x40c00000
 80024bc:	41480000 	.word	0x41480000
 80024c0:	41c80000 	.word	0x41c80000
 80024c4:	42480000 	.word	0x42480000
 80024c8:	42c80000 	.word	0x42c80000
 80024cc:	43480000 	.word	0x43480000
 80024d0:	43c80000 	.word	0x43c80000
 80024d4:	44480000 	.word	0x44480000
 80024d8:	bf800000 	.word	0xbf800000

080024dc <LIS2DU12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_SetOutputDataRate(LIS2DU12_Object_t *pObj, float Odr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use Ultra Low Power disabled */
  return LIS2DU12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DU12_ULTRA_LOW_POWER_DISABLE);
 80024e8:	2100      	movs	r1, #0
 80024ea:	ed97 0a00 	vldr	s0, [r7]
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f805 	bl	80024fe <LIS2DU12_ACC_SetOutputDataRate_With_Mode>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <LIS2DU12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_SetOutputDataRate_With_Mode(LIS2DU12_Object_t *pObj, float Odr, LIS2DU12_Ultra_Low_Power_t Power)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	ed87 0a02 	vstr	s0, [r7, #8]
 800250a:	460b      	mov	r3, r1
 800250c:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002514:	2b01      	cmp	r3, #1
 8002516:	d108      	bne.n	800252a <LIS2DU12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DU12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	4619      	mov	r1, r3
 800251c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f915 	bl	8002750 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled>
 8002526:	4603      	mov	r3, r0
 8002528:	e007      	b.n	800253a <LIS2DU12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DU12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	4619      	mov	r1, r3
 800252e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fa08 	bl	8002948 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled>
 8002538:	4603      	mov	r3, r0
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <LIS2DU12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetFullScale(LIS2DU12_Object_t *pObj, int32_t *FullScale)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DU12_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  lis2du12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3320      	adds	r3, #32
 8002556:	f107 0208 	add.w	r2, r7, #8
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fc8b 	bl	8002e78 <lis2du12_mode_get>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <LIS2DU12_ACC_GetFullScale+0x2a>
  {
    return LIS2DU12_ERROR;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	e027      	b.n	80025be <LIS2DU12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 800256e:	7a7b      	ldrb	r3, [r7, #9]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d81b      	bhi.n	80025ac <LIS2DU12_ACC_GetFullScale+0x68>
 8002574:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <LIS2DU12_ACC_GetFullScale+0x38>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	0800258d 	.word	0x0800258d
 8002580:	08002595 	.word	0x08002595
 8002584:	0800259d 	.word	0x0800259d
 8002588:	080025a5 	.word	0x080025a5
  {
    case LIS2DU12_2g:
      *FullScale =  2;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2202      	movs	r2, #2
 8002590:	601a      	str	r2, [r3, #0]
      break;
 8002592:	e013      	b.n	80025bc <LIS2DU12_ACC_GetFullScale+0x78>

    case LIS2DU12_4g:
      *FullScale =  4;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2204      	movs	r2, #4
 8002598:	601a      	str	r2, [r3, #0]
      break;
 800259a:	e00f      	b.n	80025bc <LIS2DU12_ACC_GetFullScale+0x78>

    case LIS2DU12_8g:
      *FullScale =  8;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2208      	movs	r2, #8
 80025a0:	601a      	str	r2, [r3, #0]
      break;
 80025a2:	e00b      	b.n	80025bc <LIS2DU12_ACC_GetFullScale+0x78>

    case LIS2DU12_16g:
      *FullScale = 16;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2210      	movs	r2, #16
 80025a8:	601a      	str	r2, [r3, #0]
      break;
 80025aa:	e007      	b.n	80025bc <LIS2DU12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f04f 32ff 	mov.w	r2, #4294967295
 80025b2:	601a      	str	r2, [r3, #0]
      ret = LIS2DU12_ERROR;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	60fb      	str	r3, [r7, #12]
      break;
 80025ba:	bf00      	nop
  }

  return ret;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop

080025c8 <LIS2DU12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_SetFullScale(LIS2DU12_Object_t *pObj, int32_t FullScale)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3320      	adds	r3, #32
 80025d6:	f107 020c 	add.w	r2, r7, #12
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fc4b 	bl	8002e78 <lis2du12_mode_get>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <LIS2DU12_ACC_SetFullScale+0x26>
  {
    return LIS2DU12_ERROR;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ec:	e01f      	b.n	800262e <LIS2DU12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DU12_2g
            : (FullScale <= 4) ? LIS2DU12_4g
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	dd0b      	ble.n	800260c <LIS2DU12_ACC_SetFullScale+0x44>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	dd06      	ble.n	8002608 <LIS2DU12_ACC_SetFullScale+0x40>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	dc01      	bgt.n	8002604 <LIS2DU12_ACC_SetFullScale+0x3c>
 8002600:	2302      	movs	r3, #2
 8002602:	e004      	b.n	800260e <LIS2DU12_ACC_SetFullScale+0x46>
 8002604:	2303      	movs	r3, #3
 8002606:	e002      	b.n	800260e <LIS2DU12_ACC_SetFullScale+0x46>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <LIS2DU12_ACC_SetFullScale+0x46>
 800260c:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DU12_2g
 800260e:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DU12_8g
            :                    LIS2DU12_16g;

  if (lis2du12_mode_set(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3320      	adds	r3, #32
 8002614:	f107 020c 	add.w	r2, r7, #12
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fbf3 	bl	8002e06 <lis2du12_mode_set>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <LIS2DU12_ACC_SetFullScale+0x64>
  {
    return LIS2DU12_ERROR;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e000      	b.n	800262e <LIS2DU12_ACC_SetFullScale+0x66>
  }

  return LIS2DU12_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <LIS2DU12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetAxesRaw(LIS2DU12_Object_t *pObj, LIS2DU12_AxesRaw_t *Value)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b08a      	sub	sp, #40	@ 0x28
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;
  lis2du12_data_t data;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3320      	adds	r3, #32
 8002644:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fc14 	bl	8002e78 <lis2du12_mode_get>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <LIS2DU12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DU12_ERROR;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	e01b      	b.n	8002694 <LIS2DU12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2du12_data_get(&(pObj->Ctx), &mode, &data) != LIS2DU12_OK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3320      	adds	r3, #32
 8002660:	f107 0208 	add.w	r2, r7, #8
 8002664:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fcc9 	bl	8003000 <lis2du12_data_get>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <LIS2DU12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DU12_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	e00c      	b.n	8002694 <LIS2DU12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.xl.raw[0];
 800267a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	801a      	strh	r2, [r3, #0]
  Value->y = data.xl.raw[1];
 8002682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	805a      	strh	r2, [r3, #2]
  Value->z = data.xl.raw[2];
 800268a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	809a      	strh	r2, [r3, #4]

  return LIS2DU12_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3728      	adds	r7, #40	@ 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <LIS2DU12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_ACC_GetAxes(LIS2DU12_Object_t *pObj, LIS2DU12_Axes_t *Acceleration)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	@ 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  lis2du12_md_t mode;
  lis2du12_data_t data;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3320      	adds	r3, #32
 80026aa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fbe1 	bl	8002e78 <lis2du12_mode_get>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <LIS2DU12_ACC_GetAxes+0x26>
  {
    return LIS2DU12_ERROR;
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295
 80026c0:	e027      	b.n	8002712 <LIS2DU12_ACC_GetAxes+0x76>
  }

  if (lis2du12_data_get(&(pObj->Ctx), &mode, &data) != LIS2DU12_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3320      	adds	r3, #32
 80026c6:	f107 0208 	add.w	r2, r7, #8
 80026ca:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fc96 	bl	8003000 <lis2du12_data_get>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <LIS2DU12_ACC_GetAxes+0x44>
  {
    return LIS2DU12_ERROR;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e018      	b.n	8002712 <LIS2DU12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.xl.mg[0];
 80026e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e8:	ee17 2a90 	vmov	r2, s15
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.xl.mg[1];
 80026f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f8:	ee17 2a90 	vmov	r2, s15
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.xl.mg[2];
 8002700:	edd7 7a04 	vldr	s15, [r7, #16]
 8002704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002708:	ee17 2a90 	vmov	r2, s15
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	609a      	str	r2, [r3, #8]

  return LIS2DU12_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3728      	adds	r7, #40	@ 0x28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <LIS2DU12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DU12_Write_Reg(LIS2DU12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
 8002726:	4613      	mov	r3, r2
 8002728:	70bb      	strb	r3, [r7, #2]
  if (lis2du12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DU12_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f103 0020 	add.w	r0, r3, #32
 8002730:	1cba      	adds	r2, r7, #2
 8002732:	78f9      	ldrb	r1, [r7, #3]
 8002734:	2301      	movs	r3, #1
 8002736:	f000 f9f1 	bl	8002b1c <lis2du12_write_reg>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <LIS2DU12_Write_Reg+0x2c>
  {
    return LIS2DU12_ERROR;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e000      	b.n	8002748 <LIS2DU12_Write_Reg+0x2e>
  }

  return LIS2DU12_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DU12_ACC_SetOutputDataRate_When_Enabled(LIS2DU12_Object_t *pObj, float Odr,
                                                           LIS2DU12_Ultra_Low_Power_t Power)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	ed87 0a02 	vstr	s0, [r7, #8]
 800275c:	460b      	mov	r3, r1
 800275e:	71fb      	strb	r3, [r7, #7]
  lis2du12_md_t mode;

  if (lis2du12_mode_get(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3320      	adds	r3, #32
 8002764:	f107 0214 	add.w	r2, r7, #20
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fb84 	bl	8002e78 <lis2du12_mode_get>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DU12_ERROR;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e0c5      	b.n	8002908 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1b8>
  }

  if (Power == LIS2DU12_ULTRA_LOW_POWER_ENABLE)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d118      	bne.n	80027b4 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.5f) ? LIS2DU12_1Hz5_ULP
               : (Odr <= 3.0f) ? LIS2DU12_3Hz_ULP
 8002782:	edd7 7a02 	vldr	s15, [r7, #8]
 8002786:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	d801      	bhi.n	8002798 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8002794:	2301      	movs	r3, #1
 8002796:	e00b      	b.n	80027b0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8002798:	edd7 7a02 	vldr	s15, [r7, #8]
 800279c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80027a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	d801      	bhi.n	80027ae <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e000      	b.n	80027b0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80027ae:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.5f) ? LIS2DU12_1Hz5_ULP
 80027b0:	753b      	strb	r3, [r7, #20]
 80027b2:	e04e      	b.n	8002852 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x102>
               :                 LIS2DU12_6Hz_ULP;
  }
  else
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DU12_6Hz
               : (Odr <=  12.5f) ? LIS2DU12_12Hz5
 80027b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b8:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80027bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	d801      	bhi.n	80027ca <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80027c6:	2304      	movs	r3, #4
 80027c8:	e042      	b.n	8002850 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 80027ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ce:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80027d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	d801      	bhi.n	80027e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x90>
 80027dc:	2305      	movs	r3, #5
 80027de:	e037      	b.n	8002850 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 80027e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027e4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80027e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f0:	d801      	bhi.n	80027f6 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80027f2:	2306      	movs	r3, #6
 80027f4:	e02c      	b.n	8002850 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 80027f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027fa:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002910 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80027fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	d801      	bhi.n	800280c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002808:	2307      	movs	r3, #7
 800280a:	e021      	b.n	8002850 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 800280c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002810:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002914 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
 8002814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	d801      	bhi.n	8002822 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800281e:	2308      	movs	r3, #8
 8002820:	e016      	b.n	8002850 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002822:	edd7 7a02 	vldr	s15, [r7, #8]
 8002826:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002918 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1c8>
 800282a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	d801      	bhi.n	8002838 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8002834:	2309      	movs	r3, #9
 8002836:	e00b      	b.n	8002850 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002838:	edd7 7a02 	vldr	s15, [r7, #8]
 800283c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800291c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1cc>
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	d801      	bhi.n	800284e <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0xfe>
 800284a:	230a      	movs	r3, #10
 800284c:	e000      	b.n	8002850 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x100>
 800284e:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DU12_6Hz
 8002850:	753b      	strb	r3, [r7, #20]
               : (Odr <= 200.0f) ? LIS2DU12_200Hz
               : (Odr <= 400.0f) ? LIS2DU12_400Hz
               :                   LIS2DU12_800Hz;
  }

  if (lis2du12_mode_set(&(pObj->Ctx), &mode) != LIS2DU12_OK)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3320      	adds	r3, #32
 8002856:	f107 0214 	add.w	r2, r7, #20
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fad2 	bl	8002e06 <lis2du12_mode_set>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x11e>
  {
    return LIS2DU12_ERROR;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
 800286c:	e04c      	b.n	8002908 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1b8>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DU12_1Hz5_ULP) ?   1.5f
 800286e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_3Hz_ULP)  ?   3.0f
 8002870:	2b01      	cmp	r3, #1
 8002872:	d033      	beq.n	80028dc <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 8002874:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_6Hz_ULP)  ?   6.0f
 8002876:	2b02      	cmp	r3, #2
 8002878:	d02e      	beq.n	80028d8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x188>
 800287a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_6Hz)      ?   6.0f
 800287c:	2b03      	cmp	r3, #3
 800287e:	d029      	beq.n	80028d4 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x184>
 8002880:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_12Hz5)    ?  12.5f
 8002882:	2b04      	cmp	r3, #4
 8002884:	d024      	beq.n	80028d0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x180>
 8002886:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_25Hz)     ?  25.0f
 8002888:	2b05      	cmp	r3, #5
 800288a:	d01f      	beq.n	80028cc <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x17c>
 800288c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_50Hz)     ?  50.0f
 800288e:	2b06      	cmp	r3, #6
 8002890:	d01a      	beq.n	80028c8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x178>
 8002892:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_100Hz)    ? 100.0f
 8002894:	2b07      	cmp	r3, #7
 8002896:	d015      	beq.n	80028c4 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x174>
 8002898:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_200Hz)    ? 200.0f
 800289a:	2b08      	cmp	r3, #8
 800289c:	d010      	beq.n	80028c0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x170>
 800289e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_400Hz)    ? 400.0f
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	d00b      	beq.n	80028bc <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x16c>
 80028a4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DU12_800Hz)    ? 800.0f
 80028a6:	2b0a      	cmp	r3, #10
 80028a8:	d006      	beq.n	80028b8 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80028aa:	7d3b      	ldrb	r3, [r7, #20]
                  :                                    -1.0f;
 80028ac:	2b0b      	cmp	r3, #11
 80028ae:	d101      	bne.n	80028b4 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x164>
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1d0>)
 80028b2:	e015      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1d4>)
 80028b6:	e013      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_800Hz)    ? 800.0f
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1d8>)
 80028ba:	e011      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_400Hz)    ? 400.0f
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1dc>)
 80028be:	e00f      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_200Hz)    ? 200.0f
 80028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1e0>)
 80028c2:	e00d      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_100Hz)    ? 100.0f
 80028c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 80028c6:	e00b      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_50Hz)     ?  50.0f
 80028c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80028ca:	e009      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_25Hz)     ?  25.0f
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1ec>)
 80028ce:	e007      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_12Hz5)    ?  12.5f
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 80028d2:	e005      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_6Hz)      ?   6.0f
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 80028d6:	e003      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_6Hz_ULP)  ?   6.0f
 80028d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1f4>)
 80028da:	e001      	b.n	80028e0 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x190>
                  : (mode.odr == LIS2DU12_3Hz_ULP)  ?   3.0f
 80028dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
  pObj->acc_odr = (mode.odr == LIS2DU12_1Hz5_ULP) ?   1.5f
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80028ea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80028ee:	eef4 7a47 	vcmp.f32	s15, s14
 80028f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f6:	d102      	bne.n	80028fe <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    return LIS2DU12_ERROR;
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295
 80028fc:	e004      	b.n	8002908 <LIS2DU12_ACC_SetOutputDataRate_When_Enabled+0x1b8>
  }

  /* Store the current Power value */
  pObj->acc_ultra_low_power = Power;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	79fa      	ldrb	r2, [r7, #7]
 8002902:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DU12_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	42480000 	.word	0x42480000
 8002914:	42c80000 	.word	0x42c80000
 8002918:	43480000 	.word	0x43480000
 800291c:	43c80000 	.word	0x43c80000
 8002920:	44480000 	.word	0x44480000
 8002924:	bf800000 	.word	0xbf800000
 8002928:	43c80000 	.word	0x43c80000
 800292c:	43480000 	.word	0x43480000
 8002930:	42c80000 	.word	0x42c80000
 8002934:	42480000 	.word	0x42480000
 8002938:	41c80000 	.word	0x41c80000
 800293c:	41480000 	.word	0x41480000
 8002940:	40c00000 	.word	0x40c00000
 8002944:	40400000 	.word	0x40400000

08002948 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DU12_ACC_SetOutputDataRate_When_Disabled(LIS2DU12_Object_t *pObj, float Odr,
                                                            LIS2DU12_Ultra_Low_Power_t Power)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	ed87 0a02 	vstr	s0, [r7, #8]
 8002954:	460b      	mov	r3, r1
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DU12_ULTRA_LOW_POWER_ENABLE)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d11a      	bne.n	8002994 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 800295e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002962:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d802      	bhi.n	8002976 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8002970:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002974:	e00b      	b.n	800298e <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                 6.0f;
 8002976:	edd7 7a02 	vldr	s15, [r7, #8]
 800297a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800297e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	d801      	bhi.n	800298c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x44>
 8002988:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 800298a:	e000      	b.n	800298e <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x46>
 800298c:	4b30      	ldr	r3, [pc, #192]	@ (8002a50 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x108>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	6353      	str	r3, [r2, #52]	@ 0x34
 8002992:	e04f      	b.n	8002a34 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xec>
  }
  else
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 8002994:	edd7 7a02 	vldr	s15, [r7, #8]
 8002998:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800299c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	d801      	bhi.n	80029aa <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x62>
 80029a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a50 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x108>)
 80029a8:	e042      	b.n	8002a30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <=  25.0f) ?  25.0f
 80029aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ae:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80029b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d801      	bhi.n	80029c0 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x78>
 80029bc:	4b25      	ldr	r3, [pc, #148]	@ (8002a54 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80029be:	e037      	b.n	8002a30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <=  50.0f) ?  50.0f
 80029c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80029c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	d801      	bhi.n	80029d6 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x8e>
 80029d2:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 80029d4:	e02c      	b.n	8002a30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <= 100.0f) ? 100.0f
 80029d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029da:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002a5c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x114>
 80029de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	d801      	bhi.n	80029ec <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80029e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a60 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 80029ea:	e021      	b.n	8002a30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <= 200.0f) ? 200.0f
 80029ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002a64 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d801      	bhi.n	8002a02 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xba>
 80029fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x120>)
 8002a00:	e016      	b.n	8002a30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    : (Odr <= 400.0f) ? 400.0f
 8002a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a06:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002a6c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x124>
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d801      	bhi.n	8002a18 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xd0>
 8002a14:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x128>)
 8002a16:	e00b      	b.n	8002a30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
                    :                   800.0f;
 8002a18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a1c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002a74 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8002a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d801      	bhi.n	8002a2e <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe6>
 8002a2a:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x130>)
 8002a2c:	e000      	b.n	8002a30 <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002a2e:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <LIS2DU12_ACC_SetOutputDataRate_When_Disabled+0x134>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	6353      	str	r3, [r2, #52]	@ 0x34
  }

  /* Store the new Power value */
  pObj->acc_ultra_low_power = Power;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	79fa      	ldrb	r2, [r7, #7]
 8002a38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DU12_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40400000 	.word	0x40400000
 8002a50:	40c00000 	.word	0x40c00000
 8002a54:	41480000 	.word	0x41480000
 8002a58:	41c80000 	.word	0x41c80000
 8002a5c:	42480000 	.word	0x42480000
 8002a60:	42480000 	.word	0x42480000
 8002a64:	42c80000 	.word	0x42c80000
 8002a68:	42c80000 	.word	0x42c80000
 8002a6c:	43480000 	.word	0x43480000
 8002a70:	43480000 	.word	0x43480000
 8002a74:	43c80000 	.word	0x43c80000
 8002a78:	43c80000 	.word	0x43c80000
 8002a7c:	44480000 	.word	0x44480000

08002a80 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	72fb      	strb	r3, [r7, #11]
 8002a90:	4613      	mov	r3, r2
 8002a92:	813b      	strh	r3, [r7, #8]
  LIS2DU12_Object_t *pObj = (LIS2DU12_Object_t *)Handle;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	695c      	ldr	r4, [r3, #20]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	7b1b      	ldrb	r3, [r3, #12]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	b299      	uxth	r1, r3
 8002aa6:	893b      	ldrh	r3, [r7, #8]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	47a0      	blx	r4
 8002aac:	4603      	mov	r3, r0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd90      	pop	{r4, r7, pc}

08002ab6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ab6:	b590      	push	{r4, r7, lr}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	72fb      	strb	r3, [r7, #11]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	813b      	strh	r3, [r7, #8]
  LIS2DU12_Object_t *pObj = (LIS2DU12_Object_t *)Handle;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	691c      	ldr	r4, [r3, #16]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	7b1b      	ldrb	r3, [r3, #12]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	b299      	uxth	r1, r3
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	47a0      	blx	r4
 8002ae2:	4603      	mov	r3, r0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <lis2du12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	461a      	mov	r2, r3
 8002af8:	460b      	mov	r3, r1
 8002afa:	72fb      	strb	r3, [r7, #11]
 8002afc:	4613      	mov	r3, r2
 8002afe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685c      	ldr	r4, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68d8      	ldr	r0, [r3, #12]
 8002b08:	893b      	ldrh	r3, [r7, #8]
 8002b0a:	7af9      	ldrb	r1, [r7, #11]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	47a0      	blx	r4
 8002b10:	6178      	str	r0, [r7, #20]
  return ret;
 8002b12:	697b      	ldr	r3, [r7, #20]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd90      	pop	{r4, r7, pc}

08002b1c <lis2du12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_write_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                           uint16_t len)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	461a      	mov	r2, r3
 8002b28:	460b      	mov	r3, r1
 8002b2a:	72fb      	strb	r3, [r7, #11]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681c      	ldr	r4, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68d8      	ldr	r0, [r3, #12]
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	7af9      	ldrb	r1, [r7, #11]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	47a0      	blx	r4
 8002b40:	6178      	str	r0, [r7, #20]
  return ret;
 8002b42:	697b      	ldr	r3, [r7, #20]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd90      	pop	{r4, r7, pc}

08002b4c <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <bytecpy+0x1e>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <bytecpy+0x1e>
  {
    *target = *source;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	701a      	strb	r2, [r3, #0]
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <lis2du12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2du12_from_fs2g_to_mg(int16_t lsb)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ba4 <lis2du12_from_fs2g_to_mg+0x2c>
 8002b92:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b96:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	3d79db23 	.word	0x3d79db23

08002ba8 <lis2du12_from_fs4g_to_mg>:

float_t lis2du12_from_fs4g_to_mg(int16_t lsb)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8002bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002bd4 <lis2du12_from_fs4g_to_mg+0x2c>
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	3df9db23 	.word	0x3df9db23

08002bd8 <lis2du12_from_fs8g_to_mg>:

float_t lis2du12_from_fs8g_to_mg(int16_t lsb)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8002be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bee:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002c04 <lis2du12_from_fs8g_to_mg+0x2c>
 8002bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	3e79db23 	.word	0x3e79db23

08002c08 <lis2du12_from_fs16g_to_mg>:

float_t lis2du12_from_fs16g_to_mg(int16_t lsb)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8002c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002c34 <lis2du12_from_fs16g_to_mg+0x2c>
 8002c22:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002c26:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	3ef9db23 	.word	0x3ef9db23

08002c38 <lis2du12_from_lsb_to_celsius>:

float_t lis2du12_from_lsb_to_celsius(int16_t lsb)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 355.5f) + 25.0f;
 8002c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002c6c <lis2du12_from_lsb_to_celsius+0x34>
 8002c52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c56:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	43b1c000 	.word	0x43b1c000

08002c70 <lis2du12_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_id_get(stmdev_ctx_t *ctx, lis2du12_id_t *val)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_WHO_AM_I, &reg, 1);
 8002c7a:	f107 020b 	add.w	r2, r7, #11
 8002c7e:	2301      	movs	r3, #1
 8002c80:	2143      	movs	r1, #67	@ 0x43
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff32 	bl	8002aec <lis2du12_read_reg>
 8002c88:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8002c8a:	7afa      	ldrb	r2, [r7, #11]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	701a      	strb	r2, [r3, #0]

  return ret;
 8002c90:	68fb      	ldr	r3, [r7, #12]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <lis2du12_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_bus_mode_set(stmdev_ctx_t *ctx, lis2du12_bus_mode_t val)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  lis2du12_if_ctrl_t if_ctrl;
  lis2du12_ctrl1_t ctrl1;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8002ca6:	f107 0210 	add.w	r2, r7, #16
 8002caa:	2301      	movs	r3, #1
 8002cac:	210e      	movs	r1, #14
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff1c 	bl	8002aec <lis2du12_read_reg>
 8002cb4:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d118      	bne.n	8002cee <lis2du12_bus_mode_set+0x54>
  {
    if_ctrl.i3c_disable = (uint8_t)val & 0x01U;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	7c3b      	ldrb	r3, [r7, #16]
 8002cc6:	f362 0341 	bfi	r3, r2, #1, #1
 8002cca:	743b      	strb	r3, [r7, #16]
    if_ctrl.i2c_disable = ((uint8_t)val & 0x02U) >> 1;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	7c3b      	ldrb	r3, [r7, #16]
 8002cd8:	f362 0300 	bfi	r3, r2, #0, #1
 8002cdc:	743b      	strb	r3, [r7, #16]
    ret = lis2du12_write_reg(ctx, LIS2DU12_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8002cde:	f107 0210 	add.w	r2, r7, #16
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	210e      	movs	r1, #14
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ff18 	bl	8002b1c <lis2du12_write_reg>
 8002cec:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <lis2du12_bus_mode_set+0x6a>
  {
    ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002cf4:	f107 020c 	add.w	r2, r7, #12
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff fef5 	bl	8002aec <lis2du12_read_reg>
 8002d02:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d110      	bne.n	8002d2c <lis2du12_bus_mode_set+0x92>
  {
    ctrl1.sim = ((uint8_t)val & 0x04U) >> 2;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	7b3b      	ldrb	r3, [r7, #12]
 8002d16:	f362 1386 	bfi	r3, r2, #6, #1
 8002d1a:	733b      	strb	r3, [r7, #12]
    ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002d1c:	f107 020c 	add.w	r2, r7, #12
 8002d20:	2301      	movs	r3, #1
 8002d22:	2110      	movs	r1, #16
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fef9 	bl	8002b1c <lis2du12_write_reg>
 8002d2a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002d2c:	697b      	ldr	r3, [r7, #20]

}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <lis2du12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_init_set(stmdev_ctx_t *ctx, lis2du12_init_t val)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	70fb      	strb	r3, [r7, #3]
  lis2du12_ctrl1_t ctrl1;
  lis2du12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002d42:	f107 0210 	add.w	r2, r7, #16
 8002d46:	2301      	movs	r3, #1
 8002d48:	2110      	movs	r1, #16
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fece 	bl	8002aec <lis2du12_read_reg>
 8002d50:	6178      	str	r0, [r7, #20]
  ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002d52:	f107 020c 	add.w	r2, r7, #12
 8002d56:	2301      	movs	r3, #1
 8002d58:	2113      	movs	r1, #19
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fec6 	bl	8002aec <lis2du12_read_reg>
 8002d60:	6178      	str	r0, [r7, #20]
  switch (val)
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d012      	beq.n	8002d8e <lis2du12_init_set+0x58>
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	dc39      	bgt.n	8002de0 <lis2du12_init_set+0xaa>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <lis2du12_init_set+0x72>
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d135      	bne.n	8002de0 <lis2du12_init_set+0xaa>
  {
    case LIS2DU12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8002d74:	7b3b      	ldrb	r3, [r7, #12]
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	733b      	strb	r3, [r7, #12]
      ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002d7c:	f107 020c 	add.w	r2, r7, #12
 8002d80:	2301      	movs	r3, #1
 8002d82:	2113      	movs	r1, #19
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fec9 	bl	8002b1c <lis2du12_write_reg>
 8002d8a:	6178      	str	r0, [r7, #20]
      break;
 8002d8c:	e036      	b.n	8002dfc <lis2du12_init_set+0xc6>
    case LIS2DU12_RESET:

      ctrl1.sw_reset = PROPERTY_ENABLE;
 8002d8e:	7c3b      	ldrb	r3, [r7, #16]
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	743b      	strb	r3, [r7, #16]
      ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002d96:	f107 0210 	add.w	r2, r7, #16
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff febc 	bl	8002b1c <lis2du12_write_reg>
 8002da4:	6178      	str	r0, [r7, #20]
      break;
 8002da6:	e029      	b.n	8002dfc <lis2du12_init_set+0xc6>
    case LIS2DU12_DRV_RDY:
      ctrl4.bdu = PROPERTY_ENABLE;
 8002da8:	7b3b      	ldrb	r3, [r7, #12]
 8002daa:	f043 0320 	orr.w	r3, r3, #32
 8002dae:	733b      	strb	r3, [r7, #12]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8002db0:	7c3b      	ldrb	r3, [r7, #16]
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	743b      	strb	r3, [r7, #16]
      ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002db8:	f107 020c 	add.w	r2, r7, #12
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2113      	movs	r1, #19
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff feab 	bl	8002b1c <lis2du12_write_reg>
 8002dc6:	6178      	str	r0, [r7, #20]
      if (ret == 0)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d115      	bne.n	8002dfa <lis2du12_init_set+0xc4>
      {
        ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002dce:	f107 0210 	add.w	r2, r7, #16
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fea0 	bl	8002b1c <lis2du12_write_reg>
 8002ddc:	6178      	str	r0, [r7, #20]
      }
      break;
 8002dde:	e00c      	b.n	8002dfa <lis2du12_init_set+0xc4>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8002de0:	7c3b      	ldrb	r3, [r7, #16]
 8002de2:	f043 0320 	orr.w	r3, r3, #32
 8002de6:	743b      	strb	r3, [r7, #16]
      ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002de8:	f107 0210 	add.w	r2, r7, #16
 8002dec:	2301      	movs	r3, #1
 8002dee:	2110      	movs	r1, #16
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fe93 	bl	8002b1c <lis2du12_write_reg>
 8002df6:	6178      	str	r0, [r7, #20]
      break;
 8002df8:	e000      	b.n	8002dfc <lis2du12_init_set+0xc6>
      break;
 8002dfa:	bf00      	nop
  }
  return ret;
 8002dfc:	697b      	ldr	r3, [r7, #20]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <lis2du12_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_mode_set(stmdev_ctx_t *ctx, lis2du12_md_t *val)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  lis2du12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002e10:	f107 0208 	add.w	r2, r7, #8
 8002e14:	2301      	movs	r3, #1
 8002e16:	2114      	movs	r1, #20
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fe67 	bl	8002aec <lis2du12_read_reg>
 8002e1e:	60f8      	str	r0, [r7, #12]

  ctrl5.odr = (uint8_t)val->odr;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	7a3b      	ldrb	r3, [r7, #8]
 8002e2c:	f362 1307 	bfi	r3, r2, #4, #4
 8002e30:	723b      	strb	r3, [r7, #8]
  ctrl5.fs = (uint8_t)val->fs;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	785b      	ldrb	r3, [r3, #1]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	7a3b      	ldrb	r3, [r7, #8]
 8002e3e:	f362 0301 	bfi	r3, r2, #0, #2
 8002e42:	723b      	strb	r3, [r7, #8]
  ctrl5.bw = (uint8_t)val->bw;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	789b      	ldrb	r3, [r3, #2]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	7a3b      	ldrb	r3, [r7, #8]
 8002e50:	f362 0383 	bfi	r3, r2, #2, #2
 8002e54:	723b      	strb	r3, [r7, #8]

  if (ret == 0)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <lis2du12_mode_set+0x66>
  {
    ret = lis2du12_write_reg(ctx, LIS2DU12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002e5c:	f107 0208 	add.w	r2, r7, #8
 8002e60:	2301      	movs	r3, #1
 8002e62:	2114      	movs	r1, #20
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff fe59 	bl	8002b1c <lis2du12_write_reg>
 8002e6a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <lis2du12_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_mode_get(stmdev_ctx_t *ctx, lis2du12_md_t *val)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  lis2du12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002e82:	f107 0208 	add.w	r2, r7, #8
 8002e86:	2301      	movs	r3, #1
 8002e88:	2114      	movs	r1, #20
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fe2e 	bl	8002aec <lis2du12_read_reg>
 8002e90:	60f8      	str	r0, [r7, #12]

  switch (ctrl5.odr)
 8002e92:	7a3b      	ldrb	r3, [r7, #8]
 8002e94:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	d85a      	bhi.n	8002f54 <lis2du12_mode_get+0xdc>
 8002e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <lis2du12_mode_get+0x2c>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002ee5 	.word	0x08002ee5
 8002ea8:	08002eed 	.word	0x08002eed
 8002eac:	08002ef5 	.word	0x08002ef5
 8002eb0:	08002efd 	.word	0x08002efd
 8002eb4:	08002f05 	.word	0x08002f05
 8002eb8:	08002f0d 	.word	0x08002f0d
 8002ebc:	08002f15 	.word	0x08002f15
 8002ec0:	08002f1d 	.word	0x08002f1d
 8002ec4:	08002f25 	.word	0x08002f25
 8002ec8:	08002f2d 	.word	0x08002f2d
 8002ecc:	08002f35 	.word	0x08002f35
 8002ed0:	08002f3d 	.word	0x08002f3d
 8002ed4:	08002f55 	.word	0x08002f55
 8002ed8:	08002f55 	.word	0x08002f55
 8002edc:	08002f45 	.word	0x08002f45
 8002ee0:	08002f4d 	.word	0x08002f4d
  {
    case LIS2DU12_OFF:
      val->odr = LIS2DU12_OFF;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
      break;
 8002eea:	e037      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_1Hz5_ULP:
      val->odr = LIS2DU12_1Hz5_ULP;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
      break;
 8002ef2:	e033      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_3Hz_ULP:
      val->odr = LIS2DU12_3Hz_ULP;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	701a      	strb	r2, [r3, #0]
      break;
 8002efa:	e02f      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_6Hz_ULP:
      val->odr = LIS2DU12_6Hz_ULP;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2203      	movs	r2, #3
 8002f00:	701a      	strb	r2, [r3, #0]
      break;
 8002f02:	e02b      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_6Hz:
      val->odr = LIS2DU12_6Hz;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2204      	movs	r2, #4
 8002f08:	701a      	strb	r2, [r3, #0]
      break;
 8002f0a:	e027      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_12Hz5:
      val->odr = LIS2DU12_12Hz5;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2205      	movs	r2, #5
 8002f10:	701a      	strb	r2, [r3, #0]
      break;
 8002f12:	e023      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_25Hz:
      val->odr = LIS2DU12_25Hz;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2206      	movs	r2, #6
 8002f18:	701a      	strb	r2, [r3, #0]
      break;
 8002f1a:	e01f      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_50Hz:
      val->odr = LIS2DU12_50Hz;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2207      	movs	r2, #7
 8002f20:	701a      	strb	r2, [r3, #0]
      break;
 8002f22:	e01b      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_100Hz:
      val->odr = LIS2DU12_100Hz;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2208      	movs	r2, #8
 8002f28:	701a      	strb	r2, [r3, #0]
      break;
 8002f2a:	e017      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_200Hz:
      val->odr = LIS2DU12_200Hz;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2209      	movs	r2, #9
 8002f30:	701a      	strb	r2, [r3, #0]
      break;
 8002f32:	e013      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_400Hz:
      val->odr = LIS2DU12_400Hz;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	220a      	movs	r2, #10
 8002f38:	701a      	strb	r2, [r3, #0]
      break;
 8002f3a:	e00f      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_800Hz:
      val->odr = LIS2DU12_800Hz;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	220b      	movs	r2, #11
 8002f40:	701a      	strb	r2, [r3, #0]
      break;
 8002f42:	e00b      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_TRIG_PIN:
      val->odr = LIS2DU12_TRIG_PIN;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	220e      	movs	r2, #14
 8002f48:	701a      	strb	r2, [r3, #0]
      break;
 8002f4a:	e007      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    case LIS2DU12_TRIG_SW:
      val->odr = LIS2DU12_TRIG_SW;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	220f      	movs	r2, #15
 8002f50:	701a      	strb	r2, [r3, #0]
      break;
 8002f52:	e003      	b.n	8002f5c <lis2du12_mode_get+0xe4>
    default:
      val->odr = LIS2DU12_OFF;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
      break;
 8002f5a:	bf00      	nop
  }

  switch (ctrl5.fs)
 8002f5c:	7a3b      	ldrb	r3, [r7, #8]
 8002f5e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d81b      	bhi.n	8002fa0 <lis2du12_mode_get+0x128>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <lis2du12_mode_get+0xf8>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f89 	.word	0x08002f89
 8002f78:	08002f91 	.word	0x08002f91
 8002f7c:	08002f99 	.word	0x08002f99
  {
    case LIS2DU12_2g:
      val->fs = LIS2DU12_2g;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	705a      	strb	r2, [r3, #1]
      break;
 8002f86:	e00f      	b.n	8002fa8 <lis2du12_mode_get+0x130>
    case LIS2DU12_4g:
      val->fs = LIS2DU12_4g;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	705a      	strb	r2, [r3, #1]
      break;
 8002f8e:	e00b      	b.n	8002fa8 <lis2du12_mode_get+0x130>
    case LIS2DU12_8g:
      val->fs = LIS2DU12_8g;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2202      	movs	r2, #2
 8002f94:	705a      	strb	r2, [r3, #1]
      break;
 8002f96:	e007      	b.n	8002fa8 <lis2du12_mode_get+0x130>
    case LIS2DU12_16g:
      val->fs = LIS2DU12_16g;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	705a      	strb	r2, [r3, #1]
      break;
 8002f9e:	e003      	b.n	8002fa8 <lis2du12_mode_get+0x130>
    default:
      val->fs = LIS2DU12_2g;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	705a      	strb	r2, [r3, #1]
      break;
 8002fa6:	bf00      	nop
  }

  switch (ctrl5.bw)
 8002fa8:	7a3b      	ldrb	r3, [r7, #8]
 8002faa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d81b      	bhi.n	8002fec <lis2du12_mode_get+0x174>
 8002fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fbc <lis2du12_mode_get+0x144>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fd5 	.word	0x08002fd5
 8002fc4:	08002fdd 	.word	0x08002fdd
 8002fc8:	08002fe5 	.word	0x08002fe5
  {
    case LIS2DU12_ODR_div_2:
      val->bw = LIS2DU12_ODR_div_2;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	709a      	strb	r2, [r3, #2]
      break;
 8002fd2:	e00f      	b.n	8002ff4 <lis2du12_mode_get+0x17c>
    case LIS2DU12_ODR_div_4:
      val->bw = LIS2DU12_ODR_div_4;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	709a      	strb	r2, [r3, #2]
      break;
 8002fda:	e00b      	b.n	8002ff4 <lis2du12_mode_get+0x17c>
    case LIS2DU12_ODR_div_8:
      val->bw = LIS2DU12_ODR_div_8;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	709a      	strb	r2, [r3, #2]
      break;
 8002fe2:	e007      	b.n	8002ff4 <lis2du12_mode_get+0x17c>
    case LIS2DU12_ODR_div_16:
      val->bw = LIS2DU12_ODR_div_16;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	709a      	strb	r2, [r3, #2]
      break;
 8002fea:	e003      	b.n	8002ff4 <lis2du12_mode_get+0x17c>
    default:
      val->bw = LIS2DU12_ODR_div_2;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	709a      	strb	r2, [r3, #2]
      break;
 8002ff2:	bf00      	nop
  }

  return ret;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop

08003000 <lis2du12_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_data_get(stmdev_ctx_t *ctx, lis2du12_md_t *md,
                          lis2du12_data_t *data)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b089      	sub	sp, #36	@ 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint8_t buff[8];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2du12_read_reg(ctx, LIS2DU12_OUTX_L, (uint8_t *)&buff, 8);
 800300c:	f107 0210 	add.w	r2, r7, #16
 8003010:	2308      	movs	r3, #8
 8003012:	2128      	movs	r1, #40	@ 0x28
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7ff fd69 	bl	8002aec <lis2du12_read_reg>
 800301a:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 8003020:	2300      	movs	r3, #0
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e08f      	b.n	8003146 <lis2du12_data_get+0x146>
  {
    data->xl.raw[i] = (int16_t)buff[j + 1U];
 8003026:	7fbb      	ldrb	r3, [r7, #30]
 8003028:	3301      	adds	r3, #1
 800302a:	3320      	adds	r3, #32
 800302c:	443b      	add	r3, r7
 800302e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003032:	7ffb      	ldrb	r3, [r7, #31]
 8003034:	b211      	sxth	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	460a      	mov	r2, r1
 8003040:	809a      	strh	r2, [r3, #4]
    data->xl.raw[i] = (data->xl.raw[i] * 256) + (int16_t) buff[j];
 8003042:	7ffb      	ldrb	r3, [r7, #31]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003050:	b29b      	uxth	r3, r3
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	b29b      	uxth	r3, r3
 8003056:	7fba      	ldrb	r2, [r7, #30]
 8003058:	3220      	adds	r2, #32
 800305a:	443a      	add	r2, r7
 800305c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003060:	4413      	add	r3, r2
 8003062:	b29a      	uxth	r2, r3
 8003064:	7ffb      	ldrb	r3, [r7, #31]
 8003066:	b211      	sxth	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	460a      	mov	r2, r1
 8003072:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003074:	7fbb      	ldrb	r3, [r7, #30]
 8003076:	3302      	adds	r3, #2
 8003078:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d856      	bhi.n	8003130 <lis2du12_data_get+0x130>
 8003082:	a201      	add	r2, pc, #4	@ (adr r2, 8003088 <lis2du12_data_get+0x88>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	08003099 	.word	0x08003099
 800308c:	080030bf 	.word	0x080030bf
 8003090:	080030e5 	.word	0x080030e5
 8003094:	0800310b 	.word	0x0800310b
    {
      case LIS2DU12_2g:
        data->xl.mg[i] = lis2du12_from_fs2g_to_mg(data->xl.raw[i]);
 8003098:	7ffb      	ldrb	r3, [r7, #31]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030a6:	7ffc      	ldrb	r4, [r7, #31]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fd65 	bl	8002b78 <lis2du12_from_fs2g_to_mg>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	00a3      	lsls	r3, r4, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	edc3 7a00 	vstr	s15, [r3]
        break;
 80030bc:	e040      	b.n	8003140 <lis2du12_data_get+0x140>
      case LIS2DU12_4g:
        data->xl.mg[i] = lis2du12_from_fs4g_to_mg(data->xl.raw[i]);
 80030be:	7ffb      	ldrb	r3, [r7, #31]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	3304      	adds	r3, #4
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030cc:	7ffc      	ldrb	r4, [r7, #31]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fd6a 	bl	8002ba8 <lis2du12_from_fs4g_to_mg>
 80030d4:	eef0 7a40 	vmov.f32	s15, s0
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	00a3      	lsls	r3, r4, #2
 80030dc:	4413      	add	r3, r2
 80030de:	edc3 7a00 	vstr	s15, [r3]
        break;
 80030e2:	e02d      	b.n	8003140 <lis2du12_data_get+0x140>
      case LIS2DU12_8g:
        data->xl.mg[i] = lis2du12_from_fs8g_to_mg(data->xl.raw[i]);
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030f2:	7ffc      	ldrb	r4, [r7, #31]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fd6f 	bl	8002bd8 <lis2du12_from_fs8g_to_mg>
 80030fa:	eef0 7a40 	vmov.f32	s15, s0
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	00a3      	lsls	r3, r4, #2
 8003102:	4413      	add	r3, r2
 8003104:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003108:	e01a      	b.n	8003140 <lis2du12_data_get+0x140>
      case LIS2DU12_16g:
        data->xl.mg[i] = lis2du12_from_fs16g_to_mg(data->xl.raw[i]);
 800310a:	7ffb      	ldrb	r3, [r7, #31]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003118:	7ffc      	ldrb	r4, [r7, #31]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fd74 	bl	8002c08 <lis2du12_from_fs16g_to_mg>
 8003120:	eef0 7a40 	vmov.f32	s15, s0
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	00a3      	lsls	r3, r4, #2
 8003128:	4413      	add	r3, r2
 800312a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800312e:	e007      	b.n	8003140 <lis2du12_data_get+0x140>
      default:
        data->xl.mg[i] = 0.0f;
 8003130:	7ffb      	ldrb	r3, [r7, #31]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
        break;
 800313e:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 8003140:	7ffb      	ldrb	r3, [r7, #31]
 8003142:	3301      	adds	r3, #1
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	7ffb      	ldrb	r3, [r7, #31]
 8003148:	2b02      	cmp	r3, #2
 800314a:	f67f af6c 	bls.w	8003026 <lis2du12_data_get+0x26>
    }
  }

  data->heat.raw = (int16_t)buff[j + 1U];
 800314e:	7fbb      	ldrb	r3, [r7, #30]
 8003150:	3301      	adds	r3, #1
 8003152:	3320      	adds	r3, #32
 8003154:	443b      	add	r3, r7
 8003156:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800315a:	b21a      	sxth	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	831a      	strh	r2, [r3, #24]
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[j];
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003166:	b29b      	uxth	r3, r3
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	b29b      	uxth	r3, r3
 800316c:	7fba      	ldrb	r2, [r7, #30]
 800316e:	3220      	adds	r2, #32
 8003170:	443a      	add	r2, r7
 8003172:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003176:	4413      	add	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	b21a      	sxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	831a      	strh	r2, [r3, #24]
  /* temperature conversion */
  data->heat.deg_c = lis2du12_from_lsb_to_celsius(data->heat.raw);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fd56 	bl	8002c38 <lis2du12_from_lsb_to_celsius>
 800318c:	eef0 7a40 	vmov.f32	s15, s0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	edc3 7a05 	vstr	s15, [r3, #20]

  return ret;
 8003196:	69bb      	ldr	r3, [r7, #24]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3724      	adds	r7, #36	@ 0x24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd90      	pop	{r4, r7, pc}

080031a0 <lis2du12_fifo_mode_set>:
  * @param  val   set the FIFO operation mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2du12_fifo_mode_set(stmdev_ctx_t *ctx, lis2du12_fifo_md_t *val)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  lis2du12_fifo_ctrl_t fifo_ctrl;
  lis2du12_fifo_wtm_t fifo_wtm;
  uint8_t reg[2];
  int32_t ret;

  ret = lis2du12_read_reg(ctx, LIS2DU12_FIFO_CTRL, reg, 2);
 80031aa:	f107 0208 	add.w	r2, r7, #8
 80031ae:	2302      	movs	r3, #2
 80031b0:	2115      	movs	r1, #21
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fc9a 	bl	8002aec <lis2du12_read_reg>
 80031b8:	6178      	str	r0, [r7, #20]

  bytecpy((uint8_t *)&fifo_ctrl, &reg[0]);
 80031ba:	f107 0208 	add.w	r2, r7, #8
 80031be:	f107 0310 	add.w	r3, r7, #16
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fcc1 	bl	8002b4c <bytecpy>
  bytecpy((uint8_t *)&fifo_wtm, &reg[1]);
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fcb8 	bl	8002b4c <bytecpy>

  fifo_ctrl.f_mode = (uint8_t) val->operation;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	7c3b      	ldrb	r3, [r7, #16]
 80031e8:	f362 0302 	bfi	r3, r2, #0, #3
 80031ec:	743b      	strb	r3, [r7, #16]
  fifo_ctrl.fifo_depth = (uint8_t) val->store;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	785b      	ldrb	r3, [r3, #1]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	7c3b      	ldrb	r3, [r7, #16]
 80031fa:	f362 1386 	bfi	r3, r2, #6, #1
 80031fe:	743b      	strb	r3, [r7, #16]

  if (val->watermark != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	789b      	ldrb	r3, [r3, #2]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <lis2du12_fifo_mode_set+0x72>
  {
    fifo_ctrl.stop_on_fth = PROPERTY_ENABLE;
 8003208:	7c3b      	ldrb	r3, [r7, #16]
 800320a:	f043 0308 	orr.w	r3, r3, #8
 800320e:	743b      	strb	r3, [r7, #16]
 8003210:	e003      	b.n	800321a <lis2du12_fifo_mode_set+0x7a>
  }
  else
  {
    fifo_ctrl.stop_on_fth = PROPERTY_DISABLE;
 8003212:	7c3b      	ldrb	r3, [r7, #16]
 8003214:	f36f 03c3 	bfc	r3, #3, #1
 8003218:	743b      	strb	r3, [r7, #16]
  }

  fifo_wtm.fth = val->watermark;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	789b      	ldrb	r3, [r3, #2]
 800321e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003222:	b2da      	uxtb	r2, r3
 8003224:	7b3b      	ldrb	r3, [r7, #12]
 8003226:	f362 0306 	bfi	r3, r2, #0, #7
 800322a:	733b      	strb	r3, [r7, #12]

  bytecpy(&reg[0], (uint8_t *)&fifo_ctrl);
 800322c:	f107 0210 	add.w	r2, r7, #16
 8003230:	f107 0308 	add.w	r3, r7, #8
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fc88 	bl	8002b4c <bytecpy>
  bytecpy(&reg[1], (uint8_t *)&fifo_wtm);
 800323c:	f107 020c 	add.w	r2, r7, #12
 8003240:	f107 0308 	add.w	r3, r7, #8
 8003244:	3301      	adds	r3, #1
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fc7f 	bl	8002b4c <bytecpy>

  ret = lis2du12_write_reg(ctx, LIS2DU12_FIFO_CTRL, reg, 2);
 800324e:	f107 0208 	add.w	r2, r7, #8
 8003252:	2302      	movs	r3, #2
 8003254:	2115      	movs	r1, #21
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fc60 	bl	8002b1c <lis2du12_write_reg>
 800325c:	6178      	str	r0, [r7, #20]

  return ret;
 800325e:	697b      	ldr	r3, [r7, #20]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800327c:	f04f 33ff 	mov.w	r3, #4294967295
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e067      	b.n	8003354 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	7b1a      	ldrb	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <LIS2MDL_RegisterBusIO+0xf8>)
 80032c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <LIS2MDL_RegisterBusIO+0xfc>)
 80032c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e036      	b.n	8003354 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4798      	blx	r3
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e02c      	b.n	8003354 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d028      	beq.n	8003354 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003308:	2b00      	cmp	r3, #0
 800330a:	d123      	bne.n	8003354 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d10d      	bne.n	8003330 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003314:	2334      	movs	r3, #52	@ 0x34
 8003316:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	461a      	mov	r2, r3
 800331c:	2162      	movs	r1, #98	@ 0x62
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fb18 	bl	8003954 <LIS2MDL_Write_Reg>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d014      	beq.n	8003354 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e012      	b.n	8003356 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d101      	bne.n	800333c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	e00c      	b.n	8003356 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3320      	adds	r3, #32
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f000 ff69 	bl	800421a <lis2mdl_i2c_interface_set>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e000      	b.n	8003356 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003354:	68fb      	ldr	r3, [r7, #12]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	080039ab 	.word	0x080039ab
 8003364:	08003a2d 	.word	0x08003a2d

08003368 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d144      	bne.n	8003402 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003378:	f107 0208 	add.w	r2, r7, #8
 800337c:	2301      	movs	r3, #1
 800337e:	2162      	movs	r1, #98	@ 0x62
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fb94 	bl	8003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	e06c      	b.n	800346c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003392:	f107 020c 	add.w	r2, r7, #12
 8003396:	2301      	movs	r3, #1
 8003398:	2160      	movs	r1, #96	@ 0x60
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fb87 	bl	8003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
 80033aa:	e05f      	b.n	800346c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80033ac:	7a3b      	ldrb	r3, [r7, #8]
 80033ae:	f043 0310 	orr.w	r3, r3, #16
 80033b2:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80033b4:	7a3b      	ldrb	r3, [r7, #8]
 80033b6:	f36f 0341 	bfc	r3, #1, #1
 80033ba:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80033bc:	7b3b      	ldrb	r3, [r7, #12]
 80033be:	2202      	movs	r2, #2
 80033c0:	f362 0301 	bfi	r3, r2, #0, #2
 80033c4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80033c6:	7b3b      	ldrb	r3, [r7, #12]
 80033c8:	f043 030c 	orr.w	r3, r3, #12
 80033cc:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80033ce:	f107 0208 	add.w	r2, r7, #8
 80033d2:	2301      	movs	r3, #1
 80033d4:	2162      	movs	r1, #98	@ 0x62
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fca8 	bl	8003d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	e041      	b.n	800346c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80033e8:	f107 020c 	add.w	r2, r7, #12
 80033ec:	2301      	movs	r3, #1
 80033ee:	2160      	movs	r1, #96	@ 0x60
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fc9b 	bl	8003d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d032      	beq.n	8003462 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	e034      	b.n	800346c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3320      	adds	r3, #32
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fe61 	bl	80040d0 <lis2mdl_block_data_update_set>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
 8003418:	e028      	b.n	800346c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3320      	adds	r3, #32
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fdd1 	bl	8003fc8 <lis2mdl_operating_mode_set>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
 8003430:	e01c      	b.n	800346c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3320      	adds	r3, #32
 8003436:	2103      	movs	r1, #3
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fdeb 	bl	8004014 <lis2mdl_data_rate_set>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
 8003448:	e010      	b.n	800346c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3320      	adds	r3, #32
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f000 febc 	bl	80041ce <lis2mdl_self_test_set>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800345c:	f04f 33ff 	mov.w	r3, #4294967295
 8003460:	e004      	b.n	800346c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8a5 	bl	80035cc <LIS2MDL_MAG_Disable>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
 800348c:	e004      	b.n	8003498 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d10b      	bne.n	80034ca <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80034b2:	2301      	movs	r3, #1
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	214f      	movs	r1, #79	@ 0x4f
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 faf8 	bl	8003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
 80034c8:	e00c      	b.n	80034e4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3320      	adds	r3, #32
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fe6b 	bl	80041ac <lis2mdl_device_id_get>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	e000      	b.n	80034e4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2200      	movs	r2, #0
 8003512:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2232      	movs	r2, #50	@ 0x32
 800351e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4a04      	ldr	r2, [pc, #16]	@ (8003544 <LIS2MDL_GetCapabilities+0x58>)
 8003534:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	42c80000 	.word	0x42c80000

08003548 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e032      	b.n	80035c4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d11d      	bne.n	80035a2 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003566:	f107 020c 	add.w	r2, r7, #12
 800356a:	2301      	movs	r3, #1
 800356c:	2160      	movs	r1, #96	@ 0x60
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa9d 	bl	8003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e021      	b.n	80035c4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003580:	7b3b      	ldrb	r3, [r7, #12]
 8003582:	f36f 0301 	bfc	r3, #0, #2
 8003586:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003588:	f107 020c 	add.w	r2, r7, #12
 800358c:	2301      	movs	r3, #1
 800358e:	2160      	movs	r1, #96	@ 0x60
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fbcb 	bl	8003d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
 80035a0:	e010      	b.n	80035c4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3320      	adds	r3, #32
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fd0d 	bl	8003fc8 <lis2mdl_operating_mode_set>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	e004      	b.n	80035c4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e033      	b.n	800364a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d11e      	bne.n	8003628 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80035ea:	f107 020c 	add.w	r2, r7, #12
 80035ee:	2301      	movs	r3, #1
 80035f0:	2160      	movs	r1, #96	@ 0x60
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa5b 	bl	8003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	e022      	b.n	800364a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003604:	7b3b      	ldrb	r3, [r7, #12]
 8003606:	2202      	movs	r2, #2
 8003608:	f362 0301 	bfi	r3, r2, #0, #2
 800360c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800360e:	f107 020c 	add.w	r2, r7, #12
 8003612:	2301      	movs	r3, #1
 8003614:	2160      	movs	r1, #96	@ 0x60
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fb88 	bl	8003d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00e      	beq.n	8003640 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	e010      	b.n	800364a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3320      	adds	r3, #32
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fcca 	bl	8003fc8 <lis2mdl_operating_mode_set>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	e004      	b.n	800364a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003662:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3320      	adds	r3, #32
 8003686:	f107 020b 	add.w	r2, r7, #11
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fce7 	bl	8004060 <lis2mdl_data_rate_get>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
 800369c:	e023      	b.n	80036e6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d81b      	bhi.n	80036dc <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80036a4:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c5 	.word	0x080036c5
 80036b4:	080036cd 	.word	0x080036cd
 80036b8:	080036d5 	.word	0x080036d5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4a0c      	ldr	r2, [pc, #48]	@ (80036f0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80036c0:	601a      	str	r2, [r3, #0]
      break;
 80036c2:	e00f      	b.n	80036e4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4a0b      	ldr	r2, [pc, #44]	@ (80036f4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80036c8:	601a      	str	r2, [r3, #0]
      break;
 80036ca:	e00b      	b.n	80036e4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80036d0:	601a      	str	r2, [r3, #0]
      break;
 80036d2:	e007      	b.n	80036e4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80036d8:	601a      	str	r2, [r3, #0]
      break;
 80036da:	e003      	b.n	80036e4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	60fb      	str	r3, [r7, #12]
      break;
 80036e2:	bf00      	nop
  }

  return ret;
 80036e4:	68fb      	ldr	r3, [r7, #12]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	41200000 	.word	0x41200000
 80036f4:	41a00000 	.word	0x41a00000
 80036f8:	42480000 	.word	0x42480000
 80036fc:	42c80000 	.word	0x42c80000

08003700 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800370c:	edd7 7a00 	vldr	s15, [r7]
 8003710:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	d801      	bhi.n	8003722 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800371e:	2300      	movs	r3, #0
 8003720:	e016      	b.n	8003750 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003722:	edd7 7a00 	vldr	s15, [r7]
 8003726:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800372a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	d801      	bhi.n	8003738 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003734:	2301      	movs	r3, #1
 8003736:	e00b      	b.n	8003750 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003738:	edd7 7a00 	vldr	s15, [r7]
 800373c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80037c4 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	d801      	bhi.n	800374e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800374a:	2302      	movs	r3, #2
 800374c:	e000      	b.n	8003750 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800374e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003750:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d121      	bne.n	800379e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800375a:	f107 020c 	add.w	r2, r7, #12
 800375e:	2301      	movs	r3, #1
 8003760:	2160      	movs	r1, #96	@ 0x60
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9a3 	bl	8003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	e022      	b.n	80037ba <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	b2da      	uxtb	r2, r3
 800377c:	7b3b      	ldrb	r3, [r7, #12]
 800377e:	f362 0383 	bfi	r3, r2, #2, #2
 8003782:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003784:	f107 020c 	add.w	r2, r7, #12
 8003788:	2301      	movs	r3, #1
 800378a:	2160      	movs	r1, #96	@ 0x60
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 facd 	bl	8003d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00f      	beq.n	80037b8 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	e00d      	b.n	80037ba <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3320      	adds	r3, #32
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fc34 	bl	8004014 <lis2mdl_data_rate_set>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	e000      	b.n	80037ba <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	42480000 	.word	0x42480000

080037c8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2232      	movs	r2, #50	@ 0x32
 80037d6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3320      	adds	r3, #32
 800380c:	f107 0208 	add.w	r2, r7, #8
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fc82 	bl	800411c <lis2mdl_magnetic_raw_get>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	e00c      	b.n	800383e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003824:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800382c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003834:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b088      	sub	sp, #32
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d134      	bne.n	80038c2 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003858:	f107 0218 	add.w	r2, r7, #24
 800385c:	2306      	movs	r3, #6
 800385e:	2168      	movs	r1, #104	@ 0x68
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f924 	bl	8003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
 8003870:	e06c      	b.n	800394c <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003872:	7e7b      	ldrb	r3, [r7, #25]
 8003874:	b21b      	sxth	r3, r3
 8003876:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003878:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800387c:	b29b      	uxth	r3, r3
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	b29b      	uxth	r3, r3
 8003882:	7e3a      	ldrb	r2, [r7, #24]
 8003884:	4413      	add	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	b21b      	sxth	r3, r3
 800388a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800388c:	7efb      	ldrb	r3, [r7, #27]
 800388e:	b21b      	sxth	r3, r3
 8003890:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003892:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003896:	b29b      	uxth	r3, r3
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	b29b      	uxth	r3, r3
 800389c:	7eba      	ldrb	r2, [r7, #26]
 800389e:	4413      	add	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	b21b      	sxth	r3, r3
 80038a4:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80038a6:	7f7b      	ldrb	r3, [r7, #29]
 80038a8:	b21b      	sxth	r3, r3
 80038aa:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80038ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	7f3a      	ldrb	r2, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b21b      	sxth	r3, r3
 80038be:	82bb      	strh	r3, [r7, #20]
 80038c0:	e00d      	b.n	80038de <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3320      	adds	r3, #32
 80038c6:	f107 0210 	add.w	r2, r7, #16
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fc25 	bl	800411c <lis2mdl_magnetic_raw_get>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	e036      	b.n	800394c <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff feb4 	bl	8003652 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80038ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80038fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003902:	ee17 2a90 	vmov	r2, s15
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800390a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003916:	edd7 7a03 	vldr	s15, [r7, #12]
 800391a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003922:	ee17 2a90 	vmov	r2, s15
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800392a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003936:	edd7 7a03 	vldr	s15, [r7, #12]
 800393a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003942:	ee17 2a90 	vmov	r2, s15
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
 8003960:	4613      	mov	r3, r2
 8003962:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d10b      	bne.n	8003984 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800396c:	1cba      	adds	r2, r7, #2
 800396e:	78f9      	ldrb	r1, [r7, #3]
 8003970:	2301      	movs	r3, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9da 	bl	8003d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d010      	beq.n	80039a0 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	e00e      	b.n	80039a2 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f103 0020 	add.w	r0, r3, #32
 800398a:	1cba      	adds	r2, r7, #2
 800398c:	78f9      	ldrb	r1, [r7, #3]
 800398e:	2301      	movs	r3, #1
 8003990:	f000 fb02 	bl	8003f98 <lis2mdl_write_reg>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	e000      	b.n	80039a2 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80039aa:	b590      	push	{r4, r7, lr}
 80039ac:	b087      	sub	sp, #28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	461a      	mov	r2, r3
 80039b6:	460b      	mov	r3, r1
 80039b8:	72fb      	strb	r3, [r7, #11]
 80039ba:	4613      	mov	r3, r2
 80039bc:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10e      	bne.n	80039e8 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	695c      	ldr	r4, [r3, #20]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	7b1b      	ldrb	r3, [r3, #12]
 80039d2:	4618      	mov	r0, r3
 80039d4:	7afb      	ldrb	r3, [r7, #11]
 80039d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	893b      	ldrh	r3, [r7, #8]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	47a0      	blx	r4
 80039e4:	4603      	mov	r3, r0
 80039e6:	e01d      	b.n	8003a24 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d10b      	bne.n	8003a08 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	695c      	ldr	r4, [r3, #20]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	7b1b      	ldrb	r3, [r3, #12]
 80039f8:	4618      	mov	r0, r3
 80039fa:	7afb      	ldrb	r3, [r7, #11]
 80039fc:	b299      	uxth	r1, r3
 80039fe:	893b      	ldrh	r3, [r7, #8]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	47a0      	blx	r4
 8003a04:	4603      	mov	r3, r0
 8003a06:	e00d      	b.n	8003a24 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	695c      	ldr	r4, [r3, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	7b1b      	ldrb	r3, [r3, #12]
 8003a10:	4618      	mov	r0, r3
 8003a12:	7afb      	ldrb	r3, [r7, #11]
 8003a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	893b      	ldrh	r3, [r7, #8]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	47a0      	blx	r4
 8003a22:	4603      	mov	r3, r0
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd90      	pop	{r4, r7, pc}

08003a2c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	461a      	mov	r2, r3
 8003a38:	460b      	mov	r3, r1
 8003a3a:	72fb      	strb	r3, [r7, #11]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10e      	bne.n	8003a6a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	691c      	ldr	r4, [r3, #16]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	7b1b      	ldrb	r3, [r3, #12]
 8003a54:	4618      	mov	r0, r3
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	4619      	mov	r1, r3
 8003a60:	893b      	ldrh	r3, [r7, #8]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	47a0      	blx	r4
 8003a66:	4603      	mov	r3, r0
 8003a68:	e01d      	b.n	8003aa6 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d10b      	bne.n	8003a8a <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	691c      	ldr	r4, [r3, #16]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	7b1b      	ldrb	r3, [r3, #12]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	b299      	uxth	r1, r3
 8003a80:	893b      	ldrh	r3, [r7, #8]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	47a0      	blx	r4
 8003a86:	4603      	mov	r3, r0
 8003a88:	e00d      	b.n	8003aa6 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	691c      	ldr	r4, [r3, #16]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	7b1b      	ldrb	r3, [r3, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	7afb      	ldrb	r3, [r7, #11]
 8003a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	893b      	ldrh	r3, [r7, #8]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	47a0      	blx	r4
 8003aa4:	4603      	mov	r3, r0
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd90      	pop	{r4, r7, pc}

08003aae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b08c      	sub	sp, #48	@ 0x30
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	460b      	mov	r3, r1
 8003abc:	72fb      	strb	r3, [r7, #11]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003ac8:	2340      	movs	r3, #64	@ 0x40
 8003aca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003ad4:	233d      	movs	r3, #61	@ 0x3d
 8003ad6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003ad8:	2315      	movs	r3, #21
 8003ada:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003ade:	2316      	movs	r3, #22
 8003ae0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8003ae4:	2317      	movs	r3, #23
 8003ae6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8003aea:	2314      	movs	r3, #20
 8003aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003af0:	2344      	movs	r3, #68	@ 0x44
 8003af2:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003af4:	2302      	movs	r3, #2
 8003af6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003afa:	2339      	movs	r3, #57	@ 0x39
 8003afc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003b06:	2329      	movs	r3, #41	@ 0x29
 8003b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003b0c:	231e      	movs	r3, #30
 8003b0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8003b18:	893b      	ldrh	r3, [r7, #8]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003b1e:	2310      	movs	r3, #16
 8003b20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003b2a:	2340      	movs	r3, #64	@ 0x40
 8003b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f103 0020 	add.w	r0, r3, #32
 8003b36:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003b3a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f000 fa2a 	bl	8003f98 <lis2mdl_write_reg>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4e:	e0e9      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f103 0020 	add.w	r0, r3, #32
 8003b56:	f107 021f 	add.w	r2, r7, #31
 8003b5a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f000 fa1a 	bl	8003f98 <lis2mdl_write_reg>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	e0d9      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f103 0020 	add.w	r0, r3, #32
 8003b76:	f107 020b 	add.w	r2, r7, #11
 8003b7a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f000 fa0a 	bl	8003f98 <lis2mdl_write_reg>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	e0c9      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f103 0020 	add.w	r0, r3, #32
 8003b96:	f107 021d 	add.w	r2, r7, #29
 8003b9a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f000 f9fa 	bl	8003f98 <lis2mdl_write_reg>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e0b9      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f103 0020 	add.w	r0, r3, #32
 8003bb6:	f107 021e 	add.w	r2, r7, #30
 8003bba:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f000 f9ea 	bl	8003f98 <lis2mdl_write_reg>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	e0a9      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f103 0020 	add.w	r0, r3, #32
 8003bd6:	f107 0220 	add.w	r2, r7, #32
 8003bda:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003bde:	2301      	movs	r3, #1
 8003be0:	f000 f9da 	bl	8003f98 <lis2mdl_write_reg>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	e099      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f103 0020 	add.w	r0, r3, #32
 8003bf6:	f107 021c 	add.w	r2, r7, #28
 8003bfa:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f000 f9b2 	bl	8003f68 <lis2mdl_read_reg>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	e089      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003c10:	7f3b      	ldrb	r3, [r7, #28]
 8003c12:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d102      	bne.n	8003c20 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003c1a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003c1e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f103 0020 	add.w	r0, r3, #32
 8003c26:	f107 021c 	add.w	r2, r7, #28
 8003c2a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f000 f9b2 	bl	8003f98 <lis2mdl_write_reg>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e071      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f103 0020 	add.w	r0, r3, #32
 8003c46:	f107 0214 	add.w	r2, r7, #20
 8003c4a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003c4e:	2306      	movs	r3, #6
 8003c50:	f000 f98a 	bl	8003f68 <lis2mdl_read_reg>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	e061      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f103 0020 	add.w	r0, r3, #32
 8003c66:	f107 021b 	add.w	r2, r7, #27
 8003c6a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f000 f97a 	bl	8003f68 <lis2mdl_read_reg>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	e051      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003c80:	7efa      	ldrb	r2, [r7, #27]
 8003c82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c86:	4013      	ands	r3, r2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d1e6      	bne.n	8003c60 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f103 0020 	add.w	r0, r3, #32
 8003c98:	f107 021b 	add.w	r2, r7, #27
 8003c9c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f000 f961 	bl	8003f68 <lis2mdl_read_reg>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb0:	e038      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003cb2:	7efa      	ldrb	r2, [r7, #27]
 8003cb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1e6      	bne.n	8003c92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f103 0020 	add.w	r0, r3, #32
 8003cca:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003cce:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f000 f960 	bl	8003f98 <lis2mdl_write_reg>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	e01f      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f103 0020 	add.w	r0, r3, #32
 8003cea:	893b      	ldrh	r3, [r7, #8]
 8003cec:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	f000 f939 	bl	8003f68 <lis2mdl_read_reg>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	e010      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f103 0020 	add.w	r0, r3, #32
 8003d08:	f107 0220 	add.w	r2, r7, #32
 8003d0c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003d10:	2301      	movs	r3, #1
 8003d12:	f000 f941 	bl	8003f98 <lis2mdl_write_reg>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	e000      	b.n	8003d24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3730      	adds	r7, #48	@ 0x30
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	@ 0x30
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	461a      	mov	r2, r3
 8003d38:	460b      	mov	r3, r1
 8003d3a:	72fb      	strb	r3, [r7, #11]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003d46:	2340      	movs	r3, #64	@ 0x40
 8003d48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003d52:	233c      	movs	r3, #60	@ 0x3c
 8003d54:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003d56:	2315      	movs	r3, #21
 8003d58:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003d5c:	2316      	movs	r3, #22
 8003d5e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8003d62:	2317      	movs	r3, #23
 8003d64:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003d6c:	2314      	movs	r3, #20
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003d72:	2344      	movs	r3, #68	@ 0x44
 8003d74:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003d76:	2339      	movs	r3, #57	@ 0x39
 8003d78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8003d7c:	2380      	movs	r3, #128	@ 0x80
 8003d7e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003d82:	2329      	movs	r3, #41	@ 0x29
 8003d84:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003d88:	231e      	movs	r3, #30
 8003d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003da0:	2340      	movs	r3, #64	@ 0x40
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003da6:	230e      	movs	r3, #14
 8003da8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f103 0020 	add.w	r0, r3, #32
 8003db2:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003db6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f000 f8ec 	bl	8003f98 <lis2mdl_write_reg>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	e0c9      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f103 0020 	add.w	r0, r3, #32
 8003dd2:	f107 021f 	add.w	r2, r7, #31
 8003dd6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f000 f8dc 	bl	8003f98 <lis2mdl_write_reg>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dea:	e0b9      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f103 0020 	add.w	r0, r3, #32
 8003df2:	f107 020b 	add.w	r2, r7, #11
 8003df6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f000 f8cc 	bl	8003f98 <lis2mdl_write_reg>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	e0a9      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f103 0020 	add.w	r0, r3, #32
 8003e12:	f107 021e 	add.w	r2, r7, #30
 8003e16:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f000 f8bc 	bl	8003f98 <lis2mdl_write_reg>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	e099      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f103 0020 	add.w	r0, r3, #32
 8003e32:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8003e36:	2301      	movs	r3, #1
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	f000 f8ad 	bl	8003f98 <lis2mdl_write_reg>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	e08a      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f103 0020 	add.w	r0, r3, #32
 8003e50:	f107 021d 	add.w	r2, r7, #29
 8003e54:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f000 f89d 	bl	8003f98 <lis2mdl_write_reg>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	e07a      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f103 0020 	add.w	r0, r3, #32
 8003e70:	f107 0220 	add.w	r2, r7, #32
 8003e74:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f000 f88d 	bl	8003f98 <lis2mdl_write_reg>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	e06a      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f103 0020 	add.w	r0, r3, #32
 8003e90:	f107 021c 	add.w	r2, r7, #28
 8003e94:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f000 f865 	bl	8003f68 <lis2mdl_read_reg>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea8:	e05a      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003eaa:	7f3b      	ldrb	r3, [r7, #28]
 8003eac:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d102      	bne.n	8003eba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eb8:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f103 0020 	add.w	r0, r3, #32
 8003ec0:	f107 021c 	add.w	r2, r7, #28
 8003ec4:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f000 f865 	bl	8003f98 <lis2mdl_write_reg>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	e042      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f103 0020 	add.w	r0, r3, #32
 8003ee0:	f107 0214 	add.w	r2, r7, #20
 8003ee4:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8003ee8:	2306      	movs	r3, #6
 8003eea:	f000 f83d 	bl	8003f68 <lis2mdl_read_reg>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	e032      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f103 0020 	add.w	r0, r3, #32
 8003f00:	f107 021b 	add.w	r2, r7, #27
 8003f04:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f000 f82d 	bl	8003f68 <lis2mdl_read_reg>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	e022      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003f1a:	7efa      	ldrb	r2, [r7, #27]
 8003f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f20:	4013      	ands	r3, r2
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1e6      	bne.n	8003efa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f103 0020 	add.w	r0, r3, #32
 8003f32:	f107 021b 	add.w	r2, r7, #27
 8003f36:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f000 f814 	bl	8003f68 <lis2mdl_read_reg>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4a:	e009      	b.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003f4c:	7efa      	ldrb	r2, [r7, #27]
 8003f4e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f52:	4013      	ands	r3, r2
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d1e6      	bne.n	8003f2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3730      	adds	r7, #48	@ 0x30
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	461a      	mov	r2, r3
 8003f74:	460b      	mov	r3, r1
 8003f76:	72fb      	strb	r3, [r7, #11]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685c      	ldr	r4, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68d8      	ldr	r0, [r3, #12]
 8003f84:	893b      	ldrh	r3, [r7, #8]
 8003f86:	7af9      	ldrb	r1, [r7, #11]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	47a0      	blx	r4
 8003f8c:	6178      	str	r0, [r7, #20]

  return ret;
 8003f8e:	697b      	ldr	r3, [r7, #20]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd90      	pop	{r4, r7, pc}

08003f98 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	72fb      	strb	r3, [r7, #11]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681c      	ldr	r4, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68d8      	ldr	r0, [r3, #12]
 8003fb4:	893b      	ldrh	r3, [r7, #8]
 8003fb6:	7af9      	ldrb	r1, [r7, #11]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	47a0      	blx	r4
 8003fbc:	6178      	str	r0, [r7, #20]

  return ret;
 8003fbe:	697b      	ldr	r3, [r7, #20]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}

08003fc8 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003fd4:	f107 0208 	add.w	r2, r7, #8
 8003fd8:	2301      	movs	r3, #1
 8003fda:	2160      	movs	r1, #96	@ 0x60
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ffc3 	bl	8003f68 <lis2mdl_read_reg>
 8003fe2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	7a3b      	ldrb	r3, [r7, #8]
 8003ff4:	f362 0301 	bfi	r3, r2, #0, #2
 8003ff8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003ffa:	f107 0208 	add.w	r2, r7, #8
 8003ffe:	2301      	movs	r3, #1
 8004000:	2160      	movs	r1, #96	@ 0x60
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ffc8 	bl	8003f98 <lis2mdl_write_reg>
 8004008:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004020:	f107 0208 	add.w	r2, r7, #8
 8004024:	2301      	movs	r3, #1
 8004026:	2160      	movs	r1, #96	@ 0x60
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff9d 	bl	8003f68 <lis2mdl_read_reg>
 800402e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	b2da      	uxtb	r2, r3
 800403e:	7a3b      	ldrb	r3, [r7, #8]
 8004040:	f362 0383 	bfi	r3, r2, #2, #2
 8004044:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004046:	f107 0208 	add.w	r2, r7, #8
 800404a:	2301      	movs	r3, #1
 800404c:	2160      	movs	r1, #96	@ 0x60
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ffa2 	bl	8003f98 <lis2mdl_write_reg>
 8004054:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800406a:	f107 0208 	add.w	r2, r7, #8
 800406e:	2301      	movs	r3, #1
 8004070:	2160      	movs	r1, #96	@ 0x60
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff78 	bl	8003f68 <lis2mdl_read_reg>
 8004078:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800407a:	7a3b      	ldrb	r3, [r7, #8]
 800407c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b03      	cmp	r3, #3
 8004084:	d81a      	bhi.n	80040bc <lis2mdl_data_rate_get+0x5c>
 8004086:	a201      	add	r2, pc, #4	@ (adr r2, 800408c <lis2mdl_data_rate_get+0x2c>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040a5 	.word	0x080040a5
 8004094:	080040ad 	.word	0x080040ad
 8004098:	080040b5 	.word	0x080040b5
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
      break;
 80040a2:	e00f      	b.n	80040c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
      break;
 80040aa:	e00b      	b.n	80040c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2202      	movs	r2, #2
 80040b0:	701a      	strb	r2, [r3, #0]
      break;
 80040b2:	e007      	b.n	80040c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2203      	movs	r2, #3
 80040b8:	701a      	strb	r2, [r3, #0]
      break;
 80040ba:	e003      	b.n	80040c4 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
      break;
 80040c2:	bf00      	nop
  }

  return ret;
 80040c4:	68fb      	ldr	r3, [r7, #12]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop

080040d0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80040dc:	f107 0208 	add.w	r2, r7, #8
 80040e0:	2301      	movs	r3, #1
 80040e2:	2162      	movs	r1, #98	@ 0x62
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff3f 	bl	8003f68 <lis2mdl_read_reg>
 80040ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10f      	bne.n	8004112 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	7a3b      	ldrb	r3, [r7, #8]
 80040fc:	f362 1304 	bfi	r3, r2, #4, #1
 8004100:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004102:	f107 0208 	add.w	r2, r7, #8
 8004106:	2301      	movs	r3, #1
 8004108:	2162      	movs	r1, #98	@ 0x62
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ff44 	bl	8003f98 <lis2mdl_write_reg>
 8004110:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004112:	68fb      	ldr	r3, [r7, #12]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004126:	f107 020c 	add.w	r2, r7, #12
 800412a:	2306      	movs	r3, #6
 800412c:	2168      	movs	r1, #104	@ 0x68
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ff1a 	bl	8003f68 <lis2mdl_read_reg>
 8004134:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004136:	7b7b      	ldrb	r3, [r7, #13]
 8004138:	b21a      	sxth	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004144:	b29b      	uxth	r3, r3
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	b29b      	uxth	r3, r3
 800414a:	7b3a      	ldrb	r2, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	b21a      	sxth	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3302      	adds	r3, #2
 800415c:	b212      	sxth	r2, r2
 800415e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	3302      	adds	r3, #2
 8004164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004168:	b29b      	uxth	r3, r3
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	b29b      	uxth	r3, r3
 800416e:	7bba      	ldrb	r2, [r7, #14]
 8004170:	4413      	add	r3, r2
 8004172:	b29a      	uxth	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	3302      	adds	r3, #2
 8004178:	b212      	sxth	r2, r2
 800417a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800417c:	7c7a      	ldrb	r2, [r7, #17]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	b212      	sxth	r2, r2
 8004184:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800418e:	b29b      	uxth	r3, r3
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	b29b      	uxth	r3, r3
 8004194:	7c3a      	ldrb	r2, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	b29a      	uxth	r2, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	b212      	sxth	r2, r2
 80041a0:	801a      	strh	r2, [r3, #0]

  return ret;
 80041a2:	697b      	ldr	r3, [r7, #20]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80041b6:	2301      	movs	r3, #1
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	214f      	movs	r1, #79	@ 0x4f
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fed3 	bl	8003f68 <lis2mdl_read_reg>
 80041c2:	60f8      	str	r0, [r7, #12]

  return ret;
 80041c4:	68fb      	ldr	r3, [r7, #12]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041da:	f107 0208 	add.w	r2, r7, #8
 80041de:	2301      	movs	r3, #1
 80041e0:	2162      	movs	r1, #98	@ 0x62
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fec0 	bl	8003f68 <lis2mdl_read_reg>
 80041e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10f      	bne.n	8004210 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	7a3b      	ldrb	r3, [r7, #8]
 80041fa:	f362 0341 	bfi	r3, r2, #1, #1
 80041fe:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004200:	f107 0208 	add.w	r2, r7, #8
 8004204:	2301      	movs	r3, #1
 8004206:	2162      	movs	r1, #98	@ 0x62
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fec5 	bl	8003f98 <lis2mdl_write_reg>
 800420e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004210:	68fb      	ldr	r3, [r7, #12]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004226:	f107 0208 	add.w	r2, r7, #8
 800422a:	2301      	movs	r3, #1
 800422c:	2162      	movs	r1, #98	@ 0x62
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fe9a 	bl	8003f68 <lis2mdl_read_reg>
 8004234:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10f      	bne.n	800425c <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	7a3b      	ldrb	r3, [r7, #8]
 8004246:	f362 1345 	bfi	r3, r2, #5, #1
 800424a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800424c:	f107 0208 	add.w	r2, r7, #8
 8004250:	2301      	movs	r3, #1
 8004252:	2162      	movs	r1, #98	@ 0x62
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fe9f 	bl	8003f98 <lis2mdl_write_reg>
 800425a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e051      	b.n	8004328 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	7b1a      	ldrb	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1d      	ldr	r2, [pc, #116]	@ (8004334 <LPS22DF_RegisterBusIO+0xcc>)
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004338 <LPS22DF_RegisterBusIO+0xd0>)
 80042c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e020      	b.n	8004328 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4798      	blx	r3
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e016      	b.n	8004328 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d112      	bne.n	8004328 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 800430c:	2320      	movs	r3, #32
 800430e:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	461a      	mov	r2, r3
 8004314:	210e      	movs	r1, #14
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9e6 	bl	80046e8 <LPS22DF_Write_Reg>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004328:	68fb      	ldr	r3, [r7, #12]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	08004a8d 	.word	0x08004a8d
 8004338:	08004ac3 	.word	0x08004ac3

0800433c <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fb40 	bl	80049d4 <LPS22DF_Initialize>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	e004      	b.n	800436a <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004380:	2b01      	cmp	r3, #1
 8004382:	d111      	bne.n	80043a8 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f882 	bl	800448e <LPS22DF_PRESS_Disable>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	e00d      	b.n	80043b2 <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f921 	bl	80045de <LPS22DF_TEMP_Disable>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	e004      	b.n	80043b2 <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3320      	adds	r3, #32
 80043c8:	f107 020c 	add.w	r2, r7, #12
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fc0a 	bl	8004be8 <lps22df_id_get>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	e003      	b.n	80043e8 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 80043e0:	7b3a      	ldrb	r2, [r7, #12]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2200      	movs	r2, #0
 80043fe:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2200      	movs	r2, #0
 8004416:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4a08      	ldr	r2, [pc, #32]	@ (8004444 <LPS22DF_GetCapabilities+0x54>)
 8004424:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	4a06      	ldr	r2, [pc, #24]	@ (8004444 <LPS22DF_GetCapabilities+0x54>)
 800442a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	43480000 	.word	0x43480000

08004448 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e013      	b.n	8004486 <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f103 0220 	add.w	r2, r3, #32
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3333      	adds	r3, #51	@ 0x33
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f000 fcac 	bl	8004dc8 <lps22df_mode_set>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295
 800447a:	e004      	b.n	8004486 <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e030      	b.n	8004506 <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d126      	bne.n	80044fc <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3320      	adds	r3, #32
 80044b2:	f107 020c 	add.w	r2, r7, #12
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fce3 	bl	8004e84 <lps22df_mode_get>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80044c4:	f04f 33ff 	mov.w	r3, #4294967295
 80044c8:	e01d      	b.n	8004506 <LPS22DF_PRESS_Disable+0x78>
    }

    memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3333      	adds	r3, #51	@ 0x33
 80044ce:	461a      	mov	r2, r3
 80044d0:	f107 030c 	add.w	r3, r7, #12
 80044d4:	8819      	ldrh	r1, [r3, #0]
 80044d6:	789b      	ldrb	r3, [r3, #2]
 80044d8:	8011      	strh	r1, [r2, #0]
 80044da:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 80044dc:	2300      	movs	r3, #0
 80044de:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3320      	adds	r3, #32
 80044e4:	f107 020c 	add.w	r2, r7, #12
 80044e8:	4611      	mov	r1, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fc6c 	bl	8004dc8 <lps22df_mode_set>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	e004      	b.n	8004506 <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f900 	bl	8004720 <LPS22DF_GetOutputDataRate>
 8004520:	4603      	mov	r3, r0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float Odr)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004540:	ed97 0a00 	vldr	s0, [r7]
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f955 	bl	80047f4 <LPS22DF_SetOutputDataRate_When_Enabled>
 800454a:	4603      	mov	r3, r0
 800454c:	e005      	b.n	800455a <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800454e:	ed97 0a00 	vldr	s0, [r7]
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9da 	bl	800490c <LPS22DF_SetOutputDataRate_When_Disabled>
 8004558:	4603      	mov	r3, r0
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float *Value)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  lps22df_data_t data;

  if (lps22df_data_get(&(pObj->Ctx), &data) != LPS22DF_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3320      	adds	r3, #32
 8004570:	f107 0208 	add.w	r2, r7, #8
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fd50 	bl	800501c <lps22df_data_get>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	e003      	b.n	8004590 <LPS22DF_PRESS_GetPressure+0x2e>
  }

  *Value = data.pressure.hpa;
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	601a      	str	r2, [r3, #0]

  return LPS22DF_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e013      	b.n	80045d6 <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f103 0220 	add.w	r2, r3, #32
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3333      	adds	r3, #51	@ 0x33
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fc04 	bl	8004dc8 <lps22df_mode_set>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80045c6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ca:	e004      	b.n	80045d6 <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e030      	b.n	8004656 <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d126      	bne.n	800464c <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3320      	adds	r3, #32
 8004602:	f107 020c 	add.w	r2, r7, #12
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fc3b 	bl	8004e84 <lps22df_mode_get>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	e01d      	b.n	8004656 <LPS22DF_TEMP_Disable+0x78>
    }

    memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3333      	adds	r3, #51	@ 0x33
 800461e:	461a      	mov	r2, r3
 8004620:	f107 030c 	add.w	r3, r7, #12
 8004624:	8819      	ldrh	r1, [r3, #0]
 8004626:	789b      	ldrb	r3, [r3, #2]
 8004628:	8011      	strh	r1, [r2, #0]
 800462a:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 800462c:	2300      	movs	r3, #0
 800462e:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3320      	adds	r3, #32
 8004634:	f107 020c 	add.w	r2, r7, #12
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fbc4 	bl	8004dc8 <lps22df_mode_set>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e004      	b.n	8004656 <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f858 	bl	8004720 <LPS22DF_GetOutputDataRate>
 8004670:	4603      	mov	r3, r0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float Odr)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800468c:	2b01      	cmp	r3, #1
 800468e:	d106      	bne.n	800469e <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004690:	ed97 0a00 	vldr	s0, [r7]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8ad 	bl	80047f4 <LPS22DF_SetOutputDataRate_When_Enabled>
 800469a:	4603      	mov	r3, r0
 800469c:	e005      	b.n	80046aa <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800469e:	ed97 0a00 	vldr	s0, [r7]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f932 	bl	800490c <LPS22DF_SetOutputDataRate_When_Disabled>
 80046a8:	4603      	mov	r3, r0
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float *Value)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
  lps22df_data_t data;

  if (lps22df_data_get(&(pObj->Ctx), &data) != LPS22DF_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3320      	adds	r3, #32
 80046c0:	f107 0208 	add.w	r2, r7, #8
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fca8 	bl	800501c <lps22df_data_get>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
 80046d6:	e003      	b.n	80046e0 <LPS22DF_TEMP_GetTemperature+0x2e>
  }

  *Value = data.heat.deg_c;
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	601a      	str	r2, [r3, #0]

  return LPS22DF_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
 80046f4:	4613      	mov	r3, r2
 80046f6:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f103 0020 	add.w	r0, r3, #32
 80046fe:	1cba      	adds	r2, r7, #2
 8004700:	78f9      	ldrb	r1, [r7, #3]
 8004702:	2301      	movs	r3, #1
 8004704:	f000 fa10 	bl	8004b28 <lps22df_write_reg>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	e000      	b.n	8004716 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float *Odr)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3320      	adds	r3, #32
 8004732:	f107 0208 	add.w	r2, r7, #8
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fba3 	bl	8004e84 <lps22df_mode_get>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	e044      	b.n	80047d4 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 800474a:	7a3b      	ldrb	r3, [r7, #8]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d83c      	bhi.n	80047ca <LPS22DF_GetOutputDataRate+0xaa>
 8004750:	a201      	add	r2, pc, #4	@ (adr r2, 8004758 <LPS22DF_GetOutputDataRate+0x38>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800477d 	.word	0x0800477d
 800475c:	08004787 	.word	0x08004787
 8004760:	08004791 	.word	0x08004791
 8004764:	0800479b 	.word	0x0800479b
 8004768:	080047a3 	.word	0x080047a3
 800476c:	080047ab 	.word	0x080047ab
 8004770:	080047b3 	.word	0x080047b3
 8004774:	080047bb 	.word	0x080047bb
 8004778:	080047c3 	.word	0x080047c3
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
      break;
 8004784:	e025      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800478c:	601a      	str	r2, [r3, #0]
      break;
 800478e:	e020      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004796:	601a      	str	r2, [r3, #0]
      break;
 8004798:	e01b      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	4a0f      	ldr	r2, [pc, #60]	@ (80047dc <LPS22DF_GetOutputDataRate+0xbc>)
 800479e:	601a      	str	r2, [r3, #0]
      break;
 80047a0:	e017      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	4a0e      	ldr	r2, [pc, #56]	@ (80047e0 <LPS22DF_GetOutputDataRate+0xc0>)
 80047a6:	601a      	str	r2, [r3, #0]
      break;
 80047a8:	e013      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	4a0d      	ldr	r2, [pc, #52]	@ (80047e4 <LPS22DF_GetOutputDataRate+0xc4>)
 80047ae:	601a      	str	r2, [r3, #0]
      break;
 80047b0:	e00f      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	4a0c      	ldr	r2, [pc, #48]	@ (80047e8 <LPS22DF_GetOutputDataRate+0xc8>)
 80047b6:	601a      	str	r2, [r3, #0]
      break;
 80047b8:	e00b      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	4a0b      	ldr	r2, [pc, #44]	@ (80047ec <LPS22DF_GetOutputDataRate+0xcc>)
 80047be:	601a      	str	r2, [r3, #0]
      break;
 80047c0:	e007      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	4a0a      	ldr	r2, [pc, #40]	@ (80047f0 <LPS22DF_GetOutputDataRate+0xd0>)
 80047c6:	601a      	str	r2, [r3, #0]
      break;
 80047c8:	e003      	b.n	80047d2 <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	60fb      	str	r3, [r7, #12]
      break;
 80047d0:	bf00      	nop
  }

  return ret;
 80047d2:	68fb      	ldr	r3, [r7, #12]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	41200000 	.word	0x41200000
 80047e0:	41c80000 	.word	0x41c80000
 80047e4:	42480000 	.word	0x42480000
 80047e8:	42960000 	.word	0x42960000
 80047ec:	42c80000 	.word	0x42c80000
 80047f0:	43480000 	.word	0x43480000

080047f4 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float Odr)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3320      	adds	r3, #32
 8004804:	f107 020c 	add.w	r2, r7, #12
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fb3a 	bl	8004e84 <lps22df_mode_get>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295
 800481a:	e06c      	b.n	80048f6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 800481c:	edd7 7a00 	vldr	s15, [r7]
 8004820:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482c:	d801      	bhi.n	8004832 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 800482e:	2301      	movs	r3, #1
 8004830:	e042      	b.n	80048b8 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004832:	edd7 7a00 	vldr	s15, [r7]
 8004836:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800483a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800483e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004842:	d801      	bhi.n	8004848 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8004844:	2302      	movs	r3, #2
 8004846:	e037      	b.n	80048b8 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004848:	edd7 7a00 	vldr	s15, [r7]
 800484c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004858:	d801      	bhi.n	800485e <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 800485a:	2303      	movs	r3, #3
 800485c:	e02c      	b.n	80048b8 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800485e:	edd7 7a00 	vldr	s15, [r7]
 8004862:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800486a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486e:	d801      	bhi.n	8004874 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8004870:	2304      	movs	r3, #4
 8004872:	e021      	b.n	80048b8 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004874:	edd7 7a00 	vldr	s15, [r7]
 8004878:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004900 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 800487c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004884:	d801      	bhi.n	800488a <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8004886:	2305      	movs	r3, #5
 8004888:	e016      	b.n	80048b8 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800488a:	edd7 7a00 	vldr	s15, [r7]
 800488e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004904 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 8004892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489a:	d801      	bhi.n	80048a0 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 800489c:	2306      	movs	r3, #6
 800489e:	e00b      	b.n	80048b8 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80048a0:	edd7 7a00 	vldr	s15, [r7]
 80048a4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004908 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 80048a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	d801      	bhi.n	80048b6 <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e000      	b.n	80048b8 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80048b6:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 80048b8:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3320      	adds	r3, #32
 80048be:	f107 020c 	add.w	r2, r7, #12
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa7f 	bl	8004dc8 <lps22df_mode_set>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	e00f      	b.n	80048f6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f103 0220 	add.w	r2, r3, #32
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3333      	adds	r3, #51	@ 0x33
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 face 	bl	8004e84 <lps22df_mode_get>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295
 80048f2:	e000      	b.n	80048f6 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	42480000 	.word	0x42480000
 8004904:	42960000 	.word	0x42960000
 8004908:	42c80000 	.word	0x42c80000

0800490c <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float Odr)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 8004918:	edd7 7a00 	vldr	s15, [r7]
 800491c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004928:	d801      	bhi.n	800492e <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 800492a:	2301      	movs	r3, #1
 800492c:	e042      	b.n	80049b4 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800492e:	edd7 7a00 	vldr	s15, [r7]
 8004932:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800493a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493e:	d801      	bhi.n	8004944 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8004940:	2302      	movs	r3, #2
 8004942:	e037      	b.n	80049b4 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004944:	edd7 7a00 	vldr	s15, [r7]
 8004948:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800494c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	d801      	bhi.n	800495a <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8004956:	2303      	movs	r3, #3
 8004958:	e02c      	b.n	80049b4 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800495a:	edd7 7a00 	vldr	s15, [r7]
 800495e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	d801      	bhi.n	8004970 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 800496c:	2304      	movs	r3, #4
 800496e:	e021      	b.n	80049b4 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004970:	edd7 7a00 	vldr	s15, [r7]
 8004974:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80049c8 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8004978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800497c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004980:	d801      	bhi.n	8004986 <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8004982:	2305      	movs	r3, #5
 8004984:	e016      	b.n	80049b4 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004986:	edd7 7a00 	vldr	s15, [r7]
 800498a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80049cc <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 800498e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	d801      	bhi.n	800499c <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8004998:	2306      	movs	r3, #6
 800499a:	e00b      	b.n	80049b4 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800499c:	edd7 7a00 	vldr	s15, [r7]
 80049a0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80049d0 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 80049a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ac:	d801      	bhi.n	80049b2 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 80049ae:	2307      	movs	r3, #7
 80049b0:	e000      	b.n	80049b4 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80049b2:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	42480000 	.word	0x42480000
 80049cc:	42960000 	.word	0x42960000
 80049d0:	42c80000 	.word	0x42c80000

080049d4 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3320      	adds	r3, #32
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f977 	bl	8004cd6 <lps22df_init_set>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295
 80049f2:	e047      	b.n	8004a84 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d102      	bne.n	8004a02 <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 80049fc:	2303      	movs	r3, #3
 80049fe:	723b      	strb	r3, [r7, #8]
 8004a00:	e008      	b.n	8004a14 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d102      	bne.n	8004a10 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	723b      	strb	r3, [r7, #8]
 8004a0e:	e001      	b.n	8004a14 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8004a10:	2300      	movs	r3, #0
 8004a12:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_AUTO;
 8004a14:	2300      	movs	r3, #0
 8004a16:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3320      	adds	r3, #32
 8004a1c:	f107 0208 	add.w	r2, r7, #8
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f8f5 	bl	8004c12 <lps22df_bus_mode_set>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a32:	e027      	b.n	8004a84 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8004a34:	2300      	movs	r3, #0
 8004a36:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3320      	adds	r3, #32
 8004a44:	f107 020c 	add.w	r2, r7, #12
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f9bc 	bl	8004dc8 <lps22df_mode_set>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5a:	e013      	b.n	8004a84 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f103 0220 	add.w	r2, r3, #32
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3333      	adds	r3, #51	@ 0x33
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f000 fa0b 	bl	8004e84 <lps22df_mode_get>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295
 8004a78:	e004      	b.n	8004a84 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	461a      	mov	r2, r3
 8004a98:	460b      	mov	r3, r1
 8004a9a:	72fb      	strb	r3, [r7, #11]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	695c      	ldr	r4, [r3, #20]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	7b1b      	ldrb	r3, [r3, #12]
 8004aac:	4618      	mov	r0, r3
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	b299      	uxth	r1, r3
 8004ab2:	893b      	ldrh	r3, [r7, #8]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	47a0      	blx	r4
 8004ab8:	4603      	mov	r3, r0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd90      	pop	{r4, r7, pc}

08004ac2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ac2:	b590      	push	{r4, r7, lr}
 8004ac4:	b087      	sub	sp, #28
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	461a      	mov	r2, r3
 8004ace:	460b      	mov	r3, r1
 8004ad0:	72fb      	strb	r3, [r7, #11]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	691c      	ldr	r4, [r3, #16]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	7b1b      	ldrb	r3, [r3, #12]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
 8004ae6:	b299      	uxth	r1, r3
 8004ae8:	893b      	ldrh	r3, [r7, #8]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	47a0      	blx	r4
 8004aee:	4603      	mov	r3, r0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd90      	pop	{r4, r7, pc}

08004af8 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 8004af8:	b590      	push	{r4, r7, lr}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	461a      	mov	r2, r3
 8004b04:	460b      	mov	r3, r1
 8004b06:	72fb      	strb	r3, [r7, #11]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685c      	ldr	r4, [r3, #4]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68d8      	ldr	r0, [r3, #12]
 8004b14:	893b      	ldrh	r3, [r7, #8]
 8004b16:	7af9      	ldrb	r1, [r7, #11]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	47a0      	blx	r4
 8004b1c:	6178      	str	r0, [r7, #20]
  return ret;
 8004b1e:	697b      	ldr	r3, [r7, #20]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd90      	pop	{r4, r7, pc}

08004b28 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_write_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	461a      	mov	r2, r3
 8004b34:	460b      	mov	r3, r1
 8004b36:	72fb      	strb	r3, [r7, #11]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681c      	ldr	r4, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68d8      	ldr	r0, [r3, #12]
 8004b44:	893b      	ldrh	r3, [r7, #8]
 8004b46:	7af9      	ldrb	r1, [r7, #11]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	47a0      	blx	r4
 8004b4c:	6178      	str	r0, [r7, #20]
  return ret;
 8004b4e:	697b      	ldr	r3, [r7, #20]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd90      	pop	{r4, r7, pc}

08004b58 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <bytecpy+0x1e>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <bytecpy+0x1e>
  {
    *target = *source;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	701a      	strb	r2, [r3, #0]
  }
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b96:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004bb0 <lps22df_from_lsb_to_hPa+0x2c>
 8004b9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b9e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	49800000 	.word	0x49800000

08004bb4 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8004bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bca:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004be4 <lps22df_from_lsb_to_celsius+0x30>
 8004bce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bd2:	eef0 7a66 	vmov.f32	s15, s13
}
 8004bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	42c80000 	.word	0x42c80000

08004be8 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8004bf2:	f107 020b 	add.w	r2, r7, #11
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	210f      	movs	r1, #15
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff7c 	bl	8004af8 <lps22df_read_reg>
 8004c00:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8004c02:	7afa      	ldrb	r2, [r7, #11]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	701a      	strb	r2, [r3, #0]

  return ret;
 8004c08:	68fb      	ldr	r3, [r7, #12]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_add_t i3c_if_ctrl_add;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8004c1c:	f107 020c 	add.w	r2, r7, #12
 8004c20:	2301      	movs	r3, #1
 8004c22:	210e      	movs	r1, #14
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff ff67 	bl	8004af8 <lps22df_read_reg>
 8004c2a:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d124      	bne.n	8004c7c <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	7b3b      	ldrb	r3, [r7, #12]
 8004c40:	f362 13c7 	bfi	r3, r2, #7, #1
 8004c44:	733b      	strb	r3, [r7, #12]
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	7b3b      	ldrb	r3, [r7, #12]
 8004c54:	f362 1386 	bfi	r3, r2, #6, #1
 8004c58:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	7b3b      	ldrb	r3, [r7, #12]
 8004c66:	f362 1345 	bfi	r3, r2, #5, #1
 8004c6a:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8004c6c:	f107 020c 	add.w	r2, r7, #12
 8004c70:	2301      	movs	r3, #1
 8004c72:	210e      	movs	r1, #14
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff57 	bl	8004b28 <lps22df_write_reg>
 8004c7a:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d107      	bne.n	8004c92 <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL_ADD,
 8004c82:	f107 0210 	add.w	r2, r7, #16
 8004c86:	2301      	movs	r3, #1
 8004c88:	2119      	movs	r1, #25
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff ff34 	bl	8004af8 <lps22df_read_reg>
 8004c90:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl_add, 1);
  }
  if (ret == 0)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d119      	bne.n	8004ccc <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl_add.asf_on = (uint8_t)val->filter & 0x01U;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	7c3b      	ldrb	r3, [r7, #16]
 8004ca4:	f362 1345 	bfi	r3, r2, #5, #1
 8004ca8:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl_add.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	789b      	ldrb	r3, [r3, #2]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	7c3b      	ldrb	r3, [r7, #16]
 8004cb6:	f362 0301 	bfi	r3, r2, #0, #2
 8004cba:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL_ADD,
 8004cbc:	f107 0210 	add.w	r2, r7, #16
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	2119      	movs	r1, #25
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff2f 	bl	8004b28 <lps22df_write_reg>
 8004cca:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl_add, 1);
  }
  return ret;
 8004ccc:	697b      	ldr	r3, [r7, #20]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(stmdev_ctx_t *ctx, lps22df_init_t val)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8004ce2:	f107 0208 	add.w	r2, r7, #8
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	2111      	movs	r1, #17
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ff04 	bl	8004af8 <lps22df_read_reg>
 8004cf0:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d162      	bne.n	8004dbe <lps22df_init_set+0xe8>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8004cf8:	f107 0208 	add.w	r2, r7, #8
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ff28 	bl	8004b58 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8004d08:	f107 0308 	add.w	r3, r7, #8
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	f107 030c 	add.w	r3, r7, #12
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff ff1f 	bl	8004b58 <bytecpy>

    switch (val)
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d012      	beq.n	8004d46 <lps22df_init_set+0x70>
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	dc3f      	bgt.n	8004da4 <lps22df_init_set+0xce>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <lps22df_init_set+0x8a>
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d13b      	bne.n	8004da4 <lps22df_init_set+0xce>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8004d2c:	7c3b      	ldrb	r3, [r7, #16]
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d32:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004d34:	f107 0210 	add.w	r2, r7, #16
 8004d38:	2301      	movs	r3, #1
 8004d3a:	2111      	movs	r1, #17
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff fef3 	bl	8004b28 <lps22df_write_reg>
 8004d42:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8004d44:	e03b      	b.n	8004dbe <lps22df_init_set+0xe8>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8004d46:	7c3b      	ldrb	r3, [r7, #16]
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004d4e:	f107 0210 	add.w	r2, r7, #16
 8004d52:	2301      	movs	r3, #1
 8004d54:	2111      	movs	r1, #17
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff fee6 	bl	8004b28 <lps22df_write_reg>
 8004d5c:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8004d5e:	e02e      	b.n	8004dbe <lps22df_init_set+0xe8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8004d60:	7c3b      	ldrb	r3, [r7, #16]
 8004d62:	f043 0308 	orr.w	r3, r3, #8
 8004d66:	743b      	strb	r3, [r7, #16]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8004d68:	7b3b      	ldrb	r3, [r7, #12]
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	733b      	strb	r3, [r7, #12]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8004d70:	f107 0210 	add.w	r2, r7, #16
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff feec 	bl	8004b58 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8004d80:	f107 020c 	add.w	r2, r7, #12
 8004d84:	f107 0308 	add.w	r3, r7, #8
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fee3 	bl	8004b58 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8004d92:	f107 0208 	add.w	r2, r7, #8
 8004d96:	2302      	movs	r3, #2
 8004d98:	2111      	movs	r1, #17
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fec4 	bl	8004b28 <lps22df_write_reg>
 8004da0:	6178      	str	r0, [r7, #20]
        break;
 8004da2:	e00c      	b.n	8004dbe <lps22df_init_set+0xe8>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8004da4:	7c3b      	ldrb	r3, [r7, #16]
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	743b      	strb	r3, [r7, #16]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004dac:	f107 0210 	add.w	r2, r7, #16
 8004db0:	2301      	movs	r3, #1
 8004db2:	2111      	movs	r1, #17
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff feb7 	bl	8004b28 <lps22df_write_reg>
 8004dba:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8004dbc:	bf00      	nop
    }
  }
  return ret;
 8004dbe:	697b      	ldr	r3, [r7, #20]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8004dd2:	f107 0208 	add.w	r2, r7, #8
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	2110      	movs	r1, #16
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff fe8c 	bl	8004af8 <lps22df_read_reg>
 8004de0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d148      	bne.n	8004e7a <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8004de8:	f107 0208 	add.w	r2, r7, #8
 8004dec:	f107 0310 	add.w	r3, r7, #16
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff feb0 	bl	8004b58 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8004df8:	f107 0308 	add.w	r3, r7, #8
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	f107 030c 	add.w	r3, r7, #12
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fea7 	bl	8004b58 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	7c3b      	ldrb	r3, [r7, #16]
 8004e16:	f362 03c6 	bfi	r3, r2, #3, #4
 8004e1a:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	7c3b      	ldrb	r3, [r7, #16]
 8004e28:	f362 0302 	bfi	r3, r2, #0, #3
 8004e2c:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	789b      	ldrb	r3, [r3, #2]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	7b3b      	ldrb	r3, [r7, #12]
 8004e3a:	f362 1304 	bfi	r3, r2, #4, #1
 8004e3e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 8004e40:	7b3b      	ldrb	r3, [r7, #12]
 8004e42:	f36f 1345 	bfc	r3, #5, #1
 8004e46:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8004e48:	f107 0210 	add.w	r2, r7, #16
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fe80 	bl	8004b58 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8004e58:	f107 020c 	add.w	r2, r7, #12
 8004e5c:	f107 0308 	add.w	r3, r7, #8
 8004e60:	3301      	adds	r3, #1
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fe77 	bl	8004b58 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8004e6a:	f107 0208 	add.w	r2, r7, #8
 8004e6e:	2302      	movs	r3, #2
 8004e70:	2110      	movs	r1, #16
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fe58 	bl	8004b28 <lps22df_write_reg>
 8004e78:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004e7a:	697b      	ldr	r3, [r7, #20]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8004e8e:	f107 0208 	add.w	r2, r7, #8
 8004e92:	2302      	movs	r3, #2
 8004e94:	2110      	movs	r1, #16
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff fe2e 	bl	8004af8 <lps22df_read_reg>
 8004e9c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f040 80b6 	bne.w	8005012 <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8004ea6:	f107 0208 	add.w	r2, r7, #8
 8004eaa:	f107 0310 	add.w	r3, r7, #16
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff fe51 	bl	8004b58 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fe48 	bl	8004b58 <bytecpy>

    switch (ctrl_reg1.odr)
 8004ec8:	7c3b      	ldrb	r3, [r7, #16]
 8004eca:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d839      	bhi.n	8004f48 <lps22df_mode_get+0xc4>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <lps22df_mode_get+0x58>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	08004f19 	.word	0x08004f19
 8004eec:	08004f21 	.word	0x08004f21
 8004ef0:	08004f29 	.word	0x08004f29
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f41 	.word	0x08004f41
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	701a      	strb	r2, [r3, #0]
        break;
 8004f06:	e023      	b.n	8004f50 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
        break;
 8004f0e:	e01f      	b.n	8004f50 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2202      	movs	r2, #2
 8004f14:	701a      	strb	r2, [r3, #0]
        break;
 8004f16:	e01b      	b.n	8004f50 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	701a      	strb	r2, [r3, #0]
        break;
 8004f1e:	e017      	b.n	8004f50 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2204      	movs	r2, #4
 8004f24:	701a      	strb	r2, [r3, #0]
        break;
 8004f26:	e013      	b.n	8004f50 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2205      	movs	r2, #5
 8004f2c:	701a      	strb	r2, [r3, #0]
        break;
 8004f2e:	e00f      	b.n	8004f50 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2206      	movs	r2, #6
 8004f34:	701a      	strb	r2, [r3, #0]
        break;
 8004f36:	e00b      	b.n	8004f50 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2207      	movs	r2, #7
 8004f3c:	701a      	strb	r2, [r3, #0]
        break;
 8004f3e:	e007      	b.n	8004f50 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2208      	movs	r2, #8
 8004f44:	701a      	strb	r2, [r3, #0]
        break;
 8004f46:	e003      	b.n	8004f50 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
        break;
 8004f4e:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 8004f50:	7c3b      	ldrb	r3, [r7, #16]
 8004f52:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	d833      	bhi.n	8004fc4 <lps22df_mode_get+0x140>
 8004f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f64 <lps22df_mode_get+0xe0>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004f85 	.word	0x08004f85
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	08004fa5 	.word	0x08004fa5
 8004f78:	08004fad 	.word	0x08004fad
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004fbd 	.word	0x08004fbd
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	705a      	strb	r2, [r3, #1]
        break;
 8004f8a:	e01f      	b.n	8004fcc <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	705a      	strb	r2, [r3, #1]
        break;
 8004f92:	e01b      	b.n	8004fcc <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2202      	movs	r2, #2
 8004f98:	705a      	strb	r2, [r3, #1]
        break;
 8004f9a:	e017      	b.n	8004fcc <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	705a      	strb	r2, [r3, #1]
        break;
 8004fa2:	e013      	b.n	8004fcc <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	705a      	strb	r2, [r3, #1]
        break;
 8004faa:	e00f      	b.n	8004fcc <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2205      	movs	r2, #5
 8004fb0:	705a      	strb	r2, [r3, #1]
        break;
 8004fb2:	e00b      	b.n	8004fcc <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2206      	movs	r2, #6
 8004fb8:	705a      	strb	r2, [r3, #1]
        break;
 8004fba:	e007      	b.n	8004fcc <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2207      	movs	r2, #7
 8004fc0:	705a      	strb	r2, [r3, #1]
        break;
 8004fc2:	e003      	b.n	8004fcc <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	705a      	strb	r2, [r3, #1]
        break;
 8004fca:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8004fcc:	7b3b      	ldrb	r3, [r7, #12]
 8004fce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	7b3a      	ldrb	r2, [r7, #12]
 8004fd8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d00e      	beq.n	8005002 <lps22df_mode_get+0x17e>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	dc10      	bgt.n	800500a <lps22df_mode_get+0x186>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <lps22df_mode_get+0x16e>
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d004      	beq.n	8004ffa <lps22df_mode_get+0x176>
 8004ff0:	e00b      	b.n	800500a <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	709a      	strb	r2, [r3, #2]
        break;
 8004ff8:	e00b      	b.n	8005012 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	709a      	strb	r2, [r3, #2]
        break;
 8005000:	e007      	b.n	8005012 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2203      	movs	r2, #3
 8005006:	709a      	strb	r2, [r3, #2]
        break;
 8005008:	e003      	b.n	8005012 <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	709a      	strb	r2, [r3, #2]
        break;
 8005010:	bf00      	nop
    }
  }
  return ret;
 8005012:	697b      	ldr	r3, [r7, #20]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <lps22df_data_get>:
  * @param  data  data retrieved from the sensor.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_data_get(stmdev_ctx_t *ctx, lps22df_data_t *data)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint8_t buff[5];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, buff, 5);
 8005026:	f107 020c 	add.w	r2, r7, #12
 800502a:	2305      	movs	r3, #5
 800502c:	2128      	movs	r1, #40	@ 0x28
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fd62 	bl	8004af8 <lps22df_read_reg>
 8005034:	6178      	str	r0, [r7, #20]

  /* pressure conversion */
  data->pressure.raw = (int32_t)buff[2];
 8005036:	7bbb      	ldrb	r3, [r7, #14]
 8005038:	461a      	mov	r2, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	605a      	str	r2, [r3, #4]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[1];
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	7b7a      	ldrb	r2, [r7, #13]
 8005046:	441a      	add	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	605a      	str	r2, [r3, #4]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[0];
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	7b3a      	ldrb	r2, [r7, #12]
 8005054:	441a      	add	r2, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	605a      	str	r2, [r3, #4]
  data->pressure.raw = data->pressure.raw * 256;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	021a      	lsls	r2, r3, #8
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	605a      	str	r2, [r3, #4]

  data->pressure.hpa = lps22df_from_lsb_to_hPa(data->pressure.raw);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fd8b 	bl	8004b84 <lps22df_from_lsb_to_hPa>
 800506e:	eef0 7a40 	vmov.f32	s15, s0
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	edc3 7a00 	vstr	s15, [r3]


  /* temperature conversion */
  data->heat.raw = (int16_t)buff[4];
 8005078:	7c3b      	ldrb	r3, [r7, #16]
 800507a:	b21a      	sxth	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	819a      	strh	r2, [r3, #12]
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[3];
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005086:	b29b      	uxth	r3, r3
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	b29b      	uxth	r3, r3
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	4413      	add	r3, r2
 8005090:	b29b      	uxth	r3, r3
 8005092:	b21a      	sxth	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	819a      	strh	r2, [r3, #12]
  data->heat.deg_c = lps22df_from_lsb_to_celsius(data->heat.raw);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fd88 	bl	8004bb4 <lps22df_from_lsb_to_celsius>
 80050a4:	eef0 7a40 	vmov.f32	s15, s0
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	edc3 7a02 	vstr	s15, [r3, #8]

  return ret;
 80050ae:	697b      	ldr	r3, [r7, #20]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 80050cc:	f04f 33ff 	mov.w	r3, #4294967295
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	e05d      	b.n	8005190 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	7b1a      	ldrb	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a23      	ldr	r2, [pc, #140]	@ (800519c <LSM6DSV16X_RegisterBusIO+0xe4>)
 8005110:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a22      	ldr	r2, [pc, #136]	@ (80051a0 <LSM6DSV16X_RegisterBusIO+0xe8>)
 8005116:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e02c      	b.n	8005190 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4798      	blx	r3
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e022      	b.n	8005190 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d11e      	bne.n	8005190 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005158:	2b00      	cmp	r3, #0
 800515a:	d119      	bne.n	8005190 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 800515c:	2304      	movs	r3, #4
 800515e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8005160:	7afb      	ldrb	r3, [r7, #11]
 8005162:	461a      	mov	r2, r3
 8005164:	2112      	movs	r1, #18
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fd95 	bl	8005c96 <LSM6DSV16X_Write_Reg>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
 8005176:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8005178:	7afb      	ldrb	r3, [r7, #11]
 800517a:	461a      	mov	r2, r3
 800517c:	2103      	movs	r1, #3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fd89 	bl	8005c96 <LSM6DSV16X_Write_Reg>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 800518a:	f04f 33ff 	mov.w	r3, #4294967295
 800518e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	08006189 	.word	0x08006189
 80051a0:	080061bf 	.word	0x080061bf

080051a4 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3320      	adds	r3, #32
 80051b0:	2101      	movs	r1, #1
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fb20 	bl	80067f8 <lsm6dsv16x_auto_increment_set>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <LSM6DSV16X_Init+0x20>
  {
    return LSM6DSV16X_ERROR;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	e064      	b.n	800528e <LSM6DSV16X_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3320      	adds	r3, #32
 80051c8:	2101      	movs	r1, #1
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 fb3a 	bl	8006844 <lsm6dsv16x_block_data_update_set>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <LSM6DSV16X_Init+0x38>
  {
    return LSM6DSV16X_ERROR;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e058      	b.n	800528e <LSM6DSV16X_Init+0xea>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3320      	adds	r3, #32
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 fcd0 	bl	8006b88 <lsm6dsv16x_fifo_mode_set>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <LSM6DSV16X_Init+0x50>
  {
    return LSM6DSV16X_ERROR;
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295
 80051f2:	e04c      	b.n	800528e <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2206      	movs	r2, #6
 80051f8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3320      	adds	r3, #32
 8005200:	2100      	movs	r1, #0
 8005202:	4618      	mov	r0, r3
 8005204:	f001 f837 	bl	8006276 <lsm6dsv16x_xl_data_rate_set>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <LSM6DSV16X_Init+0x70>
  {
    return LSM6DSV16X_ERROR;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	e03c      	b.n	800528e <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3320      	adds	r3, #32
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f001 fbb6 	bl	800698c <lsm6dsv16x_xl_full_scale_set>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <LSM6DSV16X_Init+0x88>
  {
    return LSM6DSV16X_ERROR;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
 800522a:	e030      	b.n	800528e <LSM6DSV16X_Init+0xea>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2206      	movs	r2, #6
 8005230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3320      	adds	r3, #32
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f001 f97c 	bl	8006538 <lsm6dsv16x_gy_data_rate_set>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <LSM6DSV16X_Init+0xa8>
  {
    return LSM6DSV16X_ERROR;
 8005246:	f04f 33ff 	mov.w	r3, #4294967295
 800524a:	e020      	b.n	800528e <LSM6DSV16X_Init+0xea>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3320      	adds	r3, #32
 8005250:	2104      	movs	r1, #4
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fb1c 	bl	8006890 <lsm6dsv16x_gy_full_scale_set>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <LSM6DSV16X_Init+0xc0>
  {
    return LSM6DSV16X_ERROR;
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	e014      	b.n	800528e <LSM6DSV16X_Init+0xea>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8005264:	7b3b      	ldrb	r3, [r7, #12]
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3320      	adds	r3, #32
 8005270:	7b39      	ldrb	r1, [r7, #12]
 8005272:	4618      	mov	r0, r3
 8005274:	f001 fcae 	bl	8006bd4 <lsm6dsv16x_ah_qvar_mode_set>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <LSM6DSV16X_Init+0xe0>
  {
    return LSM6DSV16X_ERROR;
 800527e:	f04f 33ff 	mov.w	r3, #4294967295
 8005282:	e004      	b.n	800528e <LSM6DSV16X_Init+0xea>
  }

  pObj->is_initialized = 1;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f898 	bl	80053d4 <LSM6DSV16X_ACC_Disable>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295
 80052ae:	e025      	b.n	80052fc <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fab2 	bl	800581a <LSM6DSV16X_GYRO_Disable>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80052bc:	f04f 33ff 	mov.w	r3, #4294967295
 80052c0:	e01c      	b.n	80052fc <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 80052d2:	7b3b      	ldrb	r3, [r7, #12]
 80052d4:	f36f 0300 	bfc	r3, #0, #1
 80052d8:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3320      	adds	r3, #32
 80052de:	7b39      	ldrb	r1, [r7, #12]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 fc77 	bl	8006bd4 <lsm6dsv16x_ah_qvar_mode_set>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295
 80052f0:	e004      	b.n	80052fc <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3320      	adds	r3, #32
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 ff9d 	bl	8006254 <lsm6dsv16x_device_id_get>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	e000      	b.n	8005328 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2201      	movs	r2, #1
 8005344:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2200      	movs	r2, #0
 800534a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005358:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2210      	movs	r2, #16
 800535e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	4a07      	ldr	r2, [pc, #28]	@ (8005388 <LSM6DSV16X_GetCapabilities+0x58>)
 800536a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	4a06      	ldr	r2, [pc, #24]	@ (8005388 <LSM6DSV16X_GetCapabilities+0x58>)
 8005370:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	45f00000 	.word	0x45f00000

0800538c <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	e014      	b.n	80053cc <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f103 0220 	add.w	r2, r3, #32
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f000 ff60 	bl	8006276 <lsm6dsv16x_xl_data_rate_set>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80053bc:	f04f 33ff 	mov.w	r3, #4294967295
 80053c0:	e004      	b.n	80053cc <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e01f      	b.n	800542a <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f103 0220 	add.w	r2, r3, #32
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3333      	adds	r3, #51	@ 0x33
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f000 ff8e 	bl	8006318 <lsm6dsv16x_xl_data_rate_get>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	e010      	b.n	800542a <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3320      	adds	r3, #32
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f000 ff31 	bl	8006276 <lsm6dsv16x_xl_data_rate_set>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	e004      	b.n	800542a <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3320      	adds	r3, #32
 8005446:	f107 020b 	add.w	r2, r7, #11
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f001 fac3 	bl	80069d8 <lsm6dsv16x_xl_full_scale_get>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	e023      	b.n	80054a6 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d81b      	bhi.n	800549c <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8005464:	a201      	add	r2, pc, #4	@ (adr r2, 800546c <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	0800547d 	.word	0x0800547d
 8005470:	08005485 	.word	0x08005485
 8005474:	0800548d 	.word	0x0800548d
 8005478:	08005495 	.word	0x08005495
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4a0c      	ldr	r2, [pc, #48]	@ (80054b0 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8005480:	601a      	str	r2, [r3, #0]
      break;
 8005482:	e00f      	b.n	80054a4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4a0b      	ldr	r2, [pc, #44]	@ (80054b4 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8005488:	601a      	str	r2, [r3, #0]
      break;
 800548a:	e00b      	b.n	80054a4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4a0a      	ldr	r2, [pc, #40]	@ (80054b8 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8005490:	601a      	str	r2, [r3, #0]
      break;
 8005492:	e007      	b.n	80054a4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4a09      	ldr	r2, [pc, #36]	@ (80054bc <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8005498:	601a      	str	r2, [r3, #0]
      break;
 800549a:	e003      	b.n	80054a4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295
 80054a0:	60fb      	str	r3, [r7, #12]
      break;
 80054a2:	bf00      	nop
  }

  return ret;
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	3d79db23 	.word	0x3d79db23
 80054b4:	3df9db23 	.word	0x3df9db23
 80054b8:	3e79db23 	.word	0x3e79db23
 80054bc:	3ef9db23 	.word	0x3ef9db23

080054c0 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3320      	adds	r3, #32
 80054d2:	f107 020b 	add.w	r2, r7, #11
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 ff1d 	bl	8006318 <lsm6dsv16x_xl_data_rate_get>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80054e4:	f04f 33ff 	mov.w	r3, #4294967295
 80054e8:	e05a      	b.n	80055a0 <LSM6DSV16X_ACC_GetOutputDataRate+0xe0>
  }

  switch (odr_low_level)
 80054ea:	7afb      	ldrb	r3, [r7, #11]
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	d852      	bhi.n	8005596 <LSM6DSV16X_ACC_GetOutputDataRate+0xd6>
 80054f0:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	08005537 	.word	0x08005537
 8005500:	0800553f 	.word	0x0800553f
 8005504:	08005547 	.word	0x08005547
 8005508:	0800554f 	.word	0x0800554f
 800550c:	08005557 	.word	0x08005557
 8005510:	0800555f 	.word	0x0800555f
 8005514:	08005567 	.word	0x08005567
 8005518:	0800556f 	.word	0x0800556f
 800551c:	08005577 	.word	0x08005577
 8005520:	0800557f 	.word	0x0800557f
 8005524:	08005587 	.word	0x08005587
 8005528:	0800558f 	.word	0x0800558f
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
      break;
 8005534:	e033      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	4a1b      	ldr	r2, [pc, #108]	@ (80055a8 <LSM6DSV16X_ACC_GetOutputDataRate+0xe8>)
 800553a:	601a      	str	r2, [r3, #0]
      break;
 800553c:	e02f      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	4a1a      	ldr	r2, [pc, #104]	@ (80055ac <LSM6DSV16X_ACC_GetOutputDataRate+0xec>)
 8005542:	601a      	str	r2, [r3, #0]
      break;
 8005544:	e02b      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <LSM6DSV16X_ACC_GetOutputDataRate+0xf0>)
 800554a:	601a      	str	r2, [r3, #0]
      break;
 800554c:	e027      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	4a18      	ldr	r2, [pc, #96]	@ (80055b4 <LSM6DSV16X_ACC_GetOutputDataRate+0xf4>)
 8005552:	601a      	str	r2, [r3, #0]
      break;
 8005554:	e023      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	4a17      	ldr	r2, [pc, #92]	@ (80055b8 <LSM6DSV16X_ACC_GetOutputDataRate+0xf8>)
 800555a:	601a      	str	r2, [r3, #0]
      break;
 800555c:	e01f      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	4a16      	ldr	r2, [pc, #88]	@ (80055bc <LSM6DSV16X_ACC_GetOutputDataRate+0xfc>)
 8005562:	601a      	str	r2, [r3, #0]
      break;
 8005564:	e01b      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <LSM6DSV16X_ACC_GetOutputDataRate+0x100>)
 800556a:	601a      	str	r2, [r3, #0]
      break;
 800556c:	e017      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	4a14      	ldr	r2, [pc, #80]	@ (80055c4 <LSM6DSV16X_ACC_GetOutputDataRate+0x104>)
 8005572:	601a      	str	r2, [r3, #0]
      break;
 8005574:	e013      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	4a13      	ldr	r2, [pc, #76]	@ (80055c8 <LSM6DSV16X_ACC_GetOutputDataRate+0x108>)
 800557a:	601a      	str	r2, [r3, #0]
      break;
 800557c:	e00f      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <LSM6DSV16X_ACC_GetOutputDataRate+0x10c>)
 8005582:	601a      	str	r2, [r3, #0]
      break;
 8005584:	e00b      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	4a11      	ldr	r2, [pc, #68]	@ (80055d0 <LSM6DSV16X_ACC_GetOutputDataRate+0x110>)
 800558a:	601a      	str	r2, [r3, #0]
      break;
 800558c:	e007      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	4a10      	ldr	r2, [pc, #64]	@ (80055d4 <LSM6DSV16X_ACC_GetOutputDataRate+0x114>)
 8005592:	601a      	str	r2, [r3, #0]
      break;
 8005594:	e003      	b.n	800559e <LSM6DSV16X_ACC_GetOutputDataRate+0xde>

    default:
      ret = LSM6DSV16X_ERROR;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295
 800559a:	60fb      	str	r3, [r7, #12]
      break;
 800559c:	bf00      	nop
  }

  return ret;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	3ff00000 	.word	0x3ff00000
 80055ac:	40f00000 	.word	0x40f00000
 80055b0:	41700000 	.word	0x41700000
 80055b4:	41f00000 	.word	0x41f00000
 80055b8:	42700000 	.word	0x42700000
 80055bc:	42f00000 	.word	0x42f00000
 80055c0:	43700000 	.word	0x43700000
 80055c4:	43f00000 	.word	0x43f00000
 80055c8:	44700000 	.word	0x44700000
 80055cc:	44f00000 	.word	0x44f00000
 80055d0:	45700000 	.word	0x45700000
 80055d4:	45f00000 	.word	0x45f00000

080055d8 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d106      	bne.n	80055fc <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80055ee:	ed97 0a00 	vldr	s0, [r7]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fb6a 	bl	8005ccc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 80055f8:	4603      	mov	r3, r0
 80055fa:	e005      	b.n	8005608 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80055fc:	ed97 0a00 	vldr	s0, [r7]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fc05 	bl	8005e10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 8005606:	4603      	mov	r3, r0
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3320      	adds	r3, #32
 8005622:	f107 020b 	add.w	r2, r7, #11
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f001 f9d5 	bl	80069d8 <lsm6dsv16x_xl_full_scale_get>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8005634:	f04f 33ff 	mov.w	r3, #4294967295
 8005638:	e023      	b.n	8005682 <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800563a:	7afb      	ldrb	r3, [r7, #11]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d81b      	bhi.n	8005678 <LSM6DSV16X_ACC_GetFullScale+0x68>
 8005640:	a201      	add	r2, pc, #4	@ (adr r2, 8005648 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	08005659 	.word	0x08005659
 800564c:	08005661 	.word	0x08005661
 8005650:	08005669 	.word	0x08005669
 8005654:	08005671 	.word	0x08005671
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2202      	movs	r2, #2
 800565c:	601a      	str	r2, [r3, #0]
      break;
 800565e:	e00f      	b.n	8005680 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2204      	movs	r2, #4
 8005664:	601a      	str	r2, [r3, #0]
      break;
 8005666:	e00b      	b.n	8005680 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2208      	movs	r2, #8
 800566c:	601a      	str	r2, [r3, #0]
      break;
 800566e:	e007      	b.n	8005680 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2210      	movs	r2, #16
 8005674:	601a      	str	r2, [r3, #0]
      break;
 8005676:	e003      	b.n	8005680 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	60fb      	str	r3, [r7, #12]
      break;
 800567e:	bf00      	nop
  }

  return ret;
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop

0800568c <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	dd0b      	ble.n	80056b4 <LSM6DSV16X_ACC_SetFullScale+0x28>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b04      	cmp	r3, #4
 80056a0:	dd06      	ble.n	80056b0 <LSM6DSV16X_ACC_SetFullScale+0x24>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	dc01      	bgt.n	80056ac <LSM6DSV16X_ACC_SetFullScale+0x20>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e004      	b.n	80056b6 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80056ac:	2303      	movs	r3, #3
 80056ae:	e002      	b.n	80056b6 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80056b4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 80056b6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3320      	adds	r3, #32
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f001 f963 	bl	800698c <lsm6dsv16x_xl_full_scale_set>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295
 80056d0:	e000      	b.n	80056d4 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3320      	adds	r3, #32
 80056ea:	f107 0208 	add.w	r2, r7, #8
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f001 f9fc 	bl	8006aee <lsm6dsv16x_acceleration_raw_get>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 80056fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005700:	e00c      	b.n	800571c <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8005702:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800570a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005712:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3320      	adds	r3, #32
 8005738:	f107 0210 	add.w	r2, r7, #16
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f001 f9d5 	bl	8006aee <lsm6dsv16x_acceleration_raw_get>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800574a:	f04f 33ff 	mov.w	r3, #4294967295
 800574e:	e03c      	b.n	80057ca <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8005750:	f107 030c 	add.w	r3, r7, #12
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fe6c 	bl	8005434 <LSM6DSV16X_ACC_GetSensitivity>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8005762:	f04f 33ff 	mov.w	r3, #4294967295
 8005766:	e030      	b.n	80057ca <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005768:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005774:	edd7 7a03 	vldr	s15, [r7, #12]
 8005778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005780:	ee17 2a90 	vmov	r2, s15
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005788:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800578c:	ee07 3a90 	vmov	s15, r3
 8005790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005794:	edd7 7a03 	vldr	s15, [r7, #12]
 8005798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057a0:	ee17 2a90 	vmov	r2, s15
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80057a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80057b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057c0:	ee17 2a90 	vmov	r2, s15
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e014      	b.n	8005812 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f103 0220 	add.w	r2, r3, #32
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 fe9e 	bl	8006538 <lsm6dsv16x_gy_data_rate_set>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8005802:	f04f 33ff 	mov.w	r3, #4294967295
 8005806:	e004      	b.n	8005812 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e01f      	b.n	8005870 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f103 0220 	add.w	r2, r3, #32
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3334      	adds	r3, #52	@ 0x34
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f000 fecb 	bl	80065d8 <lsm6dsv16x_gy_data_rate_get>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8005848:	f04f 33ff 	mov.w	r3, #4294967295
 800584c:	e010      	b.n	8005870 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3320      	adds	r3, #32
 8005852:	2100      	movs	r1, #0
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fe6f 	bl	8006538 <lsm6dsv16x_gy_data_rate_set>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8005860:	f04f 33ff 	mov.w	r3, #4294967295
 8005864:	e004      	b.n	8005870 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3320      	adds	r3, #32
 800588a:	f107 020b 	add.w	r2, r7, #11
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f001 f823 	bl	80068dc <lsm6dsv16x_gy_full_scale_get>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800589c:	f04f 33ff 	mov.w	r3, #4294967295
 80058a0:	e03d      	b.n	800591e <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 80058a2:	7afb      	ldrb	r3, [r7, #11]
 80058a4:	2b0c      	cmp	r3, #12
 80058a6:	d835      	bhi.n	8005914 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 80058a8:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	080058ed 	.word	0x080058ed
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058fd 	.word	0x080058fd
 80058c0:	08005905 	.word	0x08005905
 80058c4:	08005915 	.word	0x08005915
 80058c8:	08005915 	.word	0x08005915
 80058cc:	08005915 	.word	0x08005915
 80058d0:	08005915 	.word	0x08005915
 80058d4:	08005915 	.word	0x08005915
 80058d8:	08005915 	.word	0x08005915
 80058dc:	08005915 	.word	0x08005915
 80058e0:	0800590d 	.word	0x0800590d
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4a10      	ldr	r2, [pc, #64]	@ (8005928 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 80058e8:	601a      	str	r2, [r3, #0]
      break;
 80058ea:	e017      	b.n	800591c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	4a0f      	ldr	r2, [pc, #60]	@ (800592c <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 80058f0:	601a      	str	r2, [r3, #0]
      break;
 80058f2:	e013      	b.n	800591c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005930 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 80058f8:	601a      	str	r2, [r3, #0]
      break;
 80058fa:	e00f      	b.n	800591c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005934 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8005900:	601a      	str	r2, [r3, #0]
      break;
 8005902:	e00b      	b.n	800591c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	4a0c      	ldr	r2, [pc, #48]	@ (8005938 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8005908:	601a      	str	r2, [r3, #0]
      break;
 800590a:	e007      	b.n	800591c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	4a0b      	ldr	r2, [pc, #44]	@ (800593c <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8005910:	601a      	str	r2, [r3, #0]
      break;
 8005912:	e003      	b.n	800591c <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 8005914:	f04f 33ff 	mov.w	r3, #4294967295
 8005918:	60fb      	str	r3, [r7, #12]
      break;
 800591a:	bf00      	nop
  }

  return ret;
 800591c:	68fb      	ldr	r3, [r7, #12]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	408c0000 	.word	0x408c0000
 800592c:	410c0000 	.word	0x410c0000
 8005930:	418c0000 	.word	0x418c0000
 8005934:	420c0000 	.word	0x420c0000
 8005938:	428c0000 	.word	0x428c0000
 800593c:	430c0000 	.word	0x430c0000

08005940 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3320      	adds	r3, #32
 8005952:	f107 020b 	add.w	r2, r7, #11
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fe3d 	bl	80065d8 <lsm6dsv16x_gy_data_rate_get>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8005964:	f04f 33ff 	mov.w	r3, #4294967295
 8005968:	e056      	b.n	8005a18 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd8>
  }

  switch (odr_low_level)
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	2b0c      	cmp	r3, #12
 800596e:	d84e      	bhi.n	8005a0e <LSM6DSV16X_GYRO_GetOutputDataRate+0xce>
 8005970:	a201      	add	r2, pc, #4	@ (adr r2, 8005978 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059ad 	.word	0x080059ad
 800597c:	08005a0f 	.word	0x08005a0f
 8005980:	080059b7 	.word	0x080059b7
 8005984:	080059bf 	.word	0x080059bf
 8005988:	080059c7 	.word	0x080059c7
 800598c:	080059cf 	.word	0x080059cf
 8005990:	080059d7 	.word	0x080059d7
 8005994:	080059df 	.word	0x080059df
 8005998:	080059e7 	.word	0x080059e7
 800599c:	080059ef 	.word	0x080059ef
 80059a0:	080059f7 	.word	0x080059f7
 80059a4:	080059ff 	.word	0x080059ff
 80059a8:	08005a07 	.word	0x08005a07
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
      break;
 80059b4:	e02f      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	4a19      	ldr	r2, [pc, #100]	@ (8005a20 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe0>)
 80059ba:	601a      	str	r2, [r3, #0]
      break;
 80059bc:	e02b      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	4a18      	ldr	r2, [pc, #96]	@ (8005a24 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe4>)
 80059c2:	601a      	str	r2, [r3, #0]
      break;
 80059c4:	e027      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	4a17      	ldr	r2, [pc, #92]	@ (8005a28 <LSM6DSV16X_GYRO_GetOutputDataRate+0xe8>)
 80059ca:	601a      	str	r2, [r3, #0]
      break;
 80059cc:	e023      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <LSM6DSV16X_GYRO_GetOutputDataRate+0xec>)
 80059d2:	601a      	str	r2, [r3, #0]
      break;
 80059d4:	e01f      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	4a15      	ldr	r2, [pc, #84]	@ (8005a30 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf0>)
 80059da:	601a      	str	r2, [r3, #0]
      break;
 80059dc:	e01b      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf4>)
 80059e2:	601a      	str	r2, [r3, #0]
      break;
 80059e4:	e017      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	4a13      	ldr	r2, [pc, #76]	@ (8005a38 <LSM6DSV16X_GYRO_GetOutputDataRate+0xf8>)
 80059ea:	601a      	str	r2, [r3, #0]
      break;
 80059ec:	e013      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	4a12      	ldr	r2, [pc, #72]	@ (8005a3c <LSM6DSV16X_GYRO_GetOutputDataRate+0xfc>)
 80059f2:	601a      	str	r2, [r3, #0]
      break;
 80059f4:	e00f      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	4a11      	ldr	r2, [pc, #68]	@ (8005a40 <LSM6DSV16X_GYRO_GetOutputDataRate+0x100>)
 80059fa:	601a      	str	r2, [r3, #0]
      break;
 80059fc:	e00b      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	4a10      	ldr	r2, [pc, #64]	@ (8005a44 <LSM6DSV16X_GYRO_GetOutputDataRate+0x104>)
 8005a02:	601a      	str	r2, [r3, #0]
      break;
 8005a04:	e007      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	4a0f      	ldr	r2, [pc, #60]	@ (8005a48 <LSM6DSV16X_GYRO_GetOutputDataRate+0x108>)
 8005a0a:	601a      	str	r2, [r3, #0]
      break;
 8005a0c:	e003      	b.n	8005a16 <LSM6DSV16X_GYRO_GetOutputDataRate+0xd6>

    default:
      ret = LSM6DSV16X_ERROR;
 8005a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a12:	60fb      	str	r3, [r7, #12]
      break;
 8005a14:	bf00      	nop
  }

  return ret;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40f00000 	.word	0x40f00000
 8005a24:	41700000 	.word	0x41700000
 8005a28:	41f00000 	.word	0x41f00000
 8005a2c:	42700000 	.word	0x42700000
 8005a30:	42f00000 	.word	0x42f00000
 8005a34:	43700000 	.word	0x43700000
 8005a38:	43f00000 	.word	0x43f00000
 8005a3c:	44700000 	.word	0x44700000
 8005a40:	44f00000 	.word	0x44f00000
 8005a44:	45700000 	.word	0x45700000
 8005a48:	45f00000 	.word	0x45f00000

08005a4c <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d106      	bne.n	8005a70 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005a62:	ed97 0a00 	vldr	s0, [r7]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa6a 	bl	8005f40 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	e005      	b.n	8005a7c <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005a70:	ed97 0a00 	vldr	s0, [r7]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 faf9 	bl	800606c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8005a7a:	4603      	mov	r3, r0
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3320      	adds	r3, #32
 8005a96:	f107 020b 	add.w	r2, r7, #11
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 ff1d 	bl	80068dc <lsm6dsv16x_gy_full_scale_get>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	e041      	b.n	8005b32 <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8005aae:	7afb      	ldrb	r3, [r7, #11]
 8005ab0:	2b0c      	cmp	r3, #12
 8005ab2:	d839      	bhi.n	8005b28 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8005ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005af1 	.word	0x08005af1
 8005ac0:	08005af9 	.word	0x08005af9
 8005ac4:	08005b01 	.word	0x08005b01
 8005ac8:	08005b0b 	.word	0x08005b0b
 8005acc:	08005b15 	.word	0x08005b15
 8005ad0:	08005b29 	.word	0x08005b29
 8005ad4:	08005b29 	.word	0x08005b29
 8005ad8:	08005b29 	.word	0x08005b29
 8005adc:	08005b29 	.word	0x08005b29
 8005ae0:	08005b29 	.word	0x08005b29
 8005ae4:	08005b29 	.word	0x08005b29
 8005ae8:	08005b29 	.word	0x08005b29
 8005aec:	08005b1f 	.word	0x08005b1f
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	227d      	movs	r2, #125	@ 0x7d
 8005af4:	601a      	str	r2, [r3, #0]
      break;
 8005af6:	e01b      	b.n	8005b30 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	22fa      	movs	r2, #250	@ 0xfa
 8005afc:	601a      	str	r2, [r3, #0]
      break;
 8005afe:	e017      	b.n	8005b30 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005b06:	601a      	str	r2, [r3, #0]
      break;
 8005b08:	e012      	b.n	8005b30 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b10:	601a      	str	r2, [r3, #0]
      break;
 8005b12:	e00d      	b.n	8005b30 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005b1a:	601a      	str	r2, [r3, #0]
      break;
 8005b1c:	e008      	b.n	8005b30 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005b24:	601a      	str	r2, [r3, #0]
      break;
 8005b26:	e003      	b.n	8005b30 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	60fb      	str	r3, [r7, #12]
      break;
 8005b2e:	bf00      	nop
  }

  return ret;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop

08005b3c <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b7d      	cmp	r3, #125	@ 0x7d
 8005b4a:	dd18      	ble.n	8005b7e <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2bfa      	cmp	r3, #250	@ 0xfa
 8005b50:	dd13      	ble.n	8005b7a <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005b58:	dd0d      	ble.n	8005b76 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b60:	dd07      	ble.n	8005b72 <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005b68:	dc01      	bgt.n	8005b6e <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	e008      	b.n	8005b80 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005b6e:	230c      	movs	r3, #12
 8005b70:	e006      	b.n	8005b80 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005b72:	2303      	movs	r3, #3
 8005b74:	e004      	b.n	8005b80 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e002      	b.n	8005b80 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8005b7e:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8005b80:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3320      	adds	r3, #32
 8005b86:	7bfa      	ldrb	r2, [r7, #15]
 8005b88:	4611      	mov	r1, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fe80 	bl	8006890 <lsm6dsv16x_gy_full_scale_set>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9a:	e000      	b.n	8005b9e <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3320      	adds	r3, #32
 8005bb4:	f107 0208 	add.w	r2, r7, #8
 8005bb8:	4611      	mov	r1, r2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 ff4a 	bl	8006a54 <lsm6dsv16x_angular_rate_raw_get>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	e00c      	b.n	8005be6 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8005bcc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005bd4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005bdc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3320      	adds	r3, #32
 8005bfc:	f107 0210 	add.w	r2, r7, #16
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 ff26 	bl	8006a54 <lsm6dsv16x_angular_rate_raw_get>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <LSM6DSV16X_GYRO_GetAxes+0x26>
  {
    return LSM6DSV16X_ERROR;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	e03c      	b.n	8005c8e <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fe2c 	bl	8005878 <LSM6DSV16X_GYRO_GetSensitivity>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <LSM6DSV16X_GYRO_GetAxes+0x3e>
  {
    return LSM6DSV16X_ERROR;
 8005c26:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2a:	e030      	b.n	8005c8e <LSM6DSV16X_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005c2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c30:	ee07 3a90 	vmov	s15, r3
 8005c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c38:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c44:	ee17 2a90 	vmov	r2, s15
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005c4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c64:	ee17 2a90 	vmov	r2, s15
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005c6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c84:	ee17 2a90 	vmov	r2, s15
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f103 0020 	add.w	r0, r3, #32
 8005cac:	1cba      	adds	r2, r7, #2
 8005cae:	78f9      	ldrb	r1, [r7, #3]
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f000 fab7 	bl	8006224 <lsm6dsv16x_write_reg>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc0:	e000      	b.n	8005cc4 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8005cd8:	edd7 7a00 	vldr	s15, [r7]
 8005cdc:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8005ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce8:	d801      	bhi.n	8005cee <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e06e      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005cee:	edd7 7a00 	vldr	s15, [r7]
 8005cf2:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8005cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	d801      	bhi.n	8005d04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e063      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005d04:	edd7 7a00 	vldr	s15, [r7]
 8005d08:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8005d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d14:	d801      	bhi.n	8005d1a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005d16:	2303      	movs	r3, #3
 8005d18:	e058      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005d1a:	edd7 7a00 	vldr	s15, [r7]
 8005d1e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2a:	d801      	bhi.n	8005d30 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	e04d      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005d30:	edd7 7a00 	vldr	s15, [r7]
 8005d34:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005df4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8005d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d40:	d801      	bhi.n	8005d46 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005d42:	2305      	movs	r3, #5
 8005d44:	e042      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005d46:	edd7 7a00 	vldr	s15, [r7]
 8005d4a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005df8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8005d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d56:	d801      	bhi.n	8005d5c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005d58:	2306      	movs	r3, #6
 8005d5a:	e037      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005d5c:	edd7 7a00 	vldr	s15, [r7]
 8005d60:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005dfc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8005d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6c:	d801      	bhi.n	8005d72 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005d6e:	2307      	movs	r3, #7
 8005d70:	e02c      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005d72:	edd7 7a00 	vldr	s15, [r7]
 8005d76:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8005e00 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8005d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d82:	d801      	bhi.n	8005d88 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005d84:	2308      	movs	r3, #8
 8005d86:	e021      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005d88:	edd7 7a00 	vldr	s15, [r7]
 8005d8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005e04 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8005d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d98:	d801      	bhi.n	8005d9e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005d9a:	2309      	movs	r3, #9
 8005d9c:	e016      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005d9e:	edd7 7a00 	vldr	s15, [r7]
 8005da2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005e08 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8005da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	d801      	bhi.n	8005db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005db0:	230a      	movs	r3, #10
 8005db2:	e00b      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005db4:	edd7 7a00 	vldr	s15, [r7]
 8005db8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005e0c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8005dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc4:	d801      	bhi.n	8005dca <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8005dc6:	230b      	movs	r3, #11
 8005dc8:	e000      	b.n	8005dcc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005dca:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8005dcc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3320      	adds	r3, #32
 8005dd2:	7bfa      	ldrb	r2, [r7, #15]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fa4d 	bl	8006276 <lsm6dsv16x_xl_data_rate_set>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
 8005de6:	e000      	b.n	8005dea <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	42700000 	.word	0x42700000
 8005df8:	42f00000 	.word	0x42f00000
 8005dfc:	43700000 	.word	0x43700000
 8005e00:	43f00000 	.word	0x43f00000
 8005e04:	44700000 	.word	0x44700000
 8005e08:	44f00000 	.word	0x44f00000
 8005e0c:	45700000 	.word	0x45700000

08005e10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8005e1c:	edd7 7a00 	vldr	s15, [r7]
 8005e20:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8005e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2c:	d801      	bhi.n	8005e32 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e06e      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005e32:	edd7 7a00 	vldr	s15, [r7]
 8005e36:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8005e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e42:	d801      	bhi.n	8005e48 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e063      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005e48:	edd7 7a00 	vldr	s15, [r7]
 8005e4c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8005e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e58:	d801      	bhi.n	8005e5e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e058      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005e5e:	edd7 7a00 	vldr	s15, [r7]
 8005e62:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6e:	d801      	bhi.n	8005e74 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005e70:	2304      	movs	r3, #4
 8005e72:	e04d      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005e74:	edd7 7a00 	vldr	s15, [r7]
 8005e78:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005f24 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8005e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e84:	d801      	bhi.n	8005e8a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005e86:	2305      	movs	r3, #5
 8005e88:	e042      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005e8a:	edd7 7a00 	vldr	s15, [r7]
 8005e8e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005f28 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9a:	d801      	bhi.n	8005ea0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005e9c:	2306      	movs	r3, #6
 8005e9e:	e037      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005ea0:	edd7 7a00 	vldr	s15, [r7]
 8005ea4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005f2c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8005ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb0:	d801      	bhi.n	8005eb6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005eb2:	2307      	movs	r3, #7
 8005eb4:	e02c      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005eb6:	edd7 7a00 	vldr	s15, [r7]
 8005eba:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005f30 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8005ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec6:	d801      	bhi.n	8005ecc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	e021      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005ecc:	edd7 7a00 	vldr	s15, [r7]
 8005ed0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005f34 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8005ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	d801      	bhi.n	8005ee2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005ede:	2309      	movs	r3, #9
 8005ee0:	e016      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005ee2:	edd7 7a00 	vldr	s15, [r7]
 8005ee6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005f38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8005eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef2:	d801      	bhi.n	8005ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005ef4:	230a      	movs	r3, #10
 8005ef6:	e00b      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005ef8:	edd7 7a00 	vldr	s15, [r7]
 8005efc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8005f3c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8005f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f08:	d801      	bhi.n	8005f0e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8005f0a:	230b      	movs	r3, #11
 8005f0c:	e000      	b.n	8005f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005f0e:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	42700000 	.word	0x42700000
 8005f28:	42f00000 	.word	0x42f00000
 8005f2c:	43700000 	.word	0x43700000
 8005f30:	43f00000 	.word	0x43f00000
 8005f34:	44700000 	.word	0x44700000
 8005f38:	44f00000 	.word	0x44f00000
 8005f3c:	45700000 	.word	0x45700000

08005f40 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8005f4c:	edd7 7a00 	vldr	s15, [r7]
 8005f50:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8005f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5c:	d801      	bhi.n	8005f62 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e063      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8005f62:	edd7 7a00 	vldr	s15, [r7]
 8005f66:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8005f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f72:	d801      	bhi.n	8005f78 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005f74:	2303      	movs	r3, #3
 8005f76:	e058      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8005f78:	edd7 7a00 	vldr	s15, [r7]
 8005f7c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f88:	d801      	bhi.n	8005f8e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005f8a:	2304      	movs	r3, #4
 8005f8c:	e04d      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8005f8e:	edd7 7a00 	vldr	s15, [r7]
 8005f92:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006050 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9e:	d801      	bhi.n	8005fa4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005fa0:	2305      	movs	r3, #5
 8005fa2:	e042      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8005fa4:	edd7 7a00 	vldr	s15, [r7]
 8005fa8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006054 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb4:	d801      	bhi.n	8005fba <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005fb6:	2306      	movs	r3, #6
 8005fb8:	e037      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8005fba:	edd7 7a00 	vldr	s15, [r7]
 8005fbe:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006058 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8005fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fca:	d801      	bhi.n	8005fd0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005fcc:	2307      	movs	r3, #7
 8005fce:	e02c      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8005fd0:	edd7 7a00 	vldr	s15, [r7]
 8005fd4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800605c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8005fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe0:	d801      	bhi.n	8005fe6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	e021      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8005fe6:	edd7 7a00 	vldr	s15, [r7]
 8005fea:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006060 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 8005fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff6:	d801      	bhi.n	8005ffc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005ff8:	2309      	movs	r3, #9
 8005ffa:	e016      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8005ffc:	edd7 7a00 	vldr	s15, [r7]
 8006000:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006064 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8006004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600c:	d801      	bhi.n	8006012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800600e:	230a      	movs	r3, #10
 8006010:	e00b      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8006012:	edd7 7a00 	vldr	s15, [r7]
 8006016:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006068 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 800601a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800601e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006022:	d801      	bhi.n	8006028 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8006024:	230b      	movs	r3, #11
 8006026:	e000      	b.n	800602a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8006028:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800602a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3320      	adds	r3, #32
 8006030:	7bfa      	ldrb	r2, [r7, #15]
 8006032:	4611      	mov	r1, r2
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fa7f 	bl	8006538 <lsm6dsv16x_gy_data_rate_set>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 8006040:	f04f 33ff 	mov.w	r3, #4294967295
 8006044:	e000      	b.n	8006048 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	42700000 	.word	0x42700000
 8006054:	42f00000 	.word	0x42f00000
 8006058:	43700000 	.word	0x43700000
 800605c:	43f00000 	.word	0x43f00000
 8006060:	44700000 	.word	0x44700000
 8006064:	44f00000 	.word	0x44f00000
 8006068:	45700000 	.word	0x45700000

0800606c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8006078:	edd7 7a00 	vldr	s15, [r7]
 800607c:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8006080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006088:	d801      	bhi.n	800608e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800608a:	2302      	movs	r3, #2
 800608c:	e063      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800608e:	edd7 7a00 	vldr	s15, [r7]
 8006092:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8006096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609e:	d801      	bhi.n	80060a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80060a0:	2303      	movs	r3, #3
 80060a2:	e058      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80060a4:	edd7 7a00 	vldr	s15, [r7]
 80060a8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80060ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b4:	d801      	bhi.n	80060ba <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80060b6:	2304      	movs	r3, #4
 80060b8:	e04d      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80060ba:	edd7 7a00 	vldr	s15, [r7]
 80060be:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800616c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80060c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ca:	d801      	bhi.n	80060d0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80060cc:	2305      	movs	r3, #5
 80060ce:	e042      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80060d0:	edd7 7a00 	vldr	s15, [r7]
 80060d4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006170 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 80060d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e0:	d801      	bhi.n	80060e6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80060e2:	2306      	movs	r3, #6
 80060e4:	e037      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80060e6:	edd7 7a00 	vldr	s15, [r7]
 80060ea:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006174 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 80060ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f6:	d801      	bhi.n	80060fc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80060f8:	2307      	movs	r3, #7
 80060fa:	e02c      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80060fc:	edd7 7a00 	vldr	s15, [r7]
 8006100:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006178 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8006104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610c:	d801      	bhi.n	8006112 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800610e:	2308      	movs	r3, #8
 8006110:	e021      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8006112:	edd7 7a00 	vldr	s15, [r7]
 8006116:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800617c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 800611a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800611e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006122:	d801      	bhi.n	8006128 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006124:	2309      	movs	r3, #9
 8006126:	e016      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8006128:	edd7 7a00 	vldr	s15, [r7]
 800612c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006180 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 8006130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006138:	d801      	bhi.n	800613e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800613a:	230a      	movs	r3, #10
 800613c:	e00b      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800613e:	edd7 7a00 	vldr	s15, [r7]
 8006142:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8006184 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 8006146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800614a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614e:	d801      	bhi.n	8006154 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006150:	230b      	movs	r3, #11
 8006152:	e000      	b.n	8006156 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8006154:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	42700000 	.word	0x42700000
 8006170:	42f00000 	.word	0x42f00000
 8006174:	43700000 	.word	0x43700000
 8006178:	43f00000 	.word	0x43f00000
 800617c:	44700000 	.word	0x44700000
 8006180:	44f00000 	.word	0x44f00000
 8006184:	45700000 	.word	0x45700000

08006188 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	461a      	mov	r2, r3
 8006194:	460b      	mov	r3, r1
 8006196:	72fb      	strb	r3, [r7, #11]
 8006198:	4613      	mov	r3, r2
 800619a:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	695c      	ldr	r4, [r3, #20]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	7b1b      	ldrb	r3, [r3, #12]
 80061a8:	4618      	mov	r0, r3
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	b299      	uxth	r1, r3
 80061ae:	893b      	ldrh	r3, [r7, #8]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	47a0      	blx	r4
 80061b4:	4603      	mov	r3, r0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd90      	pop	{r4, r7, pc}

080061be <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80061be:	b590      	push	{r4, r7, lr}
 80061c0:	b087      	sub	sp, #28
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	461a      	mov	r2, r3
 80061ca:	460b      	mov	r3, r1
 80061cc:	72fb      	strb	r3, [r7, #11]
 80061ce:	4613      	mov	r3, r2
 80061d0:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	691c      	ldr	r4, [r3, #16]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	7b1b      	ldrb	r3, [r3, #12]
 80061de:	4618      	mov	r0, r3
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	b299      	uxth	r1, r3
 80061e4:	893b      	ldrh	r3, [r7, #8]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	47a0      	blx	r4
 80061ea:	4603      	mov	r3, r0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd90      	pop	{r4, r7, pc}

080061f4 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	461a      	mov	r2, r3
 8006200:	460b      	mov	r3, r1
 8006202:	72fb      	strb	r3, [r7, #11]
 8006204:	4613      	mov	r3, r2
 8006206:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685c      	ldr	r4, [r3, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68d8      	ldr	r0, [r3, #12]
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	7af9      	ldrb	r1, [r7, #11]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	47a0      	blx	r4
 8006218:	6178      	str	r0, [r7, #20]

  return ret;
 800621a:	697b      	ldr	r3, [r7, #20]
}
 800621c:	4618      	mov	r0, r3
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	bd90      	pop	{r4, r7, pc}

08006224 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	461a      	mov	r2, r3
 8006230:	460b      	mov	r3, r1
 8006232:	72fb      	strb	r3, [r7, #11]
 8006234:	4613      	mov	r3, r2
 8006236:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681c      	ldr	r4, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68d8      	ldr	r0, [r3, #12]
 8006240:	893b      	ldrh	r3, [r7, #8]
 8006242:	7af9      	ldrb	r1, [r7, #11]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	47a0      	blx	r4
 8006248:	6178      	str	r0, [r7, #20]

  return ret;
 800624a:	697b      	ldr	r3, [r7, #20]
}
 800624c:	4618      	mov	r0, r3
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	bd90      	pop	{r4, r7, pc}

08006254 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800625e:	2301      	movs	r3, #1
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	210f      	movs	r1, #15
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff ffc5 	bl	80061f4 <lsm6dsv16x_read_reg>
 800626a:	60f8      	str	r0, [r7, #12]

  return ret;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b086      	sub	sp, #24
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8006282:	f107 0210 	add.w	r2, r7, #16
 8006286:	2301      	movs	r3, #1
 8006288:	2110      	movs	r1, #16
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ffb2 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006290:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <lsm6dsv16x_xl_data_rate_set+0x26>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	e039      	b.n	8006310 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	7c3b      	ldrb	r3, [r7, #16]
 80062a6:	f362 0303 	bfi	r3, r2, #0, #4
 80062aa:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80062ac:	f107 0210 	add.w	r2, r7, #16
 80062b0:	2301      	movs	r3, #1
 80062b2:	2110      	movs	r1, #16
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ffb5 	bl	8006224 <lsm6dsv16x_write_reg>
 80062ba:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <lsm6dsv16x_xl_data_rate_set+0x50>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	e024      	b.n	8006310 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d01d      	beq.n	800630e <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80062d2:	f107 020c 	add.w	r2, r7, #12
 80062d6:	2301      	movs	r3, #1
 80062d8:	2162      	movs	r1, #98	@ 0x62
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff8a 	bl	80061f4 <lsm6dsv16x_read_reg>
 80062e0:	4602      	mov	r2, r0
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4413      	add	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	7b3b      	ldrb	r3, [r7, #12]
 80062f2:	f362 0301 	bfi	r3, r2, #0, #2
 80062f6:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80062f8:	f107 020c 	add.w	r2, r7, #12
 80062fc:	2301      	movs	r3, #1
 80062fe:	2162      	movs	r1, #98	@ 0x62
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff8f 	bl	8006224 <lsm6dsv16x_write_reg>
 8006306:	4602      	mov	r2, r0
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800630e:	697b      	ldr	r3, [r7, #20]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8006322:	f107 0210 	add.w	r2, r7, #16
 8006326:	2301      	movs	r3, #1
 8006328:	2110      	movs	r1, #16
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff ff62 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006330:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8006332:	f107 020c 	add.w	r2, r7, #12
 8006336:	2301      	movs	r3, #1
 8006338:	2162      	movs	r1, #98	@ 0x62
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff ff5a 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006340:	4602      	mov	r2, r0
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4413      	add	r3, r2
 8006346:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <lsm6dsv16x_xl_data_rate_get+0x3a>
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	e0ed      	b.n	800652e <lsm6dsv16x_xl_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 8006352:	7b3b      	ldrb	r3, [r7, #12]
 8006354:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006358:	b2db      	uxtb	r3, r3
 800635a:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 800635c:	7c3b      	ldrb	r3, [r7, #16]
 800635e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b0c      	cmp	r3, #12
 8006366:	f200 80dd 	bhi.w	8006524 <lsm6dsv16x_xl_data_rate_get+0x20c>
 800636a:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <lsm6dsv16x_xl_data_rate_get+0x58>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063ad 	.word	0x080063ad
 8006378:	080063b5 	.word	0x080063b5
 800637c:	080063bd 	.word	0x080063bd
 8006380:	080063e1 	.word	0x080063e1
 8006384:	08006405 	.word	0x08006405
 8006388:	08006429 	.word	0x08006429
 800638c:	0800644d 	.word	0x0800644d
 8006390:	08006471 	.word	0x08006471
 8006394:	08006495 	.word	0x08006495
 8006398:	080064b9 	.word	0x080064b9
 800639c:	080064dd 	.word	0x080064dd
 80063a0:	08006501 	.word	0x08006501
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
      break;
 80063aa:	e0bf      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
      break;
 80063b2:	e0bb      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2202      	movs	r2, #2
 80063b8:	701a      	strb	r2, [r3, #0]
      break;
 80063ba:	e0b7      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 80063bc:	7cfb      	ldrb	r3, [r7, #19]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d005      	beq.n	80063ce <lsm6dsv16x_xl_data_rate_get+0xb6>
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d007      	beq.n	80063d6 <lsm6dsv16x_xl_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2203      	movs	r2, #3
 80063ca:	701a      	strb	r2, [r3, #0]
        break;
 80063cc:	e007      	b.n	80063de <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2213      	movs	r2, #19
 80063d2:	701a      	strb	r2, [r3, #0]
        break;
 80063d4:	e003      	b.n	80063de <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2223      	movs	r2, #35	@ 0x23
 80063da:	701a      	strb	r2, [r3, #0]
        break;
 80063dc:	bf00      	nop
      }
      break;
 80063de:	e0a5      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 80063e0:	7cfb      	ldrb	r3, [r7, #19]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d005      	beq.n	80063f2 <lsm6dsv16x_xl_data_rate_get+0xda>
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d007      	beq.n	80063fa <lsm6dsv16x_xl_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2204      	movs	r2, #4
 80063ee:	701a      	strb	r2, [r3, #0]
        break;
 80063f0:	e007      	b.n	8006402 <lsm6dsv16x_xl_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2214      	movs	r2, #20
 80063f6:	701a      	strb	r2, [r3, #0]
        break;
 80063f8:	e003      	b.n	8006402 <lsm6dsv16x_xl_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2224      	movs	r2, #36	@ 0x24
 80063fe:	701a      	strb	r2, [r3, #0]
        break;
 8006400:	bf00      	nop
      }
      break;
 8006402:	e093      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 8006404:	7cfb      	ldrb	r3, [r7, #19]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d005      	beq.n	8006416 <lsm6dsv16x_xl_data_rate_get+0xfe>
 800640a:	2b02      	cmp	r3, #2
 800640c:	d007      	beq.n	800641e <lsm6dsv16x_xl_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2205      	movs	r2, #5
 8006412:	701a      	strb	r2, [r3, #0]
        break;
 8006414:	e007      	b.n	8006426 <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2215      	movs	r2, #21
 800641a:	701a      	strb	r2, [r3, #0]
        break;
 800641c:	e003      	b.n	8006426 <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2225      	movs	r2, #37	@ 0x25
 8006422:	701a      	strb	r2, [r3, #0]
        break;
 8006424:	bf00      	nop
      }
      break;
 8006426:	e081      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 8006428:	7cfb      	ldrb	r3, [r7, #19]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d005      	beq.n	800643a <lsm6dsv16x_xl_data_rate_get+0x122>
 800642e:	2b02      	cmp	r3, #2
 8006430:	d007      	beq.n	8006442 <lsm6dsv16x_xl_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2206      	movs	r2, #6
 8006436:	701a      	strb	r2, [r3, #0]
        break;
 8006438:	e007      	b.n	800644a <lsm6dsv16x_xl_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2216      	movs	r2, #22
 800643e:	701a      	strb	r2, [r3, #0]
        break;
 8006440:	e003      	b.n	800644a <lsm6dsv16x_xl_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2226      	movs	r2, #38	@ 0x26
 8006446:	701a      	strb	r2, [r3, #0]
        break;
 8006448:	bf00      	nop
      }
      break;
 800644a:	e06f      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 800644c:	7cfb      	ldrb	r3, [r7, #19]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d005      	beq.n	800645e <lsm6dsv16x_xl_data_rate_get+0x146>
 8006452:	2b02      	cmp	r3, #2
 8006454:	d007      	beq.n	8006466 <lsm6dsv16x_xl_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2207      	movs	r2, #7
 800645a:	701a      	strb	r2, [r3, #0]
        break;
 800645c:	e007      	b.n	800646e <lsm6dsv16x_xl_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2217      	movs	r2, #23
 8006462:	701a      	strb	r2, [r3, #0]
        break;
 8006464:	e003      	b.n	800646e <lsm6dsv16x_xl_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2227      	movs	r2, #39	@ 0x27
 800646a:	701a      	strb	r2, [r3, #0]
        break;
 800646c:	bf00      	nop
      }
      break;
 800646e:	e05d      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 8006470:	7cfb      	ldrb	r3, [r7, #19]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d005      	beq.n	8006482 <lsm6dsv16x_xl_data_rate_get+0x16a>
 8006476:	2b02      	cmp	r3, #2
 8006478:	d007      	beq.n	800648a <lsm6dsv16x_xl_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2208      	movs	r2, #8
 800647e:	701a      	strb	r2, [r3, #0]
        break;
 8006480:	e007      	b.n	8006492 <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2218      	movs	r2, #24
 8006486:	701a      	strb	r2, [r3, #0]
        break;
 8006488:	e003      	b.n	8006492 <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2228      	movs	r2, #40	@ 0x28
 800648e:	701a      	strb	r2, [r3, #0]
        break;
 8006490:	bf00      	nop
      }
      break;
 8006492:	e04b      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 8006494:	7cfb      	ldrb	r3, [r7, #19]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d005      	beq.n	80064a6 <lsm6dsv16x_xl_data_rate_get+0x18e>
 800649a:	2b02      	cmp	r3, #2
 800649c:	d007      	beq.n	80064ae <lsm6dsv16x_xl_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2209      	movs	r2, #9
 80064a2:	701a      	strb	r2, [r3, #0]
        break;
 80064a4:	e007      	b.n	80064b6 <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2219      	movs	r2, #25
 80064aa:	701a      	strb	r2, [r3, #0]
        break;
 80064ac:	e003      	b.n	80064b6 <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2229      	movs	r2, #41	@ 0x29
 80064b2:	701a      	strb	r2, [r3, #0]
        break;
 80064b4:	bf00      	nop
      }
      break;
 80064b6:	e039      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 80064b8:	7cfb      	ldrb	r3, [r7, #19]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d005      	beq.n	80064ca <lsm6dsv16x_xl_data_rate_get+0x1b2>
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d007      	beq.n	80064d2 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	220a      	movs	r2, #10
 80064c6:	701a      	strb	r2, [r3, #0]
        break;
 80064c8:	e007      	b.n	80064da <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	221a      	movs	r2, #26
 80064ce:	701a      	strb	r2, [r3, #0]
        break;
 80064d0:	e003      	b.n	80064da <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	222a      	movs	r2, #42	@ 0x2a
 80064d6:	701a      	strb	r2, [r3, #0]
        break;
 80064d8:	bf00      	nop
      }
      break;
 80064da:	e027      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 80064dc:	7cfb      	ldrb	r3, [r7, #19]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d005      	beq.n	80064ee <lsm6dsv16x_xl_data_rate_get+0x1d6>
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d007      	beq.n	80064f6 <lsm6dsv16x_xl_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	220b      	movs	r2, #11
 80064ea:	701a      	strb	r2, [r3, #0]
        break;
 80064ec:	e007      	b.n	80064fe <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	221b      	movs	r2, #27
 80064f2:	701a      	strb	r2, [r3, #0]
        break;
 80064f4:	e003      	b.n	80064fe <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	222b      	movs	r2, #43	@ 0x2b
 80064fa:	701a      	strb	r2, [r3, #0]
        break;
 80064fc:	bf00      	nop
      }
      break;
 80064fe:	e015      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 8006500:	7cfb      	ldrb	r3, [r7, #19]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d005      	beq.n	8006512 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 8006506:	2b02      	cmp	r3, #2
 8006508:	d007      	beq.n	800651a <lsm6dsv16x_xl_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	220c      	movs	r2, #12
 800650e:	701a      	strb	r2, [r3, #0]
        break;
 8006510:	e007      	b.n	8006522 <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	221c      	movs	r2, #28
 8006516:	701a      	strb	r2, [r3, #0]
        break;
 8006518:	e003      	b.n	8006522 <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	222c      	movs	r2, #44	@ 0x2c
 800651e:	701a      	strb	r2, [r3, #0]
        break;
 8006520:	bf00      	nop
      }
      break;
 8006522:	e003      	b.n	800652c <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
      break;
 800652a:	bf00      	nop
  }

  return ret;
 800652c:	697b      	ldr	r3, [r7, #20]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop

08006538 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8006544:	f107 0210 	add.w	r2, r7, #16
 8006548:	2301      	movs	r3, #1
 800654a:	2111      	movs	r1, #17
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff fe51 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006552:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	b2da      	uxtb	r2, r3
 800655c:	7c3b      	ldrb	r3, [r7, #16]
 800655e:	f362 0303 	bfi	r3, r2, #0, #4
 8006562:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8006564:	f107 0210 	add.w	r2, r7, #16
 8006568:	2301      	movs	r3, #1
 800656a:	2111      	movs	r1, #17
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff fe59 	bl	8006224 <lsm6dsv16x_write_reg>
 8006572:	4602      	mov	r2, r0
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	4413      	add	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	e024      	b.n	80065ce <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	091b      	lsrs	r3, r3, #4
 8006588:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800658a:	7cfb      	ldrb	r3, [r7, #19]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01d      	beq.n	80065cc <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8006590:	f107 020c 	add.w	r2, r7, #12
 8006594:	2301      	movs	r3, #1
 8006596:	2162      	movs	r1, #98	@ 0x62
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fe2b 	bl	80061f4 <lsm6dsv16x_read_reg>
 800659e:	4602      	mov	r2, r0
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	4413      	add	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80065a6:	7cfb      	ldrb	r3, [r7, #19]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	7b3b      	ldrb	r3, [r7, #12]
 80065b0:	f362 0301 	bfi	r3, r2, #0, #2
 80065b4:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80065b6:	f107 020c 	add.w	r2, r7, #12
 80065ba:	2301      	movs	r3, #1
 80065bc:	2162      	movs	r1, #98	@ 0x62
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fe30 	bl	8006224 <lsm6dsv16x_write_reg>
 80065c4:	4602      	mov	r2, r0
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	4413      	add	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80065cc:	697b      	ldr	r3, [r7, #20]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80065e2:	f107 0210 	add.w	r2, r7, #16
 80065e6:	2301      	movs	r3, #1
 80065e8:	2111      	movs	r1, #17
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fe02 	bl	80061f4 <lsm6dsv16x_read_reg>
 80065f0:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80065f2:	f107 020c 	add.w	r2, r7, #12
 80065f6:	2301      	movs	r3, #1
 80065f8:	2162      	movs	r1, #98	@ 0x62
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fdfa 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006600:	4602      	mov	r2, r0
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <lsm6dsv16x_gy_data_rate_get+0x3a>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	e0ed      	b.n	80067ee <lsm6dsv16x_gy_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 8006612:	7b3b      	ldrb	r3, [r7, #12]
 8006614:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006618:	b2db      	uxtb	r3, r3
 800661a:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 800661c:	7c3b      	ldrb	r3, [r7, #16]
 800661e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b0c      	cmp	r3, #12
 8006626:	f200 80dd 	bhi.w	80067e4 <lsm6dsv16x_gy_data_rate_get+0x20c>
 800662a:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <lsm6dsv16x_gy_data_rate_get+0x58>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	08006665 	.word	0x08006665
 8006634:	0800666d 	.word	0x0800666d
 8006638:	08006675 	.word	0x08006675
 800663c:	0800667d 	.word	0x0800667d
 8006640:	080066a1 	.word	0x080066a1
 8006644:	080066c5 	.word	0x080066c5
 8006648:	080066e9 	.word	0x080066e9
 800664c:	0800670d 	.word	0x0800670d
 8006650:	08006731 	.word	0x08006731
 8006654:	08006755 	.word	0x08006755
 8006658:	08006779 	.word	0x08006779
 800665c:	0800679d 	.word	0x0800679d
 8006660:	080067c1 	.word	0x080067c1
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
      break;
 800666a:	e0bf      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]
      break;
 8006672:	e0bb      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2202      	movs	r2, #2
 8006678:	701a      	strb	r2, [r3, #0]
      break;
 800667a:	e0b7      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800667c:	7cfb      	ldrb	r3, [r7, #19]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d005      	beq.n	800668e <lsm6dsv16x_gy_data_rate_get+0xb6>
 8006682:	2b02      	cmp	r3, #2
 8006684:	d007      	beq.n	8006696 <lsm6dsv16x_gy_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2203      	movs	r2, #3
 800668a:	701a      	strb	r2, [r3, #0]
        break;
 800668c:	e007      	b.n	800669e <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2213      	movs	r2, #19
 8006692:	701a      	strb	r2, [r3, #0]
        break;
 8006694:	e003      	b.n	800669e <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2223      	movs	r2, #35	@ 0x23
 800669a:	701a      	strb	r2, [r3, #0]
        break;
 800669c:	bf00      	nop
      }
      break;
 800669e:	e0a5      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 80066a0:	7cfb      	ldrb	r3, [r7, #19]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d005      	beq.n	80066b2 <lsm6dsv16x_gy_data_rate_get+0xda>
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d007      	beq.n	80066ba <lsm6dsv16x_gy_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2204      	movs	r2, #4
 80066ae:	701a      	strb	r2, [r3, #0]
        break;
 80066b0:	e007      	b.n	80066c2 <lsm6dsv16x_gy_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2214      	movs	r2, #20
 80066b6:	701a      	strb	r2, [r3, #0]
        break;
 80066b8:	e003      	b.n	80066c2 <lsm6dsv16x_gy_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2224      	movs	r2, #36	@ 0x24
 80066be:	701a      	strb	r2, [r3, #0]
        break;
 80066c0:	bf00      	nop
      }
      break;
 80066c2:	e093      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d005      	beq.n	80066d6 <lsm6dsv16x_gy_data_rate_get+0xfe>
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d007      	beq.n	80066de <lsm6dsv16x_gy_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2205      	movs	r2, #5
 80066d2:	701a      	strb	r2, [r3, #0]
        break;
 80066d4:	e007      	b.n	80066e6 <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2215      	movs	r2, #21
 80066da:	701a      	strb	r2, [r3, #0]
        break;
 80066dc:	e003      	b.n	80066e6 <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2225      	movs	r2, #37	@ 0x25
 80066e2:	701a      	strb	r2, [r3, #0]
        break;
 80066e4:	bf00      	nop
      }
      break;
 80066e6:	e081      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 80066e8:	7cfb      	ldrb	r3, [r7, #19]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d005      	beq.n	80066fa <lsm6dsv16x_gy_data_rate_get+0x122>
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d007      	beq.n	8006702 <lsm6dsv16x_gy_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2206      	movs	r2, #6
 80066f6:	701a      	strb	r2, [r3, #0]
        break;
 80066f8:	e007      	b.n	800670a <lsm6dsv16x_gy_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2216      	movs	r2, #22
 80066fe:	701a      	strb	r2, [r3, #0]
        break;
 8006700:	e003      	b.n	800670a <lsm6dsv16x_gy_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2226      	movs	r2, #38	@ 0x26
 8006706:	701a      	strb	r2, [r3, #0]
        break;
 8006708:	bf00      	nop
      }
      break;
 800670a:	e06f      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 800670c:	7cfb      	ldrb	r3, [r7, #19]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d005      	beq.n	800671e <lsm6dsv16x_gy_data_rate_get+0x146>
 8006712:	2b02      	cmp	r3, #2
 8006714:	d007      	beq.n	8006726 <lsm6dsv16x_gy_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2207      	movs	r2, #7
 800671a:	701a      	strb	r2, [r3, #0]
        break;
 800671c:	e007      	b.n	800672e <lsm6dsv16x_gy_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2217      	movs	r2, #23
 8006722:	701a      	strb	r2, [r3, #0]
        break;
 8006724:	e003      	b.n	800672e <lsm6dsv16x_gy_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2227      	movs	r2, #39	@ 0x27
 800672a:	701a      	strb	r2, [r3, #0]
        break;
 800672c:	bf00      	nop
      }
      break;
 800672e:	e05d      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 8006730:	7cfb      	ldrb	r3, [r7, #19]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d005      	beq.n	8006742 <lsm6dsv16x_gy_data_rate_get+0x16a>
 8006736:	2b02      	cmp	r3, #2
 8006738:	d007      	beq.n	800674a <lsm6dsv16x_gy_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2208      	movs	r2, #8
 800673e:	701a      	strb	r2, [r3, #0]
        break;
 8006740:	e007      	b.n	8006752 <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2218      	movs	r2, #24
 8006746:	701a      	strb	r2, [r3, #0]
        break;
 8006748:	e003      	b.n	8006752 <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2228      	movs	r2, #40	@ 0x28
 800674e:	701a      	strb	r2, [r3, #0]
        break;
 8006750:	bf00      	nop
      }
      break;
 8006752:	e04b      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 8006754:	7cfb      	ldrb	r3, [r7, #19]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d005      	beq.n	8006766 <lsm6dsv16x_gy_data_rate_get+0x18e>
 800675a:	2b02      	cmp	r3, #2
 800675c:	d007      	beq.n	800676e <lsm6dsv16x_gy_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2209      	movs	r2, #9
 8006762:	701a      	strb	r2, [r3, #0]
        break;
 8006764:	e007      	b.n	8006776 <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2219      	movs	r2, #25
 800676a:	701a      	strb	r2, [r3, #0]
        break;
 800676c:	e003      	b.n	8006776 <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2229      	movs	r2, #41	@ 0x29
 8006772:	701a      	strb	r2, [r3, #0]
        break;
 8006774:	bf00      	nop
      }
      break;
 8006776:	e039      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 8006778:	7cfb      	ldrb	r3, [r7, #19]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d005      	beq.n	800678a <lsm6dsv16x_gy_data_rate_get+0x1b2>
 800677e:	2b02      	cmp	r3, #2
 8006780:	d007      	beq.n	8006792 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	220a      	movs	r2, #10
 8006786:	701a      	strb	r2, [r3, #0]
        break;
 8006788:	e007      	b.n	800679a <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	221a      	movs	r2, #26
 800678e:	701a      	strb	r2, [r3, #0]
        break;
 8006790:	e003      	b.n	800679a <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	222a      	movs	r2, #42	@ 0x2a
 8006796:	701a      	strb	r2, [r3, #0]
        break;
 8006798:	bf00      	nop
      }
      break;
 800679a:	e027      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 800679c:	7cfb      	ldrb	r3, [r7, #19]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d005      	beq.n	80067ae <lsm6dsv16x_gy_data_rate_get+0x1d6>
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d007      	beq.n	80067b6 <lsm6dsv16x_gy_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	220b      	movs	r2, #11
 80067aa:	701a      	strb	r2, [r3, #0]
        break;
 80067ac:	e007      	b.n	80067be <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	221b      	movs	r2, #27
 80067b2:	701a      	strb	r2, [r3, #0]
        break;
 80067b4:	e003      	b.n	80067be <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	222b      	movs	r2, #43	@ 0x2b
 80067ba:	701a      	strb	r2, [r3, #0]
        break;
 80067bc:	bf00      	nop
      }
      break;
 80067be:	e015      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 80067c0:	7cfb      	ldrb	r3, [r7, #19]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d005      	beq.n	80067d2 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d007      	beq.n	80067da <lsm6dsv16x_gy_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	220c      	movs	r2, #12
 80067ce:	701a      	strb	r2, [r3, #0]
        break;
 80067d0:	e007      	b.n	80067e2 <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	221c      	movs	r2, #28
 80067d6:	701a      	strb	r2, [r3, #0]
        break;
 80067d8:	e003      	b.n	80067e2 <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	222c      	movs	r2, #44	@ 0x2c
 80067de:	701a      	strb	r2, [r3, #0]
        break;
 80067e0:	bf00      	nop
      }
      break;
 80067e2:	e003      	b.n	80067ec <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]
      break;
 80067ea:	bf00      	nop
  }

  return ret;
 80067ec:	697b      	ldr	r3, [r7, #20]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop

080067f8 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8006804:	f107 0208 	add.w	r2, r7, #8
 8006808:	2301      	movs	r3, #1
 800680a:	2112      	movs	r1, #18
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff fcf1 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006812:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	7a3b      	ldrb	r3, [r7, #8]
 8006824:	f362 0382 	bfi	r3, r2, #2, #1
 8006828:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800682a:	f107 0208 	add.w	r2, r7, #8
 800682e:	2301      	movs	r3, #1
 8006830:	2112      	movs	r1, #18
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fcf6 	bl	8006224 <lsm6dsv16x_write_reg>
 8006838:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800683a:	68fb      	ldr	r3, [r7, #12]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8006850:	f107 0208 	add.w	r2, r7, #8
 8006854:	2301      	movs	r3, #1
 8006856:	2112      	movs	r1, #18
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff fccb 	bl	80061f4 <lsm6dsv16x_read_reg>
 800685e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	b2da      	uxtb	r2, r3
 800686e:	7a3b      	ldrb	r3, [r7, #8]
 8006870:	f362 1386 	bfi	r3, r2, #6, #1
 8006874:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8006876:	f107 0208 	add.w	r2, r7, #8
 800687a:	2301      	movs	r3, #1
 800687c:	2112      	movs	r1, #18
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff fcd0 	bl	8006224 <lsm6dsv16x_write_reg>
 8006884:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006886:	68fb      	ldr	r3, [r7, #12]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800689c:	f107 0208 	add.w	r2, r7, #8
 80068a0:	2301      	movs	r3, #1
 80068a2:	2115      	movs	r1, #21
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff fca5 	bl	80061f4 <lsm6dsv16x_read_reg>
 80068aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10f      	bne.n	80068d2 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	7a3b      	ldrb	r3, [r7, #8]
 80068bc:	f362 0303 	bfi	r3, r2, #0, #4
 80068c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80068c2:	f107 0208 	add.w	r2, r7, #8
 80068c6:	2301      	movs	r3, #1
 80068c8:	2115      	movs	r1, #21
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fcaa 	bl	8006224 <lsm6dsv16x_write_reg>
 80068d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068d2:	68fb      	ldr	r3, [r7, #12]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80068e6:	f107 0208 	add.w	r2, r7, #8
 80068ea:	2301      	movs	r3, #1
 80068ec:	2115      	movs	r1, #21
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fc80 	bl	80061f4 <lsm6dsv16x_read_reg>
 80068f4:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <lsm6dsv16x_gy_full_scale_get+0x24>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	e040      	b.n	8006982 <lsm6dsv16x_gy_full_scale_get+0xa6>

  switch (ctrl6.fs_g)
 8006900:	7a3b      	ldrb	r3, [r7, #8]
 8006902:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b0c      	cmp	r3, #12
 800690a:	d835      	bhi.n	8006978 <lsm6dsv16x_gy_full_scale_get+0x9c>
 800690c:	a201      	add	r2, pc, #4	@ (adr r2, 8006914 <lsm6dsv16x_gy_full_scale_get+0x38>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006949 	.word	0x08006949
 8006918:	08006951 	.word	0x08006951
 800691c:	08006959 	.word	0x08006959
 8006920:	08006961 	.word	0x08006961
 8006924:	08006969 	.word	0x08006969
 8006928:	08006979 	.word	0x08006979
 800692c:	08006979 	.word	0x08006979
 8006930:	08006979 	.word	0x08006979
 8006934:	08006979 	.word	0x08006979
 8006938:	08006979 	.word	0x08006979
 800693c:	08006979 	.word	0x08006979
 8006940:	08006979 	.word	0x08006979
 8006944:	08006971 	.word	0x08006971
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
      break;
 800694e:	e017      	b.n	8006980 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2201      	movs	r2, #1
 8006954:	701a      	strb	r2, [r3, #0]
      break;
 8006956:	e013      	b.n	8006980 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2202      	movs	r2, #2
 800695c:	701a      	strb	r2, [r3, #0]
      break;
 800695e:	e00f      	b.n	8006980 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2203      	movs	r2, #3
 8006964:	701a      	strb	r2, [r3, #0]
      break;
 8006966:	e00b      	b.n	8006980 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2204      	movs	r2, #4
 800696c:	701a      	strb	r2, [r3, #0]
      break;
 800696e:	e007      	b.n	8006980 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	220c      	movs	r2, #12
 8006974:	701a      	strb	r2, [r3, #0]
      break;
 8006976:	e003      	b.n	8006980 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
      break;
 800697e:	bf00      	nop
  }

  return ret;
 8006980:	68fb      	ldr	r3, [r7, #12]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop

0800698c <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8006998:	f107 0208 	add.w	r2, r7, #8
 800699c:	2301      	movs	r3, #1
 800699e:	2117      	movs	r1, #23
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff fc27 	bl	80061f4 <lsm6dsv16x_read_reg>
 80069a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10f      	bne.n	80069ce <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	7a3b      	ldrb	r3, [r7, #8]
 80069b8:	f362 0301 	bfi	r3, r2, #0, #2
 80069bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80069be:	f107 0208 	add.w	r2, r7, #8
 80069c2:	2301      	movs	r3, #1
 80069c4:	2117      	movs	r1, #23
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fc2c 	bl	8006224 <lsm6dsv16x_write_reg>
 80069cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069ce:	68fb      	ldr	r3, [r7, #12]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80069e2:	f107 0208 	add.w	r2, r7, #8
 80069e6:	2301      	movs	r3, #1
 80069e8:	2117      	movs	r1, #23
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fc02 	bl	80061f4 <lsm6dsv16x_read_reg>
 80069f0:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <lsm6dsv16x_xl_full_scale_get+0x24>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	e026      	b.n	8006a4a <lsm6dsv16x_xl_full_scale_get+0x72>

  switch (ctrl8.fs_xl)
 80069fc:	7a3b      	ldrb	r3, [r7, #8]
 80069fe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d81b      	bhi.n	8006a40 <lsm6dsv16x_xl_full_scale_get+0x68>
 8006a08:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a21 	.word	0x08006a21
 8006a14:	08006a29 	.word	0x08006a29
 8006a18:	08006a31 	.word	0x08006a31
 8006a1c:	08006a39 	.word	0x08006a39
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]
      break;
 8006a26:	e00f      	b.n	8006a48 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	701a      	strb	r2, [r3, #0]
      break;
 8006a2e:	e00b      	b.n	8006a48 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2202      	movs	r2, #2
 8006a34:	701a      	strb	r2, [r3, #0]
      break;
 8006a36:	e007      	b.n	8006a48 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	701a      	strb	r2, [r3, #0]
      break;
 8006a3e:	e003      	b.n	8006a48 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
      break;
 8006a46:	bf00      	nop
  }

  return ret;
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop

08006a54 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8006a5e:	f107 020c 	add.w	r2, r7, #12
 8006a62:	2306      	movs	r3, #6
 8006a64:	2122      	movs	r1, #34	@ 0x22
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fbc4 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006a6c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <lsm6dsv16x_angular_rate_raw_get+0x24>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	e036      	b.n	8006ae6 <lsm6dsv16x_angular_rate_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8006a78:	7b7b      	ldrb	r3, [r7, #13]
 8006a7a:	b21a      	sxth	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	7b3a      	ldrb	r2, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	b21a      	sxth	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006a98:	7bfa      	ldrb	r2, [r7, #15]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	b212      	sxth	r2, r2
 8006aa0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	7bba      	ldrb	r2, [r7, #14]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	3302      	adds	r3, #2
 8006aba:	b212      	sxth	r2, r2
 8006abc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006abe:	7c7a      	ldrb	r2, [r7, #17]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	b212      	sxth	r2, r2
 8006ac6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	3304      	adds	r3, #4
 8006acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	7c3a      	ldrb	r2, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	b212      	sxth	r2, r2
 8006ae2:	801a      	strh	r2, [r3, #0]

  return ret;
 8006ae4:	697b      	ldr	r3, [r7, #20]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8006af8:	f107 020c 	add.w	r2, r7, #12
 8006afc:	2306      	movs	r3, #6
 8006afe:	2128      	movs	r1, #40	@ 0x28
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fb77 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006b06:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <lsm6dsv16x_acceleration_raw_get+0x24>
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	e036      	b.n	8006b80 <lsm6dsv16x_acceleration_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8006b12:	7b7b      	ldrb	r3, [r7, #13]
 8006b14:	b21a      	sxth	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	7b3a      	ldrb	r2, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	b21a      	sxth	r2, r3
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006b32:	7bfa      	ldrb	r2, [r7, #15]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	3302      	adds	r3, #2
 8006b38:	b212      	sxth	r2, r2
 8006b3a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	3302      	adds	r3, #2
 8006b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	7bba      	ldrb	r2, [r7, #14]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	3302      	adds	r3, #2
 8006b54:	b212      	sxth	r2, r2
 8006b56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006b58:	7c7a      	ldrb	r2, [r7, #17]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	b212      	sxth	r2, r2
 8006b60:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	3304      	adds	r3, #4
 8006b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	7c3a      	ldrb	r2, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	b212      	sxth	r2, r2
 8006b7c:	801a      	strh	r2, [r3, #0]

  return ret;
 8006b7e:	697b      	ldr	r3, [r7, #20]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8006b94:	f107 0208 	add.w	r2, r7, #8
 8006b98:	2301      	movs	r3, #1
 8006b9a:	210a      	movs	r1, #10
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff fb29 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006ba2:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	7a3b      	ldrb	r3, [r7, #8]
 8006bb4:	f362 0302 	bfi	r3, r2, #0, #3
 8006bb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8006bba:	f107 0208 	add.w	r2, r7, #8
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	210a      	movs	r1, #10
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fb2e 	bl	8006224 <lsm6dsv16x_write_reg>
 8006bc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bca:	68fb      	ldr	r3, [r7, #12]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8006bde:	f107 0208 	add.w	r2, r7, #8
 8006be2:	2301      	movs	r3, #1
 8006be4:	2116      	movs	r1, #22
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff fb04 	bl	80061f4 <lsm6dsv16x_read_reg>
 8006bec:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10f      	bne.n	8006c14 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8006bf4:	783b      	ldrb	r3, [r7, #0]
 8006bf6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	7a3b      	ldrb	r3, [r7, #8]
 8006bfe:	f362 13c7 	bfi	r3, r2, #7, #1
 8006c02:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8006c04:	f107 0208 	add.w	r2, r7, #8
 8006c08:	2301      	movs	r3, #1
 8006c0a:	2116      	movs	r1, #22
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff fb09 	bl	8006224 <lsm6dsv16x_write_reg>
 8006c12:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c14:	68fb      	ldr	r3, [r7, #12]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	e034      	b.n	8006ca2 <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	7b1a      	ldrb	r2, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695a      	ldr	r2, [r3, #20]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a0e      	ldr	r2, [pc, #56]	@ (8006cac <STTS22H_RegisterBusIO+0x8c>)
 8006c74:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb0 <STTS22H_RegisterBusIO+0x90>)
 8006c7a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4798      	blx	r3
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	e002      	b.n	8006ca2 <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	080070bd 	.word	0x080070bd
 8006cb0:	0800712b 	.word	0x0800712b

08006cb4 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d127      	bne.n	8006d16 <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006ccc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3320      	adds	r3, #32
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fc25 	bl	8007524 <stts22h_block_data_update_set>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 8006ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce4:	e01c      	b.n	8006d20 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3320      	adds	r3, #32
 8006cea:	2101      	movs	r1, #1
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fc72 	bl	80075d6 <stts22h_auto_increment_set>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 8006cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfc:	e010      	b.n	8006d20 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3320      	adds	r3, #32
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fa91 	bl	800722c <stts22h_temp_data_rate_set>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	e004      	b.n	8006d20 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d108      	bne.n	8006d4c <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f878 	bl	8006e30 <STTS22H_TEMP_Disable>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4a:	e004      	b.n	8006d56 <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3320      	adds	r3, #32
 8006d6c:	f107 020f 	add.w	r2, r7, #15
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fc1e 	bl	80075b4 <stts22h_dev_id_get>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 8006d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d82:	e003      	b.n	8006d8c <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 8006d84:	7bfa      	ldrb	r2, [r7, #15]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2200      	movs	r2, #0
 8006da2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2200      	movs	r2, #0
 8006da8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2201      	movs	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2200      	movs	r2, #0
 8006dba:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	4a08      	ldr	r2, [pc, #32]	@ (8006de8 <STTS22H_GetCapabilities+0x54>)
 8006dc8:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	43480000 	.word	0x43480000

08006dec <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e012      	b.n	8006e28 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8006e08:	eeb0 0a67 	vmov.f32	s0, s15
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8e9 	bl	8006fe4 <STTS22H_TEMP_SetOutputDataRate>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 8006e18:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1c:	e004      	b.n	8006e28 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e01c      	b.n	8006e80 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3334      	adds	r3, #52	@ 0x34
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f81b 	bl	8006e88 <STTS22H_TEMP_GetOutputDataRate>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 8006e58:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5c:	e010      	b.n	8006e80 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3320      	adds	r3, #32
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 f9e1 	bl	800722c <stts22h_temp_data_rate_set>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	e004      	b.n	8006e80 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3320      	adds	r3, #32
 8006e9a:	f107 020b 	add.w	r2, r7, #11
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fa89 	bl	80073b8 <stts22h_temp_data_rate_get>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 8006eac:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb0:	e08b      	b.n	8006fca <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 8006eb2:	7afb      	ldrb	r3, [r7, #11]
 8006eb4:	2b32      	cmp	r3, #50	@ 0x32
 8006eb6:	f200 8083 	bhi.w	8006fc0 <STTS22H_TEMP_GetOutputDataRate+0x138>
 8006eba:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec0 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 8006ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec0:	08006f8d 	.word	0x08006f8d
 8006ec4:	08006f8d 	.word	0x08006f8d
 8006ec8:	08006fa1 	.word	0x08006fa1
 8006ecc:	08006fc1 	.word	0x08006fc1
 8006ed0:	08006f97 	.word	0x08006f97
 8006ed4:	08006fc1 	.word	0x08006fc1
 8006ed8:	08006fc1 	.word	0x08006fc1
 8006edc:	08006fc1 	.word	0x08006fc1
 8006ee0:	08006fc1 	.word	0x08006fc1
 8006ee4:	08006fc1 	.word	0x08006fc1
 8006ee8:	08006fc1 	.word	0x08006fc1
 8006eec:	08006fc1 	.word	0x08006fc1
 8006ef0:	08006fc1 	.word	0x08006fc1
 8006ef4:	08006fc1 	.word	0x08006fc1
 8006ef8:	08006fc1 	.word	0x08006fc1
 8006efc:	08006fc1 	.word	0x08006fc1
 8006f00:	08006fc1 	.word	0x08006fc1
 8006f04:	08006fc1 	.word	0x08006fc1
 8006f08:	08006fa9 	.word	0x08006fa9
 8006f0c:	08006fc1 	.word	0x08006fc1
 8006f10:	08006fc1 	.word	0x08006fc1
 8006f14:	08006fc1 	.word	0x08006fc1
 8006f18:	08006fc1 	.word	0x08006fc1
 8006f1c:	08006fc1 	.word	0x08006fc1
 8006f20:	08006fc1 	.word	0x08006fc1
 8006f24:	08006fc1 	.word	0x08006fc1
 8006f28:	08006fc1 	.word	0x08006fc1
 8006f2c:	08006fc1 	.word	0x08006fc1
 8006f30:	08006fc1 	.word	0x08006fc1
 8006f34:	08006fc1 	.word	0x08006fc1
 8006f38:	08006fc1 	.word	0x08006fc1
 8006f3c:	08006fc1 	.word	0x08006fc1
 8006f40:	08006fc1 	.word	0x08006fc1
 8006f44:	08006fc1 	.word	0x08006fc1
 8006f48:	08006fb1 	.word	0x08006fb1
 8006f4c:	08006fc1 	.word	0x08006fc1
 8006f50:	08006fc1 	.word	0x08006fc1
 8006f54:	08006fc1 	.word	0x08006fc1
 8006f58:	08006fc1 	.word	0x08006fc1
 8006f5c:	08006fc1 	.word	0x08006fc1
 8006f60:	08006fc1 	.word	0x08006fc1
 8006f64:	08006fc1 	.word	0x08006fc1
 8006f68:	08006fc1 	.word	0x08006fc1
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006fc1 	.word	0x08006fc1
 8006f74:	08006fc1 	.word	0x08006fc1
 8006f78:	08006fc1 	.word	0x08006fc1
 8006f7c:	08006fc1 	.word	0x08006fc1
 8006f80:	08006fc1 	.word	0x08006fc1
 8006f84:	08006fc1 	.word	0x08006fc1
 8006f88:	08006fb9 	.word	0x08006fb9
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
      break;
 8006f94:	e018      	b.n	8006fc8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006f9c:	601a      	str	r2, [r3, #0]
      break;
 8006f9e:	e013      	b.n	8006fc8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd4 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 8006fa4:	601a      	str	r2, [r3, #0]
      break;
 8006fa6:	e00f      	b.n	8006fc8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	4a0b      	ldr	r2, [pc, #44]	@ (8006fd8 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 8006fac:	601a      	str	r2, [r3, #0]
      break;
 8006fae:	e00b      	b.n	8006fc8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8006fdc <STTS22H_TEMP_GetOutputDataRate+0x154>)
 8006fb4:	601a      	str	r2, [r3, #0]
      break;
 8006fb6:	e007      	b.n	8006fc8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	4a09      	ldr	r2, [pc, #36]	@ (8006fe0 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 8006fbc:	601a      	str	r2, [r3, #0]
      break;
 8006fbe:	e003      	b.n	8006fc8 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 8006fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc4:	60fb      	str	r3, [r7, #12]
      break;
 8006fc6:	bf00      	nop
  }

  return ret;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	41c80000 	.word	0x41c80000
 8006fd8:	42480000 	.word	0x42480000
 8006fdc:	42c80000 	.word	0x42c80000
 8006fe0:	43480000 	.word	0x43480000

08006fe4 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 8006ff0:	edd7 7a00 	vldr	s15, [r7]
 8006ff4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007000:	d801      	bhi.n	8007006 <STTS22H_TEMP_SetOutputDataRate+0x22>
 8007002:	2304      	movs	r3, #4
 8007004:	e021      	b.n	800704a <STTS22H_TEMP_SetOutputDataRate+0x66>
 8007006:	edd7 7a00 	vldr	s15, [r7]
 800700a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800700e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007016:	d801      	bhi.n	800701c <STTS22H_TEMP_SetOutputDataRate+0x38>
 8007018:	2302      	movs	r3, #2
 800701a:	e016      	b.n	800704a <STTS22H_TEMP_SetOutputDataRate+0x66>
 800701c:	edd7 7a00 	vldr	s15, [r7]
 8007020:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8007070 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 8007024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702c:	d801      	bhi.n	8007032 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800702e:	2312      	movs	r3, #18
 8007030:	e00b      	b.n	800704a <STTS22H_TEMP_SetOutputDataRate+0x66>
 8007032:	edd7 7a00 	vldr	s15, [r7]
 8007036:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007074 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800703a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800703e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007042:	d801      	bhi.n	8007048 <STTS22H_TEMP_SetOutputDataRate+0x64>
 8007044:	2322      	movs	r3, #34	@ 0x22
 8007046:	e000      	b.n	800704a <STTS22H_TEMP_SetOutputDataRate+0x66>
 8007048:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800704a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3320      	adds	r3, #32
 8007050:	7bfa      	ldrb	r2, [r7, #15]
 8007052:	4611      	mov	r1, r2
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f8e9 	bl	800722c <stts22h_temp_data_rate_set>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	e000      	b.n	8007068 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	42480000 	.word	0x42480000
 8007074:	42c80000 	.word	0x42c80000

08007078 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3320      	adds	r3, #32
 8007086:	f107 020e 	add.w	r2, r7, #14
 800708a:	4611      	mov	r1, r2
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fa6f 	bl	8007570 <stts22h_temperature_raw_get>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 8007098:	f04f 33ff 	mov.w	r3, #4294967295
 800709c:	e00a      	b.n	80070b4 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800709e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f8a8 	bl	80071f8 <stts22h_from_lsb_to_celsius>
 80070a8:	eef0 7a40 	vmov.f32	s15, s0
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80070bc:	b590      	push	{r4, r7, lr}
 80070be:	b089      	sub	sp, #36	@ 0x24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	461a      	mov	r2, r3
 80070c8:	460b      	mov	r3, r1
 80070ca:	72fb      	strb	r3, [r7, #11]
 80070cc:	4613      	mov	r3, r2
 80070ce:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d11f      	bne.n	8007120 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80070e0:	2300      	movs	r3, #0
 80070e2:	83fb      	strh	r3, [r7, #30]
 80070e4:	e018      	b.n	8007118 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	695c      	ldr	r4, [r3, #20]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	7b1b      	ldrb	r3, [r3, #12]
 80070ee:	4618      	mov	r0, r3
 80070f0:	7afb      	ldrb	r3, [r7, #11]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	8bfb      	ldrh	r3, [r7, #30]
 80070f6:	4413      	add	r3, r2
 80070f8:	b299      	uxth	r1, r3
 80070fa:	8bfb      	ldrh	r3, [r7, #30]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	441a      	add	r2, r3
 8007100:	2301      	movs	r3, #1
 8007102:	47a0      	blx	r4
 8007104:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800710c:	f04f 33ff 	mov.w	r3, #4294967295
 8007110:	e007      	b.n	8007122 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007112:	8bfb      	ldrh	r3, [r7, #30]
 8007114:	3301      	adds	r3, #1
 8007116:	83fb      	strh	r3, [r7, #30]
 8007118:	8bfa      	ldrh	r2, [r7, #30]
 800711a:	893b      	ldrh	r3, [r7, #8]
 800711c:	429a      	cmp	r2, r3
 800711e:	d3e2      	bcc.n	80070e6 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007120:	69bb      	ldr	r3, [r7, #24]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3724      	adds	r7, #36	@ 0x24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd90      	pop	{r4, r7, pc}

0800712a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800712a:	b590      	push	{r4, r7, lr}
 800712c:	b089      	sub	sp, #36	@ 0x24
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	461a      	mov	r2, r3
 8007136:	460b      	mov	r3, r1
 8007138:	72fb      	strb	r3, [r7, #11]
 800713a:	4613      	mov	r3, r2
 800713c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d11f      	bne.n	800718e <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800714e:	2300      	movs	r3, #0
 8007150:	83fb      	strh	r3, [r7, #30]
 8007152:	e018      	b.n	8007186 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	691c      	ldr	r4, [r3, #16]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	7b1b      	ldrb	r3, [r3, #12]
 800715c:	4618      	mov	r0, r3
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	b29a      	uxth	r2, r3
 8007162:	8bfb      	ldrh	r3, [r7, #30]
 8007164:	4413      	add	r3, r2
 8007166:	b299      	uxth	r1, r3
 8007168:	8bfb      	ldrh	r3, [r7, #30]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	441a      	add	r2, r3
 800716e:	2301      	movs	r3, #1
 8007170:	47a0      	blx	r4
 8007172:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800717a:	f04f 33ff 	mov.w	r3, #4294967295
 800717e:	e007      	b.n	8007190 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007180:	8bfb      	ldrh	r3, [r7, #30]
 8007182:	3301      	adds	r3, #1
 8007184:	83fb      	strh	r3, [r7, #30]
 8007186:	8bfa      	ldrh	r2, [r7, #30]
 8007188:	893b      	ldrh	r3, [r7, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	d3e2      	bcc.n	8007154 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800718e:	69bb      	ldr	r3, [r7, #24]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3724      	adds	r7, #36	@ 0x24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd90      	pop	{r4, r7, pc}

08007198 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007198:	b590      	push	{r4, r7, lr}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	461a      	mov	r2, r3
 80071a4:	460b      	mov	r3, r1
 80071a6:	72fb      	strb	r3, [r7, #11]
 80071a8:	4613      	mov	r3, r2
 80071aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685c      	ldr	r4, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68d8      	ldr	r0, [r3, #12]
 80071b4:	893b      	ldrh	r3, [r7, #8]
 80071b6:	7af9      	ldrb	r1, [r7, #11]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	47a0      	blx	r4
 80071bc:	6178      	str	r0, [r7, #20]

  return ret;
 80071be:	697b      	ldr	r3, [r7, #20]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd90      	pop	{r4, r7, pc}

080071c8 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80071c8:	b590      	push	{r4, r7, lr}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	607a      	str	r2, [r7, #4]
 80071d2:	461a      	mov	r2, r3
 80071d4:	460b      	mov	r3, r1
 80071d6:	72fb      	strb	r3, [r7, #11]
 80071d8:	4613      	mov	r3, r2
 80071da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681c      	ldr	r4, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68d8      	ldr	r0, [r3, #12]
 80071e4:	893b      	ldrh	r3, [r7, #8]
 80071e6:	7af9      	ldrb	r1, [r7, #11]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	47a0      	blx	r4
 80071ec:	6178      	str	r0, [r7, #20]

  return ret;
 80071ee:	697b      	ldr	r3, [r7, #20]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd90      	pop	{r4, r7, pc}

080071f8 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8007202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800720e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007228 <stts22h_from_lsb_to_celsius+0x30>
 8007212:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007216:	eef0 7a66 	vmov.f32	s15, s13
}
 800721a:	eeb0 0a67 	vmov.f32	s0, s15
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	42c80000 	.word	0x42c80000

0800722c <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8007238:	f107 020c 	add.w	r2, r7, #12
 800723c:	2301      	movs	r3, #1
 800723e:	2104      	movs	r1, #4
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff ffa9 	bl	8007198 <stts22h_read_reg>
 8007246:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d107      	bne.n	800725e <stts22h_temp_data_rate_set+0x32>
  {
    ret = stts22h_read_reg(ctx, STTS22H_SOFTWARE_RESET,
 800724e:	f107 0210 	add.w	r2, r7, #16
 8007252:	2301      	movs	r3, #1
 8007254:	210c      	movs	r1, #12
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff ff9e 	bl	8007198 <stts22h_read_reg>
 800725c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d11d      	bne.n	80072a0 <stts22h_temp_data_rate_set+0x74>
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d11a      	bne.n	80072a0 <stts22h_temp_data_rate_set+0x74>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800726a:	7c3b      	ldrb	r3, [r7, #16]
 800726c:	f043 0302 	orr.w	r3, r3, #2
 8007270:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8007272:	f107 0210 	add.w	r2, r7, #16
 8007276:	2301      	movs	r3, #1
 8007278:	210c      	movs	r1, #12
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff ffa4 	bl	80071c8 <stts22h_write_reg>
 8007280:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <stts22h_temp_data_rate_set+0x74>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8007288:	7c3b      	ldrb	r3, [r7, #16]
 800728a:	f36f 0341 	bfc	r3, #1, #1
 800728e:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8007290:	f107 0210 	add.w	r2, r7, #16
 8007294:	2301      	movs	r3, #1
 8007296:	210c      	movs	r1, #12
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff ff95 	bl	80071c8 <stts22h_write_reg>
 800729e:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d008      	beq.n	80072b8 <stts22h_temp_data_rate_set+0x8c>
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	2b12      	cmp	r3, #18
 80072aa:	d005      	beq.n	80072b8 <stts22h_temp_data_rate_set+0x8c>
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	2b22      	cmp	r3, #34	@ 0x22
 80072b0:	d002      	beq.n	80072b8 <stts22h_temp_data_rate_set+0x8c>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	2b32      	cmp	r3, #50	@ 0x32
 80072b6:	d123      	bne.n	8007300 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80072b8:	7b3b      	ldrb	r3, [r7, #12]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11d      	bne.n	8007300 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d11a      	bne.n	8007300 <stts22h_temp_data_rate_set+0xd4>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 80072ca:	7c3b      	ldrb	r3, [r7, #16]
 80072cc:	f043 0302 	orr.w	r3, r3, #2
 80072d0:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 80072d2:	f107 0210 	add.w	r2, r7, #16
 80072d6:	2301      	movs	r3, #1
 80072d8:	210c      	movs	r1, #12
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff ff74 	bl	80071c8 <stts22h_write_reg>
 80072e0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10b      	bne.n	8007300 <stts22h_temp_data_rate_set+0xd4>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 80072e8:	7c3b      	ldrb	r3, [r7, #16]
 80072ea:	f36f 0341 	bfc	r3, #1, #1
 80072ee:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 80072f0:	f107 0210 	add.w	r2, r7, #16
 80072f4:	2301      	movs	r3, #1
 80072f6:	210c      	movs	r1, #12
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff ff65 	bl	80071c8 <stts22h_write_reg>
 80072fe:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	2b04      	cmp	r3, #4
 8007304:	d125      	bne.n	8007352 <stts22h_temp_data_rate_set+0x126>
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d122      	bne.n	8007352 <stts22h_temp_data_rate_set+0x126>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800730c:	7c3b      	ldrb	r3, [r7, #16]
 800730e:	f043 0302 	orr.w	r3, r3, #2
 8007312:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 8007314:	7c3b      	ldrb	r3, [r7, #16]
 8007316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800731a:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800731c:	f107 0210 	add.w	r2, r7, #16
 8007320:	2301      	movs	r3, #1
 8007322:	210c      	movs	r1, #12
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff ff4f 	bl	80071c8 <stts22h_write_reg>
 800732a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10f      	bne.n	8007352 <stts22h_temp_data_rate_set+0x126>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 8007332:	7c3b      	ldrb	r3, [r7, #16]
 8007334:	f36f 0341 	bfc	r3, #1, #1
 8007338:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 800733a:	7c3b      	ldrb	r3, [r7, #16]
 800733c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007340:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8007342:	f107 0210 	add.w	r2, r7, #16
 8007346:	2301      	movs	r3, #1
 8007348:	210c      	movs	r1, #12
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff ff3c 	bl	80071c8 <stts22h_write_reg>
 8007350:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d12a      	bne.n	80073ae <stts22h_temp_data_rate_set+0x182>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	b2da      	uxtb	r2, r3
 8007360:	7b3b      	ldrb	r3, [r7, #12]
 8007362:	f362 0300 	bfi	r3, r2, #0, #1
 8007366:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	b2da      	uxtb	r2, r3
 8007372:	7b3b      	ldrb	r3, [r7, #12]
 8007374:	f362 0382 	bfi	r3, r2, #2, #1
 8007378:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	089b      	lsrs	r3, r3, #2
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	7b3b      	ldrb	r3, [r7, #12]
 8007386:	f362 13c7 	bfi	r3, r2, #7, #1
 800738a:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	091b      	lsrs	r3, r3, #4
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	b2da      	uxtb	r2, r3
 8007396:	7b3b      	ldrb	r3, [r7, #12]
 8007398:	f362 1305 	bfi	r3, r2, #4, #2
 800739c:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800739e:	f107 020c 	add.w	r2, r7, #12
 80073a2:	2301      	movs	r3, #1
 80073a4:	2104      	movs	r1, #4
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff ff0e 	bl	80071c8 <stts22h_write_reg>
 80073ac:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80073ae:	697b      	ldr	r3, [r7, #20]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 80073c2:	f107 0208 	add.w	r2, r7, #8
 80073c6:	2301      	movs	r3, #1
 80073c8:	2104      	movs	r1, #4
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff fee4 	bl	8007198 <stts22h_read_reg>
 80073d0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 80073d2:	7a3b      	ldrb	r3, [r7, #8]
 80073d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	461a      	mov	r2, r3
 80073dc:	7a3b      	ldrb	r3, [r7, #8]
 80073de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	431a      	orrs	r2, r3
 80073e8:	7a3b      	ldrb	r3, [r7, #8]
 80073ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 80073f4:	7a3b      	ldrb	r3, [r7, #8]
 80073f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	011b      	lsls	r3, r3, #4
                                                 2) |
 80073fe:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 8007400:	2b32      	cmp	r3, #50	@ 0x32
 8007402:	f200 8085 	bhi.w	8007510 <stts22h_temp_data_rate_get+0x158>
 8007406:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <stts22h_temp_data_rate_get+0x54>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	080074d9 	.word	0x080074d9
 8007410:	080074e1 	.word	0x080074e1
 8007414:	080074f1 	.word	0x080074f1
 8007418:	08007511 	.word	0x08007511
 800741c:	080074e9 	.word	0x080074e9
 8007420:	08007511 	.word	0x08007511
 8007424:	08007511 	.word	0x08007511
 8007428:	08007511 	.word	0x08007511
 800742c:	08007511 	.word	0x08007511
 8007430:	08007511 	.word	0x08007511
 8007434:	08007511 	.word	0x08007511
 8007438:	08007511 	.word	0x08007511
 800743c:	08007511 	.word	0x08007511
 8007440:	08007511 	.word	0x08007511
 8007444:	08007511 	.word	0x08007511
 8007448:	08007511 	.word	0x08007511
 800744c:	08007511 	.word	0x08007511
 8007450:	08007511 	.word	0x08007511
 8007454:	080074f9 	.word	0x080074f9
 8007458:	08007511 	.word	0x08007511
 800745c:	08007511 	.word	0x08007511
 8007460:	08007511 	.word	0x08007511
 8007464:	08007511 	.word	0x08007511
 8007468:	08007511 	.word	0x08007511
 800746c:	08007511 	.word	0x08007511
 8007470:	08007511 	.word	0x08007511
 8007474:	08007511 	.word	0x08007511
 8007478:	08007511 	.word	0x08007511
 800747c:	08007511 	.word	0x08007511
 8007480:	08007511 	.word	0x08007511
 8007484:	08007511 	.word	0x08007511
 8007488:	08007511 	.word	0x08007511
 800748c:	08007511 	.word	0x08007511
 8007490:	08007511 	.word	0x08007511
 8007494:	08007501 	.word	0x08007501
 8007498:	08007511 	.word	0x08007511
 800749c:	08007511 	.word	0x08007511
 80074a0:	08007511 	.word	0x08007511
 80074a4:	08007511 	.word	0x08007511
 80074a8:	08007511 	.word	0x08007511
 80074ac:	08007511 	.word	0x08007511
 80074b0:	08007511 	.word	0x08007511
 80074b4:	08007511 	.word	0x08007511
 80074b8:	08007511 	.word	0x08007511
 80074bc:	08007511 	.word	0x08007511
 80074c0:	08007511 	.word	0x08007511
 80074c4:	08007511 	.word	0x08007511
 80074c8:	08007511 	.word	0x08007511
 80074cc:	08007511 	.word	0x08007511
 80074d0:	08007511 	.word	0x08007511
 80074d4:	08007509 	.word	0x08007509
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
      break;
 80074de:	e01b      	b.n	8007518 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2201      	movs	r2, #1
 80074e4:	701a      	strb	r2, [r3, #0]
      break;
 80074e6:	e017      	b.n	8007518 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2204      	movs	r2, #4
 80074ec:	701a      	strb	r2, [r3, #0]
      break;
 80074ee:	e013      	b.n	8007518 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2202      	movs	r2, #2
 80074f4:	701a      	strb	r2, [r3, #0]
      break;
 80074f6:	e00f      	b.n	8007518 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2212      	movs	r2, #18
 80074fc:	701a      	strb	r2, [r3, #0]
      break;
 80074fe:	e00b      	b.n	8007518 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2222      	movs	r2, #34	@ 0x22
 8007504:	701a      	strb	r2, [r3, #0]
      break;
 8007506:	e007      	b.n	8007518 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2232      	movs	r2, #50	@ 0x32
 800750c:	701a      	strb	r2, [r3, #0]
      break;
 800750e:	e003      	b.n	8007518 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
      break;
 8007516:	bf00      	nop
  }

  return ret;
 8007518:	68fb      	ldr	r3, [r7, #12]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop

08007524 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8007530:	f107 0208 	add.w	r2, r7, #8
 8007534:	2301      	movs	r3, #1
 8007536:	2104      	movs	r1, #4
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff fe2d 	bl	8007198 <stts22h_read_reg>
 800753e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10f      	bne.n	8007566 <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	b2da      	uxtb	r2, r3
 800754e:	7a3b      	ldrb	r3, [r7, #8]
 8007550:	f362 1386 	bfi	r3, r2, #6, #1
 8007554:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8007556:	f107 0208 	add.w	r2, r7, #8
 800755a:	2301      	movs	r3, #1
 800755c:	2104      	movs	r1, #4
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fe32 	bl	80071c8 <stts22h_write_reg>
 8007564:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007566:	68fb      	ldr	r3, [r7, #12]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800757a:	f107 0208 	add.w	r2, r7, #8
 800757e:	2302      	movs	r3, #2
 8007580:	2106      	movs	r1, #6
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff fe08 	bl	8007198 <stts22h_read_reg>
 8007588:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800758a:	7a7b      	ldrb	r3, [r7, #9]
 800758c:	b21a      	sxth	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007598:	b29b      	uxth	r3, r3
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	b29b      	uxth	r3, r3
 800759e:	7a3a      	ldrb	r2, [r7, #8]
 80075a0:	4413      	add	r3, r2
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	b21a      	sxth	r2, r3
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	801a      	strh	r2, [r3, #0]

  return ret;
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 80075be:	2301      	movs	r3, #1
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	2101      	movs	r1, #1
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fde7 	bl	8007198 <stts22h_read_reg>
 80075ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80075cc:	68fb      	ldr	r3, [r7, #12]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80075e2:	f107 0208 	add.w	r2, r7, #8
 80075e6:	2301      	movs	r3, #1
 80075e8:	2104      	movs	r1, #4
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff fdd4 	bl	8007198 <stts22h_read_reg>
 80075f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10f      	bne.n	8007618 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	7a3b      	ldrb	r3, [r7, #8]
 8007602:	f362 03c3 	bfi	r3, r2, #3, #1
 8007606:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8007608:	f107 0208 	add.w	r2, r7, #8
 800760c:	2301      	movs	r3, #1
 800760e:	2104      	movs	r1, #4
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fdd9 	bl	80071c8 <stts22h_write_reg>
 8007616:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007618:	68fb      	ldr	r3, [r7, #12]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER__BLUE_GPIO_Init,LED_USER__RED_GPIO_Init,LED_USER__YELLOW_GPIO_Init,LED_USER__GREEN_GPIO_Init,};
  LedGpioInit[Led]();
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	4a04      	ldr	r2, [pc, #16]	@ (8007644 <BSP_LED_Init+0x20>)
 8007632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007636:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	08015884 	.word	0x08015884

08007648 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8007652:	79fb      	ldrb	r3, [r7, #7]
 8007654:	4a07      	ldr	r2, [pc, #28]	@ (8007674 <BSP_LED_Off+0x2c>)
 8007656:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	4a06      	ldr	r2, [pc, #24]	@ (8007678 <BSP_LED_Off+0x30>)
 800765e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007662:	2200      	movs	r2, #0
 8007664:	4619      	mov	r1, r3
 8007666:	f002 feb1 	bl	800a3cc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000120 	.word	0x20000120
 8007678:	0801587c 	.word	0x0801587c

0800767c <LED_USER__BLUE_GPIO_Init>:
  */
/**
  * @brief
  * @retval None
  */
static void LED_USER__BLUE_GPIO_Init(void) {
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007682:	4b1f      	ldr	r3, [pc, #124]	@ (8007700 <LED_USER__BLUE_GPIO_Init+0x84>)
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007688:	4a1d      	ldr	r2, [pc, #116]	@ (8007700 <LED_USER__BLUE_GPIO_Init+0x84>)
 800768a:	f043 0320 	orr.w	r3, r3, #32
 800768e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007692:	4b1b      	ldr	r3, [pc, #108]	@ (8007700 <LED_USER__BLUE_GPIO_Init+0x84>)
 8007694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076a0:	f107 030c 	add.w	r3, r7, #12
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	609a      	str	r2, [r3, #8]
 80076ac:	60da      	str	r2, [r3, #12]
 80076ae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80076b0:	4b13      	ldr	r3, [pc, #76]	@ (8007700 <LED_USER__BLUE_GPIO_Init+0x84>)
 80076b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076b6:	4a12      	ldr	r2, [pc, #72]	@ (8007700 <LED_USER__BLUE_GPIO_Init+0x84>)
 80076b8:	f043 0320 	orr.w	r3, r3, #32
 80076bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80076c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007700 <LED_USER__BLUE_GPIO_Init+0x84>)
 80076c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED__BLUE_GPIO_PORT, BUS_BSP_LED__BLUE_GPIO_PIN, GPIO_PIN_RESET);
 80076ce:	2200      	movs	r2, #0
 80076d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076d4:	480b      	ldr	r0, [pc, #44]	@ (8007704 <LED_USER__BLUE_GPIO_Init+0x88>)
 80076d6:	f002 fe79 	bl	800a3cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED__BLUE_GPIO_PIN;
 80076da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076e0:	2301      	movs	r3, #1
 80076e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED__BLUE_GPIO_PORT, &GPIO_InitStruct);
 80076ec:	f107 030c 	add.w	r3, r7, #12
 80076f0:	4619      	mov	r1, r3
 80076f2:	4804      	ldr	r0, [pc, #16]	@ (8007704 <LED_USER__BLUE_GPIO_Init+0x88>)
 80076f4:	f002 fbac 	bl	8009e50 <HAL_GPIO_Init>

}
 80076f8:	bf00      	nop
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	46020c00 	.word	0x46020c00
 8007704:	42021400 	.word	0x42021400

08007708 <LED_USER__RED_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void LED_USER__RED_GPIO_Init(void) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800770e:	4b1f      	ldr	r3, [pc, #124]	@ (800778c <LED_USER__RED_GPIO_Init+0x84>)
 8007710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007714:	4a1d      	ldr	r2, [pc, #116]	@ (800778c <LED_USER__RED_GPIO_Init+0x84>)
 8007716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800771a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800771e:	4b1b      	ldr	r3, [pc, #108]	@ (800778c <LED_USER__RED_GPIO_Init+0x84>)
 8007720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007728:	60bb      	str	r3, [r7, #8]
 800772a:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800772c:	f107 030c 	add.w	r3, r7, #12
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	605a      	str	r2, [r3, #4]
 8007736:	609a      	str	r2, [r3, #8]
 8007738:	60da      	str	r2, [r3, #12]
 800773a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800773c:	4b13      	ldr	r3, [pc, #76]	@ (800778c <LED_USER__RED_GPIO_Init+0x84>)
 800773e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007742:	4a12      	ldr	r2, [pc, #72]	@ (800778c <LED_USER__RED_GPIO_Init+0x84>)
 8007744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007748:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800774c:	4b0f      	ldr	r3, [pc, #60]	@ (800778c <LED_USER__RED_GPIO_Init+0x84>)
 800774e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007756:	607b      	str	r3, [r7, #4]
 8007758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED__RED_GPIO_PORT, BUS_BSP_LED__RED_GPIO_PIN, GPIO_PIN_RESET);
 800775a:	2200      	movs	r2, #0
 800775c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007760:	480b      	ldr	r0, [pc, #44]	@ (8007790 <LED_USER__RED_GPIO_Init+0x88>)
 8007762:	f002 fe33 	bl	800a3cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED__RED_GPIO_PIN;
 8007766:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800776a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800776c:	2301      	movs	r3, #1
 800776e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007774:	2300      	movs	r3, #0
 8007776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED__RED_GPIO_PORT, &GPIO_InitStruct);
 8007778:	f107 030c 	add.w	r3, r7, #12
 800777c:	4619      	mov	r1, r3
 800777e:	4804      	ldr	r0, [pc, #16]	@ (8007790 <LED_USER__RED_GPIO_Init+0x88>)
 8007780:	f002 fb66 	bl	8009e50 <HAL_GPIO_Init>

}
 8007784:	bf00      	nop
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	46020c00 	.word	0x46020c00
 8007790:	42021c00 	.word	0x42021c00

08007794 <LED_USER__YELLOW_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void LED_USER__YELLOW_GPIO_Init(void) {
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800779a:	4b1f      	ldr	r3, [pc, #124]	@ (8007818 <LED_USER__YELLOW_GPIO_Init+0x84>)
 800779c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007818 <LED_USER__YELLOW_GPIO_Init+0x84>)
 80077a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80077aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007818 <LED_USER__YELLOW_GPIO_Init+0x84>)
 80077ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077b8:	f107 030c 	add.w	r3, r7, #12
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	605a      	str	r2, [r3, #4]
 80077c2:	609a      	str	r2, [r3, #8]
 80077c4:	60da      	str	r2, [r3, #12]
 80077c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80077c8:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <LED_USER__YELLOW_GPIO_Init+0x84>)
 80077ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077ce:	4a12      	ldr	r2, [pc, #72]	@ (8007818 <LED_USER__YELLOW_GPIO_Init+0x84>)
 80077d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80077d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007818 <LED_USER__YELLOW_GPIO_Init+0x84>)
 80077da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077e2:	607b      	str	r3, [r7, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED__YELLOW_GPIO_PORT, BUS_BSP_LED__YELLOW_GPIO_PIN, GPIO_PIN_RESET);
 80077e6:	2200      	movs	r2, #0
 80077e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80077ec:	480b      	ldr	r0, [pc, #44]	@ (800781c <LED_USER__YELLOW_GPIO_Init+0x88>)
 80077ee:	f002 fded 	bl	800a3cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED__YELLOW_GPIO_PIN;
 80077f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077f8:	2301      	movs	r3, #1
 80077fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007800:	2300      	movs	r3, #0
 8007802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED__YELLOW_GPIO_PORT, &GPIO_InitStruct);
 8007804:	f107 030c 	add.w	r3, r7, #12
 8007808:	4619      	mov	r1, r3
 800780a:	4804      	ldr	r0, [pc, #16]	@ (800781c <LED_USER__YELLOW_GPIO_Init+0x88>)
 800780c:	f002 fb20 	bl	8009e50 <HAL_GPIO_Init>

}
 8007810:	bf00      	nop
 8007812:	3720      	adds	r7, #32
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	46020c00 	.word	0x46020c00
 800781c:	42021c00 	.word	0x42021c00

08007820 <LED_USER__GREEN_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void LED_USER__GREEN_GPIO_Init(void) {
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007826:	4b1e      	ldr	r3, [pc, #120]	@ (80078a0 <LED_USER__GREEN_GPIO_Init+0x80>)
 8007828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800782c:	4a1c      	ldr	r2, [pc, #112]	@ (80078a0 <LED_USER__GREEN_GPIO_Init+0x80>)
 800782e:	f043 0320 	orr.w	r3, r3, #32
 8007832:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007836:	4b1a      	ldr	r3, [pc, #104]	@ (80078a0 <LED_USER__GREEN_GPIO_Init+0x80>)
 8007838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	60bb      	str	r3, [r7, #8]
 8007842:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	609a      	str	r2, [r3, #8]
 8007850:	60da      	str	r2, [r3, #12]
 8007852:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007854:	4b12      	ldr	r3, [pc, #72]	@ (80078a0 <LED_USER__GREEN_GPIO_Init+0x80>)
 8007856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800785a:	4a11      	ldr	r2, [pc, #68]	@ (80078a0 <LED_USER__GREEN_GPIO_Init+0x80>)
 800785c:	f043 0320 	orr.w	r3, r3, #32
 8007860:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007864:	4b0e      	ldr	r3, [pc, #56]	@ (80078a0 <LED_USER__GREEN_GPIO_Init+0x80>)
 8007866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	607b      	str	r3, [r7, #4]
 8007870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED__GREEN_GPIO_PORT, BUS_BSP_LED__GREEN_GPIO_PIN, GPIO_PIN_RESET);
 8007872:	2200      	movs	r2, #0
 8007874:	2140      	movs	r1, #64	@ 0x40
 8007876:	480b      	ldr	r0, [pc, #44]	@ (80078a4 <LED_USER__GREEN_GPIO_Init+0x84>)
 8007878:	f002 fda8 	bl	800a3cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED__GREEN_GPIO_PIN;
 800787c:	2340      	movs	r3, #64	@ 0x40
 800787e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007880:	2301      	movs	r3, #1
 8007882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007884:	2300      	movs	r3, #0
 8007886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007888:	2300      	movs	r3, #0
 800788a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED__GREEN_GPIO_PORT, &GPIO_InitStruct);
 800788c:	f107 030c 	add.w	r3, r7, #12
 8007890:	4619      	mov	r1, r3
 8007892:	4804      	ldr	r0, [pc, #16]	@ (80078a4 <LED_USER__GREEN_GPIO_Init+0x84>)
 8007894:	f002 fadc 	bl	8009e50 <HAL_GPIO_Init>

}
 8007898:	bf00      	nop
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	46020c00 	.word	0x46020c00
 80078a4:	42021400 	.word	0x42021400

080078a8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	460a      	mov	r2, r1
 80078b2:	71fb      	strb	r3, [r7, #7]
 80078b4:	4613      	mov	r3, r2
 80078b6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80078bc:	79fb      	ldrb	r3, [r7, #7]
 80078be:	4a22      	ldr	r2, [pc, #136]	@ (8007948 <BSP_PB_Init+0xa0>)
 80078c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80078c6:	79bb      	ldrb	r3, [r7, #6]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d138      	bne.n	800793e <BSP_PB_Init+0x96>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	4613      	mov	r3, r2
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4a1d      	ldr	r2, [pc, #116]	@ (800794c <BSP_PB_Init+0xa4>)
 80078d8:	441a      	add	r2, r3
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	491c      	ldr	r1, [pc, #112]	@ (8007950 <BSP_PB_Init+0xa8>)
 80078de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80078e2:	4619      	mov	r1, r3
 80078e4:	4610      	mov	r0, r2
 80078e6:	f002 fa9e 	bl	8009e26 <HAL_EXTI_GetHandle>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <BSP_PB_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80078f0:	f06f 0303 	mvn.w	r3, #3
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	e022      	b.n	800793e <BSP_PB_Init+0x96>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80078f8:	79fa      	ldrb	r2, [r7, #7]
 80078fa:	4613      	mov	r3, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4a12      	ldr	r2, [pc, #72]	@ (800794c <BSP_PB_Init+0xa4>)
 8007904:	1898      	adds	r0, r3, r2
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	4a12      	ldr	r2, [pc, #72]	@ (8007954 <BSP_PB_Init+0xac>)
 800790a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790e:	461a      	mov	r2, r3
 8007910:	2100      	movs	r1, #0
 8007912:	f002 fa5c 	bl	8009dce <HAL_EXTI_RegisterCallback>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <BSP_PB_Init+0x7c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800791c:	f06f 0303 	mvn.w	r3, #3
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	e00c      	b.n	800793e <BSP_PB_Init+0x96>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8007924:	2018      	movs	r0, #24
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	4a0b      	ldr	r2, [pc, #44]	@ (8007958 <BSP_PB_Init+0xb0>)
 800792a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792e:	2200      	movs	r2, #0
 8007930:	4619      	mov	r1, r3
 8007932:	f001 fae3 	bl	8008efc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8007936:	2318      	movs	r3, #24
 8007938:	4618      	mov	r0, r3
 800793a:	f001 faf9 	bl	8008f30 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	08015894 	.word	0x08015894
 800794c:	20000130 	.word	0x20000130
 8007950:	08015898 	.word	0x08015898
 8007954:	0801589c 	.word	0x0801589c
 8007958:	080158a0 	.word	0x080158a0

0800795c <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8007976:	2000      	movs	r0, #0
 8007978:	f7ff fff0 	bl	800795c <BSP_PB_Callback>
}
 800797c:	bf00      	nop
 800797e:	bd80      	pop	{r7, pc}

08007980 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007986:	4b23      	ldr	r3, [pc, #140]	@ (8007a14 <BUTTON_USER_GPIO_Init+0x94>)
 8007988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800798c:	4a21      	ldr	r2, [pc, #132]	@ (8007a14 <BUTTON_USER_GPIO_Init+0x94>)
 800798e:	f043 0304 	orr.w	r3, r3, #4
 8007992:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007996:	4b1f      	ldr	r3, [pc, #124]	@ (8007a14 <BUTTON_USER_GPIO_Init+0x94>)
 8007998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	68bb      	ldr	r3, [r7, #8]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80079a4:	2200      	movs	r2, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	2018      	movs	r0, #24
 80079aa:	f001 faa7 	bl	8008efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80079ae:	2018      	movs	r0, #24
 80079b0:	f001 fabe 	bl	8008f30 <HAL_NVIC_EnableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b4:	f107 030c 	add.w	r3, r7, #12
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	609a      	str	r2, [r3, #8]
 80079c0:	60da      	str	r2, [r3, #12]
 80079c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80079c4:	4b13      	ldr	r3, [pc, #76]	@ (8007a14 <BUTTON_USER_GPIO_Init+0x94>)
 80079c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ca:	4a12      	ldr	r2, [pc, #72]	@ (8007a14 <BUTTON_USER_GPIO_Init+0x94>)
 80079cc:	f043 0304 	orr.w	r3, r3, #4
 80079d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80079d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <BUTTON_USER_GPIO_Init+0x94>)
 80079d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	607b      	str	r3, [r7, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80079e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80079e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80079e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <BUTTON_USER_GPIO_Init+0x98>)
 80079ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80079f0:	f107 030c 	add.w	r3, r7, #12
 80079f4:	4619      	mov	r1, r3
 80079f6:	4809      	ldr	r0, [pc, #36]	@ (8007a1c <BUTTON_USER_GPIO_Init+0x9c>)
 80079f8:	f002 fa2a 	bl	8009e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80079fc:	2200      	movs	r2, #0
 80079fe:	2100      	movs	r1, #0
 8007a00:	2018      	movs	r0, #24
 8007a02:	f001 fa7b 	bl	8008efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8007a06:	2018      	movs	r0, #24
 8007a08:	f001 fa92 	bl	8008f30 <HAL_NVIC_EnableIRQ>

}
 8007a0c:	bf00      	nop
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	46020c00 	.word	0x46020c00
 8007a18:	10110000 	.word	0x10110000
 8007a1c:	42020800 	.word	0x42020800

08007a20 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d903      	bls.n	8007a3c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007a34:	f06f 0301 	mvn.w	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	e022      	b.n	8007a82 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8007a3c:	79fa      	ldrb	r2, [r7, #7]
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	4912      	ldr	r1, [pc, #72]	@ (8007a8c <BSP_COM_Init+0x6c>)
 8007a42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007a46:	4912      	ldr	r1, [pc, #72]	@ (8007a90 <BSP_COM_Init+0x70>)
 8007a48:	2094      	movs	r0, #148	@ 0x94
 8007a4a:	fb00 f303 	mul.w	r3, r0, r3
 8007a4e:	440b      	add	r3, r1
 8007a50:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    UART4_MspInit(&hcom_uart[COM]);
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	2294      	movs	r2, #148	@ 0x94
 8007a56:	fb02 f303 	mul.w	r3, r2, r3
 8007a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8007a90 <BSP_COM_Init+0x70>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f86a 	bl	8007b38 <UART4_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_UART4_Init(&hcom_uart[COM]))
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	2294      	movs	r2, #148	@ 0x94
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
 8007a6c:	4a08      	ldr	r2, [pc, #32]	@ (8007a90 <BSP_COM_Init+0x70>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f80f 	bl	8007a94 <MX_UART4_Init>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007a7c:	f06f 0303 	mvn.w	r3, #3
 8007a80:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	2000013c 	.word	0x2000013c
 8007a90:	20000358 	.word	0x20000358

08007a94 <MX_UART4_Init>:
 */

/* UART4 init function */

__weak HAL_StatusTypeDef MX_UART4_Init(UART_HandleTypeDef* huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = BUS_UART4_INSTANCE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a24      	ldr	r2, [pc, #144]	@ (8007b34 <MX_UART4_Init+0xa0>)
 8007aa4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007aac:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	220c      	movs	r2, #12
 8007ac4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f008 fc43 	bl	8010370 <HAL_UART_Init>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <MX_UART4_Init+0x60>
  {
    ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007af4:	2100      	movs	r1, #0
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f009 f884 	bl	8010c04 <HAL_UARTEx_SetTxFifoThreshold>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <MX_UART4_Init+0x72>
  {
    ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007b06:	2100      	movs	r1, #0
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f009 f8b9 	bl	8010c80 <HAL_UARTEx_SetRxFifoThreshold>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <MX_UART4_Init+0x84>
  {
    ret = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f009 f83a 	bl	8010b92 <HAL_UARTEx_DisableFifoMode>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <MX_UART4_Init+0x94>
  {
    ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	40004c00 	.word	0x40004c00

08007b38 <UART4_MspInit>:
 * @param  huart UART4 handle
 * @retval None
 */

static void UART4_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b0bc      	sub	sp, #240	@ 0xf0
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b40:	f107 0310 	add.w	r3, r7, #16
 8007b44:	22c8      	movs	r2, #200	@ 0xc8
 8007b46:	2100      	movs	r1, #0
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f00a f9bb 	bl	8011ec4 <memset>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007b4e:	f04f 0208 	mov.w	r2, #8
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8007b5e:	f107 0310 	add.w	r3, r7, #16
 8007b62:	4618      	mov	r0, r3
 8007b64:	f005 fc64 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007b68:	4b25      	ldr	r3, [pc, #148]	@ (8007c00 <UART4_MspInit+0xc8>)
 8007b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b6e:	4a24      	ldr	r2, [pc, #144]	@ (8007c00 <UART4_MspInit+0xc8>)
 8007b70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007b78:	4b21      	ldr	r3, [pc, #132]	@ (8007c00 <UART4_MspInit+0xc8>)
 8007b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b86:	4b1e      	ldr	r3, [pc, #120]	@ (8007c00 <UART4_MspInit+0xc8>)
 8007b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007c00 <UART4_MspInit+0xc8>)
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007b96:	4b1a      	ldr	r3, [pc, #104]	@ (8007c00 <UART4_MspInit+0xc8>)
 8007b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	60bb      	str	r3, [r7, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = BUS_UART4_TX_GPIO_PIN;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007baa:	2302      	movs	r3, #2
 8007bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_UART4_TX_GPIO_AF;
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_UART4_TX_GPIO_PORT, &GPIO_InitStruct);
 8007bc2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	480e      	ldr	r0, [pc, #56]	@ (8007c04 <UART4_MspInit+0xcc>)
 8007bca:	f002 f941 	bl	8009e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_UART4_RX_GPIO_PIN;
 8007bce:	2302      	movs	r3, #2
 8007bd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_UART4_RX_GPIO_AF;
 8007be6:	2308      	movs	r3, #8
 8007be8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_UART4_RX_GPIO_PORT, &GPIO_InitStruct);
 8007bec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4804      	ldr	r0, [pc, #16]	@ (8007c04 <UART4_MspInit+0xcc>)
 8007bf4:	f002 f92c 	bl	8009e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
}
 8007bf8:	bf00      	nop
 8007bfa:	37f0      	adds	r7, #240	@ 0xf0
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	46020c00 	.word	0x46020c00
 8007c04:	42020000 	.word	0x42020000

08007c08 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8007c12:	4b19      	ldr	r3, [pc, #100]	@ (8007c78 <BSP_I2C1_Init+0x70>)
 8007c14:	4a19      	ldr	r2, [pc, #100]	@ (8007c7c <BSP_I2C1_Init+0x74>)
 8007c16:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8007c18:	4b19      	ldr	r3, [pc, #100]	@ (8007c80 <BSP_I2C1_Init+0x78>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	4918      	ldr	r1, [pc, #96]	@ (8007c80 <BSP_I2C1_Init+0x78>)
 8007c20:	600a      	str	r2, [r1, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d122      	bne.n	8007c6c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8007c26:	4814      	ldr	r0, [pc, #80]	@ (8007c78 <BSP_I2C1_Init+0x70>)
 8007c28:	f002 ffd1 	bl	800abce <HAL_I2C_GetState>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d11c      	bne.n	8007c6c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8007c32:	4811      	ldr	r0, [pc, #68]	@ (8007c78 <BSP_I2C1_Init+0x70>)
 8007c34:	f000 f8fe 	bl	8007e34 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d116      	bne.n	8007c6c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8007c3e:	480e      	ldr	r0, [pc, #56]	@ (8007c78 <BSP_I2C1_Init+0x70>)
 8007c40:	f000 f8b4 	bl	8007dac <MX_I2C1_Init>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8007c4a:	f06f 0307 	mvn.w	r3, #7
 8007c4e:	607b      	str	r3, [r7, #4]
 8007c50:	e00c      	b.n	8007c6c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007c52:	2100      	movs	r1, #0
 8007c54:	4808      	ldr	r0, [pc, #32]	@ (8007c78 <BSP_I2C1_Init+0x70>)
 8007c56:	f003 ffcb 	bl	800bbf0 <HAL_I2CEx_ConfigAnalogFilter>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8007c60:	f06f 0307 	mvn.w	r3, #7
 8007c64:	607b      	str	r3, [r7, #4]
 8007c66:	e001      	b.n	8007c6c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8007c6c:	687b      	ldr	r3, [r7, #4]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000524 	.word	0x20000524
 8007c7c:	40005400 	.word	0x40005400
 8007c80:	20000578 	.word	0x20000578

08007c84 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8007c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007ccc <BSP_I2C1_DeInit+0x48>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d014      	beq.n	8007cc0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8007c96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ccc <BSP_I2C1_DeInit+0x48>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007ccc <BSP_I2C1_DeInit+0x48>)
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <BSP_I2C1_DeInit+0x48>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8007ca8:	4809      	ldr	r0, [pc, #36]	@ (8007cd0 <BSP_I2C1_DeInit+0x4c>)
 8007caa:	f000 f9b3 	bl	8008014 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8007cae:	4808      	ldr	r0, [pc, #32]	@ (8007cd0 <BSP_I2C1_DeInit+0x4c>)
 8007cb0:	f002 fc7b 	bl	800a5aa <HAL_I2C_DeInit>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8007cba:	f06f 0307 	mvn.w	r3, #7
 8007cbe:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8007cc0:	687b      	ldr	r3, [r7, #4]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000578 	.word	0x20000578
 8007cd0:	20000524 	.word	0x20000524

08007cd4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	@ 0x28
 8007cd8:	af04      	add	r7, sp, #16
 8007cda:	60ba      	str	r2, [r7, #8]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	81fb      	strh	r3, [r7, #14]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	81bb      	strh	r3, [r7, #12]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8007cee:	89ba      	ldrh	r2, [r7, #12]
 8007cf0:	89f9      	ldrh	r1, [r7, #14]
 8007cf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007cf6:	9302      	str	r3, [sp, #8]
 8007cf8:	88fb      	ldrh	r3, [r7, #6]
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	2301      	movs	r3, #1
 8007d02:	480c      	ldr	r0, [pc, #48]	@ (8007d34 <BSP_I2C1_WriteReg+0x60>)
 8007d04:	f002 fc80 	bl	800a608 <HAL_I2C_Mem_Write>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00c      	beq.n	8007d28 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8007d0e:	4809      	ldr	r0, [pc, #36]	@ (8007d34 <BSP_I2C1_WriteReg+0x60>)
 8007d10:	f002 ff6b 	bl	800abea <HAL_I2C_GetError>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d103      	bne.n	8007d22 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007d1a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	e002      	b.n	8007d28 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8007d22:	f06f 0303 	mvn.w	r3, #3
 8007d26:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8007d28:	697b      	ldr	r3, [r7, #20]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000524 	.word	0x20000524

08007d38 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	@ 0x28
 8007d3c:	af04      	add	r7, sp, #16
 8007d3e:	60ba      	str	r2, [r7, #8]
 8007d40:	461a      	mov	r2, r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	81fb      	strh	r3, [r7, #14]
 8007d46:	460b      	mov	r3, r1
 8007d48:	81bb      	strh	r3, [r7, #12]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8007d52:	89ba      	ldrh	r2, [r7, #12]
 8007d54:	89f9      	ldrh	r1, [r7, #14]
 8007d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d5a:	9302      	str	r3, [sp, #8]
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2301      	movs	r3, #1
 8007d66:	480c      	ldr	r0, [pc, #48]	@ (8007d98 <BSP_I2C1_ReadReg+0x60>)
 8007d68:	f002 fd62 	bl	800a830 <HAL_I2C_Mem_Read>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00c      	beq.n	8007d8c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8007d72:	4809      	ldr	r0, [pc, #36]	@ (8007d98 <BSP_I2C1_ReadReg+0x60>)
 8007d74:	f002 ff39 	bl	800abea <HAL_I2C_GetError>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d103      	bne.n	8007d86 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007d7e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	e002      	b.n	8007d8c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007d86:	f06f 0303 	mvn.w	r3, #3
 8007d8a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8007d8c:	697b      	ldr	r3, [r7, #20]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000524 	.word	0x20000524

08007d9c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007da0:	f000 ffa0 	bl	8008ce4 <HAL_GetTick>
 8007da4:	4603      	mov	r3, r0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a1c      	ldr	r2, [pc, #112]	@ (8007e2c <MX_I2C1_Init+0x80>)
 8007dbc:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F07BFF;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007e30 <MX_I2C1_Init+0x84>)
 8007dc2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f002 fb40 	bl	800a474 <HAL_I2C_Init>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007dfe:	2100      	movs	r1, #0
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f003 fef5 	bl	800bbf0 <HAL_I2CEx_ConfigAnalogFilter>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8007e10:	2100      	movs	r1, #0
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f003 ff37 	bl	800bc86 <HAL_I2CEx_ConfigDigitalFilter>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40005400 	.word	0x40005400
 8007e30:	00f07bff 	.word	0x00f07bff

08007e34 <I2C1_MspInit>:
DMA_HandleTypeDef handle_GPDMA1_Channel3;
DMA_HandleTypeDef handle_GPDMA1_Channel2;

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b0bc      	sub	sp, #240	@ 0xf0
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e3c:	f107 0310 	add.w	r3, r7, #16
 8007e40:	22c8      	movs	r2, #200	@ 0xc8
 8007e42:	2100      	movs	r1, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f00a f83d 	bl	8011ec4 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007e4a:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007e56:	2300      	movs	r3, #0
 8007e58:	67bb      	str	r3, [r7, #120]	@ 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8007e5a:	f107 0310 	add.w	r3, r7, #16
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f005 fae6 	bl	800d430 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e64:	4b65      	ldr	r3, [pc, #404]	@ (8007ffc <I2C1_MspInit+0x1c8>)
 8007e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e6a:	4a64      	ldr	r2, [pc, #400]	@ (8007ffc <I2C1_MspInit+0x1c8>)
 8007e6c:	f043 0302 	orr.w	r3, r3, #2
 8007e70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007e74:	4b61      	ldr	r3, [pc, #388]	@ (8007ffc <I2C1_MspInit+0x1c8>)
 8007e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8007e82:	2340      	movs	r3, #64	@ 0x40
 8007e84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e88:	2312      	movs	r3, #18
 8007e8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e94:	2300      	movs	r3, #0
 8007e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8007e9a:	2304      	movs	r3, #4
 8007e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8007ea0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4856      	ldr	r0, [pc, #344]	@ (8008000 <I2C1_MspInit+0x1cc>)
 8007ea8:	f001 ffd2 	bl	8009e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8007eac:	2380      	movs	r3, #128	@ 0x80
 8007eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007eb2:	2312      	movs	r3, #18
 8007eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8007ec4:	2304      	movs	r3, #4
 8007ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8007eca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8007ece:	4619      	mov	r1, r3
 8007ed0:	484b      	ldr	r0, [pc, #300]	@ (8008000 <I2C1_MspInit+0x1cc>)
 8007ed2:	f001 ffbd 	bl	8009e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ed6:	4b49      	ldr	r3, [pc, #292]	@ (8007ffc <I2C1_MspInit+0x1c8>)
 8007ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007edc:	4a47      	ldr	r2, [pc, #284]	@ (8007ffc <I2C1_MspInit+0x1c8>)
 8007ede:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ee2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007ee6:	4b45      	ldr	r3, [pc, #276]	@ (8007ffc <I2C1_MspInit+0x1c8>)
 8007ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ef0:	60bb      	str	r3, [r7, #8]
 8007ef2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8007ef4:	4b43      	ldr	r3, [pc, #268]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007ef6:	4a44      	ldr	r2, [pc, #272]	@ (8008008 <I2C1_MspInit+0x1d4>)
 8007ef8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C1_TX;
 8007efa:	4b42      	ldr	r3, [pc, #264]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007efc:	220d      	movs	r2, #13
 8007efe:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8007f00:	4b40      	ldr	r3, [pc, #256]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f06:	4b3f      	ldr	r3, [pc, #252]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007f0c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8007f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f10:	2208      	movs	r2, #8
 8007f12:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8007f14:	4b3b      	ldr	r3, [pc, #236]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8007f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8007f20:	4b38      	ldr	r3, [pc, #224]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8007f26:	4b37      	ldr	r3, [pc, #220]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8007f2c:	4b35      	ldr	r3, [pc, #212]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f2e:	2201      	movs	r2, #1
 8007f30:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8007f32:	4b34      	ldr	r3, [pc, #208]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8007f38:	4b32      	ldr	r3, [pc, #200]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8007f3e:	4b31      	ldr	r3, [pc, #196]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8007f44:	4b2f      	ldr	r3, [pc, #188]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_DMA_Init(&handle_GPDMA1_Channel3);
 8007f4a:	482e      	ldr	r0, [pc, #184]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f4c:	f001 f8c0 	bl	80090d0 <HAL_DMA_Init>

    __HAL_LINKDMA(i2cHandle, hdmatx, handle_GPDMA1_Channel3);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a2c      	ldr	r2, [pc, #176]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f54:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f56:	4a2b      	ldr	r2, [pc, #172]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV);
 8007f5c:	2110      	movs	r1, #16
 8007f5e:	4829      	ldr	r0, [pc, #164]	@ (8008004 <I2C1_MspInit+0x1d0>)
 8007f60:	f001 fc6a 	bl	8009838 <HAL_DMA_ConfigChannelAttributes>

    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8007f64:	4b29      	ldr	r3, [pc, #164]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f66:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <I2C1_MspInit+0x1dc>)
 8007f68:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C1_RX;
 8007f6a:	4b28      	ldr	r3, [pc, #160]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f6c:	220c      	movs	r2, #12
 8007f6e:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8007f70:	4b26      	ldr	r3, [pc, #152]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f76:	4b25      	ldr	r3, [pc, #148]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8007f7c:	4b23      	ldr	r3, [pc, #140]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8007f82:	4b22      	ldr	r3, [pc, #136]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f84:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007f88:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8007f8a:	4b20      	ldr	r3, [pc, #128]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8007f90:	4b1e      	ldr	r3, [pc, #120]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8007f96:	4b1d      	ldr	r3, [pc, #116]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8007f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8007fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8007fa8:	4b18      	ldr	r3, [pc, #96]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8007fae:	4b17      	ldr	r3, [pc, #92]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8007fb4:	4b15      	ldr	r3, [pc, #84]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_DMA_Init(&handle_GPDMA1_Channel2);
 8007fba:	4814      	ldr	r0, [pc, #80]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007fbc:	f001 f888 	bl	80090d0 <HAL_DMA_Init>

    __HAL_LINKDMA(i2cHandle, hdmarx, handle_GPDMA1_Channel2);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a12      	ldr	r2, [pc, #72]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007fc4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007fc6:	4a11      	ldr	r2, [pc, #68]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	65d3      	str	r3, [r2, #92]	@ 0x5c

    HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV);
 8007fcc:	2110      	movs	r1, #16
 8007fce:	480f      	ldr	r0, [pc, #60]	@ (800800c <I2C1_MspInit+0x1d8>)
 8007fd0:	f001 fc32 	bl	8009838 <HAL_DMA_ConfigChannelAttributes>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	2037      	movs	r0, #55	@ 0x37
 8007fda:	f000 ff8f 	bl	8008efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007fde:	2037      	movs	r0, #55	@ 0x37
 8007fe0:	f000 ffa6 	bl	8008f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	2038      	movs	r0, #56	@ 0x38
 8007fea:	f000 ff87 	bl	8008efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007fee:	2038      	movs	r0, #56	@ 0x38
 8007ff0:	f000 ff9e 	bl	8008f30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8007ff4:	bf00      	nop
 8007ff6:	37f0      	adds	r7, #240	@ 0xf0
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	46020c00 	.word	0x46020c00
 8008000:	42020400 	.word	0x42020400
 8008004:	2000066c 	.word	0x2000066c
 8008008:	400201d0 	.word	0x400201d0
 800800c:	200006e4 	.word	0x200006e4
 8008010:	40020150 	.word	0x40020150

08008014 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800801c:	4b11      	ldr	r3, [pc, #68]	@ (8008064 <I2C1_MspDeInit+0x50>)
 800801e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008022:	4a10      	ldr	r2, [pc, #64]	@ (8008064 <I2C1_MspDeInit+0x50>)
 8008024:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008028:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800802c:	2140      	movs	r1, #64	@ 0x40
 800802e:	480e      	ldr	r0, [pc, #56]	@ (8008068 <I2C1_MspDeInit+0x54>)
 8008030:	f002 f8ee 	bl	800a210 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8008034:	2180      	movs	r1, #128	@ 0x80
 8008036:	480c      	ldr	r0, [pc, #48]	@ (8008068 <I2C1_MspDeInit+0x54>)
 8008038:	f002 f8ea 	bl	800a210 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008040:	4618      	mov	r0, r3
 8008042:	f001 f987 	bl	8009354 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804a:	4618      	mov	r0, r3
 800804c:	f001 f982 	bl	8009354 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8008050:	2037      	movs	r0, #55	@ 0x37
 8008052:	f000 ff7b 	bl	8008f4c <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8008056:	2038      	movs	r0, #56	@ 0x38
 8008058:	f000 ff78 	bl	8008f4c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	46020c00 	.word	0x46020c00
 8008068:	42020400 	.word	0x42020400

0800806c <BSP_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE
  *         - ENV_PRESSURE
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	@ 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008076:	2300      	movs	r3, #0
 8008078:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t function = ENV_TEMPERATURE;
 800807a:	2301      	movs	r3, #1
 800807c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	61bb      	str	r3, [r7, #24]
  BSP_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <BSP_ENV_SENSOR_Init+0x24>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d02b      	beq.n	80080e6 <BSP_ENV_SENSOR_Init+0x7a>
 800808e:	e055      	b.n	800813c <BSP_ENV_SENSOR_Init+0xd0>
  {
#if (USE_ENV_SENSOR_STTS22H_0 == 1)
    case STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 8008090:	6838      	ldr	r0, [r7, #0]
 8008092:	f000 f8dd 	bl	8008250 <STTS22H_0_Probe>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <BSP_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 800809c:	f04f 33ff 	mov.w	r3, #4294967295
 80080a0:	e088      	b.n	80081b4 <BSP_ENV_SENSOR_Init+0x148>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80080a2:	4a46      	ldr	r2, [pc, #280]	@ (80081bc <BSP_ENV_SENSOR_Init+0x150>)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	4944      	ldr	r1, [pc, #272]	@ (80081c0 <BSP_ENV_SENSOR_Init+0x154>)
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <BSP_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80080c2:	f06f 0306 	mvn.w	r3, #6
 80080c6:	e075      	b.n	80081b4 <BSP_ENV_SENSOR_Init+0x148>
      }
      if (cap.Temperature == 1U)
 80080c8:	7a3b      	ldrb	r3, [r7, #8]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d103      	bne.n	80080d6 <BSP_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f043 0301 	orr.w	r3, r3, #1
 80080d4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80080d6:	7a7b      	ldrb	r3, [r7, #9]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d133      	bne.n	8008144 <BSP_ENV_SENSOR_Init+0xd8>
      {
        component_functions |= ENV_PRESSURE;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f043 0302 	orr.w	r3, r3, #2
 80080e2:	61bb      	str	r3, [r7, #24]
      }
      break;
 80080e4:	e02e      	b.n	8008144 <BSP_ENV_SENSOR_Init+0xd8>
#endif /* USE_ENV_SENSOR_STTS22H_0 == 1 */
#if (USE_ENV_SENSOR_LPS22DF_0 == 1)
    case LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 80080e6:	6838      	ldr	r0, [r7, #0]
 80080e8:	f000 f94a 	bl	8008380 <LPS22DF_0_Probe>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <BSP_ENV_SENSOR_Init+0x8c>
      {
        return BSP_ERROR_NO_INIT;
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295
 80080f6:	e05d      	b.n	80081b4 <BSP_ENV_SENSOR_Init+0x148>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80080f8:	4a30      	ldr	r2, [pc, #192]	@ (80081bc <BSP_ENV_SENSOR_Init+0x150>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	492f      	ldr	r1, [pc, #188]	@ (80081c0 <BSP_ENV_SENSOR_Init+0x154>)
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800810a:	f107 0108 	add.w	r1, r7, #8
 800810e:	4610      	mov	r0, r2
 8008110:	4798      	blx	r3
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <BSP_ENV_SENSOR_Init+0xb2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008118:	f06f 0306 	mvn.w	r3, #6
 800811c:	e04a      	b.n	80081b4 <BSP_ENV_SENSOR_Init+0x148>
      }
      if (cap.Temperature == 1U)
 800811e:	7a3b      	ldrb	r3, [r7, #8]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d103      	bne.n	800812c <BSP_ENV_SENSOR_Init+0xc0>
      {
        component_functions |= ENV_TEMPERATURE;
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	f043 0301 	orr.w	r3, r3, #1
 800812a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800812c:	7a7b      	ldrb	r3, [r7, #9]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d10a      	bne.n	8008148 <BSP_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_PRESSURE;
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	61bb      	str	r3, [r7, #24]
      }
      break;
 800813a:	e005      	b.n	8008148 <BSP_ENV_SENSOR_Init+0xdc>
#endif /* USE_ENV_SENSOR_LPS22DF_0 == 1 */
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800813c:	f06f 0301 	mvn.w	r3, #1
 8008140:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008142:	e002      	b.n	800814a <BSP_ENV_SENSOR_Init+0xde>
      break;
 8008144:	bf00      	nop
 8008146:	e000      	b.n	800814a <BSP_ENV_SENSOR_Init+0xde>
      break;
 8008148:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <BSP_ENV_SENSOR_Init+0xe8>
  {
    return ret;
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	e02f      	b.n	80081b4 <BSP_ENV_SENSOR_Init+0x148>
  }

  for (i = 0; i < BSP_ENV_FUNCTIONS_NBR; i++)
 8008154:	2300      	movs	r3, #0
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	e028      	b.n	80081ac <BSP_ENV_SENSOR_Init+0x140>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	4013      	ands	r3, r2
 8008160:	6a3a      	ldr	r2, [r7, #32]
 8008162:	429a      	cmp	r2, r3
 8008164:	d11c      	bne.n	80081a0 <BSP_ENV_SENSOR_Init+0x134>
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	4013      	ands	r3, r2
 800816c:	6a3a      	ldr	r2, [r7, #32]
 800816e:	429a      	cmp	r2, r3
 8008170:	d116      	bne.n	80081a0 <BSP_ENV_SENSOR_Init+0x134>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008172:	4a14      	ldr	r2, [pc, #80]	@ (80081c4 <BSP_ENV_SENSOR_Init+0x158>)
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800817a:	4913      	ldr	r1, [pc, #76]	@ (80081c8 <BSP_ENV_SENSOR_Init+0x15c>)
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	0052      	lsls	r2, r2, #1
 8008180:	4413      	add	r3, r2
 8008182:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	490d      	ldr	r1, [pc, #52]	@ (80081c0 <BSP_ENV_SENSOR_Init+0x154>)
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <BSP_ENV_SENSOR_Init+0x134>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800819a:	f06f 0304 	mvn.w	r3, #4
 800819e:	e009      	b.n	80081b4 <BSP_ENV_SENSOR_Init+0x148>
      }
    }
    function = function << 1;
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	623b      	str	r3, [r7, #32]
  for (i = 0; i < BSP_ENV_FUNCTIONS_NBR; i++)
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	3301      	adds	r3, #1
 80081aa:	61fb      	str	r3, [r7, #28]
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d9d3      	bls.n	800815a <BSP_ENV_SENSOR_Init+0xee>
  }

  return ret;
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3728      	adds	r7, #40	@ 0x28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000774 	.word	0x20000774
 80081c0:	2000075c 	.word	0x2000075c
 80081c4:	20000140 	.word	0x20000140
 80081c8:	20000764 	.word	0x20000764

080081cc <BSP_ENV_SENSOR_GetValue>:
  *         - ENV_PRESSURE
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= BSP_ENV_INSTANCES_NBR)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d903      	bls.n	80081e6 <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80081de:	f06f 0301 	mvn.w	r3, #1
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	e027      	b.n	8008236 <BSP_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80081e6:	4a16      	ldr	r2, [pc, #88]	@ (8008240 <BSP_ENV_SENSOR_GetValue+0x74>)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	4013      	ands	r3, r2
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d11b      	bne.n	8008230 <BSP_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80081f8:	4a12      	ldr	r2, [pc, #72]	@ (8008244 <BSP_ENV_SENSOR_GetValue+0x78>)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008200:	4911      	ldr	r1, [pc, #68]	@ (8008248 <BSP_ENV_SENSOR_GetValue+0x7c>)
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	0052      	lsls	r2, r2, #1
 8008206:	4413      	add	r3, r2
 8008208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	490f      	ldr	r1, [pc, #60]	@ (800824c <BSP_ENV_SENSOR_GetValue+0x80>)
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4610      	mov	r0, r2
 800821a:	4798      	blx	r3
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <BSP_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008222:	f06f 0304 	mvn.w	r3, #4
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e005      	b.n	8008236 <BSP_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	e002      	b.n	8008236 <BSP_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008230:	f06f 0301 	mvn.w	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008236:	697b      	ldr	r3, [r7, #20]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	2000077c 	.word	0x2000077c
 8008244:	20000140 	.word	0x20000140
 8008248:	20000764 	.word	0x20000764
 800824c:	2000075c 	.word	0x2000075c

08008250 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b092      	sub	sp, #72	@ 0x48
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008258:	2300      	movs	r3, #0
 800825a:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800825c:	2300      	movs	r3, #0
 800825e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H; /* ADDR pin = VDD */
 8008260:	2371      	movs	r3, #113	@ 0x71
 8008262:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = BSP_STTS22H_0_I2C_INIT;
 8008266:	4b39      	ldr	r3, [pc, #228]	@ (800834c <STTS22H_0_Probe+0xfc>)
 8008268:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = BSP_STTS22H_0_I2C_DEINIT;
 800826a:	4b39      	ldr	r3, [pc, #228]	@ (8008350 <STTS22H_0_Probe+0x100>)
 800826c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = BSP_STTS22H_0_I2C_READ_REG;
 800826e:	4b39      	ldr	r3, [pc, #228]	@ (8008354 <STTS22H_0_Probe+0x104>)
 8008270:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = BSP_STTS22H_0_I2C_WRITE_REG;
 8008272:	4b39      	ldr	r3, [pc, #228]	@ (8008358 <STTS22H_0_Probe+0x108>)
 8008274:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = BSP_GetTick;
 8008276:	4b39      	ldr	r3, [pc, #228]	@ (800835c <STTS22H_0_Probe+0x10c>)
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800827a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800827e:	4619      	mov	r1, r3
 8008280:	4837      	ldr	r0, [pc, #220]	@ (8008360 <STTS22H_0_Probe+0x110>)
 8008282:	f7fe fccd 	bl	8006c20 <STTS22H_RegisterBusIO>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <STTS22H_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800828c:	f06f 0306 	mvn.w	r3, #6
 8008290:	647b      	str	r3, [r7, #68]	@ 0x44
 8008292:	e056      	b.n	8008342 <STTS22H_0_Probe+0xf2>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 8008294:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8008298:	4619      	mov	r1, r3
 800829a:	4831      	ldr	r0, [pc, #196]	@ (8008360 <STTS22H_0_Probe+0x110>)
 800829c:	f7fe fd5f 	bl	8006d5e <STTS22H_ReadID>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <STTS22H_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80082a6:	f06f 0306 	mvn.w	r3, #6
 80082aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ac:	e049      	b.n	8008342 <STTS22H_0_Probe+0xf2>
  }
  else if (id != STTS22H_ID)
 80082ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80082b4:	d003      	beq.n	80082be <STTS22H_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80082b6:	f06f 0306 	mvn.w	r3, #6
 80082ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80082bc:	e041      	b.n	8008342 <STTS22H_0_Probe+0xf2>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4619      	mov	r1, r3
 80082c4:	4826      	ldr	r0, [pc, #152]	@ (8008360 <STTS22H_0_Probe+0x110>)
 80082c6:	f7fe fd65 	bl	8006d94 <STTS22H_GetCapabilities>
    EnvCtx[STTS22H_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80082ca:	7a3b      	ldrb	r3, [r7, #8]
 80082cc:	461a      	mov	r2, r3
 80082ce:	7a7b      	ldrb	r3, [r7, #9]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	431a      	orrs	r2, r3
                                    uint32_t)cap.Humidity << 2);
 80082d4:	7abb      	ldrb	r3, [r7, #10]
 80082d6:	009b      	lsls	r3, r3, #2
    EnvCtx[STTS22H_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80082d8:	4313      	orrs	r3, r2
 80082da:	4a22      	ldr	r2, [pc, #136]	@ (8008364 <STTS22H_0_Probe+0x114>)
 80082dc:	6013      	str	r3, [r2, #0]

    EnvCompObj[STTS22H_0] = &stts22h_obj_0;
 80082de:	4b22      	ldr	r3, [pc, #136]	@ (8008368 <STTS22H_0_Probe+0x118>)
 80082e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008360 <STTS22H_0_Probe+0x110>)
 80082e2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 80082e4:	4b21      	ldr	r3, [pc, #132]	@ (800836c <STTS22H_0_Probe+0x11c>)
 80082e6:	4a22      	ldr	r2, [pc, #136]	@ (8008370 <STTS22H_0_Probe+0x120>)
 80082e8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80082ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d11d      	bne.n	800832c <STTS22H_0_Probe+0xdc>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d018      	beq.n	800832c <STTS22H_0_Probe+0xdc>
 80082fa:	7a3b      	ldrb	r3, [r7, #8]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d115      	bne.n	800832c <STTS22H_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 8008300:	4b1c      	ldr	r3, [pc, #112]	@ (8008374 <STTS22H_0_Probe+0x124>)
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	4a1c      	ldr	r2, [pc, #112]	@ (8008378 <STTS22H_0_Probe+0x128>)
 8008306:	491d      	ldr	r1, [pc, #116]	@ (800837c <STTS22H_0_Probe+0x12c>)
 8008308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[STTS22H_0]->Init(EnvCompObj[STTS22H_0]) != STTS22H_OK)
 800830c:	4b17      	ldr	r3, [pc, #92]	@ (800836c <STTS22H_0_Probe+0x11c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a15      	ldr	r2, [pc, #84]	@ (8008368 <STTS22H_0_Probe+0x118>)
 8008314:	6812      	ldr	r2, [r2, #0]
 8008316:	4610      	mov	r0, r2
 8008318:	4798      	blx	r3
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <STTS22H_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008320:	f06f 0304 	mvn.w	r3, #4
 8008324:	647b      	str	r3, [r7, #68]	@ 0x44
 8008326:	e001      	b.n	800832c <STTS22H_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008328:	2300      	movs	r3, #0
 800832a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800832c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800832e:	2b00      	cmp	r3, #0
 8008330:	d107      	bne.n	8008342 <STTS22H_0_Probe+0xf2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <STTS22H_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800833c:	f06f 0304 	mvn.w	r3, #4
 8008340:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 8008342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008344:	4618      	mov	r0, r3
 8008346:	3748      	adds	r7, #72	@ 0x48
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	08007c09 	.word	0x08007c09
 8008350:	08007c85 	.word	0x08007c85
 8008354:	08007d39 	.word	0x08007d39
 8008358:	08007cd5 	.word	0x08007cd5
 800835c:	08007d9d 	.word	0x08007d9d
 8008360:	20000784 	.word	0x20000784
 8008364:	2000077c 	.word	0x2000077c
 8008368:	2000075c 	.word	0x2000075c
 800836c:	20000774 	.word	0x20000774
 8008370:	200000fc 	.word	0x200000fc
 8008374:	20000140 	.word	0x20000140
 8008378:	20000764 	.word	0x20000764
 800837c:	2000010c 	.word	0x2000010c

08008380 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b092      	sub	sp, #72	@ 0x48
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008388:	2300      	movs	r3, #0
 800838a:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800838c:	2300      	movs	r3, #0
 800838e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H; /* SA0 = VDD */
 8008390:	23bb      	movs	r3, #187	@ 0xbb
 8008392:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = BSP_LPS22DF_0_I2C_INIT;
 8008396:	4b45      	ldr	r3, [pc, #276]	@ (80084ac <LPS22DF_0_Probe+0x12c>)
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = BSP_LPS22DF_0_I2C_DEINIT;
 800839a:	4b45      	ldr	r3, [pc, #276]	@ (80084b0 <LPS22DF_0_Probe+0x130>)
 800839c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = BSP_LPS22DF_0_I2C_READ_REG;
 800839e:	4b45      	ldr	r3, [pc, #276]	@ (80084b4 <LPS22DF_0_Probe+0x134>)
 80083a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = BSP_LPS22DF_0_I2C_WRITE_REG;
 80083a2:	4b45      	ldr	r3, [pc, #276]	@ (80084b8 <LPS22DF_0_Probe+0x138>)
 80083a4:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = BSP_GetTick;
 80083a6:	4b45      	ldr	r3, [pc, #276]	@ (80084bc <LPS22DF_0_Probe+0x13c>)
 80083a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 80083aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083ae:	4619      	mov	r1, r3
 80083b0:	4843      	ldr	r0, [pc, #268]	@ (80084c0 <LPS22DF_0_Probe+0x140>)
 80083b2:	f7fb ff59 	bl	8004268 <LPS22DF_RegisterBusIO>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <LPS22DF_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80083bc:	f06f 0306 	mvn.w	r3, #6
 80083c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083c2:	e06e      	b.n	80084a2 <LPS22DF_0_Probe+0x122>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 80083c4:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80083c8:	4619      	mov	r1, r3
 80083ca:	483d      	ldr	r0, [pc, #244]	@ (80084c0 <LPS22DF_0_Probe+0x140>)
 80083cc:	f7fb fff5 	bl	80043ba <LPS22DF_ReadID>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <LPS22DF_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80083d6:	f06f 0306 	mvn.w	r3, #6
 80083da:	647b      	str	r3, [r7, #68]	@ 0x44
 80083dc:	e061      	b.n	80084a2 <LPS22DF_0_Probe+0x122>
  }
  else if (id != LPS22DF_ID)
 80083de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80083e2:	2bb4      	cmp	r3, #180	@ 0xb4
 80083e4:	d003      	beq.n	80083ee <LPS22DF_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80083e6:	f06f 0306 	mvn.w	r3, #6
 80083ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ec:	e059      	b.n	80084a2 <LPS22DF_0_Probe+0x122>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 80083ee:	f107 0308 	add.w	r3, r7, #8
 80083f2:	4619      	mov	r1, r3
 80083f4:	4832      	ldr	r0, [pc, #200]	@ (80084c0 <LPS22DF_0_Probe+0x140>)
 80083f6:	f7fb fffb 	bl	80043f0 <LPS22DF_GetCapabilities>

    EnvCtx[LPS22DF_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80083fa:	7a3b      	ldrb	r3, [r7, #8]
 80083fc:	461a      	mov	r2, r3
 80083fe:	7a7b      	ldrb	r3, [r7, #9]
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	431a      	orrs	r2, r3
                                    uint32_t)cap.Humidity << 2);
 8008404:	7abb      	ldrb	r3, [r7, #10]
 8008406:	009b      	lsls	r3, r3, #2
    EnvCtx[LPS22DF_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008408:	4313      	orrs	r3, r2
 800840a:	4a2e      	ldr	r2, [pc, #184]	@ (80084c4 <LPS22DF_0_Probe+0x144>)
 800840c:	6053      	str	r3, [r2, #4]

    EnvCompObj[LPS22DF_0] = &lps22df_obj_0;
 800840e:	4b2e      	ldr	r3, [pc, #184]	@ (80084c8 <LPS22DF_0_Probe+0x148>)
 8008410:	4a2b      	ldr	r2, [pc, #172]	@ (80084c0 <LPS22DF_0_Probe+0x140>)
 8008412:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 8008414:	4b2d      	ldr	r3, [pc, #180]	@ (80084cc <LPS22DF_0_Probe+0x14c>)
 8008416:	4a2e      	ldr	r2, [pc, #184]	@ (80084d0 <LPS22DF_0_Probe+0x150>)
 8008418:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800841a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800841c:	2b00      	cmp	r3, #0
 800841e:	d11e      	bne.n	800845e <LPS22DF_0_Probe+0xde>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d019      	beq.n	800845e <LPS22DF_0_Probe+0xde>
 800842a:	7a3b      	ldrb	r3, [r7, #8]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d116      	bne.n	800845e <LPS22DF_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 8008430:	4b28      	ldr	r3, [pc, #160]	@ (80084d4 <LPS22DF_0_Probe+0x154>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	4a28      	ldr	r2, [pc, #160]	@ (80084d8 <LPS22DF_0_Probe+0x158>)
 8008436:	3302      	adds	r3, #2
 8008438:	4928      	ldr	r1, [pc, #160]	@ (80084dc <LPS22DF_0_Probe+0x15c>)
 800843a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[LPS22DF_0]->Init(EnvCompObj[LPS22DF_0]) != LPS22DF_OK)
 800843e:	4b23      	ldr	r3, [pc, #140]	@ (80084cc <LPS22DF_0_Probe+0x14c>)
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a20      	ldr	r2, [pc, #128]	@ (80084c8 <LPS22DF_0_Probe+0x148>)
 8008446:	6852      	ldr	r2, [r2, #4]
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <LPS22DF_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008452:	f06f 0304 	mvn.w	r3, #4
 8008456:	647b      	str	r3, [r7, #68]	@ 0x44
 8008458:	e001      	b.n	800845e <LPS22DF_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800845a:	2300      	movs	r3, #0
 800845c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800845e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008460:	2b00      	cmp	r3, #0
 8008462:	d11e      	bne.n	80084a2 <LPS22DF_0_Probe+0x122>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d019      	beq.n	80084a2 <LPS22DF_0_Probe+0x122>
 800846e:	7a7b      	ldrb	r3, [r7, #9]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d116      	bne.n	80084a2 <LPS22DF_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 8008474:	4b17      	ldr	r3, [pc, #92]	@ (80084d4 <LPS22DF_0_Probe+0x154>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	4a17      	ldr	r2, [pc, #92]	@ (80084d8 <LPS22DF_0_Probe+0x158>)
 800847a:	3302      	adds	r3, #2
 800847c:	4918      	ldr	r1, [pc, #96]	@ (80084e0 <LPS22DF_0_Probe+0x160>)
 800847e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[LPS22DF_0]->Init(EnvCompObj[LPS22DF_0]) != LPS22DF_OK)
 8008482:	4b12      	ldr	r3, [pc, #72]	@ (80084cc <LPS22DF_0_Probe+0x14c>)
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a0f      	ldr	r2, [pc, #60]	@ (80084c8 <LPS22DF_0_Probe+0x148>)
 800848a:	6852      	ldr	r2, [r2, #4]
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <LPS22DF_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008496:	f06f 0304 	mvn.w	r3, #4
 800849a:	647b      	str	r3, [r7, #68]	@ 0x44
 800849c:	e001      	b.n	80084a2 <LPS22DF_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800849e:	2300      	movs	r3, #0
 80084a0:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
  }

  return ret;
 80084a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3748      	adds	r7, #72	@ 0x48
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	08007c09 	.word	0x08007c09
 80084b0:	08007c85 	.word	0x08007c85
 80084b4:	08007d39 	.word	0x08007d39
 80084b8:	08007cd5 	.word	0x08007cd5
 80084bc:	08007d9d 	.word	0x08007d9d
 80084c0:	200007bc 	.word	0x200007bc
 80084c4:	2000077c 	.word	0x2000077c
 80084c8:	2000075c 	.word	0x2000075c
 80084cc:	20000774 	.word	0x20000774
 80084d0:	2000006c 	.word	0x2000006c
 80084d4:	20000140 	.word	0x20000140
 80084d8:	20000764 	.word	0x20000764
 80084dc:	20000090 	.word	0x20000090
 80084e0:	2000007c 	.word	0x2000007c

080084e4 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08e      	sub	sp, #56	@ 0x38
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 80084f2:	2301      	movs	r3, #1
 80084f4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  BSP_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d06e      	beq.n	80085de <BSP_MOTION_SENSOR_Init+0xfa>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b02      	cmp	r3, #2
 8008504:	f200 809d 	bhi.w	8008642 <BSP_MOTION_SENSOR_Init+0x15e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <BSP_MOTION_SENSOR_Init+0x32>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d032      	beq.n	800857a <BSP_MOTION_SENSOR_Init+0x96>
 8008514:	e095      	b.n	8008642 <BSP_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_MOTION_SENSOR_LIS2MDL_0 == 1)
    case LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8008516:	6838      	ldr	r0, [r7, #0]
 8008518:	f000 f924 	bl	8008764 <LIS2MDL_0_Probe>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <BSP_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008522:	f04f 33ff 	mov.w	r3, #4294967295
 8008526:	e0cc      	b.n	80086c2 <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008528:	4a68      	ldr	r2, [pc, #416]	@ (80086cc <BSP_MOTION_SENSOR_Init+0x1e8>)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	4967      	ldr	r1, [pc, #412]	@ (80086d0 <BSP_MOTION_SENSOR_Init+0x1ec>)
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800853a:	f107 010c 	add.w	r1, r7, #12
 800853e:	4610      	mov	r0, r2
 8008540:	4798      	blx	r3
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <BSP_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008548:	f06f 0306 	mvn.w	r3, #6
 800854c:	e0b9      	b.n	80086c2 <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800854e:	7b3b      	ldrb	r3, [r7, #12]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d103      	bne.n	800855c <BSP_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8008554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008556:	f043 0302 	orr.w	r3, r3, #2
 800855a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800855c:	7b7b      	ldrb	r3, [r7, #13]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d103      	bne.n	800856a <BSP_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8008562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008564:	f043 0301 	orr.w	r3, r3, #1
 8008568:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d16c      	bne.n	800864a <BSP_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	f043 0304 	orr.w	r3, r3, #4
 8008576:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008578:	e067      	b.n	800864a <BSP_MOTION_SENSOR_Init+0x166>
#endif /* USE_MOTION_SENSOR_LIS2MDL_0 == 1 */
#if (USE_MOTION_SENSOR_LIS2DU12_0 == 1)
    case LIS2DU12_0:
      if (LIS2DU12_0_Probe(Functions) != BSP_ERROR_NONE)
 800857a:	6838      	ldr	r0, [r7, #0]
 800857c:	f000 f996 	bl	80088ac <LIS2DU12_0_Probe>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <BSP_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8008586:	f04f 33ff 	mov.w	r3, #4294967295
 800858a:	e09a      	b.n	80086c2 <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800858c:	4a4f      	ldr	r2, [pc, #316]	@ (80086cc <BSP_MOTION_SENSOR_Init+0x1e8>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	494e      	ldr	r1, [pc, #312]	@ (80086d0 <BSP_MOTION_SENSOR_Init+0x1ec>)
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800859e:	f107 010c 	add.w	r1, r7, #12
 80085a2:	4610      	mov	r0, r2
 80085a4:	4798      	blx	r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <BSP_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80085ac:	f06f 0306 	mvn.w	r3, #6
 80085b0:	e087      	b.n	80086c2 <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80085b2:	7b3b      	ldrb	r3, [r7, #12]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d103      	bne.n	80085c0 <BSP_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80085b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ba:	f043 0302 	orr.w	r3, r3, #2
 80085be:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80085c0:	7b7b      	ldrb	r3, [r7, #13]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d103      	bne.n	80085ce <BSP_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	f043 0301 	orr.w	r3, r3, #1
 80085cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d13c      	bne.n	800864e <BSP_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80085d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d6:	f043 0304 	orr.w	r3, r3, #4
 80085da:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80085dc:	e037      	b.n	800864e <BSP_MOTION_SENSOR_Init+0x16a>
#endif /* USE_MOTION_SENSOR_LIS2DU12_0 == 1 */
#if (USE_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 80085de:	6838      	ldr	r0, [r7, #0]
 80085e0:	f000 fa08 	bl	80089f4 <LSM6DSV16X_0_Probe>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <BSP_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80085ea:	f04f 33ff 	mov.w	r3, #4294967295
 80085ee:	e068      	b.n	80086c2 <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80085f0:	4a36      	ldr	r2, [pc, #216]	@ (80086cc <BSP_MOTION_SENSOR_Init+0x1e8>)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	4935      	ldr	r1, [pc, #212]	@ (80086d0 <BSP_MOTION_SENSOR_Init+0x1ec>)
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008602:	f107 010c 	add.w	r1, r7, #12
 8008606:	4610      	mov	r0, r2
 8008608:	4798      	blx	r3
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <BSP_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008610:	f06f 0306 	mvn.w	r3, #6
 8008614:	e055      	b.n	80086c2 <BSP_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008616:	7b3b      	ldrb	r3, [r7, #12]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d103      	bne.n	8008624 <BSP_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	f043 0302 	orr.w	r3, r3, #2
 8008622:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8008624:	7b7b      	ldrb	r3, [r7, #13]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d103      	bne.n	8008632 <BSP_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	f043 0301 	orr.w	r3, r3, #1
 8008630:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d10c      	bne.n	8008652 <BSP_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863a:	f043 0304 	orr.w	r3, r3, #4
 800863e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008640:	e007      	b.n	8008652 <BSP_MOTION_SENSOR_Init+0x16e>
#endif /* USE_MOTION_SENSOR_LSM6DSV16X_0 == 1 */
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008642:	f06f 0301 	mvn.w	r3, #1
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8008648:	e004      	b.n	8008654 <BSP_MOTION_SENSOR_Init+0x170>
      break;
 800864a:	bf00      	nop
 800864c:	e002      	b.n	8008654 <BSP_MOTION_SENSOR_Init+0x170>
      break;
 800864e:	bf00      	nop
 8008650:	e000      	b.n	8008654 <BSP_MOTION_SENSOR_Init+0x170>
      break;
 8008652:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <BSP_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800865a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865c:	e031      	b.n	80086c2 <BSP_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < BSP_MOTION_FUNCTIONS_NBR; i++)
 800865e:	2300      	movs	r3, #0
 8008660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008662:	e02a      	b.n	80086ba <BSP_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008668:	4013      	ands	r3, r2
 800866a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800866c:	429a      	cmp	r2, r3
 800866e:	d11e      	bne.n	80086ae <BSP_MOTION_SENSOR_Init+0x1ca>
 8008670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	4013      	ands	r3, r2
 8008676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008678:	429a      	cmp	r2, r3
 800867a:	d118      	bne.n	80086ae <BSP_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800867c:	4a15      	ldr	r2, [pc, #84]	@ (80086d4 <BSP_MOTION_SENSOR_Init+0x1f0>)
 800867e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008680:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008684:	4814      	ldr	r0, [pc, #80]	@ (80086d8 <BSP_MOTION_SENSOR_Init+0x1f4>)
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4613      	mov	r3, r2
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	4413      	add	r3, r2
 800868e:	440b      	add	r3, r1
 8008690:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	490e      	ldr	r1, [pc, #56]	@ (80086d0 <BSP_MOTION_SENSOR_Init+0x1ec>)
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800869e:	4610      	mov	r0, r2
 80086a0:	4798      	blx	r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <BSP_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80086a8:	f06f 0304 	mvn.w	r3, #4
 80086ac:	e009      	b.n	80086c2 <BSP_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < BSP_MOTION_FUNCTIONS_NBR; i++)
 80086b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b6:	3301      	adds	r3, #1
 80086b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d9d1      	bls.n	8008664 <BSP_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80086c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3738      	adds	r7, #56	@ 0x38
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000824 	.word	0x20000824
 80086d0:	200007f4 	.word	0x200007f4
 80086d4:	20000154 	.word	0x20000154
 80086d8:	20000800 	.word	0x20000800

080086dc <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= BSP_MOTION_INSTANCES_NBR)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d903      	bls.n	80086f6 <BSP_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80086ee:	f06f 0301 	mvn.w	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	e029      	b.n	800874a <BSP_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80086f6:	4a17      	ldr	r2, [pc, #92]	@ (8008754 <BSP_MOTION_SENSOR_GetAxes+0x78>)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4013      	ands	r3, r2
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	429a      	cmp	r2, r3
 8008706:	d11d      	bne.n	8008744 <BSP_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008708:	4a13      	ldr	r2, [pc, #76]	@ (8008758 <BSP_MOTION_SENSOR_GetAxes+0x7c>)
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008710:	4812      	ldr	r0, [pc, #72]	@ (800875c <BSP_MOTION_SENSOR_GetAxes+0x80>)
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4613      	mov	r3, r2
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	4413      	add	r3, r2
 800871a:	440b      	add	r3, r1
 800871c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	490f      	ldr	r1, [pc, #60]	@ (8008760 <BSP_MOTION_SENSOR_GetAxes+0x84>)
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <BSP_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008736:	f06f 0304 	mvn.w	r3, #4
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e005      	b.n	800874a <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	e002      	b.n	800874a <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008744:	f06f 0301 	mvn.w	r3, #1
 8008748:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800874a:	697b      	ldr	r3, [r7, #20]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20000830 	.word	0x20000830
 8008758:	20000154 	.word	0x20000154
 800875c:	20000800 	.word	0x20000800
 8008760:	200007f4 	.word	0x200007f4

08008764 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b094      	sub	sp, #80	@ 0x50
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800876c:	2300      	movs	r3, #0
 800876e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8008770:	2300      	movs	r3, #0
 8008772:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008774:	233d      	movs	r3, #61	@ 0x3d
 8008776:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = BSP_LIS2MDL_0_I2C_INIT;
 800877a:	4b3f      	ldr	r3, [pc, #252]	@ (8008878 <LIS2MDL_0_Probe+0x114>)
 800877c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = BSP_LIS2MDL_0_I2C_DEINIT;
 800877e:	4b3f      	ldr	r3, [pc, #252]	@ (800887c <LIS2MDL_0_Probe+0x118>)
 8008780:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = BSP_LIS2MDL_0_I2C_READ_REG;
 8008782:	4b3f      	ldr	r3, [pc, #252]	@ (8008880 <LIS2MDL_0_Probe+0x11c>)
 8008784:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = BSP_LIS2MDL_0_I2C_WRITE_REG;
 8008786:	4b3f      	ldr	r3, [pc, #252]	@ (8008884 <LIS2MDL_0_Probe+0x120>)
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 800878a:	4b3f      	ldr	r3, [pc, #252]	@ (8008888 <LIS2MDL_0_Probe+0x124>)
 800878c:	647b      	str	r3, [r7, #68]	@ 0x44

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800878e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008792:	4619      	mov	r1, r3
 8008794:	483d      	ldr	r0, [pc, #244]	@ (800888c <LIS2MDL_0_Probe+0x128>)
 8008796:	f7fa fd67 	bl	8003268 <LIS2MDL_RegisterBusIO>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087a0:	f06f 0306 	mvn.w	r3, #6
 80087a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087a6:	e061      	b.n	800886c <LIS2MDL_0_Probe+0x108>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80087a8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80087ac:	4619      	mov	r1, r3
 80087ae:	4837      	ldr	r0, [pc, #220]	@ (800888c <LIS2MDL_0_Probe+0x128>)
 80087b0:	f7fa fe76 	bl	80034a0 <LIS2MDL_ReadID>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087ba:	f06f 0306 	mvn.w	r3, #6
 80087be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087c0:	e054      	b.n	800886c <LIS2MDL_0_Probe+0x108>
  }
  else if (id != (uint8_t)LIS2MDL_ID)
 80087c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087c6:	2b40      	cmp	r3, #64	@ 0x40
 80087c8:	d003      	beq.n	80087d2 <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087ca:	f06f 0306 	mvn.w	r3, #6
 80087ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087d0:	e04c      	b.n	800886c <LIS2MDL_0_Probe+0x108>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80087d2:	f107 030c 	add.w	r3, r7, #12
 80087d6:	4619      	mov	r1, r3
 80087d8:	482c      	ldr	r0, [pc, #176]	@ (800888c <LIS2MDL_0_Probe+0x128>)
 80087da:	f7fa fe87 	bl	80034ec <LIS2MDL_GetCapabilities>
    MotionCtx[LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80087de:	7b7b      	ldrb	r3, [r7, #13]
 80087e0:	461a      	mov	r2, r3
 80087e2:	7b3b      	ldrb	r3, [r7, #12]
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	431a      	orrs	r2, r3
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4313      	orrs	r3, r2
 80087ee:	4a28      	ldr	r2, [pc, #160]	@ (8008890 <LIS2MDL_0_Probe+0x12c>)
 80087f0:	6013      	str	r3, [r2, #0]

    MotionCompObj[LIS2MDL_0] = &lis2mdl_obj_0;
 80087f2:	4b28      	ldr	r3, [pc, #160]	@ (8008894 <LIS2MDL_0_Probe+0x130>)
 80087f4:	4a25      	ldr	r2, [pc, #148]	@ (800888c <LIS2MDL_0_Probe+0x128>)
 80087f6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80087f8:	4b27      	ldr	r3, [pc, #156]	@ (8008898 <LIS2MDL_0_Probe+0x134>)
 80087fa:	4a28      	ldr	r2, [pc, #160]	@ (800889c <LIS2MDL_0_Probe+0x138>)
 80087fc:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80087fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d11d      	bne.n	8008840 <LIS2MDL_0_Probe+0xdc>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	d018      	beq.n	8008840 <LIS2MDL_0_Probe+0xdc>
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d115      	bne.n	8008840 <LIS2MDL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2MDL_MAG_Driver;
 8008814:	4b22      	ldr	r3, [pc, #136]	@ (80088a0 <LIS2MDL_0_Probe+0x13c>)
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	4a22      	ldr	r2, [pc, #136]	@ (80088a4 <LIS2MDL_0_Probe+0x140>)
 800881a:	4923      	ldr	r1, [pc, #140]	@ (80088a8 <LIS2MDL_0_Probe+0x144>)
 800881c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[LIS2MDL_0]->Init(MotionCompObj[LIS2MDL_0]) != LIS2MDL_OK)
 8008820:	4b1d      	ldr	r3, [pc, #116]	@ (8008898 <LIS2MDL_0_Probe+0x134>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1b      	ldr	r2, [pc, #108]	@ (8008894 <LIS2MDL_0_Probe+0x130>)
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	4610      	mov	r0, r2
 800882c:	4798      	blx	r3
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <LIS2MDL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008834:	f06f 0304 	mvn.w	r3, #4
 8008838:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800883a:	e001      	b.n	8008840 <LIS2MDL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800883c:	2300      	movs	r3, #0
 800883e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d107      	bne.n	8008856 <LIS2MDL_0_Probe+0xf2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <LIS2MDL_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008850:	f06f 0304 	mvn.w	r3, #4
 8008854:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008858:	2b00      	cmp	r3, #0
 800885a:	d107      	bne.n	800886c <LIS2MDL_0_Probe+0x108>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <LIS2MDL_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008866:	f06f 0304 	mvn.w	r3, #4
 800886a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800886c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800886e:	4618      	mov	r0, r3
 8008870:	3750      	adds	r7, #80	@ 0x50
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	08007c09 	.word	0x08007c09
 800887c:	08007c85 	.word	0x08007c85
 8008880:	08007d39 	.word	0x08007d39
 8008884:	08007cd5 	.word	0x08007cd5
 8008888:	08007d9d 	.word	0x08007d9d
 800888c:	2000083c 	.word	0x2000083c
 8008890:	20000830 	.word	0x20000830
 8008894:	200007f4 	.word	0x200007f4
 8008898:	20000824 	.word	0x20000824
 800889c:	20000038 	.word	0x20000038
 80088a0:	20000154 	.word	0x20000154
 80088a4:	20000800 	.word	0x20000800
 80088a8:	20000048 	.word	0x20000048

080088ac <LIS2DU12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DU12_0_Probe(uint32_t Functions)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b094      	sub	sp, #80	@ 0x50
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  LIS2DU12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DU12_Object_t lis2du12_obj_0;
  LIS2DU12_Capabilities_t  cap;
  int32_t                  ret = BSP_ERROR_NONE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  io_ctx.Init        = BSP_LIS2DU12_Init;
  io_ctx.DeInit      = BSP_LIS2DU12_DeInit;
  io_ctx.ReadReg     = BSP_LIS2DU12_ReadReg;
  io_ctx.WriteReg    = BSP_LIS2DU12_WriteReg;
#else
  io_ctx.BusType     = LIS2DU12_I2C_BUS; /* I2C */
 80088b8:	2300      	movs	r3, #0
 80088ba:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DU12_I2C_ADD_H;
 80088bc:	2333      	movs	r3, #51	@ 0x33
 80088be:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = BSP_LIS2DU12_0_I2C_INIT;
 80088c2:	4b3f      	ldr	r3, [pc, #252]	@ (80089c0 <LIS2DU12_0_Probe+0x114>)
 80088c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = BSP_LIS2DU12_0_I2C_DEINIT;
 80088c6:	4b3f      	ldr	r3, [pc, #252]	@ (80089c4 <LIS2DU12_0_Probe+0x118>)
 80088c8:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = BSP_LIS2DU12_0_I2C_READ_REG;
 80088ca:	4b3f      	ldr	r3, [pc, #252]	@ (80089c8 <LIS2DU12_0_Probe+0x11c>)
 80088cc:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = BSP_LIS2DU12_0_I2C_WRITE_REG;
 80088ce:	4b3f      	ldr	r3, [pc, #252]	@ (80089cc <LIS2DU12_0_Probe+0x120>)
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* ALL_SENSORS_I2C */
  io_ctx.GetTick     = BSP_GetTick;
 80088d2:	4b3f      	ldr	r3, [pc, #252]	@ (80089d0 <LIS2DU12_0_Probe+0x124>)
 80088d4:	647b      	str	r3, [r7, #68]	@ 0x44

  if (LIS2DU12_RegisterBusIO(&lis2du12_obj_0, &io_ctx) != LIS2DU12_OK)
 80088d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088da:	4619      	mov	r1, r3
 80088dc:	483d      	ldr	r0, [pc, #244]	@ (80089d4 <LIS2DU12_0_Probe+0x128>)
 80088de:	f7f9 fba7 	bl	8002030 <LIS2DU12_RegisterBusIO>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <LIS2DU12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80088e8:	f06f 0306 	mvn.w	r3, #6
 80088ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088ee:	e062      	b.n	80089b6 <LIS2DU12_0_Probe+0x10a>
  }
  else if (LIS2DU12_ReadID(&lis2du12_obj_0, &id) != LIS2DU12_OK)
 80088f0:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80088f4:	4619      	mov	r1, r3
 80088f6:	4837      	ldr	r0, [pc, #220]	@ (80089d4 <LIS2DU12_0_Probe+0x128>)
 80088f8:	f7f9 fc7e 	bl	80021f8 <LIS2DU12_ReadID>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <LIS2DU12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008902:	f06f 0306 	mvn.w	r3, #6
 8008906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008908:	e055      	b.n	80089b6 <LIS2DU12_0_Probe+0x10a>
  }
  else if (id != LIS2DU12_ID)
 800890a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800890e:	2b45      	cmp	r3, #69	@ 0x45
 8008910:	d003      	beq.n	800891a <LIS2DU12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008912:	f06f 0306 	mvn.w	r3, #6
 8008916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008918:	e04d      	b.n	80089b6 <LIS2DU12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DU12_GetCapabilities(&lis2du12_obj_0, &cap);
 800891a:	f107 030c 	add.w	r3, r7, #12
 800891e:	4619      	mov	r1, r3
 8008920:	482c      	ldr	r0, [pc, #176]	@ (80089d4 <LIS2DU12_0_Probe+0x128>)
 8008922:	f7f9 fc85 	bl	8002230 <LIS2DU12_GetCapabilities>
    MotionCtx[LIS2DU12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008926:	7b7b      	ldrb	r3, [r7, #13]
 8008928:	461a      	mov	r2, r3
 800892a:	7b3b      	ldrb	r3, [r7, #12]
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	431a      	orrs	r2, r3
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4313      	orrs	r3, r2
 8008936:	4a28      	ldr	r2, [pc, #160]	@ (80089d8 <LIS2DU12_0_Probe+0x12c>)
 8008938:	6053      	str	r3, [r2, #4]

    MotionCompObj[LIS2DU12_0] = &lis2du12_obj_0;
 800893a:	4b28      	ldr	r3, [pc, #160]	@ (80089dc <LIS2DU12_0_Probe+0x130>)
 800893c:	4a25      	ldr	r2, [pc, #148]	@ (80089d4 <LIS2DU12_0_Probe+0x128>)
 800893e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LIS2DU12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DU12_COMMON_Driver;
 8008940:	4b27      	ldr	r3, [pc, #156]	@ (80089e0 <LIS2DU12_0_Probe+0x134>)
 8008942:	4a28      	ldr	r2, [pc, #160]	@ (80089e4 <LIS2DU12_0_Probe+0x138>)
 8008944:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d11e      	bne.n	800898a <LIS2DU12_0_Probe+0xde>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d019      	beq.n	800898a <LIS2DU12_0_Probe+0xde>
 8008956:	7b3b      	ldrb	r3, [r7, #12]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d116      	bne.n	800898a <LIS2DU12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LIS2DU12_0][FunctionIndex[MOTION_ACCELERO]] =
 800895c:	4b22      	ldr	r3, [pc, #136]	@ (80089e8 <LIS2DU12_0_Probe+0x13c>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	4a22      	ldr	r2, [pc, #136]	@ (80089ec <LIS2DU12_0_Probe+0x140>)
 8008962:	3303      	adds	r3, #3
 8008964:	4922      	ldr	r1, [pc, #136]	@ (80089f0 <LIS2DU12_0_Probe+0x144>)
 8008966:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)(void *)&LIS2DU12_ACC_Driver;

      if (MotionDrv[LIS2DU12_0]->Init(MotionCompObj[LIS2DU12_0]) != LIS2DU12_OK)
 800896a:	4b1d      	ldr	r3, [pc, #116]	@ (80089e0 <LIS2DU12_0_Probe+0x134>)
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a1a      	ldr	r2, [pc, #104]	@ (80089dc <LIS2DU12_0_Probe+0x130>)
 8008972:	6852      	ldr	r2, [r2, #4]
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <LIS2DU12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800897e:	f06f 0304 	mvn.w	r3, #4
 8008982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008984:	e001      	b.n	800898a <LIS2DU12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008986:	2300      	movs	r3, #0
 8008988:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800898a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d107      	bne.n	80089a0 <LIS2DU12_0_Probe+0xf4>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <LIS2DU12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800899a:	f06f 0304 	mvn.w	r3, #4
 800899e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80089a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d107      	bne.n	80089b6 <LIS2DU12_0_Probe+0x10a>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <LIS2DU12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80089b0:	f06f 0304 	mvn.w	r3, #4
 80089b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 80089b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3750      	adds	r7, #80	@ 0x50
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	08007c09 	.word	0x08007c09
 80089c4:	08007c85 	.word	0x08007c85
 80089c8:	08007d39 	.word	0x08007d39
 80089cc:	08007cd5 	.word	0x08007cd5
 80089d0:	08007d9d 	.word	0x08007d9d
 80089d4:	20000870 	.word	0x20000870
 80089d8:	20000830 	.word	0x20000830
 80089dc:	200007f4 	.word	0x200007f4
 80089e0:	20000824 	.word	0x20000824
 80089e4:	20000004 	.word	0x20000004
 80089e8:	20000154 	.word	0x20000154
 80089ec:	20000800 	.word	0x20000800
 80089f0:	20000014 	.word	0x20000014

080089f4 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b094      	sub	sp, #80	@ 0x50
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  io_ctx.Init        = BSP_LSM6DSV16X_Init;
  io_ctx.DeInit      = BSP_LSM6DSV16X_DeInit;
  io_ctx.ReadReg     = BSP_LSM6DSV16X_ReadReg;
  io_ctx.WriteReg    = BSP_LSM6DSV16X_WriteReg;
#else
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 8008a00:	2300      	movs	r3, #0
 8008a02:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 8008a04:	23d7      	movs	r3, #215	@ 0xd7
 8008a06:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = BSP_LSM6DSV16X_0_I2C_INIT;
 8008a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b38 <LSM6DSV16X_0_Probe+0x144>)
 8008a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = BSP_LSM6DSV16X_0_I2C_DEINIT;
 8008a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8008b3c <LSM6DSV16X_0_Probe+0x148>)
 8008a10:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = BSP_LSM6DSV16X_0_I2C_READ_REG;
 8008a12:	4b4b      	ldr	r3, [pc, #300]	@ (8008b40 <LSM6DSV16X_0_Probe+0x14c>)
 8008a14:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = BSP_LSM6DSV16X_0_I2C_WRITE_REG;
 8008a16:	4b4b      	ldr	r3, [pc, #300]	@ (8008b44 <LSM6DSV16X_0_Probe+0x150>)
 8008a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* ALL_SENSORS_I2C */
  io_ctx.GetTick     = BSP_GetTick;
 8008a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b48 <LSM6DSV16X_0_Probe+0x154>)
 8008a1c:	647b      	str	r3, [r7, #68]	@ 0x44

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 8008a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008a22:	4619      	mov	r1, r3
 8008a24:	4849      	ldr	r0, [pc, #292]	@ (8008b4c <LSM6DSV16X_0_Probe+0x158>)
 8008a26:	f7fc fb47 	bl	80050b8 <LSM6DSV16X_RegisterBusIO>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <LSM6DSV16X_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a30:	f06f 0306 	mvn.w	r3, #6
 8008a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a36:	e079      	b.n	8008b2c <LSM6DSV16X_0_Probe+0x138>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 8008a38:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4843      	ldr	r0, [pc, #268]	@ (8008b4c <LSM6DSV16X_0_Probe+0x158>)
 8008a40:	f7fc fc60 	bl	8005304 <LSM6DSV16X_ReadID>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a4a:	f06f 0306 	mvn.w	r3, #6
 8008a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a50:	e06c      	b.n	8008b2c <LSM6DSV16X_0_Probe+0x138>
  }
  else if (id != LSM6DSV16X_ID)
 8008a52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a56:	2b70      	cmp	r3, #112	@ 0x70
 8008a58:	d003      	beq.n	8008a62 <LSM6DSV16X_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a5a:	f06f 0306 	mvn.w	r3, #6
 8008a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a60:	e064      	b.n	8008b2c <LSM6DSV16X_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 8008a62:	f107 030c 	add.w	r3, r7, #12
 8008a66:	4619      	mov	r1, r3
 8008a68:	4838      	ldr	r0, [pc, #224]	@ (8008b4c <LSM6DSV16X_0_Probe+0x158>)
 8008a6a:	f7fc fc61 	bl	8005330 <LSM6DSV16X_GetCapabilities>
    MotionCtx[LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008a6e:	7b7b      	ldrb	r3, [r7, #13]
 8008a70:	461a      	mov	r2, r3
 8008a72:	7b3b      	ldrb	r3, [r7, #12]
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	431a      	orrs	r2, r3
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	4a34      	ldr	r2, [pc, #208]	@ (8008b50 <LSM6DSV16X_0_Probe+0x15c>)
 8008a80:	6093      	str	r3, [r2, #8]

    MotionCompObj[LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 8008a82:	4b34      	ldr	r3, [pc, #208]	@ (8008b54 <LSM6DSV16X_0_Probe+0x160>)
 8008a84:	4a31      	ldr	r2, [pc, #196]	@ (8008b4c <LSM6DSV16X_0_Probe+0x158>)
 8008a86:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 8008a88:	4b33      	ldr	r3, [pc, #204]	@ (8008b58 <LSM6DSV16X_0_Probe+0x164>)
 8008a8a:	4a34      	ldr	r2, [pc, #208]	@ (8008b5c <LSM6DSV16X_0_Probe+0x168>)
 8008a8c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d11e      	bne.n	8008ad2 <LSM6DSV16X_0_Probe+0xde>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d019      	beq.n	8008ad2 <LSM6DSV16X_0_Probe+0xde>
 8008a9e:	7b7b      	ldrb	r3, [r7, #13]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d116      	bne.n	8008ad2 <LSM6DSV16X_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] =
 8008aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8008b60 <LSM6DSV16X_0_Probe+0x16c>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8008b64 <LSM6DSV16X_0_Probe+0x170>)
 8008aaa:	3306      	adds	r3, #6
 8008aac:	492e      	ldr	r1, [pc, #184]	@ (8008b68 <LSM6DSV16X_0_Probe+0x174>)
 8008aae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[LSM6DSV16X_0]->Init(MotionCompObj[LSM6DSV16X_0]) != LSM6DSV16X_OK)
 8008ab2:	4b29      	ldr	r3, [pc, #164]	@ (8008b58 <LSM6DSV16X_0_Probe+0x164>)
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a26      	ldr	r2, [pc, #152]	@ (8008b54 <LSM6DSV16X_0_Probe+0x160>)
 8008aba:	6892      	ldr	r2, [r2, #8]
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <LSM6DSV16X_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ac6:	f06f 0304 	mvn.w	r3, #4
 8008aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008acc:	e001      	b.n	8008ad2 <LSM6DSV16X_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d11e      	bne.n	8008b16 <LSM6DSV16X_0_Probe+0x122>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d019      	beq.n	8008b16 <LSM6DSV16X_0_Probe+0x122>
 8008ae2:	7b3b      	ldrb	r3, [r7, #12]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d116      	bne.n	8008b16 <LSM6DSV16X_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] =
 8008ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b60 <LSM6DSV16X_0_Probe+0x16c>)
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	4a1d      	ldr	r2, [pc, #116]	@ (8008b64 <LSM6DSV16X_0_Probe+0x170>)
 8008aee:	3306      	adds	r3, #6
 8008af0:	491e      	ldr	r1, [pc, #120]	@ (8008b6c <LSM6DSV16X_0_Probe+0x178>)
 8008af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[LSM6DSV16X_0]->Init(MotionCompObj[LSM6DSV16X_0]) != LSM6DSV16X_OK)
 8008af6:	4b18      	ldr	r3, [pc, #96]	@ (8008b58 <LSM6DSV16X_0_Probe+0x164>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a15      	ldr	r2, [pc, #84]	@ (8008b54 <LSM6DSV16X_0_Probe+0x160>)
 8008afe:	6892      	ldr	r2, [r2, #8]
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <LSM6DSV16X_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b0a:	f06f 0304 	mvn.w	r3, #4
 8008b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b10:	e001      	b.n	8008b16 <LSM6DSV16X_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d107      	bne.n	8008b2c <LSM6DSV16X_0_Probe+0x138>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f003 0304 	and.w	r3, r3, #4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <LSM6DSV16X_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b26:	f06f 0304 	mvn.w	r3, #4
 8008b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 8008b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3750      	adds	r7, #80	@ 0x50
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	08007c09 	.word	0x08007c09
 8008b3c:	08007c85 	.word	0x08007c85
 8008b40:	08007d39 	.word	0x08007d39
 8008b44:	08007cd5 	.word	0x08007cd5
 8008b48:	08007d9d 	.word	0x08007d9d
 8008b4c:	200008ac 	.word	0x200008ac
 8008b50:	20000830 	.word	0x20000830
 8008b54:	200007f4 	.word	0x200007f4
 8008b58:	20000824 	.word	0x20000824
 8008b5c:	200000a4 	.word	0x200000a4
 8008b60:	20000154 	.word	0x20000154
 8008b64:	20000800 	.word	0x20000800
 8008b68:	200000d8 	.word	0x200000d8
 8008b6c:	200000b4 	.word	0x200000b4

08008b70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b74:	4b12      	ldr	r3, [pc, #72]	@ (8008bc0 <HAL_Init+0x50>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a11      	ldr	r2, [pc, #68]	@ (8008bc0 <HAL_Init+0x50>)
 8008b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b80:	2003      	movs	r0, #3
 8008b82:	f000 f9b0 	bl	8008ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008b86:	f004 fa75 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <HAL_Init+0x54>)
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	f003 030f 	and.w	r3, r3, #15
 8008b94:	490c      	ldr	r1, [pc, #48]	@ (8008bc8 <HAL_Init+0x58>)
 8008b96:	5ccb      	ldrb	r3, [r1, r3]
 8008b98:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8008bcc <HAL_Init+0x5c>)
 8008b9e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008ba0:	2004      	movs	r0, #4
 8008ba2:	f000 fa03 	bl	8008fac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ba6:	200f      	movs	r0, #15
 8008ba8:	f000 f812 	bl	8008bd0 <HAL_InitTick>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e002      	b.n	8008bbc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008bb6:	f7f8 fc99 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40022000 	.word	0x40022000
 8008bc4:	46020c00 	.word	0x46020c00
 8008bc8:	08015824 	.word	0x08015824
 8008bcc:	20000000 	.word	0x20000000

08008bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8008bdc:	4b33      	ldr	r3, [pc, #204]	@ (8008cac <HAL_InitTick+0xdc>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e05c      	b.n	8008ca2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8008be8:	4b31      	ldr	r3, [pc, #196]	@ (8008cb0 <HAL_InitTick+0xe0>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d10c      	bne.n	8008c0e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8008bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8008cb4 <HAL_InitTick+0xe4>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8008cac <HAL_InitTick+0xdc>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e037      	b.n	8008c7e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8008c0e:	f000 fa25 	bl	800905c <HAL_SYSTICK_GetCLKSourceConfig>
 8008c12:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d023      	beq.n	8008c62 <HAL_InitTick+0x92>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d82d      	bhi.n	8008c7c <HAL_InitTick+0xac>
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_InitTick+0x5e>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d00d      	beq.n	8008c48 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8008c2c:	e026      	b.n	8008c7c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8008c2e:	4b21      	ldr	r3, [pc, #132]	@ (8008cb4 <HAL_InitTick+0xe4>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b1e      	ldr	r3, [pc, #120]	@ (8008cac <HAL_InitTick+0xdc>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	4619      	mov	r1, r3
 8008c38:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8008c3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c44:	60fb      	str	r3, [r7, #12]
        break;
 8008c46:	e01a      	b.n	8008c7e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8008c48:	4b18      	ldr	r3, [pc, #96]	@ (8008cac <HAL_InitTick+0xdc>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008c52:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c56:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8008c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5e:	60fb      	str	r3, [r7, #12]
        break;
 8008c60:	e00d      	b.n	8008c7e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8008c62:	4b12      	ldr	r3, [pc, #72]	@ (8008cac <HAL_InitTick+0xdc>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c78:	60fb      	str	r3, [r7, #12]
        break;
 8008c7a:	e000      	b.n	8008c7e <HAL_InitTick+0xae>
        break;
 8008c7c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 f972 	bl	8008f68 <HAL_SYSTICK_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e009      	b.n	8008ca2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c8e:	2200      	movs	r2, #0
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	f04f 30ff 	mov.w	r0, #4294967295
 8008c96:	f000 f931 	bl	8008efc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8008c9a:	4a07      	ldr	r2, [pc, #28]	@ (8008cb8 <HAL_InitTick+0xe8>)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	2000016c 	.word	0x2000016c
 8008cb0:	e000e010 	.word	0xe000e010
 8008cb4:	20000000 	.word	0x20000000
 8008cb8:	20000168 	.word	0x20000168

08008cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008cc0:	4b06      	ldr	r3, [pc, #24]	@ (8008cdc <HAL_IncTick+0x20>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4b06      	ldr	r3, [pc, #24]	@ (8008ce0 <HAL_IncTick+0x24>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4413      	add	r3, r2
 8008ccc:	4a04      	ldr	r2, [pc, #16]	@ (8008ce0 <HAL_IncTick+0x24>)
 8008cce:	6013      	str	r3, [r2, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	2000016c 	.word	0x2000016c
 8008ce0:	200008e4 	.word	0x200008e4

08008ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8008ce8:	4b03      	ldr	r3, [pc, #12]	@ (8008cf8 <HAL_GetTick+0x14>)
 8008cea:	681b      	ldr	r3, [r3, #0]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	200008e4 	.word	0x200008e4

08008cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d04:	f7ff ffee 	bl	8008ce4 <HAL_GetTick>
 8008d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d005      	beq.n	8008d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d16:	4b0a      	ldr	r3, [pc, #40]	@ (8008d40 <HAL_Delay+0x44>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d22:	bf00      	nop
 8008d24:	f7ff ffde 	bl	8008ce4 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d8f7      	bhi.n	8008d24 <HAL_Delay+0x28>
  {
  }
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	2000016c 	.word	0x2000016c

08008d44 <__NVIC_SetPriorityGrouping>:
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f003 0307 	and.w	r3, r3, #7
 8008d52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d54:	4b0c      	ldr	r3, [pc, #48]	@ (8008d88 <__NVIC_SetPriorityGrouping+0x44>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008d60:	4013      	ands	r3, r2
 8008d62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d76:	4a04      	ldr	r2, [pc, #16]	@ (8008d88 <__NVIC_SetPriorityGrouping+0x44>)
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	60d3      	str	r3, [r2, #12]
}
 8008d7c:	bf00      	nop
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	e000ed00 	.word	0xe000ed00

08008d8c <__NVIC_GetPriorityGrouping>:
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d90:	4b04      	ldr	r3, [pc, #16]	@ (8008da4 <__NVIC_GetPriorityGrouping+0x18>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	f003 0307 	and.w	r3, r3, #7
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	e000ed00 	.word	0xe000ed00

08008da8 <__NVIC_EnableIRQ>:
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	db0b      	blt.n	8008dd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	f003 021f 	and.w	r2, r3, #31
 8008dc0:	4907      	ldr	r1, [pc, #28]	@ (8008de0 <__NVIC_EnableIRQ+0x38>)
 8008dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dc6:	095b      	lsrs	r3, r3, #5
 8008dc8:	2001      	movs	r0, #1
 8008dca:	fa00 f202 	lsl.w	r2, r0, r2
 8008dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	e000e100 	.word	0xe000e100

08008de4 <__NVIC_DisableIRQ>:
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	db12      	blt.n	8008e1c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	f003 021f 	and.w	r2, r3, #31
 8008dfc:	490a      	ldr	r1, [pc, #40]	@ (8008e28 <__NVIC_DisableIRQ+0x44>)
 8008dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	2001      	movs	r0, #1
 8008e06:	fa00 f202 	lsl.w	r2, r0, r2
 8008e0a:	3320      	adds	r3, #32
 8008e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008e10:	f3bf 8f4f 	dsb	sy
}
 8008e14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e16:	f3bf 8f6f 	isb	sy
}
 8008e1a:	bf00      	nop
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	e000e100 	.word	0xe000e100

08008e2c <__NVIC_SetPriority>:
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	db0a      	blt.n	8008e56 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	490c      	ldr	r1, [pc, #48]	@ (8008e78 <__NVIC_SetPriority+0x4c>)
 8008e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e4a:	0112      	lsls	r2, r2, #4
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	440b      	add	r3, r1
 8008e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008e54:	e00a      	b.n	8008e6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	4908      	ldr	r1, [pc, #32]	@ (8008e7c <__NVIC_SetPriority+0x50>)
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	3b04      	subs	r3, #4
 8008e64:	0112      	lsls	r2, r2, #4
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	440b      	add	r3, r1
 8008e6a:	761a      	strb	r2, [r3, #24]
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	e000e100 	.word	0xe000e100
 8008e7c:	e000ed00 	.word	0xe000ed00

08008e80 <NVIC_EncodePriority>:
{
 8008e80:	b480      	push	{r7}
 8008e82:	b089      	sub	sp, #36	@ 0x24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	f1c3 0307 	rsb	r3, r3, #7
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	bf28      	it	cs
 8008e9e:	2304      	movcs	r3, #4
 8008ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	2b06      	cmp	r3, #6
 8008ea8:	d902      	bls.n	8008eb0 <NVIC_EncodePriority+0x30>
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	3b03      	subs	r3, #3
 8008eae:	e000      	b.n	8008eb2 <NVIC_EncodePriority+0x32>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebe:	43da      	mvns	r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	401a      	ands	r2, r3
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed2:	43d9      	mvns	r1, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ed8:	4313      	orrs	r3, r2
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3724      	adds	r7, #36	@ 0x24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff ff28 	bl	8008d44 <__NVIC_SetPriorityGrouping>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008f0a:	f7ff ff3f 	bl	8008d8c <__NVIC_GetPriorityGrouping>
 8008f0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	6978      	ldr	r0, [r7, #20]
 8008f16:	f7ff ffb3 	bl	8008e80 <NVIC_EncodePriority>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff ff82 	bl	8008e2c <__NVIC_SetPriority>
}
 8008f28:	bf00      	nop
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff ff32 	bl	8008da8 <__NVIC_EnableIRQ>
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff ff42 	bl	8008de4 <__NVIC_DisableIRQ>
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f78:	d301      	bcc.n	8008f7e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e00d      	b.n	8008f9a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8008f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8008fa8 <HAL_SYSTICK_Config+0x40>)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8008f86:	4b08      	ldr	r3, [pc, #32]	@ (8008fa8 <HAL_SYSTICK_Config+0x40>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8008f8c:	4b06      	ldr	r3, [pc, #24]	@ (8008fa8 <HAL_SYSTICK_Config+0x40>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a05      	ldr	r2, [pc, #20]	@ (8008fa8 <HAL_SYSTICK_Config+0x40>)
 8008f92:	f043 0303 	orr.w	r3, r3, #3
 8008f96:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	e000e010 	.word	0xe000e010

08008fac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d844      	bhi.n	8009044 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8008fba:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fe3 	.word	0x08008fe3
 8008fc4:	08009001 	.word	0x08009001
 8008fc8:	08009023 	.word	0x08009023
 8008fcc:	08009045 	.word	0x08009045
 8008fd0:	08008fd5 	.word	0x08008fd5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8009054 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8009054 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008fda:	f043 0304 	orr.w	r3, r3, #4
 8008fde:	6013      	str	r3, [r2, #0]
      break;
 8008fe0:	e031      	b.n	8009046 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8009054 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8009054 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008fe8:	f023 0304 	bic.w	r3, r3, #4
 8008fec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8008fee:	4b1a      	ldr	r3, [pc, #104]	@ (8009058 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ff4:	4a18      	ldr	r2, [pc, #96]	@ (8009058 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008ff6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8008ffe:	e022      	b.n	8009046 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8009000:	4b14      	ldr	r3, [pc, #80]	@ (8009054 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a13      	ldr	r2, [pc, #76]	@ (8009054 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8009006:	f023 0304 	bic.w	r3, r3, #4
 800900a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800900c:	4b12      	ldr	r3, [pc, #72]	@ (8009058 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800900e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009012:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009016:	4a10      	ldr	r2, [pc, #64]	@ (8009058 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8009018:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800901c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8009020:	e011      	b.n	8009046 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8009022:	4b0c      	ldr	r3, [pc, #48]	@ (8009054 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a0b      	ldr	r2, [pc, #44]	@ (8009054 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8009028:	f023 0304 	bic.w	r3, r3, #4
 800902c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800902e:	4b0a      	ldr	r3, [pc, #40]	@ (8009058 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8009030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009034:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009038:	4a07      	ldr	r2, [pc, #28]	@ (8009058 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800903a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800903e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8009042:	e000      	b.n	8009046 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8009044:	bf00      	nop
  }
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	e000e010 	.word	0xe000e010
 8009058:	46020c00 	.word	0x46020c00

0800905c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8009062:	4b19      	ldr	r3, [pc, #100]	@ (80090c8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800906e:	2304      	movs	r3, #4
 8009070:	607b      	str	r3, [r7, #4]
 8009072:	e021      	b.n	80090b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8009074:	4b15      	ldr	r3, [pc, #84]	@ (80090cc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8009076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800907a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800907e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009086:	d011      	beq.n	80090ac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800908e:	d810      	bhi.n	80090b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800909c:	d003      	beq.n	80090a6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800909e:	e008      	b.n	80090b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80090a0:	2300      	movs	r3, #0
 80090a2:	607b      	str	r3, [r7, #4]
        break;
 80090a4:	e008      	b.n	80090b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80090a6:	2301      	movs	r3, #1
 80090a8:	607b      	str	r3, [r7, #4]
        break;
 80090aa:	e005      	b.n	80090b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80090ac:	2302      	movs	r3, #2
 80090ae:	607b      	str	r3, [r7, #4]
        break;
 80090b0:	e002      	b.n	80090b8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
        break;
 80090b6:	bf00      	nop
    }
  }
  return systick_source;
 80090b8:	687b      	ldr	r3, [r7, #4]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	e000e010 	.word	0xe000e010
 80090cc:	46020c00 	.word	0x46020c00

080090d0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80090d8:	f7ff fe04 	bl	8008ce4 <HAL_GetTick>
 80090dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e0f0      	b.n	80092ca <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a79      	ldr	r2, [pc, #484]	@ (80092d4 <HAL_DMA_Init+0x204>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	f000 809f 	beq.w	8009232 <HAL_DMA_Init+0x162>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a77      	ldr	r2, [pc, #476]	@ (80092d8 <HAL_DMA_Init+0x208>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	f000 8099 	beq.w	8009232 <HAL_DMA_Init+0x162>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a75      	ldr	r2, [pc, #468]	@ (80092dc <HAL_DMA_Init+0x20c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	f000 8093 	beq.w	8009232 <HAL_DMA_Init+0x162>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a73      	ldr	r2, [pc, #460]	@ (80092e0 <HAL_DMA_Init+0x210>)
 8009112:	4293      	cmp	r3, r2
 8009114:	f000 808d 	beq.w	8009232 <HAL_DMA_Init+0x162>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a71      	ldr	r2, [pc, #452]	@ (80092e4 <HAL_DMA_Init+0x214>)
 800911e:	4293      	cmp	r3, r2
 8009120:	f000 8087 	beq.w	8009232 <HAL_DMA_Init+0x162>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a6f      	ldr	r2, [pc, #444]	@ (80092e8 <HAL_DMA_Init+0x218>)
 800912a:	4293      	cmp	r3, r2
 800912c:	f000 8081 	beq.w	8009232 <HAL_DMA_Init+0x162>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a6d      	ldr	r2, [pc, #436]	@ (80092ec <HAL_DMA_Init+0x21c>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d07b      	beq.n	8009232 <HAL_DMA_Init+0x162>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a6c      	ldr	r2, [pc, #432]	@ (80092f0 <HAL_DMA_Init+0x220>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d076      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a6a      	ldr	r2, [pc, #424]	@ (80092f4 <HAL_DMA_Init+0x224>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d071      	beq.n	8009232 <HAL_DMA_Init+0x162>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a69      	ldr	r2, [pc, #420]	@ (80092f8 <HAL_DMA_Init+0x228>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d06c      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a67      	ldr	r2, [pc, #412]	@ (80092fc <HAL_DMA_Init+0x22c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d067      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a66      	ldr	r2, [pc, #408]	@ (8009300 <HAL_DMA_Init+0x230>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d062      	beq.n	8009232 <HAL_DMA_Init+0x162>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a64      	ldr	r2, [pc, #400]	@ (8009304 <HAL_DMA_Init+0x234>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d05d      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a63      	ldr	r2, [pc, #396]	@ (8009308 <HAL_DMA_Init+0x238>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d058      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a61      	ldr	r2, [pc, #388]	@ (800930c <HAL_DMA_Init+0x23c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d053      	beq.n	8009232 <HAL_DMA_Init+0x162>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a60      	ldr	r2, [pc, #384]	@ (8009310 <HAL_DMA_Init+0x240>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d04e      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a5e      	ldr	r2, [pc, #376]	@ (8009314 <HAL_DMA_Init+0x244>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d049      	beq.n	8009232 <HAL_DMA_Init+0x162>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a5d      	ldr	r2, [pc, #372]	@ (8009318 <HAL_DMA_Init+0x248>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d044      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a5b      	ldr	r2, [pc, #364]	@ (800931c <HAL_DMA_Init+0x24c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d03f      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a5a      	ldr	r2, [pc, #360]	@ (8009320 <HAL_DMA_Init+0x250>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d03a      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a58      	ldr	r2, [pc, #352]	@ (8009324 <HAL_DMA_Init+0x254>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d035      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a57      	ldr	r2, [pc, #348]	@ (8009328 <HAL_DMA_Init+0x258>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d030      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a55      	ldr	r2, [pc, #340]	@ (800932c <HAL_DMA_Init+0x25c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d02b      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a54      	ldr	r2, [pc, #336]	@ (8009330 <HAL_DMA_Init+0x260>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d026      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a52      	ldr	r2, [pc, #328]	@ (8009334 <HAL_DMA_Init+0x264>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d021      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a51      	ldr	r2, [pc, #324]	@ (8009338 <HAL_DMA_Init+0x268>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d01c      	beq.n	8009232 <HAL_DMA_Init+0x162>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a4f      	ldr	r2, [pc, #316]	@ (800933c <HAL_DMA_Init+0x26c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d017      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a4e      	ldr	r2, [pc, #312]	@ (8009340 <HAL_DMA_Init+0x270>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d012      	beq.n	8009232 <HAL_DMA_Init+0x162>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a4c      	ldr	r2, [pc, #304]	@ (8009344 <HAL_DMA_Init+0x274>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00d      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a4b      	ldr	r2, [pc, #300]	@ (8009348 <HAL_DMA_Init+0x278>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d008      	beq.n	8009232 <HAL_DMA_Init+0x162>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a49      	ldr	r2, [pc, #292]	@ (800934c <HAL_DMA_Init+0x27c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d003      	beq.n	8009232 <HAL_DMA_Init+0x162>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a48      	ldr	r2, [pc, #288]	@ (8009350 <HAL_DMA_Init+0x280>)
 8009230:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10e      	bne.n	8009264 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	695a      	ldr	r2, [r3, #20]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0206 	orr.w	r2, r2, #6
 800927a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800927c:	e00f      	b.n	800929e <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800927e:	f7ff fd31 	bl	8008ce4 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b05      	cmp	r3, #5
 800928a:	d908      	bls.n	800929e <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2210      	movs	r2, #16
 8009290:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2203      	movs	r2, #3
 8009296:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e015      	b.n	80092ca <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e8      	bne.n	800927e <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 faff 	bl	80098b0 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40020050 	.word	0x40020050
 80092d8:	50020050 	.word	0x50020050
 80092dc:	400200d0 	.word	0x400200d0
 80092e0:	500200d0 	.word	0x500200d0
 80092e4:	40020150 	.word	0x40020150
 80092e8:	50020150 	.word	0x50020150
 80092ec:	400201d0 	.word	0x400201d0
 80092f0:	500201d0 	.word	0x500201d0
 80092f4:	40020250 	.word	0x40020250
 80092f8:	50020250 	.word	0x50020250
 80092fc:	400202d0 	.word	0x400202d0
 8009300:	500202d0 	.word	0x500202d0
 8009304:	40020350 	.word	0x40020350
 8009308:	50020350 	.word	0x50020350
 800930c:	400203d0 	.word	0x400203d0
 8009310:	500203d0 	.word	0x500203d0
 8009314:	40020450 	.word	0x40020450
 8009318:	50020450 	.word	0x50020450
 800931c:	400204d0 	.word	0x400204d0
 8009320:	500204d0 	.word	0x500204d0
 8009324:	40020550 	.word	0x40020550
 8009328:	50020550 	.word	0x50020550
 800932c:	400205d0 	.word	0x400205d0
 8009330:	500205d0 	.word	0x500205d0
 8009334:	40020650 	.word	0x40020650
 8009338:	50020650 	.word	0x50020650
 800933c:	400206d0 	.word	0x400206d0
 8009340:	500206d0 	.word	0x500206d0
 8009344:	40020750 	.word	0x40020750
 8009348:	50020750 	.word	0x50020750
 800934c:	400207d0 	.word	0x400207d0
 8009350:	500207d0 	.word	0x500207d0

08009354 <HAL_DMA_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *const hdma)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]

  DMA_TypeDef *p_dma_instance;

  uint32_t tickstart = HAL_GetTick();
 800935c:	f7ff fcc2 	bl	8008ce4 <HAL_GetTick>
 8009360:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <HAL_DMA_DeInit+0x18>
  {
    return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e0b9      	b.n	80094e0 <HAL_DMA_DeInit+0x18c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009374:	f023 030f 	bic.w	r3, r3, #15
 8009378:	60bb      	str	r3, [r7, #8]

  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	695a      	ldr	r2, [r3, #20]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f042 0206 	orr.w	r2, r2, #6
 8009388:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800938a:	e00f      	b.n	80093ac <HAL_DMA_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800938c:	f7ff fcaa 	bl	8008ce4 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b05      	cmp	r3, #5
 8009398:	d908      	bls.n	80093ac <HAL_DMA_DeInit+0x58>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2210      	movs	r2, #16
 800939e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2203      	movs	r2, #3
 80093a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e099      	b.n	80094e0 <HAL_DMA_DeInit+0x18c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e8      	bne.n	800938c <HAL_DMA_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CLBAR = 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2200      	movs	r2, #0
 80093c8:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2200      	movs	r2, #0
 80093d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->Instance->CTR2  = 0U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2200      	movs	r2, #0
 80093d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->Instance->CBR1  = 0U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2200      	movs	r2, #0
 80093e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->Instance->CSAR  = 0U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2200      	movs	r2, #0
 80093e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->Instance->CDAR  = 0U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->Instance->CLLR  = 0U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2200      	movs	r2, #0
 80093f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a3a      	ldr	r2, [pc, #232]	@ (80094e8 <HAL_DMA_DeInit+0x194>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d022      	beq.n	800944a <HAL_DMA_DeInit+0xf6>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a38      	ldr	r2, [pc, #224]	@ (80094ec <HAL_DMA_DeInit+0x198>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d01d      	beq.n	800944a <HAL_DMA_DeInit+0xf6>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a37      	ldr	r2, [pc, #220]	@ (80094f0 <HAL_DMA_DeInit+0x19c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d018      	beq.n	800944a <HAL_DMA_DeInit+0xf6>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a35      	ldr	r2, [pc, #212]	@ (80094f4 <HAL_DMA_DeInit+0x1a0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d013      	beq.n	800944a <HAL_DMA_DeInit+0xf6>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a34      	ldr	r2, [pc, #208]	@ (80094f8 <HAL_DMA_DeInit+0x1a4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d00e      	beq.n	800944a <HAL_DMA_DeInit+0xf6>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a32      	ldr	r2, [pc, #200]	@ (80094fc <HAL_DMA_DeInit+0x1a8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d009      	beq.n	800944a <HAL_DMA_DeInit+0xf6>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a31      	ldr	r2, [pc, #196]	@ (8009500 <HAL_DMA_DeInit+0x1ac>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d004      	beq.n	800944a <HAL_DMA_DeInit+0xf6>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a2f      	ldr	r2, [pc, #188]	@ (8009504 <HAL_DMA_DeInit+0x1b0>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d101      	bne.n	800944e <HAL_DMA_DeInit+0xfa>
 800944a:	2301      	movs	r3, #1
 800944c:	e000      	b.n	8009450 <HAL_DMA_DeInit+0xfc>
 800944e:	2300      	movs	r3, #0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d007      	beq.n	8009464 <HAL_DMA_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2200      	movs	r2, #0
 800945a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->Instance->CBR2 = 0U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2200      	movs	r2, #0
 8009462:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009470:	3b50      	subs	r3, #80	@ 0x50
 8009472:	09db      	lsrs	r3, r3, #7
 8009474:	f003 031f 	and.w	r3, r3, #31
 8009478:	2101      	movs	r1, #1
 800947a:	fa01 f303 	lsl.w	r3, r1, r3
 800947e:	43db      	mvns	r3, r3
 8009480:	401a      	ands	r2, r3
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800948e:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	661a      	str	r2, [r3, #96]	@ 0x60
  hdma->XferHalfCpltCallback = NULL;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	665a      	str	r2, [r3, #100]	@ 0x64
  hdma->XferErrorCallback    = NULL;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	669a      	str	r2, [r3, #104]	@ 0x68
  hdma->XferAbortCallback    = NULL;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hdma->XferSuspendCallback  = NULL;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Clean DMA queue */
  hdma->LinkedListQueue = NULL;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <HAL_DMA_DeInit+0x16e>
  {
    hdma->Parent = NULL;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	40020650 	.word	0x40020650
 80094ec:	50020650 	.word	0x50020650
 80094f0:	400206d0 	.word	0x400206d0
 80094f4:	500206d0 	.word	0x500206d0
 80094f8:	40020750 	.word	0x40020750
 80094fc:	50020750 	.word	0x50020750
 8009500:	400207d0 	.word	0x400207d0
 8009504:	500207d0 	.word	0x500207d0

08009508 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e019      	b.n	800954e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b02      	cmp	r3, #2
 8009524:	d004      	beq.n	8009530 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2220      	movs	r2, #32
 800952a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e00e      	b.n	800954e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2204      	movs	r2, #4
 8009534:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	6812      	ldr	r2, [r2, #0]
 8009542:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009546:	f043 0304 	orr.w	r3, r3, #4
 800954a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b086      	sub	sp, #24
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800956a:	f023 030f 	bic.w	r3, r3, #15
 800956e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009578:	3b50      	subs	r3, #80	@ 0x50
 800957a:	09db      	lsrs	r3, r3, #7
 800957c:	f003 031f 	and.w	r3, r3, #31
 8009580:	2201      	movs	r2, #1
 8009582:	fa02 f303 	lsl.w	r3, r2, r3
 8009586:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	4013      	ands	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 813b 	beq.w	8009810 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d011      	beq.n	80095cc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80095be:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c4:	f043 0201 	orr.w	r2, r3, #1
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d011      	beq.n	80095fe <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00a      	beq.n	80095fe <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095f0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f6:	f043 0202 	orr.w	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d011      	beq.n	8009630 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00a      	beq.n	8009630 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009622:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009628:	f043 0204 	orr.w	r2, r3, #4
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d011      	beq.n	8009662 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009654:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800965a:	f043 0208 	orr.w	r2, r3, #8
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800966c:	2b00      	cmp	r3, #0
 800966e:	d013      	beq.n	8009698 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00c      	beq.n	8009698 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009686:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800968c:	2b00      	cmp	r3, #0
 800968e:	d003      	beq.n	8009698 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d04c      	beq.n	8009740 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d045      	beq.n	8009740 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80096bc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d12e      	bne.n	8009728 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	695a      	ldr	r2, [r3, #20]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80096d8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	695a      	ldr	r2, [r3, #20]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0202 	orr.w	r2, r2, #2
 80096e8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d007      	beq.n	800970e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009702:	2201      	movs	r2, #1
 8009704:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2200      	movs	r2, #0
 800970c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d07a      	beq.n	8009814 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	4798      	blx	r3
        }

        return;
 8009726:	e075      	b.n	8009814 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2205      	movs	r2, #5
 800972c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974a:	2b00      	cmp	r3, #0
 800974c:	d039      	beq.n	80097c2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009758:	2b00      	cmp	r3, #0
 800975a:	d032      	beq.n	80097c2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009764:	2b00      	cmp	r3, #0
 8009766:	d012      	beq.n	800978e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800976e:	2b00      	cmp	r3, #0
 8009770:	d116      	bne.n	80097a0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009778:	2b00      	cmp	r3, #0
 800977a:	d111      	bne.n	80097a0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009788:	2201      	movs	r2, #1
 800978a:	731a      	strb	r2, [r3, #12]
 800978c:	e008      	b.n	80097a0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009794:	2b00      	cmp	r3, #0
 8009796:	d103      	bne.n	80097a0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80097a8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d025      	beq.n	8009816 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695a      	ldr	r2, [r3, #20]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0202 	orr.w	r2, r2, #2
 80097d8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097f2:	2201      	movs	r2, #1
 80097f4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
 800980e:	e002      	b.n	8009816 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8009810:	bf00      	nop
 8009812:	e000      	b.n	8009816 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8009814:	bf00      	nop
    }
  }
}
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800982a:	b2db      	uxtb	r3, r3
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e02b      	b.n	80098a4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009854:	f023 030f 	bic.w	r3, r3, #15
 8009858:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009862:	3b50      	subs	r3, #80	@ 0x50
 8009864:	09db      	lsrs	r3, r3, #7
 8009866:	f003 031f 	and.w	r3, r3, #31
 800986a:	2201      	movs	r2, #1
 800986c:	fa02 f303 	lsl.w	r3, r2, r3
 8009870:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	f003 0310 	and.w	r3, r3, #16
 8009878:	2b00      	cmp	r3, #0
 800987a:	d012      	beq.n	80098a2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	f003 0311 	and.w	r3, r3, #17
 8009882:	2b11      	cmp	r3, #17
 8009884:	d106      	bne.n	8009894 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	431a      	orrs	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	605a      	str	r2, [r3, #4]
 8009892:	e006      	b.n	80098a2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	43db      	mvns	r3, r3
 800989c:	401a      	ands	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695a      	ldr	r2, [r3, #20]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	431a      	orrs	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	431a      	orrs	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a53      	ldr	r2, [pc, #332]	@ (8009a3c <DMA_Init+0x18c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	f000 80a0 	beq.w	8009a36 <DMA_Init+0x186>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a51      	ldr	r2, [pc, #324]	@ (8009a40 <DMA_Init+0x190>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	f000 809a 	beq.w	8009a36 <DMA_Init+0x186>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a4f      	ldr	r2, [pc, #316]	@ (8009a44 <DMA_Init+0x194>)
 8009908:	4293      	cmp	r3, r2
 800990a:	f000 8094 	beq.w	8009a36 <DMA_Init+0x186>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a4d      	ldr	r2, [pc, #308]	@ (8009a48 <DMA_Init+0x198>)
 8009914:	4293      	cmp	r3, r2
 8009916:	f000 808e 	beq.w	8009a36 <DMA_Init+0x186>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a4b      	ldr	r2, [pc, #300]	@ (8009a4c <DMA_Init+0x19c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	f000 8088 	beq.w	8009a36 <DMA_Init+0x186>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a49      	ldr	r2, [pc, #292]	@ (8009a50 <DMA_Init+0x1a0>)
 800992c:	4293      	cmp	r3, r2
 800992e:	f000 8082 	beq.w	8009a36 <DMA_Init+0x186>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a47      	ldr	r2, [pc, #284]	@ (8009a54 <DMA_Init+0x1a4>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d07c      	beq.n	8009a36 <DMA_Init+0x186>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a45      	ldr	r2, [pc, #276]	@ (8009a58 <DMA_Init+0x1a8>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d077      	beq.n	8009a36 <DMA_Init+0x186>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a44      	ldr	r2, [pc, #272]	@ (8009a5c <DMA_Init+0x1ac>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d072      	beq.n	8009a36 <DMA_Init+0x186>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a42      	ldr	r2, [pc, #264]	@ (8009a60 <DMA_Init+0x1b0>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d06d      	beq.n	8009a36 <DMA_Init+0x186>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a41      	ldr	r2, [pc, #260]	@ (8009a64 <DMA_Init+0x1b4>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d068      	beq.n	8009a36 <DMA_Init+0x186>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a3f      	ldr	r2, [pc, #252]	@ (8009a68 <DMA_Init+0x1b8>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d063      	beq.n	8009a36 <DMA_Init+0x186>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a3e      	ldr	r2, [pc, #248]	@ (8009a6c <DMA_Init+0x1bc>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d05e      	beq.n	8009a36 <DMA_Init+0x186>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a70 <DMA_Init+0x1c0>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d059      	beq.n	8009a36 <DMA_Init+0x186>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a3b      	ldr	r2, [pc, #236]	@ (8009a74 <DMA_Init+0x1c4>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d054      	beq.n	8009a36 <DMA_Init+0x186>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a39      	ldr	r2, [pc, #228]	@ (8009a78 <DMA_Init+0x1c8>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d04f      	beq.n	8009a36 <DMA_Init+0x186>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a38      	ldr	r2, [pc, #224]	@ (8009a7c <DMA_Init+0x1cc>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d04a      	beq.n	8009a36 <DMA_Init+0x186>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a36      	ldr	r2, [pc, #216]	@ (8009a80 <DMA_Init+0x1d0>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d045      	beq.n	8009a36 <DMA_Init+0x186>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a35      	ldr	r2, [pc, #212]	@ (8009a84 <DMA_Init+0x1d4>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d040      	beq.n	8009a36 <DMA_Init+0x186>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a33      	ldr	r2, [pc, #204]	@ (8009a88 <DMA_Init+0x1d8>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d03b      	beq.n	8009a36 <DMA_Init+0x186>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a32      	ldr	r2, [pc, #200]	@ (8009a8c <DMA_Init+0x1dc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d036      	beq.n	8009a36 <DMA_Init+0x186>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a30      	ldr	r2, [pc, #192]	@ (8009a90 <DMA_Init+0x1e0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d031      	beq.n	8009a36 <DMA_Init+0x186>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a2f      	ldr	r2, [pc, #188]	@ (8009a94 <DMA_Init+0x1e4>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d02c      	beq.n	8009a36 <DMA_Init+0x186>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009a98 <DMA_Init+0x1e8>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d027      	beq.n	8009a36 <DMA_Init+0x186>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a2c      	ldr	r2, [pc, #176]	@ (8009a9c <DMA_Init+0x1ec>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d022      	beq.n	8009a36 <DMA_Init+0x186>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a2a      	ldr	r2, [pc, #168]	@ (8009aa0 <DMA_Init+0x1f0>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d01d      	beq.n	8009a36 <DMA_Init+0x186>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a29      	ldr	r2, [pc, #164]	@ (8009aa4 <DMA_Init+0x1f4>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d018      	beq.n	8009a36 <DMA_Init+0x186>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a27      	ldr	r2, [pc, #156]	@ (8009aa8 <DMA_Init+0x1f8>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d013      	beq.n	8009a36 <DMA_Init+0x186>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a26      	ldr	r2, [pc, #152]	@ (8009aac <DMA_Init+0x1fc>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d00e      	beq.n	8009a36 <DMA_Init+0x186>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a24      	ldr	r2, [pc, #144]	@ (8009ab0 <DMA_Init+0x200>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d009      	beq.n	8009a36 <DMA_Init+0x186>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a23      	ldr	r2, [pc, #140]	@ (8009ab4 <DMA_Init+0x204>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d004      	beq.n	8009a36 <DMA_Init+0x186>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a21      	ldr	r2, [pc, #132]	@ (8009ab8 <DMA_Init+0x208>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d142      	bne.n	8009abc <DMA_Init+0x20c>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e041      	b.n	8009abe <DMA_Init+0x20e>
 8009a3a:	bf00      	nop
 8009a3c:	40020050 	.word	0x40020050
 8009a40:	50020050 	.word	0x50020050
 8009a44:	400200d0 	.word	0x400200d0
 8009a48:	500200d0 	.word	0x500200d0
 8009a4c:	40020150 	.word	0x40020150
 8009a50:	50020150 	.word	0x50020150
 8009a54:	400201d0 	.word	0x400201d0
 8009a58:	500201d0 	.word	0x500201d0
 8009a5c:	40020250 	.word	0x40020250
 8009a60:	50020250 	.word	0x50020250
 8009a64:	400202d0 	.word	0x400202d0
 8009a68:	500202d0 	.word	0x500202d0
 8009a6c:	40020350 	.word	0x40020350
 8009a70:	50020350 	.word	0x50020350
 8009a74:	400203d0 	.word	0x400203d0
 8009a78:	500203d0 	.word	0x500203d0
 8009a7c:	40020450 	.word	0x40020450
 8009a80:	50020450 	.word	0x50020450
 8009a84:	400204d0 	.word	0x400204d0
 8009a88:	500204d0 	.word	0x500204d0
 8009a8c:	40020550 	.word	0x40020550
 8009a90:	50020550 	.word	0x50020550
 8009a94:	400205d0 	.word	0x400205d0
 8009a98:	500205d0 	.word	0x500205d0
 8009a9c:	40020650 	.word	0x40020650
 8009aa0:	50020650 	.word	0x50020650
 8009aa4:	400206d0 	.word	0x400206d0
 8009aa8:	500206d0 	.word	0x500206d0
 8009aac:	40020750 	.word	0x40020750
 8009ab0:	50020750 	.word	0x50020750
 8009ab4:	400207d0 	.word	0x400207d0
 8009ab8:	500207d0 	.word	0x500207d0
 8009abc:	2300      	movs	r3, #0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d012      	beq.n	8009ae8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aca:	3b01      	subs	r3, #1
 8009acc:	051b      	lsls	r3, r3, #20
 8009ace:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8009ad2:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	011b      	lsls	r3, r3, #4
 8009adc:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8009ae0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aee:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689a      	ldr	r2, [r3, #8]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b1a:	f040 80b0 	bne.w	8009c7e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a82      	ldr	r2, [pc, #520]	@ (8009d2c <DMA_Init+0x47c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	f000 80a0 	beq.w	8009c6a <DMA_Init+0x3ba>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a80      	ldr	r2, [pc, #512]	@ (8009d30 <DMA_Init+0x480>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	f000 809a 	beq.w	8009c6a <DMA_Init+0x3ba>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8009d34 <DMA_Init+0x484>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	f000 8094 	beq.w	8009c6a <DMA_Init+0x3ba>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a7c      	ldr	r2, [pc, #496]	@ (8009d38 <DMA_Init+0x488>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	f000 808e 	beq.w	8009c6a <DMA_Init+0x3ba>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a7a      	ldr	r2, [pc, #488]	@ (8009d3c <DMA_Init+0x48c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	f000 8088 	beq.w	8009c6a <DMA_Init+0x3ba>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a78      	ldr	r2, [pc, #480]	@ (8009d40 <DMA_Init+0x490>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	f000 8082 	beq.w	8009c6a <DMA_Init+0x3ba>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a76      	ldr	r2, [pc, #472]	@ (8009d44 <DMA_Init+0x494>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d07c      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a74      	ldr	r2, [pc, #464]	@ (8009d48 <DMA_Init+0x498>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d077      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a73      	ldr	r2, [pc, #460]	@ (8009d4c <DMA_Init+0x49c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d072      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a71      	ldr	r2, [pc, #452]	@ (8009d50 <DMA_Init+0x4a0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d06d      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a70      	ldr	r2, [pc, #448]	@ (8009d54 <DMA_Init+0x4a4>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d068      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8009d58 <DMA_Init+0x4a8>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d063      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8009d5c <DMA_Init+0x4ac>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d05e      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8009d60 <DMA_Init+0x4b0>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d059      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a6a      	ldr	r2, [pc, #424]	@ (8009d64 <DMA_Init+0x4b4>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d054      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a68      	ldr	r2, [pc, #416]	@ (8009d68 <DMA_Init+0x4b8>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d04f      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a67      	ldr	r2, [pc, #412]	@ (8009d6c <DMA_Init+0x4bc>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d04a      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a65      	ldr	r2, [pc, #404]	@ (8009d70 <DMA_Init+0x4c0>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d045      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a64      	ldr	r2, [pc, #400]	@ (8009d74 <DMA_Init+0x4c4>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d040      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a62      	ldr	r2, [pc, #392]	@ (8009d78 <DMA_Init+0x4c8>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d03b      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a61      	ldr	r2, [pc, #388]	@ (8009d7c <DMA_Init+0x4cc>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d036      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a5f      	ldr	r2, [pc, #380]	@ (8009d80 <DMA_Init+0x4d0>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d031      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8009d84 <DMA_Init+0x4d4>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d02c      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a5c      	ldr	r2, [pc, #368]	@ (8009d88 <DMA_Init+0x4d8>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d027      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8009d8c <DMA_Init+0x4dc>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d022      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a59      	ldr	r2, [pc, #356]	@ (8009d90 <DMA_Init+0x4e0>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d01d      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a58      	ldr	r2, [pc, #352]	@ (8009d94 <DMA_Init+0x4e4>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d018      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a56      	ldr	r2, [pc, #344]	@ (8009d98 <DMA_Init+0x4e8>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d013      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a55      	ldr	r2, [pc, #340]	@ (8009d9c <DMA_Init+0x4ec>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d00e      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a53      	ldr	r2, [pc, #332]	@ (8009da0 <DMA_Init+0x4f0>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d009      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a52      	ldr	r2, [pc, #328]	@ (8009da4 <DMA_Init+0x4f4>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d004      	beq.n	8009c6a <DMA_Init+0x3ba>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a50      	ldr	r2, [pc, #320]	@ (8009da8 <DMA_Init+0x4f8>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d101      	bne.n	8009c6e <DMA_Init+0x3be>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <DMA_Init+0x3c0>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00d      	beq.n	8009c90 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	e008      	b.n	8009c90 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c86:	d103      	bne.n	8009c90 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c8e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c96:	4b45      	ldr	r3, [pc, #276]	@ (8009dac <DMA_Init+0x4fc>)
 8009c98:	4013      	ands	r3, r2
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	68f9      	ldr	r1, [r7, #12]
 8009ca0:	430b      	orrs	r3, r1
 8009ca2:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a36      	ldr	r2, [pc, #216]	@ (8009d8c <DMA_Init+0x4dc>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d022      	beq.n	8009cfc <DMA_Init+0x44c>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a35      	ldr	r2, [pc, #212]	@ (8009d90 <DMA_Init+0x4e0>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d01d      	beq.n	8009cfc <DMA_Init+0x44c>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a33      	ldr	r2, [pc, #204]	@ (8009d94 <DMA_Init+0x4e4>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d018      	beq.n	8009cfc <DMA_Init+0x44c>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a32      	ldr	r2, [pc, #200]	@ (8009d98 <DMA_Init+0x4e8>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d013      	beq.n	8009cfc <DMA_Init+0x44c>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a30      	ldr	r2, [pc, #192]	@ (8009d9c <DMA_Init+0x4ec>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00e      	beq.n	8009cfc <DMA_Init+0x44c>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8009da0 <DMA_Init+0x4f0>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d009      	beq.n	8009cfc <DMA_Init+0x44c>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a2d      	ldr	r2, [pc, #180]	@ (8009da4 <DMA_Init+0x4f4>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <DMA_Init+0x44c>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8009da8 <DMA_Init+0x4f8>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d101      	bne.n	8009d00 <DMA_Init+0x450>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e000      	b.n	8009d02 <DMA_Init+0x452>
 8009d00:	2300      	movs	r3, #0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d007      	beq.n	8009d16 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2200      	movs	r2, #0
 8009d14:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009d1e:	bf00      	nop
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	40020050 	.word	0x40020050
 8009d30:	50020050 	.word	0x50020050
 8009d34:	400200d0 	.word	0x400200d0
 8009d38:	500200d0 	.word	0x500200d0
 8009d3c:	40020150 	.word	0x40020150
 8009d40:	50020150 	.word	0x50020150
 8009d44:	400201d0 	.word	0x400201d0
 8009d48:	500201d0 	.word	0x500201d0
 8009d4c:	40020250 	.word	0x40020250
 8009d50:	50020250 	.word	0x50020250
 8009d54:	400202d0 	.word	0x400202d0
 8009d58:	500202d0 	.word	0x500202d0
 8009d5c:	40020350 	.word	0x40020350
 8009d60:	50020350 	.word	0x50020350
 8009d64:	400203d0 	.word	0x400203d0
 8009d68:	500203d0 	.word	0x500203d0
 8009d6c:	40020450 	.word	0x40020450
 8009d70:	50020450 	.word	0x50020450
 8009d74:	400204d0 	.word	0x400204d0
 8009d78:	500204d0 	.word	0x500204d0
 8009d7c:	40020550 	.word	0x40020550
 8009d80:	50020550 	.word	0x50020550
 8009d84:	400205d0 	.word	0x400205d0
 8009d88:	500205d0 	.word	0x500205d0
 8009d8c:	40020650 	.word	0x40020650
 8009d90:	50020650 	.word	0x50020650
 8009d94:	400206d0 	.word	0x400206d0
 8009d98:	500206d0 	.word	0x500206d0
 8009d9c:	40020750 	.word	0x40020750
 8009da0:	50020750 	.word	0x50020750
 8009da4:	400207d0 	.word	0x400207d0
 8009da8:	500207d0 	.word	0x500207d0
 8009dac:	3cc03180 	.word	0x3cc03180

08009db0 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	0c1b      	lsrs	r3, r3, #16
 8009dc0:	b2db      	uxtb	r3, r3
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b087      	sub	sp, #28
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	607a      	str	r2, [r7, #4]
 8009dda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009de0:	7afb      	ldrb	r3, [r7, #11]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d011      	beq.n	8009e0a <HAL_EXTI_RegisterCallback+0x3c>
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	dc13      	bgt.n	8009e12 <HAL_EXTI_RegisterCallback+0x44>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d002      	beq.n	8009df4 <HAL_EXTI_RegisterCallback+0x26>
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d007      	beq.n	8009e02 <HAL_EXTI_RegisterCallback+0x34>
 8009df2:	e00e      	b.n	8009e12 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	609a      	str	r2, [r3, #8]
      break;
 8009e00:	e00a      	b.n	8009e18 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	605a      	str	r2, [r3, #4]
      break;
 8009e08:	e006      	b.n	8009e18 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	609a      	str	r2, [r3, #8]
      break;
 8009e10:	e002      	b.n	8009e18 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	75fb      	strb	r3, [r7, #23]
      break;
 8009e16:	bf00      	nop
  }

  return status;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	371c      	adds	r7, #28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e003      	b.n	8009e42 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009e40:	2300      	movs	r3, #0
  }
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
	...

08009e50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b089      	sub	sp, #36	@ 0x24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009e62:	e1c2      	b.n	800a1ea <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	2101      	movs	r1, #1
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e70:	4013      	ands	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 81b2 	beq.w	800a1e4 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a55      	ldr	r2, [pc, #340]	@ (8009fd8 <HAL_GPIO_Init+0x188>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d15d      	bne.n	8009f44 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8009e8e:	2201      	movs	r2, #1
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	fa02 f303 	lsl.w	r3, r2, r3
 8009e96:	43db      	mvns	r3, r3
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f003 0201 	and.w	r2, r3, #1
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	69fa      	ldr	r2, [r7, #28]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	69fa      	ldr	r2, [r7, #28]
 8009eb6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009eb8:	4a48      	ldr	r2, [pc, #288]	@ (8009fdc <HAL_GPIO_Init+0x18c>)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ec0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009ec2:	4a46      	ldr	r2, [pc, #280]	@ (8009fdc <HAL_GPIO_Init+0x18c>)
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	4413      	add	r3, r2
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	08da      	lsrs	r2, r3, #3
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	3208      	adds	r2, #8
 8009ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eda:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	220f      	movs	r2, #15
 8009ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eea:	43db      	mvns	r3, r3
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	4013      	ands	r3, r2
 8009ef0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	f003 0307 	and.w	r3, r3, #7
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	220b      	movs	r2, #11
 8009efc:	fa02 f303 	lsl.w	r3, r2, r3
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	08da      	lsrs	r2, r3, #3
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	3208      	adds	r2, #8
 8009f0e:	69f9      	ldr	r1, [r7, #28]
 8009f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	2203      	movs	r2, #3
 8009f20:	fa02 f303 	lsl.w	r3, r2, r3
 8009f24:	43db      	mvns	r3, r3
 8009f26:	69fa      	ldr	r2, [r7, #28]
 8009f28:	4013      	ands	r3, r2
 8009f2a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	005b      	lsls	r3, r3, #1
 8009f30:	2202      	movs	r2, #2
 8009f32:	fa02 f303 	lsl.w	r3, r2, r3
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	e067      	b.n	800a014 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d003      	beq.n	8009f54 <HAL_GPIO_Init+0x104>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	2b12      	cmp	r3, #18
 8009f52:	d145      	bne.n	8009fe0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	08da      	lsrs	r2, r3, #3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3208      	adds	r2, #8
 8009f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f003 0307 	and.w	r3, r3, #7
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	220f      	movs	r2, #15
 8009f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f70:	43db      	mvns	r3, r3
 8009f72:	69fa      	ldr	r2, [r7, #28]
 8009f74:	4013      	ands	r3, r2
 8009f76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	f003 020f 	and.w	r2, r3, #15
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8c:	69fa      	ldr	r2, [r7, #28]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	08da      	lsrs	r2, r3, #3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3208      	adds	r2, #8
 8009f9a:	69f9      	ldr	r1, [r7, #28]
 8009f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	2203      	movs	r2, #3
 8009fac:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f003 0203 	and.w	r2, r3, #3
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	e01e      	b.n	800a014 <HAL_GPIO_Init+0x1c4>
 8009fd6:	bf00      	nop
 8009fd8:	46020000 	.word	0x46020000
 8009fdc:	080158a4 	.word	0x080158a4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	2203      	movs	r2, #3
 8009fec:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff0:	43db      	mvns	r3, r3
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f003 0203 	and.w	r2, r3, #3
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	fa02 f303 	lsl.w	r3, r2, r3
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	69fa      	ldr	r2, [r7, #28]
 800a012:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d00b      	beq.n	800a034 <HAL_GPIO_Init+0x1e4>
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	2b02      	cmp	r3, #2
 800a022:	d007      	beq.n	800a034 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a028:	2b11      	cmp	r3, #17
 800a02a:	d003      	beq.n	800a034 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2b12      	cmp	r3, #18
 800a032:	d130      	bne.n	800a096 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	2203      	movs	r2, #3
 800a040:	fa02 f303 	lsl.w	r3, r2, r3
 800a044:	43db      	mvns	r3, r3
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	4013      	ands	r3, r2
 800a04a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	fa02 f303 	lsl.w	r3, r2, r3
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	69fa      	ldr	r2, [r7, #28]
 800a062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a06a:	2201      	movs	r2, #1
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	fa02 f303 	lsl.w	r3, r2, r3
 800a072:	43db      	mvns	r3, r3
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	4013      	ands	r3, r2
 800a078:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	091b      	lsrs	r3, r3, #4
 800a080:	f003 0201 	and.w	r2, r3, #1
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	69fa      	ldr	r2, [r7, #28]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	69fa      	ldr	r2, [r7, #28]
 800a094:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d107      	bne.n	800a0ae <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d11b      	bne.n	800a0de <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d017      	beq.n	800a0de <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	2203      	movs	r2, #3
 800a0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a0be:	43db      	mvns	r3, r3
 800a0c0:	69fa      	ldr	r2, [r7, #28]
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d07c      	beq.n	800a1e4 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a0ea:	4a47      	ldr	r2, [pc, #284]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	089b      	lsrs	r3, r3, #2
 800a0f0:	3318      	adds	r3, #24
 800a0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f003 0303 	and.w	r3, r3, #3
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	220f      	movs	r2, #15
 800a102:	fa02 f303 	lsl.w	r3, r2, r3
 800a106:	43db      	mvns	r3, r3
 800a108:	69fa      	ldr	r2, [r7, #28]
 800a10a:	4013      	ands	r3, r2
 800a10c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	0a9a      	lsrs	r2, r3, #10
 800a112:	4b3e      	ldr	r3, [pc, #248]	@ (800a20c <HAL_GPIO_Init+0x3bc>)
 800a114:	4013      	ands	r3, r2
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	f002 0203 	and.w	r2, r2, #3
 800a11c:	00d2      	lsls	r2, r2, #3
 800a11e:	4093      	lsls	r3, r2
 800a120:	69fa      	ldr	r2, [r7, #28]
 800a122:	4313      	orrs	r3, r2
 800a124:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a126:	4938      	ldr	r1, [pc, #224]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	089b      	lsrs	r3, r3, #2
 800a12c:	3318      	adds	r3, #24
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a134:	4b34      	ldr	r3, [pc, #208]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	43db      	mvns	r3, r3
 800a13e:	69fa      	ldr	r2, [r7, #28]
 800a140:	4013      	ands	r3, r2
 800a142:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d003      	beq.n	800a158 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	4313      	orrs	r3, r2
 800a156:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a158:	4a2b      	ldr	r2, [pc, #172]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a15e:	4b2a      	ldr	r3, [pc, #168]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	43db      	mvns	r3, r3
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	4013      	ands	r3, r2
 800a16c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a182:	4a21      	ldr	r2, [pc, #132]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a188:	4b1f      	ldr	r3, [pc, #124]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a18a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a18e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	43db      	mvns	r3, r3
 800a194:	69fa      	ldr	r2, [r7, #28]
 800a196:	4013      	ands	r3, r2
 800a198:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a1ae:	4a16      	ldr	r2, [pc, #88]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800a1b6:	4b14      	ldr	r3, [pc, #80]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a1b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	43db      	mvns	r3, r3
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d003      	beq.n	800a1dc <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 800a1d4:	69fa      	ldr	r2, [r7, #28]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a1dc:	4a0a      	ldr	r2, [pc, #40]	@ (800a208 <HAL_GPIO_Init+0x3b8>)
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f47f ae35 	bne.w	8009e64 <HAL_GPIO_Init+0x14>
  }
}
 800a1fa:	bf00      	nop
 800a1fc:	bf00      	nop
 800a1fe:	3724      	adds	r7, #36	@ 0x24
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	46022000 	.word	0x46022000
 800a20c:	002f7f7f 	.word	0x002f7f7f

0800a210 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a210:	b480      	push	{r7}
 800a212:	b089      	sub	sp, #36	@ 0x24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a222:	e0bc      	b.n	800a39e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a224:	2201      	movs	r2, #1
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	fa02 f303 	lsl.w	r3, r2, r3
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	4013      	ands	r3, r2
 800a230:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 80ad 	beq.w	800a398 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a5e      	ldr	r2, [pc, #376]	@ (800a3bc <HAL_GPIO_DeInit+0x1ac>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d115      	bne.n	800a272 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800a246:	4a5e      	ldr	r2, [pc, #376]	@ (800a3c0 <HAL_GPIO_DeInit+0x1b0>)
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a24e:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a250:	4a5b      	ldr	r2, [pc, #364]	@ (800a3c0 <HAL_GPIO_DeInit+0x1b0>)
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	4413      	add	r3, r2
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800a25c:	4b57      	ldr	r3, [pc, #348]	@ (800a3bc <HAL_GPIO_DeInit+0x1ac>)
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	2101      	movs	r1, #1
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	fa01 f303 	lsl.w	r3, r1, r3
 800a268:	43db      	mvns	r3, r3
 800a26a:	4954      	ldr	r1, [pc, #336]	@ (800a3bc <HAL_GPIO_DeInit+0x1ac>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	600b      	str	r3, [r1, #0]
 800a270:	e053      	b.n	800a31a <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800a272:	4a54      	ldr	r2, [pc, #336]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	089b      	lsrs	r3, r3, #2
 800a278:	3318      	adds	r3, #24
 800a27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a27e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	220f      	movs	r2, #15
 800a28a:	fa02 f303 	lsl.w	r3, r2, r3
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	4013      	ands	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	0a9a      	lsrs	r2, r3, #10
 800a298:	4b4b      	ldr	r3, [pc, #300]	@ (800a3c8 <HAL_GPIO_DeInit+0x1b8>)
 800a29a:	4013      	ands	r3, r2
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	f002 0203 	and.w	r2, r2, #3
 800a2a2:	00d2      	lsls	r2, r2, #3
 800a2a4:	4093      	lsls	r3, r2
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d136      	bne.n	800a31a <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800a2ac:	4b45      	ldr	r3, [pc, #276]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	43db      	mvns	r3, r3
 800a2b6:	4943      	ldr	r1, [pc, #268]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800a2be:	4b41      	ldr	r3, [pc, #260]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2c0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	43db      	mvns	r3, r3
 800a2c8:	493e      	ldr	r1, [pc, #248]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800a2d0:	4b3c      	ldr	r3, [pc, #240]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	493a      	ldr	r1, [pc, #232]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2da:	4013      	ands	r3, r2
 800a2dc:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800a2de:	4b39      	ldr	r3, [pc, #228]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	43db      	mvns	r3, r3
 800a2e6:	4937      	ldr	r1, [pc, #220]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	220f      	movs	r2, #15
 800a2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fa:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800a2fc:	4a31      	ldr	r2, [pc, #196]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	089b      	lsrs	r3, r3, #2
 800a302:	3318      	adds	r3, #24
 800a304:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	43da      	mvns	r2, r3
 800a30c:	482d      	ldr	r0, [pc, #180]	@ (800a3c4 <HAL_GPIO_DeInit+0x1b4>)
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	089b      	lsrs	r3, r3, #2
 800a312:	400a      	ands	r2, r1
 800a314:	3318      	adds	r3, #24
 800a316:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	2103      	movs	r1, #3
 800a324:	fa01 f303 	lsl.w	r3, r1, r3
 800a328:	431a      	orrs	r2, r3
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	08da      	lsrs	r2, r3, #3
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	3208      	adds	r2, #8
 800a336:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	220f      	movs	r2, #15
 800a344:	fa02 f303 	lsl.w	r3, r2, r3
 800a348:	43db      	mvns	r3, r3
 800a34a:	69fa      	ldr	r2, [r7, #28]
 800a34c:	08d2      	lsrs	r2, r2, #3
 800a34e:	4019      	ands	r1, r3
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	3208      	adds	r2, #8
 800a354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	689a      	ldr	r2, [r3, #8]
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	2103      	movs	r1, #3
 800a362:	fa01 f303 	lsl.w	r3, r1, r3
 800a366:	43db      	mvns	r3, r3
 800a368:	401a      	ands	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	2101      	movs	r1, #1
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	fa01 f303 	lsl.w	r3, r1, r3
 800a37a:	43db      	mvns	r3, r3
 800a37c:	401a      	ands	r2, r3
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	2103      	movs	r1, #3
 800a38c:	fa01 f303 	lsl.w	r3, r1, r3
 800a390:	43db      	mvns	r3, r3
 800a392:	401a      	ands	r2, r3
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	3301      	adds	r3, #1
 800a39c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f47f af3c 	bne.w	800a224 <HAL_GPIO_DeInit+0x14>
  }
}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	3724      	adds	r7, #36	@ 0x24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	46020000 	.word	0x46020000
 800a3c0:	080158a4 	.word	0x080158a4
 800a3c4:	46022000 	.word	0x46022000
 800a3c8:	002f7f7f 	.word	0x002f7f7f

0800a3cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	807b      	strh	r3, [r7, #2]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3dc:	787b      	ldrb	r3, [r7, #1]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a3e2:	887a      	ldrh	r2, [r7, #2]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a3e8:	e002      	b.n	800a3f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a3ea:	887a      	ldrh	r2, [r7, #2]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a406:	4b0f      	ldr	r3, [pc, #60]	@ (800a444 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	4013      	ands	r3, r2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d006      	beq.n	800a420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a412:	4a0c      	ldr	r2, [pc, #48]	@ (800a444 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a414:	88fb      	ldrh	r3, [r7, #6]
 800a416:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 f814 	bl	800a448 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a420:	4b08      	ldr	r3, [pc, #32]	@ (800a444 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a422:	691a      	ldr	r2, [r3, #16]
 800a424:	88fb      	ldrh	r3, [r7, #6]
 800a426:	4013      	ands	r3, r2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d006      	beq.n	800a43a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a42c:	4a05      	ldr	r2, [pc, #20]	@ (800a444 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a42e:	88fb      	ldrh	r3, [r7, #6]
 800a430:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	4618      	mov	r0, r3
 800a436:	f000 f812 	bl	800a45e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a43a:	bf00      	nop
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	46022000 	.word	0x46022000

0800a448 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800a452:	bf00      	nop
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	4603      	mov	r3, r0
 800a466:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e08d      	b.n	800a5a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7f7 f842 	bl	8001524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2224      	movs	r2, #36	@ 0x24
 800a4a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f022 0201 	bic.w	r2, r2, #1
 800a4b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a4c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689a      	ldr	r2, [r3, #8]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a4d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d107      	bne.n	800a4ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689a      	ldr	r2, [r3, #8]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4ea:	609a      	str	r2, [r3, #8]
 800a4ec:	e006      	b.n	800a4fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689a      	ldr	r2, [r3, #8]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a4fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d108      	bne.n	800a516 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a512:	605a      	str	r2, [r3, #4]
 800a514:	e007      	b.n	800a526 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a524:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	6812      	ldr	r2, [r2, #0]
 800a530:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	691a      	ldr	r2, [r3, #16]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	430a      	orrs	r2, r1
 800a562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	69d9      	ldr	r1, [r3, #28]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a1a      	ldr	r2, [r3, #32]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f042 0201 	orr.w	r2, r2, #1
 800a582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e021      	b.n	800a600 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2224      	movs	r2, #36	@ 0x24
 800a5c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f022 0201 	bic.w	r2, r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7f7 f9eb 	bl	80019b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	4608      	mov	r0, r1
 800a612:	4611      	mov	r1, r2
 800a614:	461a      	mov	r2, r3
 800a616:	4603      	mov	r3, r0
 800a618:	817b      	strh	r3, [r7, #10]
 800a61a:	460b      	mov	r3, r1
 800a61c:	813b      	strh	r3, [r7, #8]
 800a61e:	4613      	mov	r3, r2
 800a620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	f040 80f9 	bne.w	800a822 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <HAL_I2C_Mem_Write+0x34>
 800a636:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d105      	bne.n	800a648 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a642:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e0ed      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d101      	bne.n	800a656 <HAL_I2C_Mem_Write+0x4e>
 800a652:	2302      	movs	r3, #2
 800a654:	e0e6      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a65e:	f7fe fb41 	bl	8008ce4 <HAL_GetTick>
 800a662:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	2319      	movs	r3, #25
 800a66a:	2201      	movs	r2, #1
 800a66c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f001 f86a 	bl	800b74a <I2C_WaitOnFlagUntilTimeout>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e0d1      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2221      	movs	r2, #33	@ 0x21
 800a684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2240      	movs	r2, #64	@ 0x40
 800a68c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a3a      	ldr	r2, [r7, #32]
 800a69a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a6a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a6a8:	88f8      	ldrh	r0, [r7, #6]
 800a6aa:	893a      	ldrh	r2, [r7, #8]
 800a6ac:	8979      	ldrh	r1, [r7, #10]
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	9301      	str	r3, [sp, #4]
 800a6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 fb9b 	bl	800adf4 <I2C_RequestMemoryWrite>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e0a9      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	2bff      	cmp	r3, #255	@ 0xff
 800a6d8:	d90e      	bls.n	800a6f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	22ff      	movs	r2, #255	@ 0xff
 800a6de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	8979      	ldrh	r1, [r7, #10]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f001 f9ed 	bl	800bad0 <I2C_TransferConfig>
 800a6f6:	e00f      	b.n	800a718 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a706:	b2da      	uxtb	r2, r3
 800a708:	8979      	ldrh	r1, [r7, #10]
 800a70a:	2300      	movs	r3, #0
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f001 f9dc 	bl	800bad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f001 f86d 	bl	800b7fc <I2C_WaitOnTXISFlagUntilTimeout>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e07b      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a730:	781a      	ldrb	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a746:	b29b      	uxth	r3, r3
 800a748:	3b01      	subs	r3, #1
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a754:	3b01      	subs	r3, #1
 800a756:	b29a      	uxth	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a760:	b29b      	uxth	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d034      	beq.n	800a7d0 <HAL_I2C_Mem_Write+0x1c8>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d130      	bne.n	800a7d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a774:	2200      	movs	r2, #0
 800a776:	2180      	movs	r1, #128	@ 0x80
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 ffe6 	bl	800b74a <I2C_WaitOnFlagUntilTimeout>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e04d      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	2bff      	cmp	r3, #255	@ 0xff
 800a790:	d90e      	bls.n	800a7b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	22ff      	movs	r2, #255	@ 0xff
 800a796:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	8979      	ldrh	r1, [r7, #10]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f001 f991 	bl	800bad0 <I2C_TransferConfig>
 800a7ae:	e00f      	b.n	800a7d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	8979      	ldrh	r1, [r7, #10]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f001 f980 	bl	800bad0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d19e      	bne.n	800a718 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f001 f853 	bl	800b88a <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e01a      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6859      	ldr	r1, [r3, #4]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	4b0a      	ldr	r3, [pc, #40]	@ (800a82c <HAL_I2C_Mem_Write+0x224>)
 800a802:	400b      	ands	r3, r1
 800a804:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2220      	movs	r2, #32
 800a80a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	e000      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a822:	2302      	movs	r3, #2
  }
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	fe00e800 	.word	0xfe00e800

0800a830 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b088      	sub	sp, #32
 800a834:	af02      	add	r7, sp, #8
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	4608      	mov	r0, r1
 800a83a:	4611      	mov	r1, r2
 800a83c:	461a      	mov	r2, r3
 800a83e:	4603      	mov	r3, r0
 800a840:	817b      	strh	r3, [r7, #10]
 800a842:	460b      	mov	r3, r1
 800a844:	813b      	strh	r3, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b20      	cmp	r3, #32
 800a854:	f040 80fd 	bne.w	800aa52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <HAL_I2C_Mem_Read+0x34>
 800a85e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a860:	2b00      	cmp	r3, #0
 800a862:	d105      	bne.n	800a870 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a86a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e0f1      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <HAL_I2C_Mem_Read+0x4e>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e0ea      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a886:	f7fe fa2d 	bl	8008ce4 <HAL_GetTick>
 800a88a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	2319      	movs	r3, #25
 800a892:	2201      	movs	r2, #1
 800a894:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 ff56 	bl	800b74a <I2C_WaitOnFlagUntilTimeout>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0d5      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2222      	movs	r2, #34	@ 0x22
 800a8ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2240      	movs	r2, #64	@ 0x40
 800a8b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6a3a      	ldr	r2, [r7, #32]
 800a8c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a8c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8d0:	88f8      	ldrh	r0, [r7, #6]
 800a8d2:	893a      	ldrh	r2, [r7, #8]
 800a8d4:	8979      	ldrh	r1, [r7, #10]
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	4603      	mov	r3, r0
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 fadb 	bl	800ae9c <I2C_RequestMemoryRead>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e0ad      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	2bff      	cmp	r3, #255	@ 0xff
 800a900:	d90e      	bls.n	800a920 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	22ff      	movs	r2, #255	@ 0xff
 800a906:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	8979      	ldrh	r1, [r7, #10]
 800a910:	4b52      	ldr	r3, [pc, #328]	@ (800aa5c <HAL_I2C_Mem_Read+0x22c>)
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f001 f8d9 	bl	800bad0 <I2C_TransferConfig>
 800a91e:	e00f      	b.n	800a940 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a924:	b29a      	uxth	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	8979      	ldrh	r1, [r7, #10]
 800a932:	4b4a      	ldr	r3, [pc, #296]	@ (800aa5c <HAL_I2C_Mem_Read+0x22c>)
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f001 f8c8 	bl	800bad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a946:	2200      	movs	r2, #0
 800a948:	2104      	movs	r1, #4
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 fefd 	bl	800b74a <I2C_WaitOnFlagUntilTimeout>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e07c      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a976:	3b01      	subs	r3, #1
 800a978:	b29a      	uxth	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a982:	b29b      	uxth	r3, r3
 800a984:	3b01      	subs	r3, #1
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a990:	b29b      	uxth	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d034      	beq.n	800aa00 <HAL_I2C_Mem_Read+0x1d0>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d130      	bne.n	800aa00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2180      	movs	r1, #128	@ 0x80
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 fece 	bl	800b74a <I2C_WaitOnFlagUntilTimeout>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e04d      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	2bff      	cmp	r3, #255	@ 0xff
 800a9c0:	d90e      	bls.n	800a9e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	22ff      	movs	r2, #255	@ 0xff
 800a9c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	8979      	ldrh	r1, [r7, #10]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f001 f879 	bl	800bad0 <I2C_TransferConfig>
 800a9de:	e00f      	b.n	800aa00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	8979      	ldrh	r1, [r7, #10]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f001 f868 	bl	800bad0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d19a      	bne.n	800a940 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 ff3b 	bl	800b88a <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e01a      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2220      	movs	r2, #32
 800aa24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6859      	ldr	r1, [r3, #4]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	4b0b      	ldr	r3, [pc, #44]	@ (800aa60 <HAL_I2C_Mem_Read+0x230>)
 800aa32:	400b      	ands	r3, r1
 800aa34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2220      	movs	r2, #32
 800aa3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e000      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aa52:	2302      	movs	r3, #2
  }
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	80002400 	.word	0x80002400
 800aa60:	fe00e800 	.word	0xfe00e800

0800aa64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	4798      	blx	r3
  }
}
 800aa90:	bf00      	nop
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00f      	beq.n	800aada <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00a      	beq.n	800aada <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac8:	f043 0201 	orr.w	r2, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aad8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00f      	beq.n	800ab04 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00a      	beq.n	800ab04 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf2:	f043 0208 	orr.w	r2, r3, #8
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00f      	beq.n	800ab2e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00a      	beq.n	800ab2e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab1c:	f043 0202 	orr.w	r2, r3, #2
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab2c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f003 030b 	and.w	r3, r3, #11
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800ab3e:	68f9      	ldr	r1, [r7, #12]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fca9 	bl	800b498 <I2C_ITError>
  }
}
 800ab46:	bf00      	nop
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ab6a:	bf00      	nop
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70fb      	strb	r3, [r7, #3]
 800ab82:	4613      	mov	r3, r2
 800ab84:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ab9a:	bf00      	nop
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aba6:	b480      	push	{r7}
 800aba8:	b083      	sub	sp, #12
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800abae:	bf00      	nop
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800abc2:	bf00      	nop
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abdc:	b2db      	uxtb	r3, r3
}
 800abde:	4618      	mov	r0, r3
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b086      	sub	sp, #24
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d101      	bne.n	800ac26 <I2C_Slave_ISR_IT+0x24>
 800ac22:	2302      	movs	r3, #2
 800ac24:	e0e2      	b.n	800adec <I2C_Slave_ISR_IT+0x1ea>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f003 0320 	and.w	r3, r3, #32
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d009      	beq.n	800ac4c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d004      	beq.n	800ac4c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ac42:	6939      	ldr	r1, [r7, #16]
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 fa5d 	bl	800b104 <I2C_ITSlaveCplt>
 800ac4a:	e0ca      	b.n	800ade2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f003 0310 	and.w	r3, r3, #16
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d04b      	beq.n	800acee <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d046      	beq.n	800acee <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d128      	bne.n	800acbc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b28      	cmp	r3, #40	@ 0x28
 800ac74:	d108      	bne.n	800ac88 <I2C_Slave_ISR_IT+0x86>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac7c:	d104      	bne.n	800ac88 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ac7e:	6939      	ldr	r1, [r7, #16]
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 fbb5 	bl	800b3f0 <I2C_ITListenCplt>
 800ac86:	e031      	b.n	800acec <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b29      	cmp	r3, #41	@ 0x29
 800ac92:	d10e      	bne.n	800acb2 <I2C_Slave_ISR_IT+0xb0>
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ac9a:	d00a      	beq.n	800acb2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2210      	movs	r2, #16
 800aca2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 fd0e 	bl	800b6c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f000 f9ce 	bl	800b04c <I2C_ITSlaveSeqCplt>
 800acb0:	e01c      	b.n	800acec <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2210      	movs	r2, #16
 800acb8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800acba:	e08f      	b.n	800addc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2210      	movs	r2, #16
 800acc2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc8:	f043 0204 	orr.w	r2, r3, #4
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <I2C_Slave_ISR_IT+0xdc>
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acdc:	d17e      	bne.n	800addc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace2:	4619      	mov	r1, r3
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f000 fbd7 	bl	800b498 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800acea:	e077      	b.n	800addc <I2C_Slave_ISR_IT+0x1da>
 800acec:	e076      	b.n	800addc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f003 0304 	and.w	r3, r3, #4
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d02f      	beq.n	800ad58 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d02a      	beq.n	800ad58 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d018      	beq.n	800ad3e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad16:	b2d2      	uxtb	r2, r2
 800ad18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	3b01      	subs	r3, #1
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d14b      	bne.n	800ade0 <I2C_Slave_ISR_IT+0x1de>
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ad4e:	d047      	beq.n	800ade0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f000 f97b 	bl	800b04c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800ad56:	e043      	b.n	800ade0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f003 0308 	and.w	r3, r3, #8
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d009      	beq.n	800ad76 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d004      	beq.n	800ad76 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ad6c:	6939      	ldr	r1, [r7, #16]
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 f8e8 	bl	800af44 <I2C_ITAddrCplt>
 800ad74:	e035      	b.n	800ade2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d030      	beq.n	800ade2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d02b      	beq.n	800ade2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d018      	beq.n	800adc6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad98:	781a      	ldrb	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada4:	1c5a      	adds	r2, r3, #1
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adae:	b29b      	uxth	r3, r3
 800adb0:	3b01      	subs	r3, #1
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adbc:	3b01      	subs	r3, #1
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800adc4:	e00d      	b.n	800ade2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adcc:	d002      	beq.n	800add4 <I2C_Slave_ISR_IT+0x1d2>
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d106      	bne.n	800ade2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f939 	bl	800b04c <I2C_ITSlaveSeqCplt>
 800adda:	e002      	b.n	800ade2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800addc:	bf00      	nop
 800adde:	e000      	b.n	800ade2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800ade0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	4608      	mov	r0, r1
 800adfe:	4611      	mov	r1, r2
 800ae00:	461a      	mov	r2, r3
 800ae02:	4603      	mov	r3, r0
 800ae04:	817b      	strh	r3, [r7, #10]
 800ae06:	460b      	mov	r3, r1
 800ae08:	813b      	strh	r3, [r7, #8]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	8979      	ldrh	r1, [r7, #10]
 800ae14:	4b20      	ldr	r3, [pc, #128]	@ (800ae98 <I2C_RequestMemoryWrite+0xa4>)
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fe57 	bl	800bad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae22:	69fa      	ldr	r2, [r7, #28]
 800ae24:	69b9      	ldr	r1, [r7, #24]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 fce8 	bl	800b7fc <I2C_WaitOnTXISFlagUntilTimeout>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e02c      	b.n	800ae90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d105      	bne.n	800ae48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae3c:	893b      	ldrh	r3, [r7, #8]
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae46:	e015      	b.n	800ae74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae48:	893b      	ldrh	r3, [r7, #8]
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae56:	69fa      	ldr	r2, [r7, #28]
 800ae58:	69b9      	ldr	r1, [r7, #24]
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 fcce 	bl	800b7fc <I2C_WaitOnTXISFlagUntilTimeout>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e012      	b.n	800ae90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae6a:	893b      	ldrh	r3, [r7, #8]
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2180      	movs	r1, #128	@ 0x80
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 fc63 	bl	800b74a <I2C_WaitOnFlagUntilTimeout>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e000      	b.n	800ae90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	80002000 	.word	0x80002000

0800ae9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4603      	mov	r3, r0
 800aeac:	817b      	strh	r3, [r7, #10]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	813b      	strh	r3, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800aeb6:	88fb      	ldrh	r3, [r7, #6]
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	8979      	ldrh	r1, [r7, #10]
 800aebc:	4b20      	ldr	r3, [pc, #128]	@ (800af40 <I2C_RequestMemoryRead+0xa4>)
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	2300      	movs	r3, #0
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fe04 	bl	800bad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aec8:	69fa      	ldr	r2, [r7, #28]
 800aeca:	69b9      	ldr	r1, [r7, #24]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 fc95 	bl	800b7fc <I2C_WaitOnTXISFlagUntilTimeout>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e02c      	b.n	800af36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aedc:	88fb      	ldrh	r3, [r7, #6]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d105      	bne.n	800aeee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aee2:	893b      	ldrh	r3, [r7, #8]
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	629a      	str	r2, [r3, #40]	@ 0x28
 800aeec:	e015      	b.n	800af1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aeee:	893b      	ldrh	r3, [r7, #8]
 800aef0:	0a1b      	lsrs	r3, r3, #8
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	b2da      	uxtb	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aefc:	69fa      	ldr	r2, [r7, #28]
 800aefe:	69b9      	ldr	r1, [r7, #24]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 fc7b 	bl	800b7fc <I2C_WaitOnTXISFlagUntilTimeout>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e012      	b.n	800af36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af10:	893b      	ldrh	r3, [r7, #8]
 800af12:	b2da      	uxtb	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2200      	movs	r2, #0
 800af22:	2140      	movs	r1, #64	@ 0x40
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fc10 	bl	800b74a <I2C_WaitOnFlagUntilTimeout>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e000      	b.n	800af36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	80002000 	.word	0x80002000

0800af44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800af5a:	2b28      	cmp	r3, #40	@ 0x28
 800af5c:	d16a      	bne.n	800b034 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	0c1b      	lsrs	r3, r3, #16
 800af66:	b2db      	uxtb	r3, r3
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	0c1b      	lsrs	r3, r3, #16
 800af76:	b29b      	uxth	r3, r3
 800af78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800af7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	b29b      	uxth	r3, r3
 800af86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	b29b      	uxth	r3, r3
 800af94:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800af98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d138      	bne.n	800b014 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800afa2:	897b      	ldrh	r3, [r7, #10]
 800afa4:	09db      	lsrs	r3, r3, #7
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	89bb      	ldrh	r3, [r7, #12]
 800afaa:	4053      	eors	r3, r2
 800afac:	b29b      	uxth	r3, r3
 800afae:	f003 0306 	and.w	r3, r3, #6
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d11c      	bne.n	800aff0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800afb6:	897b      	ldrh	r3, [r7, #10]
 800afb8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d13b      	bne.n	800b044 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2208      	movs	r2, #8
 800afd8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800afe2:	89ba      	ldrh	r2, [r7, #12]
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff fdc4 	bl	800ab76 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800afee:	e029      	b.n	800b044 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800aff0:	893b      	ldrh	r3, [r7, #8]
 800aff2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800aff4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fd9b 	bl	800bb34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b006:	89ba      	ldrh	r2, [r7, #12]
 800b008:	7bfb      	ldrb	r3, [r7, #15]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff fdb2 	bl	800ab76 <HAL_I2C_AddrCallback>
}
 800b012:	e017      	b.n	800b044 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b014:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fd8b 	bl	800bb34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b026:	89ba      	ldrh	r2, [r7, #12]
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7ff fda2 	bl	800ab76 <HAL_I2C_AddrCallback>
}
 800b032:	e007      	b.n	800b044 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2208      	movs	r2, #8
 800b03a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800b044:	bf00      	nop
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d008      	beq.n	800b080 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	e00c      	b.n	800b09a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d007      	beq.n	800b09a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b098:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b29      	cmp	r3, #41	@ 0x29
 800b0a4:	d112      	bne.n	800b0cc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2228      	movs	r2, #40	@ 0x28
 800b0aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2221      	movs	r2, #33	@ 0x21
 800b0b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fd3c 	bl	800bb34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff fd42 	bl	800ab4e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b0ca:	e017      	b.n	800b0fc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0d6:	d111      	bne.n	800b0fc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2228      	movs	r2, #40	@ 0x28
 800b0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2222      	movs	r2, #34	@ 0x22
 800b0e4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b0e6:	2102      	movs	r1, #2
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fd23 	bl	800bb34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff fd33 	bl	800ab62 <HAL_I2C_SlaveRxCpltCallback>
}
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b104:	b590      	push	{r4, r7, lr}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b126:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2220      	movs	r2, #32
 800b12e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b130:	7afb      	ldrb	r3, [r7, #11]
 800b132:	2b21      	cmp	r3, #33	@ 0x21
 800b134:	d002      	beq.n	800b13c <I2C_ITSlaveCplt+0x38>
 800b136:	7afb      	ldrb	r3, [r7, #11]
 800b138:	2b29      	cmp	r3, #41	@ 0x29
 800b13a:	d108      	bne.n	800b14e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b13c:	f248 0101 	movw	r1, #32769	@ 0x8001
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fcf7 	bl	800bb34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2221      	movs	r2, #33	@ 0x21
 800b14a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b14c:	e019      	b.n	800b182 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b14e:	7afb      	ldrb	r3, [r7, #11]
 800b150:	2b22      	cmp	r3, #34	@ 0x22
 800b152:	d002      	beq.n	800b15a <I2C_ITSlaveCplt+0x56>
 800b154:	7afb      	ldrb	r3, [r7, #11]
 800b156:	2b2a      	cmp	r3, #42	@ 0x2a
 800b158:	d108      	bne.n	800b16c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b15a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fce8 	bl	800bb34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2222      	movs	r2, #34	@ 0x22
 800b168:	631a      	str	r2, [r3, #48]	@ 0x30
 800b16a:	e00a      	b.n	800b182 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	2b28      	cmp	r3, #40	@ 0x28
 800b170:	d107      	bne.n	800b182 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b172:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fcdc 	bl	800bb34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b190:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6859      	ldr	r1, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	4b92      	ldr	r3, [pc, #584]	@ (800b3e8 <I2C_ITSlaveCplt+0x2e4>)
 800b19e:	400b      	ands	r3, r1
 800b1a0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fa8f 	bl	800b6c6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d01c      	beq.n	800b1ec <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b1c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d031      	beq.n	800b22e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1d2:	b29c      	uxth	r4, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fde9 	bl	8009db0 <HAL_DMAEx_GetFifoLevel>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	4423      	add	r3, r4
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b1ea:	e020      	b.n	800b22e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01b      	beq.n	800b22e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b204:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00f      	beq.n	800b22e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b216:	b29c      	uxth	r4, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fe fdc7 	bl	8009db0 <HAL_DMAEx_GetFifoLevel>
 800b222:	4603      	mov	r3, r0
 800b224:	b29b      	uxth	r3, r3
 800b226:	4423      	add	r3, r4
 800b228:	b29a      	uxth	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f003 0304 	and.w	r3, r3, #4
 800b234:	2b00      	cmp	r3, #0
 800b236:	d020      	beq.n	800b27a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	f023 0304 	bic.w	r3, r3, #4
 800b23e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00c      	beq.n	800b27a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b264:	3b01      	subs	r3, #1
 800b266:	b29a      	uxth	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b270:	b29b      	uxth	r3, r3
 800b272:	3b01      	subs	r3, #1
 800b274:	b29a      	uxth	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b27e:	b29b      	uxth	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d005      	beq.n	800b290 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b288:	f043 0204 	orr.w	r2, r3, #4
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	f003 0310 	and.w	r3, r3, #16
 800b296:	2b00      	cmp	r3, #0
 800b298:	d049      	beq.n	800b32e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d044      	beq.n	800b32e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d128      	bne.n	800b300 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b28      	cmp	r3, #40	@ 0x28
 800b2b8:	d108      	bne.n	800b2cc <I2C_ITSlaveCplt+0x1c8>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2c0:	d104      	bne.n	800b2cc <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b2c2:	6979      	ldr	r1, [r7, #20]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f893 	bl	800b3f0 <I2C_ITListenCplt>
 800b2ca:	e030      	b.n	800b32e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b29      	cmp	r3, #41	@ 0x29
 800b2d6:	d10e      	bne.n	800b2f6 <I2C_ITSlaveCplt+0x1f2>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b2de:	d00a      	beq.n	800b2f6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2210      	movs	r2, #16
 800b2e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f9ec 	bl	800b6c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7ff feac 	bl	800b04c <I2C_ITSlaveSeqCplt>
 800b2f4:	e01b      	b.n	800b32e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2210      	movs	r2, #16
 800b2fc:	61da      	str	r2, [r3, #28]
 800b2fe:	e016      	b.n	800b32e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2210      	movs	r2, #16
 800b306:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b30c:	f043 0204 	orr.w	r2, r3, #4
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <I2C_ITSlaveCplt+0x21e>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b320:	d105      	bne.n	800b32e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f8b5 	bl	800b498 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b340:	2b00      	cmp	r3, #0
 800b342:	d010      	beq.n	800b366 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f8a4 	bl	800b498 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b28      	cmp	r3, #40	@ 0x28
 800b35a:	d141      	bne.n	800b3e0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b35c:	6979      	ldr	r1, [r7, #20]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f846 	bl	800b3f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b364:	e03c      	b.n	800b3e0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b36e:	d014      	beq.n	800b39a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f7ff fe6b 	bl	800b04c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a1c      	ldr	r2, [pc, #112]	@ (800b3ec <I2C_ITSlaveCplt+0x2e8>)
 800b37a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2220      	movs	r2, #32
 800b380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff fbfd 	bl	800ab92 <HAL_I2C_ListenCpltCallback>
}
 800b398:	e022      	b.n	800b3e0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b22      	cmp	r3, #34	@ 0x22
 800b3a4:	d10e      	bne.n	800b3c4 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff fbd0 	bl	800ab62 <HAL_I2C_SlaveRxCpltCallback>
}
 800b3c2:	e00d      	b.n	800b3e0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff fbb7 	bl	800ab4e <HAL_I2C_SlaveTxCpltCallback>
}
 800b3e0:	bf00      	nop
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd90      	pop	{r4, r7, pc}
 800b3e8:	fe00e800 	.word	0xfe00e800
 800b3ec:	ffff0000 	.word	0xffff0000

0800b3f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a25      	ldr	r2, [pc, #148]	@ (800b494 <I2C_ITListenCplt+0xa4>)
 800b3fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2220      	movs	r2, #32
 800b40a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	f003 0304 	and.w	r3, r3, #4
 800b422:	2b00      	cmp	r3, #0
 800b424:	d022      	beq.n	800b46c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b430:	b2d2      	uxtb	r2, r2
 800b432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b442:	2b00      	cmp	r3, #0
 800b444:	d012      	beq.n	800b46c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b44a:	3b01      	subs	r3, #1
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b456:	b29b      	uxth	r3, r3
 800b458:	3b01      	subs	r3, #1
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b464:	f043 0204 	orr.w	r2, r3, #4
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b46c:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fb5f 	bl	800bb34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2210      	movs	r2, #16
 800b47c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7ff fb83 	bl	800ab92 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b48c:	bf00      	nop
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	ffff0000 	.word	0xffff0000

0800b498 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4a8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a6d      	ldr	r2, [pc, #436]	@ (800b66c <I2C_ITError+0x1d4>)
 800b4b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	431a      	orrs	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
 800b4cc:	2b28      	cmp	r3, #40	@ 0x28
 800b4ce:	d005      	beq.n	800b4dc <I2C_ITError+0x44>
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
 800b4d2:	2b29      	cmp	r3, #41	@ 0x29
 800b4d4:	d002      	beq.n	800b4dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4da:	d10b      	bne.n	800b4f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b4dc:	2103      	movs	r1, #3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fb28 	bl	800bb34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2228      	movs	r2, #40	@ 0x28
 800b4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a60      	ldr	r2, [pc, #384]	@ (800b670 <I2C_ITError+0x1d8>)
 800b4f0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b4f2:	e030      	b.n	800b556 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b4f4:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fb1b 	bl	800bb34 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f8e1 	bl	800b6c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b60      	cmp	r3, #96	@ 0x60
 800b50e:	d01f      	beq.n	800b550 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2220      	movs	r2, #32
 800b514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	f003 0320 	and.w	r3, r3, #32
 800b522:	2b20      	cmp	r3, #32
 800b524:	d114      	bne.n	800b550 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	f003 0310 	and.w	r3, r3, #16
 800b530:	2b10      	cmp	r3, #16
 800b532:	d109      	bne.n	800b548 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2210      	movs	r2, #16
 800b53a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b540:	f043 0204 	orr.w	r2, r3, #4
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2220      	movs	r2, #32
 800b54e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b55a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b560:	2b00      	cmp	r3, #0
 800b562:	d039      	beq.n	800b5d8 <I2C_ITError+0x140>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b11      	cmp	r3, #17
 800b568:	d002      	beq.n	800b570 <I2C_ITError+0xd8>
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b21      	cmp	r3, #33	@ 0x21
 800b56e:	d133      	bne.n	800b5d8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b57a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b57e:	d107      	bne.n	800b590 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b58e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe f941 	bl	800981c <HAL_DMA_GetState>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d017      	beq.n	800b5d0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a4:	4a33      	ldr	r2, [pc, #204]	@ (800b674 <I2C_ITError+0x1dc>)
 800b5a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fd ffa7 	bl	8009508 <HAL_DMA_Abort_IT>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d04d      	beq.n	800b65c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b5ce:	e045      	b.n	800b65c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f851 	bl	800b678 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b5d6:	e041      	b.n	800b65c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d039      	beq.n	800b654 <I2C_ITError+0x1bc>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	2b12      	cmp	r3, #18
 800b5e4:	d002      	beq.n	800b5ec <I2C_ITError+0x154>
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b22      	cmp	r3, #34	@ 0x22
 800b5ea:	d133      	bne.n	800b654 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b5f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5fa:	d107      	bne.n	800b60c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b60a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b610:	4618      	mov	r0, r3
 800b612:	f7fe f903 	bl	800981c <HAL_DMA_GetState>
 800b616:	4603      	mov	r3, r0
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d017      	beq.n	800b64c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b620:	4a14      	ldr	r2, [pc, #80]	@ (800b674 <I2C_ITError+0x1dc>)
 800b622:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b630:	4618      	mov	r0, r3
 800b632:	f7fd ff69 	bl	8009508 <HAL_DMA_Abort_IT>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d011      	beq.n	800b660 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b646:	4610      	mov	r0, r2
 800b648:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b64a:	e009      	b.n	800b660 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f813 	bl	800b678 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b652:	e005      	b.n	800b660 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f80f 	bl	800b678 <I2C_TreatErrorCallback>
  }
}
 800b65a:	e002      	b.n	800b662 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b65c:	bf00      	nop
 800b65e:	e000      	b.n	800b662 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b660:	bf00      	nop
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	ffff0000 	.word	0xffff0000
 800b670:	0800ac03 	.word	0x0800ac03
 800b674:	0800b70f 	.word	0x0800b70f

0800b678 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b686:	b2db      	uxtb	r3, r3
 800b688:	2b60      	cmp	r3, #96	@ 0x60
 800b68a:	d10e      	bne.n	800b6aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2220      	movs	r2, #32
 800b690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff fa89 	bl	800abba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b6a8:	e009      	b.n	800b6be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff fa74 	bl	800aba6 <HAL_I2C_ErrorCallback>
}
 800b6be:	bf00      	nop
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	f003 0302 	and.w	r3, r3, #2
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d103      	bne.n	800b6e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d007      	beq.n	800b702 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	699a      	ldr	r2, [r3, #24]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f042 0201 	orr.w	r2, r2, #1
 800b700:	619a      	str	r2, [r3, #24]
  }
}
 800b702:	bf00      	nop
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b720:	2b00      	cmp	r3, #0
 800b722:	d003      	beq.n	800b72c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b728:	2200      	movs	r2, #0
 800b72a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b738:	2200      	movs	r2, #0
 800b73a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f7ff ff9b 	bl	800b678 <I2C_TreatErrorCallback>
}
 800b742:	bf00      	nop
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b084      	sub	sp, #16
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	603b      	str	r3, [r7, #0]
 800b756:	4613      	mov	r3, r2
 800b758:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b75a:	e03b      	b.n	800b7d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 f8d5 	bl	800b910 <I2C_IsErrorOccurred>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e041      	b.n	800b7f4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b776:	d02d      	beq.n	800b7d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b778:	f7fd fab4 	bl	8008ce4 <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d302      	bcc.n	800b78e <I2C_WaitOnFlagUntilTimeout+0x44>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d122      	bne.n	800b7d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	699a      	ldr	r2, [r3, #24]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4013      	ands	r3, r2
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	bf0c      	ite	eq
 800b79e:	2301      	moveq	r3, #1
 800b7a0:	2300      	movne	r3, #0
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d113      	bne.n	800b7d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7b0:	f043 0220 	orr.w	r2, r3, #32
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e00f      	b.n	800b7f4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	699a      	ldr	r2, [r3, #24]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	4013      	ands	r3, r2
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	bf0c      	ite	eq
 800b7e4:	2301      	moveq	r3, #1
 800b7e6:	2300      	movne	r3, #0
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d0b4      	beq.n	800b75c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b808:	e033      	b.n	800b872 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	68b9      	ldr	r1, [r7, #8]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 f87e 	bl	800b910 <I2C_IsErrorOccurred>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e031      	b.n	800b882 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b824:	d025      	beq.n	800b872 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b826:	f7fd fa5d 	bl	8008ce4 <HAL_GetTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	429a      	cmp	r2, r3
 800b834:	d302      	bcc.n	800b83c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d11a      	bne.n	800b872 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	f003 0302 	and.w	r3, r3, #2
 800b846:	2b02      	cmp	r3, #2
 800b848:	d013      	beq.n	800b872 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b84e:	f043 0220 	orr.w	r2, r3, #32
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2220      	movs	r2, #32
 800b85a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e007      	b.n	800b882 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	f003 0302 	and.w	r3, r3, #2
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d1c4      	bne.n	800b80a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	60f8      	str	r0, [r7, #12]
 800b892:	60b9      	str	r1, [r7, #8]
 800b894:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b896:	e02f      	b.n	800b8f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	68b9      	ldr	r1, [r7, #8]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 f837 	bl	800b910 <I2C_IsErrorOccurred>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e02d      	b.n	800b908 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ac:	f7fd fa1a 	bl	8008ce4 <HAL_GetTick>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	1ad3      	subs	r3, r2, r3
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d302      	bcc.n	800b8c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d11a      	bne.n	800b8f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	f003 0320 	and.w	r3, r3, #32
 800b8cc:	2b20      	cmp	r3, #32
 800b8ce:	d013      	beq.n	800b8f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8d4:	f043 0220 	orr.w	r2, r3, #32
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2220      	movs	r2, #32
 800b8e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e007      	b.n	800b908 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	f003 0320 	and.w	r3, r3, #32
 800b902:	2b20      	cmp	r3, #32
 800b904:	d1c8      	bne.n	800b898 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08a      	sub	sp, #40	@ 0x28
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	f003 0310 	and.w	r3, r3, #16
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d068      	beq.n	800ba0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2210      	movs	r2, #16
 800b942:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b944:	e049      	b.n	800b9da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94c:	d045      	beq.n	800b9da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b94e:	f7fd f9c9 	bl	8008ce4 <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d302      	bcc.n	800b964 <I2C_IsErrorOccurred+0x54>
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d13a      	bne.n	800b9da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b96e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b976:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b986:	d121      	bne.n	800b9cc <I2C_IsErrorOccurred+0xbc>
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b98e:	d01d      	beq.n	800b9cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b990:	7cfb      	ldrb	r3, [r7, #19]
 800b992:	2b20      	cmp	r3, #32
 800b994:	d01a      	beq.n	800b9cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685a      	ldr	r2, [r3, #4]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b9a6:	f7fd f99d 	bl	8008ce4 <HAL_GetTick>
 800b9aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9ac:	e00e      	b.n	800b9cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b9ae:	f7fd f999 	bl	8008ce4 <HAL_GetTick>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	2b19      	cmp	r3, #25
 800b9ba:	d907      	bls.n	800b9cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b9bc:	6a3b      	ldr	r3, [r7, #32]
 800b9be:	f043 0320 	orr.w	r3, r3, #32
 800b9c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b9ca:	e006      	b.n	800b9da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	f003 0320 	and.w	r3, r3, #32
 800b9d6:	2b20      	cmp	r3, #32
 800b9d8:	d1e9      	bne.n	800b9ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	f003 0320 	and.w	r3, r3, #32
 800b9e4:	2b20      	cmp	r3, #32
 800b9e6:	d003      	beq.n	800b9f0 <I2C_IsErrorOccurred+0xe0>
 800b9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d0aa      	beq.n	800b946 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d103      	bne.n	800ba00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2220      	movs	r2, #32
 800b9fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	f043 0304 	orr.w	r3, r3, #4
 800ba06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00b      	beq.n	800ba38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	f043 0308 	orr.w	r3, r3, #8
 800ba48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ba52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00b      	beq.n	800ba7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	f043 0302 	orr.w	r3, r3, #2
 800ba6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ba7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d01c      	beq.n	800babe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f7ff fe1e 	bl	800b6c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	6859      	ldr	r1, [r3, #4]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	4b0d      	ldr	r3, [pc, #52]	@ (800bacc <I2C_IsErrorOccurred+0x1bc>)
 800ba96:	400b      	ands	r3, r1
 800ba98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba9e:	6a3b      	ldr	r3, [r7, #32]
 800baa0:	431a      	orrs	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800babe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3728      	adds	r7, #40	@ 0x28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	fe00e800 	.word	0xfe00e800

0800bad0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	607b      	str	r3, [r7, #4]
 800bada:	460b      	mov	r3, r1
 800badc:	817b      	strh	r3, [r7, #10]
 800bade:	4613      	mov	r3, r2
 800bae0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bae2:	897b      	ldrh	r3, [r7, #10]
 800bae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bae8:	7a7b      	ldrb	r3, [r7, #9]
 800baea:	041b      	lsls	r3, r3, #16
 800baec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800baf0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bafe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	0d5b      	lsrs	r3, r3, #21
 800bb0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bb0e:	4b08      	ldr	r3, [pc, #32]	@ (800bb30 <I2C_TransferConfig+0x60>)
 800bb10:	430b      	orrs	r3, r1
 800bb12:	43db      	mvns	r3, r3
 800bb14:	ea02 0103 	and.w	r1, r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bb22:	bf00      	nop
 800bb24:	371c      	adds	r7, #28
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	03ff63ff 	.word	0x03ff63ff

0800bb34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bb44:	887b      	ldrh	r3, [r7, #2]
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00f      	beq.n	800bb6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800bb54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bb62:	2b28      	cmp	r3, #40	@ 0x28
 800bb64:	d003      	beq.n	800bb6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800bb6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bb6e:	887b      	ldrh	r3, [r7, #2]
 800bb70:	f003 0302 	and.w	r3, r3, #2
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00f      	beq.n	800bb98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800bb7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bb8c:	2b28      	cmp	r3, #40	@ 0x28
 800bb8e:	d003      	beq.n	800bb98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800bb96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bb98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da03      	bge.n	800bba8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800bba6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bba8:	887b      	ldrh	r3, [r7, #2]
 800bbaa:	2b10      	cmp	r3, #16
 800bbac:	d103      	bne.n	800bbb6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800bbb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bbb6:	887b      	ldrh	r3, [r7, #2]
 800bbb8:	2b20      	cmp	r3, #32
 800bbba:	d103      	bne.n	800bbc4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f043 0320 	orr.w	r3, r3, #32
 800bbc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bbc4:	887b      	ldrh	r3, [r7, #2]
 800bbc6:	2b40      	cmp	r3, #64	@ 0x40
 800bbc8:	d103      	bne.n	800bbd2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbd0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6819      	ldr	r1, [r3, #0]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	43da      	mvns	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	400a      	ands	r2, r1
 800bbe2:	601a      	str	r2, [r3, #0]
}
 800bbe4:	bf00      	nop
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b20      	cmp	r3, #32
 800bc04:	d138      	bne.n	800bc78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d101      	bne.n	800bc14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bc10:	2302      	movs	r3, #2
 800bc12:	e032      	b.n	800bc7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2224      	movs	r2, #36	@ 0x24
 800bc20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f022 0201 	bic.w	r2, r2, #1
 800bc32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bc42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6819      	ldr	r1, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	430a      	orrs	r2, r1
 800bc52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f042 0201 	orr.w	r2, r2, #1
 800bc62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2220      	movs	r2, #32
 800bc68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	e000      	b.n	800bc7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bc78:	2302      	movs	r3, #2
  }
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b085      	sub	sp, #20
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b20      	cmp	r3, #32
 800bc9a:	d139      	bne.n	800bd10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d101      	bne.n	800bcaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e033      	b.n	800bd12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2224      	movs	r2, #36	@ 0x24
 800bcb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0201 	bic.w	r2, r2, #1
 800bcc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bcd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	021b      	lsls	r3, r3, #8
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f042 0201 	orr.w	r2, r2, #1
 800bcfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2220      	movs	r2, #32
 800bd00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	e000      	b.n	800bd12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bd10:	2302      	movs	r3, #2
  }
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
	...

0800bd20 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800bd2c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	73fb      	strb	r3, [r7, #15]
 800bd3c:	e007      	b.n	800bd4e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800bd3e:	4b07      	ldr	r3, [pc, #28]	@ (800bd5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f023 0204 	bic.w	r2, r3, #4
 800bd46:	4905      	ldr	r1, [pc, #20]	@ (800bd5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	40030400 	.word	0x40030400

0800bd60 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800bd60:	b480      	push	{r7}
 800bd62:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800bd64:	4b05      	ldr	r3, [pc, #20]	@ (800bd7c <HAL_ICACHE_Enable+0x1c>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a04      	ldr	r2, [pc, #16]	@ (800bd7c <HAL_ICACHE_Enable+0x1c>)
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	40030400 	.word	0x40030400

0800bd80 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800bd88:	4b39      	ldr	r3, [pc, #228]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bd8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bd90:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d10b      	bne.n	800bdb2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bda0:	d905      	bls.n	800bdae <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800bda2:	4b33      	ldr	r3, [pc, #204]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	4a32      	ldr	r2, [pc, #200]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bda8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bdac:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	e057      	b.n	800be62 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb8:	d90a      	bls.n	800bdd0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800bdba:	4b2d      	ldr	r3, [pc, #180]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	4a2a      	ldr	r2, [pc, #168]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bdc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bdcc:	60d3      	str	r3, [r2, #12]
 800bdce:	e007      	b.n	800bde0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800bdd0:	4b27      	ldr	r3, [pc, #156]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800bdd8:	4925      	ldr	r1, [pc, #148]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bde0:	4b24      	ldr	r3, [pc, #144]	@ (800be74 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a24      	ldr	r2, [pc, #144]	@ (800be78 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bde6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdea:	099b      	lsrs	r3, r3, #6
 800bdec:	2232      	movs	r2, #50	@ 0x32
 800bdee:	fb02 f303 	mul.w	r3, r2, r3
 800bdf2:	4a21      	ldr	r2, [pc, #132]	@ (800be78 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bdf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf8:	099b      	lsrs	r3, r3, #6
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800bdfe:	e002      	b.n	800be06 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	3b01      	subs	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800be06:	4b1a      	ldr	r3, [pc, #104]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d102      	bne.n	800be18 <HAL_PWREx_ControlVoltageScaling+0x98>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1f3      	bne.n	800be00 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d01b      	beq.n	800be56 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800be1e:	4b15      	ldr	r3, [pc, #84]	@ (800be74 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a15      	ldr	r2, [pc, #84]	@ (800be78 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800be24:	fba2 2303 	umull	r2, r3, r2, r3
 800be28:	099b      	lsrs	r3, r3, #6
 800be2a:	2232      	movs	r2, #50	@ 0x32
 800be2c:	fb02 f303 	mul.w	r3, r2, r3
 800be30:	4a11      	ldr	r2, [pc, #68]	@ (800be78 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800be32:	fba2 2303 	umull	r2, r3, r2, r3
 800be36:	099b      	lsrs	r3, r3, #6
 800be38:	3301      	adds	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800be3c:	e002      	b.n	800be44 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3b01      	subs	r3, #1
 800be42:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800be44:	4b0a      	ldr	r3, [pc, #40]	@ (800be70 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800be46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d102      	bne.n	800be56 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1f3      	bne.n	800be3e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800be5c:	2303      	movs	r3, #3
 800be5e:	e000      	b.n	800be62 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3714      	adds	r7, #20
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	46020800 	.word	0x46020800
 800be74:	20000000 	.word	0x20000000
 800be78:	10624dd3 	.word	0x10624dd3

0800be7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800be80:	4b04      	ldr	r3, [pc, #16]	@ (800be94 <HAL_PWREx_GetVoltageRange+0x18>)
 800be82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800be88:	4618      	mov	r0, r3
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	46020800 	.word	0x46020800

0800be98 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800be98:	b480      	push	{r7}
 800be9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800be9c:	4b05      	ldr	r3, [pc, #20]	@ (800beb4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	4a04      	ldr	r2, [pc, #16]	@ (800beb4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bea6:	6113      	str	r3, [r2, #16]
}
 800bea8:	bf00      	nop
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	46020800 	.word	0x46020800

0800beb8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800beb8:	b480      	push	{r7}
 800beba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800bebc:	4b05      	ldr	r3, [pc, #20]	@ (800bed4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	4a04      	ldr	r2, [pc, #16]	@ (800bed4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800bec2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bec6:	6113      	str	r3, [r2, #16]
}
 800bec8:	bf00      	nop
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	46020800 	.word	0x46020800

0800bed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08e      	sub	sp, #56	@ 0x38
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800bee0:	2300      	movs	r3, #0
 800bee2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d102      	bne.n	800bef2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	f000 bec8 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bef2:	4b99      	ldr	r3, [pc, #612]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bef4:	69db      	ldr	r3, [r3, #28]
 800bef6:	f003 030c 	and.w	r3, r3, #12
 800befa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800befc:	4b96      	ldr	r3, [pc, #600]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800befe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf00:	f003 0303 	and.w	r3, r3, #3
 800bf04:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 0310 	and.w	r3, r3, #16
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 816c 	beq.w	800c1ec <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d007      	beq.n	800bf2a <HAL_RCC_OscConfig+0x52>
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1c:	2b0c      	cmp	r3, #12
 800bf1e:	f040 80de 	bne.w	800c0de <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bf22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	f040 80da 	bne.w	800c0de <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d102      	bne.n	800bf38 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	f000 bea5 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf3c:	4b86      	ldr	r3, [pc, #536]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d004      	beq.n	800bf52 <HAL_RCC_OscConfig+0x7a>
 800bf48:	4b83      	ldr	r3, [pc, #524]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bf50:	e005      	b.n	800bf5e <HAL_RCC_OscConfig+0x86>
 800bf52:	4b81      	ldr	r3, [pc, #516]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bf54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bf58:	041b      	lsls	r3, r3, #16
 800bf5a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d255      	bcs.n	800c00e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10a      	bne.n	800bf7e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 f9d9 	bl	800d324 <RCC_SetFlashLatencyFromMSIRange>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d002      	beq.n	800bf7e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f000 be82 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bf7e:	4b76      	ldr	r3, [pc, #472]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	4a75      	ldr	r2, [pc, #468]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bf84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bf88:	6093      	str	r3, [r2, #8]
 800bf8a:	4b73      	ldr	r3, [pc, #460]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf96:	4970      	ldr	r1, [pc, #448]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bfa4:	d309      	bcc.n	800bfba <HAL_RCC_OscConfig+0xe2>
 800bfa6:	4b6c      	ldr	r3, [pc, #432]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	f023 021f 	bic.w	r2, r3, #31
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	4969      	ldr	r1, [pc, #420]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	60cb      	str	r3, [r1, #12]
 800bfb8:	e07e      	b.n	800c0b8 <HAL_RCC_OscConfig+0x1e0>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	da0a      	bge.n	800bfd8 <HAL_RCC_OscConfig+0x100>
 800bfc2:	4b65      	ldr	r3, [pc, #404]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	015b      	lsls	r3, r3, #5
 800bfd0:	4961      	ldr	r1, [pc, #388]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	60cb      	str	r3, [r1, #12]
 800bfd6:	e06f      	b.n	800c0b8 <HAL_RCC_OscConfig+0x1e0>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfe0:	d30a      	bcc.n	800bff8 <HAL_RCC_OscConfig+0x120>
 800bfe2:	4b5d      	ldr	r3, [pc, #372]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a1b      	ldr	r3, [r3, #32]
 800bfee:	029b      	lsls	r3, r3, #10
 800bff0:	4959      	ldr	r1, [pc, #356]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60cb      	str	r3, [r1, #12]
 800bff6:	e05f      	b.n	800c0b8 <HAL_RCC_OscConfig+0x1e0>
 800bff8:	4b57      	ldr	r3, [pc, #348]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a1b      	ldr	r3, [r3, #32]
 800c004:	03db      	lsls	r3, r3, #15
 800c006:	4954      	ldr	r1, [pc, #336]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c008:	4313      	orrs	r3, r2
 800c00a:	60cb      	str	r3, [r1, #12]
 800c00c:	e054      	b.n	800c0b8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c00e:	4b52      	ldr	r3, [pc, #328]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	4a51      	ldr	r2, [pc, #324]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c014:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c018:	6093      	str	r3, [r2, #8]
 800c01a:	4b4f      	ldr	r3, [pc, #316]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c026:	494c      	ldr	r1, [pc, #304]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c028:	4313      	orrs	r3, r2
 800c02a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c030:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c034:	d309      	bcc.n	800c04a <HAL_RCC_OscConfig+0x172>
 800c036:	4b48      	ldr	r3, [pc, #288]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	f023 021f 	bic.w	r2, r3, #31
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a1b      	ldr	r3, [r3, #32]
 800c042:	4945      	ldr	r1, [pc, #276]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c044:	4313      	orrs	r3, r2
 800c046:	60cb      	str	r3, [r1, #12]
 800c048:	e028      	b.n	800c09c <HAL_RCC_OscConfig+0x1c4>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c04e:	2b00      	cmp	r3, #0
 800c050:	da0a      	bge.n	800c068 <HAL_RCC_OscConfig+0x190>
 800c052:	4b41      	ldr	r3, [pc, #260]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	015b      	lsls	r3, r3, #5
 800c060:	493d      	ldr	r1, [pc, #244]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c062:	4313      	orrs	r3, r2
 800c064:	60cb      	str	r3, [r1, #12]
 800c066:	e019      	b.n	800c09c <HAL_RCC_OscConfig+0x1c4>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c06c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c070:	d30a      	bcc.n	800c088 <HAL_RCC_OscConfig+0x1b0>
 800c072:	4b39      	ldr	r3, [pc, #228]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	029b      	lsls	r3, r3, #10
 800c080:	4935      	ldr	r1, [pc, #212]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c082:	4313      	orrs	r3, r2
 800c084:	60cb      	str	r3, [r1, #12]
 800c086:	e009      	b.n	800c09c <HAL_RCC_OscConfig+0x1c4>
 800c088:	4b33      	ldr	r3, [pc, #204]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a1b      	ldr	r3, [r3, #32]
 800c094:	03db      	lsls	r3, r3, #15
 800c096:	4930      	ldr	r1, [pc, #192]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c098:	4313      	orrs	r3, r2
 800c09a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10a      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f001 f93c 	bl	800d324 <RCC_SetFlashLatencyFromMSIRange>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d002      	beq.n	800c0b8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	f000 bde5 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c0b8:	f001 f8de 	bl	800d278 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c0bc:	4b27      	ldr	r3, [pc, #156]	@ (800c15c <HAL_RCC_OscConfig+0x284>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fc fd85 	bl	8008bd0 <HAL_InitTick>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800c0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f000 808a 	beq.w	800c1ea <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800c0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0da:	f000 bdd2 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	69db      	ldr	r3, [r3, #28]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d066      	beq.n	800c1b4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c0e6:	4b1c      	ldr	r3, [pc, #112]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a1b      	ldr	r2, [pc, #108]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c0ec:	f043 0301 	orr.w	r3, r3, #1
 800c0f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c0f2:	f7fc fdf7 	bl	8008ce4 <HAL_GetTick>
 800c0f6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c0f8:	e009      	b.n	800c10e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c0fa:	f7fc fdf3 	bl	8008ce4 <HAL_GetTick>
 800c0fe:	4602      	mov	r2, r0
 800c100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	2b02      	cmp	r3, #2
 800c106:	d902      	bls.n	800c10e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	f000 bdba 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c10e:	4b12      	ldr	r3, [pc, #72]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 0304 	and.w	r3, r3, #4
 800c116:	2b00      	cmp	r3, #0
 800c118:	d0ef      	beq.n	800c0fa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c11a:	4b0f      	ldr	r3, [pc, #60]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	4a0e      	ldr	r2, [pc, #56]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c120:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c124:	6093      	str	r3, [r2, #8]
 800c126:	4b0c      	ldr	r3, [pc, #48]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c132:	4909      	ldr	r1, [pc, #36]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c134:	4313      	orrs	r3, r2
 800c136:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c140:	d30e      	bcc.n	800c160 <HAL_RCC_OscConfig+0x288>
 800c142:	4b05      	ldr	r3, [pc, #20]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	f023 021f 	bic.w	r2, r3, #31
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	4902      	ldr	r1, [pc, #8]	@ (800c158 <HAL_RCC_OscConfig+0x280>)
 800c150:	4313      	orrs	r3, r2
 800c152:	60cb      	str	r3, [r1, #12]
 800c154:	e04a      	b.n	800c1ec <HAL_RCC_OscConfig+0x314>
 800c156:	bf00      	nop
 800c158:	46020c00 	.word	0x46020c00
 800c15c:	20000168 	.word	0x20000168
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c164:	2b00      	cmp	r3, #0
 800c166:	da0a      	bge.n	800c17e <HAL_RCC_OscConfig+0x2a6>
 800c168:	4b98      	ldr	r3, [pc, #608]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6a1b      	ldr	r3, [r3, #32]
 800c174:	015b      	lsls	r3, r3, #5
 800c176:	4995      	ldr	r1, [pc, #596]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c178:	4313      	orrs	r3, r2
 800c17a:	60cb      	str	r3, [r1, #12]
 800c17c:	e036      	b.n	800c1ec <HAL_RCC_OscConfig+0x314>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c186:	d30a      	bcc.n	800c19e <HAL_RCC_OscConfig+0x2c6>
 800c188:	4b90      	ldr	r3, [pc, #576]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	029b      	lsls	r3, r3, #10
 800c196:	498d      	ldr	r1, [pc, #564]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c198:	4313      	orrs	r3, r2
 800c19a:	60cb      	str	r3, [r1, #12]
 800c19c:	e026      	b.n	800c1ec <HAL_RCC_OscConfig+0x314>
 800c19e:	4b8b      	ldr	r3, [pc, #556]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	03db      	lsls	r3, r3, #15
 800c1ac:	4987      	ldr	r1, [pc, #540]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	60cb      	str	r3, [r1, #12]
 800c1b2:	e01b      	b.n	800c1ec <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c1b4:	4b85      	ldr	r3, [pc, #532]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a84      	ldr	r2, [pc, #528]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c1ba:	f023 0301 	bic.w	r3, r3, #1
 800c1be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c1c0:	f7fc fd90 	bl	8008ce4 <HAL_GetTick>
 800c1c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c1c6:	e009      	b.n	800c1dc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c1c8:	f7fc fd8c 	bl	8008ce4 <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d902      	bls.n	800c1dc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	f000 bd53 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c1dc:	4b7b      	ldr	r3, [pc, #492]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 0304 	and.w	r3, r3, #4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1ef      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x2f0>
 800c1e8:	e000      	b.n	800c1ec <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c1ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 808b 	beq.w	800c310 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fc:	2b08      	cmp	r3, #8
 800c1fe:	d005      	beq.n	800c20c <HAL_RCC_OscConfig+0x334>
 800c200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c202:	2b0c      	cmp	r3, #12
 800c204:	d109      	bne.n	800c21a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d106      	bne.n	800c21a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d17d      	bne.n	800c310 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	f000 bd34 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c222:	d106      	bne.n	800c232 <HAL_RCC_OscConfig+0x35a>
 800c224:	4b69      	ldr	r3, [pc, #420]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a68      	ldr	r2, [pc, #416]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c22a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c22e:	6013      	str	r3, [r2, #0]
 800c230:	e041      	b.n	800c2b6 <HAL_RCC_OscConfig+0x3de>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c23a:	d112      	bne.n	800c262 <HAL_RCC_OscConfig+0x38a>
 800c23c:	4b63      	ldr	r3, [pc, #396]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a62      	ldr	r2, [pc, #392]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	4b60      	ldr	r3, [pc, #384]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a5f      	ldr	r2, [pc, #380]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c24e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	4b5d      	ldr	r3, [pc, #372]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a5c      	ldr	r2, [pc, #368]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c25a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	e029      	b.n	800c2b6 <HAL_RCC_OscConfig+0x3de>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800c26a:	d112      	bne.n	800c292 <HAL_RCC_OscConfig+0x3ba>
 800c26c:	4b57      	ldr	r3, [pc, #348]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a56      	ldr	r2, [pc, #344]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c272:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	4b54      	ldr	r3, [pc, #336]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a53      	ldr	r2, [pc, #332]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c282:	6013      	str	r3, [r2, #0]
 800c284:	4b51      	ldr	r3, [pc, #324]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a50      	ldr	r2, [pc, #320]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c28a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c28e:	6013      	str	r3, [r2, #0]
 800c290:	e011      	b.n	800c2b6 <HAL_RCC_OscConfig+0x3de>
 800c292:	4b4e      	ldr	r3, [pc, #312]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a4d      	ldr	r2, [pc, #308]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c29c:	6013      	str	r3, [r2, #0]
 800c29e:	4b4b      	ldr	r3, [pc, #300]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a4a      	ldr	r2, [pc, #296]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c2a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c2a8:	6013      	str	r3, [r2, #0]
 800c2aa:	4b48      	ldr	r3, [pc, #288]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a47      	ldr	r2, [pc, #284]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c2b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c2b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d014      	beq.n	800c2e8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800c2be:	f7fc fd11 	bl	8008ce4 <HAL_GetTick>
 800c2c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c2c4:	e009      	b.n	800c2da <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2c6:	f7fc fd0d 	bl	8008ce4 <HAL_GetTick>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	2b64      	cmp	r3, #100	@ 0x64
 800c2d2:	d902      	bls.n	800c2da <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	f000 bcd4 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c2da:	4b3c      	ldr	r3, [pc, #240]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0ef      	beq.n	800c2c6 <HAL_RCC_OscConfig+0x3ee>
 800c2e6:	e013      	b.n	800c310 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800c2e8:	f7fc fcfc 	bl	8008ce4 <HAL_GetTick>
 800c2ec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c2ee:	e009      	b.n	800c304 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2f0:	f7fc fcf8 	bl	8008ce4 <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b64      	cmp	r3, #100	@ 0x64
 800c2fc:	d902      	bls.n	800c304 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	f000 bcbf 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c304:	4b31      	ldr	r3, [pc, #196]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1ef      	bne.n	800c2f0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 0302 	and.w	r3, r3, #2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d05f      	beq.n	800c3dc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c31e:	2b04      	cmp	r3, #4
 800c320:	d005      	beq.n	800c32e <HAL_RCC_OscConfig+0x456>
 800c322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c324:	2b0c      	cmp	r3, #12
 800c326:	d114      	bne.n	800c352 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d111      	bne.n	800c352 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d102      	bne.n	800c33c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	f000 bca3 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c33c:	4b23      	ldr	r3, [pc, #140]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	041b      	lsls	r3, r3, #16
 800c34a:	4920      	ldr	r1, [pc, #128]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c350:	e044      	b.n	800c3dc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d024      	beq.n	800c3a4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800c35a:	4b1c      	ldr	r3, [pc, #112]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a1b      	ldr	r2, [pc, #108]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c364:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c366:	f7fc fcbd 	bl	8008ce4 <HAL_GetTick>
 800c36a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c36c:	e009      	b.n	800c382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c36e:	f7fc fcb9 	bl	8008ce4 <HAL_GetTick>
 800c372:	4602      	mov	r2, r0
 800c374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d902      	bls.n	800c382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	f000 bc80 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c382:	4b12      	ldr	r3, [pc, #72]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d0ef      	beq.n	800c36e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c38e:	4b0f      	ldr	r3, [pc, #60]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	041b      	lsls	r3, r3, #16
 800c39c:	490b      	ldr	r1, [pc, #44]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	610b      	str	r3, [r1, #16]
 800c3a2:	e01b      	b.n	800c3dc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800c3a4:	4b09      	ldr	r3, [pc, #36]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a08      	ldr	r2, [pc, #32]	@ (800c3cc <HAL_RCC_OscConfig+0x4f4>)
 800c3aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3ae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c3b0:	f7fc fc98 	bl	8008ce4 <HAL_GetTick>
 800c3b4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c3b6:	e00b      	b.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3b8:	f7fc fc94 	bl	8008ce4 <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d904      	bls.n	800c3d0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800c3c6:	2303      	movs	r3, #3
 800c3c8:	f000 bc5b 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
 800c3cc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c3d0:	4baf      	ldr	r3, [pc, #700]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1ed      	bne.n	800c3b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 0308 	and.w	r3, r3, #8
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 80c8 	beq.w	800c57a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c3f0:	4ba7      	ldr	r3, [pc, #668]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c3f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c3f6:	f003 0304 	and.w	r3, r3, #4
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d111      	bne.n	800c422 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3fe:	4ba4      	ldr	r3, [pc, #656]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c404:	4aa2      	ldr	r2, [pc, #648]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c406:	f043 0304 	orr.w	r3, r3, #4
 800c40a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c40e:	4ba0      	ldr	r3, [pc, #640]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c410:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	617b      	str	r3, [r7, #20]
 800c41a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800c41c:	2301      	movs	r3, #1
 800c41e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c422:	4b9c      	ldr	r3, [pc, #624]	@ (800c694 <HAL_RCC_OscConfig+0x7bc>)
 800c424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c426:	f003 0301 	and.w	r3, r3, #1
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d119      	bne.n	800c462 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c42e:	4b99      	ldr	r3, [pc, #612]	@ (800c694 <HAL_RCC_OscConfig+0x7bc>)
 800c430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c432:	4a98      	ldr	r2, [pc, #608]	@ (800c694 <HAL_RCC_OscConfig+0x7bc>)
 800c434:	f043 0301 	orr.w	r3, r3, #1
 800c438:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c43a:	f7fc fc53 	bl	8008ce4 <HAL_GetTick>
 800c43e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c440:	e009      	b.n	800c456 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c442:	f7fc fc4f 	bl	8008ce4 <HAL_GetTick>
 800c446:	4602      	mov	r2, r0
 800c448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d902      	bls.n	800c456 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	f000 bc16 	b.w	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c456:	4b8f      	ldr	r3, [pc, #572]	@ (800c694 <HAL_RCC_OscConfig+0x7bc>)
 800c458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0ef      	beq.n	800c442 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d05f      	beq.n	800c52a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800c46a:	4b89      	ldr	r3, [pc, #548]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c46c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c470:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	699a      	ldr	r2, [r3, #24]
 800c476:	6a3b      	ldr	r3, [r7, #32]
 800c478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d037      	beq.n	800c4f0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c486:	2b00      	cmp	r3, #0
 800c488:	d006      	beq.n	800c498 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e3f4      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d01b      	beq.n	800c4da <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c4a2:	4b7b      	ldr	r3, [pc, #492]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c4a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4a8:	4a79      	ldr	r2, [pc, #484]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c4aa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800c4ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800c4b2:	f7fc fc17 	bl	8008ce4 <HAL_GetTick>
 800c4b6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c4b8:	e008      	b.n	800c4cc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4ba:	f7fc fc13 	bl	8008ce4 <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	2b05      	cmp	r3, #5
 800c4c6:	d901      	bls.n	800c4cc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e3da      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c4cc:	4b70      	ldr	r3, [pc, #448]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c4ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1ef      	bne.n	800c4ba <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c4da:	4b6d      	ldr	r3, [pc, #436]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c4dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	4969      	ldr	r1, [pc, #420]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c4f0:	4b67      	ldr	r3, [pc, #412]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c4f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4f6:	4a66      	ldr	r2, [pc, #408]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c4f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800c500:	f7fc fbf0 	bl	8008ce4 <HAL_GetTick>
 800c504:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c506:	e008      	b.n	800c51a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c508:	f7fc fbec 	bl	8008ce4 <HAL_GetTick>
 800c50c:	4602      	mov	r2, r0
 800c50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	2b05      	cmp	r3, #5
 800c514:	d901      	bls.n	800c51a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	e3b3      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c51a:	4b5d      	ldr	r3, [pc, #372]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c51c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0ef      	beq.n	800c508 <HAL_RCC_OscConfig+0x630>
 800c528:	e01b      	b.n	800c562 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c52a:	4b59      	ldr	r3, [pc, #356]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c52c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c530:	4a57      	ldr	r2, [pc, #348]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c532:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800c536:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800c53a:	f7fc fbd3 	bl	8008ce4 <HAL_GetTick>
 800c53e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c540:	e008      	b.n	800c554 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c542:	f7fc fbcf 	bl	8008ce4 <HAL_GetTick>
 800c546:	4602      	mov	r2, r0
 800c548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	2b05      	cmp	r3, #5
 800c54e:	d901      	bls.n	800c554 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c550:	2303      	movs	r3, #3
 800c552:	e396      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c554:	4b4e      	ldr	r3, [pc, #312]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c55a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1ef      	bne.n	800c542 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c562:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c566:	2b01      	cmp	r3, #1
 800c568:	d107      	bne.n	800c57a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c56a:	4b49      	ldr	r3, [pc, #292]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c56c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c570:	4a47      	ldr	r2, [pc, #284]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c572:	f023 0304 	bic.w	r3, r3, #4
 800c576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0304 	and.w	r3, r3, #4
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 8111 	beq.w	800c7aa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c588:	2300      	movs	r3, #0
 800c58a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c58e:	4b40      	ldr	r3, [pc, #256]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d111      	bne.n	800c5c0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c59c:	4b3c      	ldr	r3, [pc, #240]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c59e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c5a2:	4a3b      	ldr	r2, [pc, #236]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c5a4:	f043 0304 	orr.w	r3, r3, #4
 800c5a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c5ac:	4b38      	ldr	r3, [pc, #224]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c5ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c5b2:	f003 0304 	and.w	r3, r3, #4
 800c5b6:	613b      	str	r3, [r7, #16]
 800c5b8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c5c0:	4b34      	ldr	r3, [pc, #208]	@ (800c694 <HAL_RCC_OscConfig+0x7bc>)
 800c5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d118      	bne.n	800c5fe <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c5cc:	4b31      	ldr	r3, [pc, #196]	@ (800c694 <HAL_RCC_OscConfig+0x7bc>)
 800c5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d0:	4a30      	ldr	r2, [pc, #192]	@ (800c694 <HAL_RCC_OscConfig+0x7bc>)
 800c5d2:	f043 0301 	orr.w	r3, r3, #1
 800c5d6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5d8:	f7fc fb84 	bl	8008ce4 <HAL_GetTick>
 800c5dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c5de:	e008      	b.n	800c5f2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5e0:	f7fc fb80 	bl	8008ce4 <HAL_GetTick>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d901      	bls.n	800c5f2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	e347      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c5f2:	4b28      	ldr	r3, [pc, #160]	@ (800c694 <HAL_RCC_OscConfig+0x7bc>)
 800c5f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d0f0      	beq.n	800c5e0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d01f      	beq.n	800c64a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	f003 0304 	and.w	r3, r3, #4
 800c612:	2b00      	cmp	r3, #0
 800c614:	d010      	beq.n	800c638 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c616:	4b1e      	ldr	r3, [pc, #120]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c61c:	4a1c      	ldr	r2, [pc, #112]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c61e:	f043 0304 	orr.w	r3, r3, #4
 800c622:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c626:	4b1a      	ldr	r3, [pc, #104]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c62c:	4a18      	ldr	r2, [pc, #96]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c62e:	f043 0301 	orr.w	r3, r3, #1
 800c632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c636:	e018      	b.n	800c66a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c638:	4b15      	ldr	r3, [pc, #84]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c63a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c63e:	4a14      	ldr	r2, [pc, #80]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c640:	f043 0301 	orr.w	r3, r3, #1
 800c644:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c648:	e00f      	b.n	800c66a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c64a:	4b11      	ldr	r3, [pc, #68]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c64c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c650:	4a0f      	ldr	r2, [pc, #60]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c652:	f023 0301 	bic.w	r3, r3, #1
 800c656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c65a:	4b0d      	ldr	r3, [pc, #52]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c65c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c660:	4a0b      	ldr	r2, [pc, #44]	@ (800c690 <HAL_RCC_OscConfig+0x7b8>)
 800c662:	f023 0304 	bic.w	r3, r3, #4
 800c666:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d057      	beq.n	800c722 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c672:	f7fc fb37 	bl	8008ce4 <HAL_GetTick>
 800c676:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c678:	e00e      	b.n	800c698 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c67a:	f7fc fb33 	bl	8008ce4 <HAL_GetTick>
 800c67e:	4602      	mov	r2, r0
 800c680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c688:	4293      	cmp	r3, r2
 800c68a:	d905      	bls.n	800c698 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e2f8      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
 800c690:	46020c00 	.word	0x46020c00
 800c694:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c698:	4b9c      	ldr	r3, [pc, #624]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c69a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c69e:	f003 0302 	and.w	r3, r3, #2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0e9      	beq.n	800c67a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d01b      	beq.n	800c6ea <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c6b2:	4b96      	ldr	r3, [pc, #600]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c6b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6b8:	4a94      	ldr	r2, [pc, #592]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c6ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c6c2:	e00a      	b.n	800c6da <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6c4:	f7fc fb0e 	bl	8008ce4 <HAL_GetTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d901      	bls.n	800c6da <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c6d6:	2303      	movs	r3, #3
 800c6d8:	e2d3      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c6da:	4b8c      	ldr	r3, [pc, #560]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c6dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d0ed      	beq.n	800c6c4 <HAL_RCC_OscConfig+0x7ec>
 800c6e8:	e053      	b.n	800c792 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c6ea:	4b88      	ldr	r3, [pc, #544]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c6ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6f0:	4a86      	ldr	r2, [pc, #536]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c6f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c6fa:	e00a      	b.n	800c712 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6fc:	f7fc faf2 	bl	8008ce4 <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d901      	bls.n	800c712 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c70e:	2303      	movs	r3, #3
 800c710:	e2b7      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c712:	4b7e      	ldr	r3, [pc, #504]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1ed      	bne.n	800c6fc <HAL_RCC_OscConfig+0x824>
 800c720:	e037      	b.n	800c792 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c722:	f7fc fadf 	bl	8008ce4 <HAL_GetTick>
 800c726:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c728:	e00a      	b.n	800c740 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c72a:	f7fc fadb 	bl	8008ce4 <HAL_GetTick>
 800c72e:	4602      	mov	r2, r0
 800c730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c738:	4293      	cmp	r3, r2
 800c73a:	d901      	bls.n	800c740 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c73c:	2303      	movs	r3, #3
 800c73e:	e2a0      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c740:	4b72      	ldr	r3, [pc, #456]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1ed      	bne.n	800c72a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c74e:	4b6f      	ldr	r3, [pc, #444]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01a      	beq.n	800c792 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c75c:	4b6b      	ldr	r3, [pc, #428]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c75e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c762:	4a6a      	ldr	r2, [pc, #424]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c768:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c76c:	e00a      	b.n	800c784 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c76e:	f7fc fab9 	bl	8008ce4 <HAL_GetTick>
 800c772:	4602      	mov	r2, r0
 800c774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d901      	bls.n	800c784 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c780:	2303      	movs	r3, #3
 800c782:	e27e      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c784:	4b61      	ldr	r3, [pc, #388]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c78a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1ed      	bne.n	800c76e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c792:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800c796:	2b01      	cmp	r3, #1
 800c798:	d107      	bne.n	800c7aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c79a:	4b5c      	ldr	r3, [pc, #368]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c79c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7a0:	4a5a      	ldr	r2, [pc, #360]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c7a2:	f023 0304 	bic.w	r3, r3, #4
 800c7a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f003 0320 	and.w	r3, r3, #32
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d036      	beq.n	800c824 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d019      	beq.n	800c7f2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c7be:	4b53      	ldr	r3, [pc, #332]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a52      	ldr	r2, [pc, #328]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c7c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c7c8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c7ca:	f7fc fa8b 	bl	8008ce4 <HAL_GetTick>
 800c7ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c7d0:	e008      	b.n	800c7e4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c7d2:	f7fc fa87 	bl	8008ce4 <HAL_GetTick>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7da:	1ad3      	subs	r3, r2, r3
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d901      	bls.n	800c7e4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e24e      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c7e4:	4b49      	ldr	r3, [pc, #292]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d0f0      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x8fa>
 800c7f0:	e018      	b.n	800c824 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c7f2:	4b46      	ldr	r3, [pc, #280]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a45      	ldr	r2, [pc, #276]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c7f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c7fe:	f7fc fa71 	bl	8008ce4 <HAL_GetTick>
 800c802:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c804:	e008      	b.n	800c818 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c806:	f7fc fa6d 	bl	8008ce4 <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	2b02      	cmp	r3, #2
 800c812:	d901      	bls.n	800c818 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800c814:	2303      	movs	r3, #3
 800c816:	e234      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c818:	4b3c      	ldr	r3, [pc, #240]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1f0      	bne.n	800c806 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d036      	beq.n	800c89e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c834:	2b00      	cmp	r3, #0
 800c836:	d019      	beq.n	800c86c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c838:	4b34      	ldr	r3, [pc, #208]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a33      	ldr	r2, [pc, #204]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c83e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c842:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c844:	f7fc fa4e 	bl	8008ce4 <HAL_GetTick>
 800c848:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c84a:	e008      	b.n	800c85e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c84c:	f7fc fa4a 	bl	8008ce4 <HAL_GetTick>
 800c850:	4602      	mov	r2, r0
 800c852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	2b02      	cmp	r3, #2
 800c858:	d901      	bls.n	800c85e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800c85a:	2303      	movs	r3, #3
 800c85c:	e211      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c85e:	4b2b      	ldr	r3, [pc, #172]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0f0      	beq.n	800c84c <HAL_RCC_OscConfig+0x974>
 800c86a:	e018      	b.n	800c89e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c86c:	4b27      	ldr	r3, [pc, #156]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a26      	ldr	r2, [pc, #152]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c876:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c878:	f7fc fa34 	bl	8008ce4 <HAL_GetTick>
 800c87c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c87e:	e008      	b.n	800c892 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c880:	f7fc fa30 	bl	8008ce4 <HAL_GetTick>
 800c884:	4602      	mov	r2, r0
 800c886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d901      	bls.n	800c892 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800c88e:	2303      	movs	r3, #3
 800c890:	e1f7      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c892:	4b1e      	ldr	r3, [pc, #120]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1f0      	bne.n	800c880 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d07f      	beq.n	800c9aa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d062      	beq.n	800c978 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c8b2:	4b16      	ldr	r3, [pc, #88]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	4a15      	ldr	r2, [pc, #84]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c8b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c8bc:	6093      	str	r3, [r2, #8]
 800c8be:	4b13      	ldr	r3, [pc, #76]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ca:	4910      	ldr	r1, [pc, #64]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c8d8:	d309      	bcc.n	800c8ee <HAL_RCC_OscConfig+0xa16>
 800c8da:	4b0c      	ldr	r3, [pc, #48]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	f023 021f 	bic.w	r2, r3, #31
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	4909      	ldr	r1, [pc, #36]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	60cb      	str	r3, [r1, #12]
 800c8ec:	e02a      	b.n	800c944 <HAL_RCC_OscConfig+0xa6c>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	da0c      	bge.n	800c910 <HAL_RCC_OscConfig+0xa38>
 800c8f6:	4b05      	ldr	r3, [pc, #20]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	015b      	lsls	r3, r3, #5
 800c904:	4901      	ldr	r1, [pc, #4]	@ (800c90c <HAL_RCC_OscConfig+0xa34>)
 800c906:	4313      	orrs	r3, r2
 800c908:	60cb      	str	r3, [r1, #12]
 800c90a:	e01b      	b.n	800c944 <HAL_RCC_OscConfig+0xa6c>
 800c90c:	46020c00 	.word	0x46020c00
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c918:	d30a      	bcc.n	800c930 <HAL_RCC_OscConfig+0xa58>
 800c91a:	4ba1      	ldr	r3, [pc, #644]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	029b      	lsls	r3, r3, #10
 800c928:	499d      	ldr	r1, [pc, #628]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c92a:	4313      	orrs	r3, r2
 800c92c:	60cb      	str	r3, [r1, #12]
 800c92e:	e009      	b.n	800c944 <HAL_RCC_OscConfig+0xa6c>
 800c930:	4b9b      	ldr	r3, [pc, #620]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6a1b      	ldr	r3, [r3, #32]
 800c93c:	03db      	lsls	r3, r3, #15
 800c93e:	4998      	ldr	r1, [pc, #608]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c940:	4313      	orrs	r3, r2
 800c942:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c944:	4b96      	ldr	r3, [pc, #600]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a95      	ldr	r2, [pc, #596]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c94a:	f043 0310 	orr.w	r3, r3, #16
 800c94e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c950:	f7fc f9c8 	bl	8008ce4 <HAL_GetTick>
 800c954:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c956:	e008      	b.n	800c96a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c958:	f7fc f9c4 	bl	8008ce4 <HAL_GetTick>
 800c95c:	4602      	mov	r2, r0
 800c95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c960:	1ad3      	subs	r3, r2, r3
 800c962:	2b02      	cmp	r3, #2
 800c964:	d901      	bls.n	800c96a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800c966:	2303      	movs	r3, #3
 800c968:	e18b      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c96a:	4b8d      	ldr	r3, [pc, #564]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 0320 	and.w	r3, r3, #32
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0f0      	beq.n	800c958 <HAL_RCC_OscConfig+0xa80>
 800c976:	e018      	b.n	800c9aa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c978:	4b89      	ldr	r3, [pc, #548]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a88      	ldr	r2, [pc, #544]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c97e:	f023 0310 	bic.w	r3, r3, #16
 800c982:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c984:	f7fc f9ae 	bl	8008ce4 <HAL_GetTick>
 800c988:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c98a:	e008      	b.n	800c99e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c98c:	f7fc f9aa 	bl	8008ce4 <HAL_GetTick>
 800c990:	4602      	mov	r2, r0
 800c992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	2b02      	cmp	r3, #2
 800c998:	d901      	bls.n	800c99e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800c99a:	2303      	movs	r3, #3
 800c99c:	e171      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c99e:	4b80      	ldr	r3, [pc, #512]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 0320 	and.w	r3, r3, #32
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1f0      	bne.n	800c98c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 8166 	beq.w	800cc80 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c9ba:	4b79      	ldr	r3, [pc, #484]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c9bc:	69db      	ldr	r3, [r3, #28]
 800c9be:	f003 030c 	and.w	r3, r3, #12
 800c9c2:	2b0c      	cmp	r3, #12
 800c9c4:	f000 80f2 	beq.w	800cbac <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	f040 80c5 	bne.w	800cb5c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c9d2:	4b73      	ldr	r3, [pc, #460]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a72      	ldr	r2, [pc, #456]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c9d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c9dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c9de:	f7fc f981 	bl	8008ce4 <HAL_GetTick>
 800c9e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c9e4:	e008      	b.n	800c9f8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9e6:	f7fc f97d 	bl	8008ce4 <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d901      	bls.n	800c9f8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e144      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c9f8:	4b69      	ldr	r3, [pc, #420]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1f0      	bne.n	800c9e6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca04:	4b66      	ldr	r3, [pc, #408]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800ca06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca0a:	f003 0304 	and.w	r3, r3, #4
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d111      	bne.n	800ca36 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800ca12:	4b63      	ldr	r3, [pc, #396]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800ca14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca18:	4a61      	ldr	r2, [pc, #388]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800ca1a:	f043 0304 	orr.w	r3, r3, #4
 800ca1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ca22:	4b5f      	ldr	r3, [pc, #380]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800ca24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca28:	f003 0304 	and.w	r3, r3, #4
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800ca30:	2301      	movs	r3, #1
 800ca32:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800ca36:	4b5b      	ldr	r3, [pc, #364]	@ (800cba4 <HAL_RCC_OscConfig+0xccc>)
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ca3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca42:	d102      	bne.n	800ca4a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800ca44:	2301      	movs	r3, #1
 800ca46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ca4a:	4b56      	ldr	r3, [pc, #344]	@ (800cba4 <HAL_RCC_OscConfig+0xccc>)
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	4a55      	ldr	r2, [pc, #340]	@ (800cba4 <HAL_RCC_OscConfig+0xccc>)
 800ca50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca54:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800ca56:	4b52      	ldr	r3, [pc, #328]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800ca58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca5e:	f023 0303 	bic.w	r3, r3, #3
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ca6a:	3a01      	subs	r2, #1
 800ca6c:	0212      	lsls	r2, r2, #8
 800ca6e:	4311      	orrs	r1, r2
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ca74:	430a      	orrs	r2, r1
 800ca76:	494a      	ldr	r1, [pc, #296]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ca7c:	4b48      	ldr	r3, [pc, #288]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800ca7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca80:	4b49      	ldr	r3, [pc, #292]	@ (800cba8 <HAL_RCC_OscConfig+0xcd0>)
 800ca82:	4013      	ands	r3, r2
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ca88:	3a01      	subs	r2, #1
 800ca8a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ca92:	3a01      	subs	r2, #1
 800ca94:	0252      	lsls	r2, r2, #9
 800ca96:	b292      	uxth	r2, r2
 800ca98:	4311      	orrs	r1, r2
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ca9e:	3a01      	subs	r2, #1
 800caa0:	0412      	lsls	r2, r2, #16
 800caa2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800caa6:	4311      	orrs	r1, r2
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800caac:	3a01      	subs	r2, #1
 800caae:	0612      	lsls	r2, r2, #24
 800cab0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800cab4:	430a      	orrs	r2, r1
 800cab6:	493a      	ldr	r1, [pc, #232]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cab8:	4313      	orrs	r3, r2
 800caba:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800cabc:	4b38      	ldr	r3, [pc, #224]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac0:	4a37      	ldr	r2, [pc, #220]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cac2:	f023 0310 	bic.w	r3, r3, #16
 800cac6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cacc:	4a34      	ldr	r2, [pc, #208]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800cad2:	4b33      	ldr	r3, [pc, #204]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cad6:	4a32      	ldr	r2, [pc, #200]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cad8:	f043 0310 	orr.w	r3, r3, #16
 800cadc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800cade:	4b30      	ldr	r3, [pc, #192]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae2:	f023 020c 	bic.w	r2, r3, #12
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caea:	492d      	ldr	r1, [pc, #180]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800caec:	4313      	orrs	r3, r2
 800caee:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800caf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d105      	bne.n	800cb04 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800caf8:	4b2a      	ldr	r3, [pc, #168]	@ (800cba4 <HAL_RCC_OscConfig+0xccc>)
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	4a29      	ldr	r2, [pc, #164]	@ (800cba4 <HAL_RCC_OscConfig+0xccc>)
 800cafe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb02:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800cb04:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d107      	bne.n	800cb1c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800cb0c:	4b24      	ldr	r3, [pc, #144]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb12:	4a23      	ldr	r2, [pc, #140]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb14:	f023 0304 	bic.w	r3, r3, #4
 800cb18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800cb1c:	4b20      	ldr	r3, [pc, #128]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a1f      	ldr	r2, [pc, #124]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cb26:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cb28:	f7fc f8dc 	bl	8008ce4 <HAL_GetTick>
 800cb2c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cb2e:	e008      	b.n	800cb42 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb30:	f7fc f8d8 	bl	8008ce4 <HAL_GetTick>
 800cb34:	4602      	mov	r2, r0
 800cb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d901      	bls.n	800cb42 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e09f      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cb42:	4b17      	ldr	r3, [pc, #92]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0f0      	beq.n	800cb30 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cb4e:	4b14      	ldr	r3, [pc, #80]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb52:	4a13      	ldr	r2, [pc, #76]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb58:	6293      	str	r3, [r2, #40]	@ 0x28
 800cb5a:	e091      	b.n	800cc80 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800cb5c:	4b10      	ldr	r3, [pc, #64]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a0f      	ldr	r2, [pc, #60]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cb66:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cb68:	f7fc f8bc 	bl	8008ce4 <HAL_GetTick>
 800cb6c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cb6e:	e008      	b.n	800cb82 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb70:	f7fc f8b8 	bl	8008ce4 <HAL_GetTick>
 800cb74:	4602      	mov	r2, r0
 800cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d901      	bls.n	800cb82 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	e07f      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cb82:	4b07      	ldr	r3, [pc, #28]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1f0      	bne.n	800cb70 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800cb8e:	4b04      	ldr	r3, [pc, #16]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb92:	4a03      	ldr	r2, [pc, #12]	@ (800cba0 <HAL_RCC_OscConfig+0xcc8>)
 800cb94:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800cb98:	f023 0303 	bic.w	r3, r3, #3
 800cb9c:	6293      	str	r3, [r2, #40]	@ 0x28
 800cb9e:	e06f      	b.n	800cc80 <HAL_RCC_OscConfig+0xda8>
 800cba0:	46020c00 	.word	0x46020c00
 800cba4:	46020800 	.word	0x46020800
 800cba8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800cbac:	4b37      	ldr	r3, [pc, #220]	@ (800cc8c <HAL_RCC_OscConfig+0xdb4>)
 800cbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cbb2:	4b36      	ldr	r3, [pc, #216]	@ (800cc8c <HAL_RCC_OscConfig+0xdb4>)
 800cbb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbb6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d039      	beq.n	800cc34 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	f003 0203 	and.w	r2, r3, #3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d132      	bne.n	800cc34 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	0a1b      	lsrs	r3, r3, #8
 800cbd2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbda:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d129      	bne.n	800cc34 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d122      	bne.n	800cc34 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbf8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d11a      	bne.n	800cc34 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	0a5b      	lsrs	r3, r3, #9
 800cc02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d111      	bne.n	800cc34 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	0c1b      	lsrs	r3, r3, #16
 800cc14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc1c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d108      	bne.n	800cc34 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	0e1b      	lsrs	r3, r3, #24
 800cc26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc2e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d001      	beq.n	800cc38 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	e024      	b.n	800cc82 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800cc38:	4b14      	ldr	r3, [pc, #80]	@ (800cc8c <HAL_RCC_OscConfig+0xdb4>)
 800cc3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc3c:	08db      	lsrs	r3, r3, #3
 800cc3e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d01a      	beq.n	800cc80 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800cc4a:	4b10      	ldr	r3, [pc, #64]	@ (800cc8c <HAL_RCC_OscConfig+0xdb4>)
 800cc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc4e:	4a0f      	ldr	r2, [pc, #60]	@ (800cc8c <HAL_RCC_OscConfig+0xdb4>)
 800cc50:	f023 0310 	bic.w	r3, r3, #16
 800cc54:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc56:	f7fc f845 	bl	8008ce4 <HAL_GetTick>
 800cc5a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800cc5c:	bf00      	nop
 800cc5e:	f7fc f841 	bl	8008ce4 <HAL_GetTick>
 800cc62:	4602      	mov	r2, r0
 800cc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d0f9      	beq.n	800cc5e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc6e:	4a07      	ldr	r2, [pc, #28]	@ (800cc8c <HAL_RCC_OscConfig+0xdb4>)
 800cc70:	00db      	lsls	r3, r3, #3
 800cc72:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800cc74:	4b05      	ldr	r3, [pc, #20]	@ (800cc8c <HAL_RCC_OscConfig+0xdb4>)
 800cc76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc78:	4a04      	ldr	r2, [pc, #16]	@ (800cc8c <HAL_RCC_OscConfig+0xdb4>)
 800cc7a:	f043 0310 	orr.w	r3, r3, #16
 800cc7e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3738      	adds	r7, #56	@ 0x38
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	46020c00 	.word	0x46020c00

0800cc90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d101      	bne.n	800cca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e1d9      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cca4:	4b9b      	ldr	r3, [pc, #620]	@ (800cf14 <HAL_RCC_ClockConfig+0x284>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f003 030f 	and.w	r3, r3, #15
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d910      	bls.n	800ccd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccb2:	4b98      	ldr	r3, [pc, #608]	@ (800cf14 <HAL_RCC_ClockConfig+0x284>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f023 020f 	bic.w	r2, r3, #15
 800ccba:	4996      	ldr	r1, [pc, #600]	@ (800cf14 <HAL_RCC_ClockConfig+0x284>)
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ccc2:	4b94      	ldr	r3, [pc, #592]	@ (800cf14 <HAL_RCC_ClockConfig+0x284>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 030f 	and.w	r3, r3, #15
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d001      	beq.n	800ccd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e1c1      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f003 0310 	and.w	r3, r3, #16
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d010      	beq.n	800cd02 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	695a      	ldr	r2, [r3, #20]
 800cce4:	4b8c      	ldr	r3, [pc, #560]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d908      	bls.n	800cd02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800ccf0:	4b89      	ldr	r3, [pc, #548]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ccf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	695b      	ldr	r3, [r3, #20]
 800ccfc:	4986      	ldr	r1, [pc, #536]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f003 0308 	and.w	r3, r3, #8
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d012      	beq.n	800cd34 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	691a      	ldr	r2, [r3, #16]
 800cd12:	4b81      	ldr	r3, [pc, #516]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	091b      	lsrs	r3, r3, #4
 800cd18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d909      	bls.n	800cd34 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cd20:	4b7d      	ldr	r3, [pc, #500]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd22:	6a1b      	ldr	r3, [r3, #32]
 800cd24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	011b      	lsls	r3, r3, #4
 800cd2e:	497a      	ldr	r1, [pc, #488]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd30:	4313      	orrs	r3, r2
 800cd32:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 0304 	and.w	r3, r3, #4
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d010      	beq.n	800cd62 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	68da      	ldr	r2, [r3, #12]
 800cd44:	4b74      	ldr	r3, [pc, #464]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd46:	6a1b      	ldr	r3, [r3, #32]
 800cd48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d908      	bls.n	800cd62 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cd50:	4b71      	ldr	r3, [pc, #452]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	496e      	ldr	r1, [pc, #440]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f003 0302 	and.w	r3, r3, #2
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d010      	beq.n	800cd90 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	689a      	ldr	r2, [r3, #8]
 800cd72:	4b69      	ldr	r3, [pc, #420]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	f003 030f 	and.w	r3, r3, #15
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d908      	bls.n	800cd90 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cd7e:	4b66      	ldr	r3, [pc, #408]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	f023 020f 	bic.w	r2, r3, #15
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	4963      	ldr	r1, [pc, #396]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 80d2 	beq.w	800cf42 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d143      	bne.n	800ce32 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cdaa:	4b5b      	ldr	r3, [pc, #364]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cdac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdb0:	f003 0304 	and.w	r3, r3, #4
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d110      	bne.n	800cdda <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800cdb8:	4b57      	ldr	r3, [pc, #348]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cdba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdbe:	4a56      	ldr	r2, [pc, #344]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cdc0:	f043 0304 	orr.w	r3, r3, #4
 800cdc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800cdc8:	4b53      	ldr	r3, [pc, #332]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cdca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdce:	f003 0304 	and.w	r3, r3, #4
 800cdd2:	60bb      	str	r3, [r7, #8]
 800cdd4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800cdda:	f7fb ff83 	bl	8008ce4 <HAL_GetTick>
 800cdde:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800cde0:	4b4e      	ldr	r3, [pc, #312]	@ (800cf1c <HAL_RCC_ClockConfig+0x28c>)
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00f      	beq.n	800ce0c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800cdec:	e008      	b.n	800ce00 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800cdee:	f7fb ff79 	bl	8008ce4 <HAL_GetTick>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	d901      	bls.n	800ce00 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	e12b      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ce00:	4b46      	ldr	r3, [pc, #280]	@ (800cf1c <HAL_RCC_ClockConfig+0x28c>)
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d0f0      	beq.n	800cdee <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800ce0c:	7dfb      	ldrb	r3, [r7, #23]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d107      	bne.n	800ce22 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800ce12:	4b41      	ldr	r3, [pc, #260]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ce14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce18:	4a3f      	ldr	r2, [pc, #252]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ce1a:	f023 0304 	bic.w	r3, r3, #4
 800ce1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ce22:	4b3d      	ldr	r3, [pc, #244]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d121      	bne.n	800ce72 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e112      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d107      	bne.n	800ce4a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ce3a:	4b37      	ldr	r3, [pc, #220]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d115      	bne.n	800ce72 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e106      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d107      	bne.n	800ce62 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ce52:	4b31      	ldr	r3, [pc, #196]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 0304 	and.w	r3, r3, #4
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d109      	bne.n	800ce72 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e0fa      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ce62:	4b2d      	ldr	r3, [pc, #180]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e0f2      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800ce72:	4b29      	ldr	r3, [pc, #164]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ce74:	69db      	ldr	r3, [r3, #28]
 800ce76:	f023 0203 	bic.w	r2, r3, #3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	4926      	ldr	r1, [pc, #152]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ce80:	4313      	orrs	r3, r2
 800ce82:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800ce84:	f7fb ff2e 	bl	8008ce4 <HAL_GetTick>
 800ce88:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	2b03      	cmp	r3, #3
 800ce90:	d112      	bne.n	800ceb8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ce92:	e00a      	b.n	800ceaa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ce94:	f7fb ff26 	bl	8008ce4 <HAL_GetTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d901      	bls.n	800ceaa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e0d6      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ceaa:	4b1b      	ldr	r3, [pc, #108]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	f003 030c 	and.w	r3, r3, #12
 800ceb2:	2b0c      	cmp	r3, #12
 800ceb4:	d1ee      	bne.n	800ce94 <HAL_RCC_ClockConfig+0x204>
 800ceb6:	e044      	b.n	800cf42 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d112      	bne.n	800cee6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cec0:	e00a      	b.n	800ced8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cec2:	f7fb ff0f 	bl	8008ce4 <HAL_GetTick>
 800cec6:	4602      	mov	r2, r0
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d901      	bls.n	800ced8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ced4:	2303      	movs	r3, #3
 800ced6:	e0bf      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ced8:	4b0f      	ldr	r3, [pc, #60]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	f003 030c 	and.w	r3, r3, #12
 800cee0:	2b08      	cmp	r3, #8
 800cee2:	d1ee      	bne.n	800cec2 <HAL_RCC_ClockConfig+0x232>
 800cee4:	e02d      	b.n	800cf42 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d123      	bne.n	800cf36 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ceee:	e00a      	b.n	800cf06 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cef0:	f7fb fef8 	bl	8008ce4 <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d901      	bls.n	800cf06 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800cf02:	2303      	movs	r3, #3
 800cf04:	e0a8      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800cf06:	4b04      	ldr	r3, [pc, #16]	@ (800cf18 <HAL_RCC_ClockConfig+0x288>)
 800cf08:	69db      	ldr	r3, [r3, #28]
 800cf0a:	f003 030c 	and.w	r3, r3, #12
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1ee      	bne.n	800cef0 <HAL_RCC_ClockConfig+0x260>
 800cf12:	e016      	b.n	800cf42 <HAL_RCC_ClockConfig+0x2b2>
 800cf14:	40022000 	.word	0x40022000
 800cf18:	46020c00 	.word	0x46020c00
 800cf1c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf20:	f7fb fee0 	bl	8008ce4 <HAL_GetTick>
 800cf24:	4602      	mov	r2, r0
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d901      	bls.n	800cf36 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800cf32:	2303      	movs	r3, #3
 800cf34:	e090      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf36:	4b4a      	ldr	r3, [pc, #296]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cf38:	69db      	ldr	r3, [r3, #28]
 800cf3a:	f003 030c 	and.w	r3, r3, #12
 800cf3e:	2b04      	cmp	r3, #4
 800cf40:	d1ee      	bne.n	800cf20 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 0302 	and.w	r3, r3, #2
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d010      	beq.n	800cf70 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	689a      	ldr	r2, [r3, #8]
 800cf52:	4b43      	ldr	r3, [pc, #268]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	f003 030f 	and.w	r3, r3, #15
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d208      	bcs.n	800cf70 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cf5e:	4b40      	ldr	r3, [pc, #256]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cf60:	6a1b      	ldr	r3, [r3, #32]
 800cf62:	f023 020f 	bic.w	r2, r3, #15
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	493d      	ldr	r1, [pc, #244]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cf70:	4b3c      	ldr	r3, [pc, #240]	@ (800d064 <HAL_RCC_ClockConfig+0x3d4>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f003 030f 	and.w	r3, r3, #15
 800cf78:	683a      	ldr	r2, [r7, #0]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d210      	bcs.n	800cfa0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf7e:	4b39      	ldr	r3, [pc, #228]	@ (800d064 <HAL_RCC_ClockConfig+0x3d4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f023 020f 	bic.w	r2, r3, #15
 800cf86:	4937      	ldr	r1, [pc, #220]	@ (800d064 <HAL_RCC_ClockConfig+0x3d4>)
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf8e:	4b35      	ldr	r3, [pc, #212]	@ (800d064 <HAL_RCC_ClockConfig+0x3d4>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 030f 	and.w	r3, r3, #15
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d001      	beq.n	800cfa0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e05b      	b.n	800d058 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d010      	beq.n	800cfce <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68da      	ldr	r2, [r3, #12]
 800cfb0:	4b2b      	ldr	r3, [pc, #172]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d208      	bcs.n	800cfce <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cfbc:	4b28      	ldr	r3, [pc, #160]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cfbe:	6a1b      	ldr	r3, [r3, #32]
 800cfc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	4925      	ldr	r1, [pc, #148]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0308 	and.w	r3, r3, #8
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d012      	beq.n	800d000 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	691a      	ldr	r2, [r3, #16]
 800cfde:	4b20      	ldr	r3, [pc, #128]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cfe0:	6a1b      	ldr	r3, [r3, #32]
 800cfe2:	091b      	lsrs	r3, r3, #4
 800cfe4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d209      	bcs.n	800d000 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cfec:	4b1c      	ldr	r3, [pc, #112]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cfee:	6a1b      	ldr	r3, [r3, #32]
 800cff0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	011b      	lsls	r3, r3, #4
 800cffa:	4919      	ldr	r1, [pc, #100]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f003 0310 	and.w	r3, r3, #16
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d010      	beq.n	800d02e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	695a      	ldr	r2, [r3, #20]
 800d010:	4b13      	ldr	r3, [pc, #76]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800d012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d014:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d018:	429a      	cmp	r2, r3
 800d01a:	d208      	bcs.n	800d02e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d01c:	4b10      	ldr	r3, [pc, #64]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800d01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d020:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	490d      	ldr	r1, [pc, #52]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d02e:	f000 f821 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800d032:	4602      	mov	r2, r0
 800d034:	4b0a      	ldr	r3, [pc, #40]	@ (800d060 <HAL_RCC_ClockConfig+0x3d0>)
 800d036:	6a1b      	ldr	r3, [r3, #32]
 800d038:	f003 030f 	and.w	r3, r3, #15
 800d03c:	490a      	ldr	r1, [pc, #40]	@ (800d068 <HAL_RCC_ClockConfig+0x3d8>)
 800d03e:	5ccb      	ldrb	r3, [r1, r3]
 800d040:	fa22 f303 	lsr.w	r3, r2, r3
 800d044:	4a09      	ldr	r2, [pc, #36]	@ (800d06c <HAL_RCC_ClockConfig+0x3dc>)
 800d046:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d048:	4b09      	ldr	r3, [pc, #36]	@ (800d070 <HAL_RCC_ClockConfig+0x3e0>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fb fdbf 	bl	8008bd0 <HAL_InitTick>
 800d052:	4603      	mov	r3, r0
 800d054:	73fb      	strb	r3, [r7, #15]

  return status;
 800d056:	7bfb      	ldrb	r3, [r7, #15]
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3718      	adds	r7, #24
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	46020c00 	.word	0x46020c00
 800d064:	40022000 	.word	0x40022000
 800d068:	08015824 	.word	0x08015824
 800d06c:	20000000 	.word	0x20000000
 800d070:	20000168 	.word	0x20000168

0800d074 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d074:	b480      	push	{r7}
 800d076:	b08b      	sub	sp, #44	@ 0x2c
 800d078:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d07e:	2300      	movs	r3, #0
 800d080:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d082:	4b78      	ldr	r3, [pc, #480]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d084:	69db      	ldr	r3, [r3, #28]
 800d086:	f003 030c 	and.w	r3, r3, #12
 800d08a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d08c:	4b75      	ldr	r3, [pc, #468]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d090:	f003 0303 	and.w	r3, r3, #3
 800d094:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d005      	beq.n	800d0a8 <HAL_RCC_GetSysClockFreq+0x34>
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	2b0c      	cmp	r3, #12
 800d0a0:	d121      	bne.n	800d0e6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d11e      	bne.n	800d0e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d0a8:	4b6e      	ldr	r3, [pc, #440]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d107      	bne.n	800d0c4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d0b4:	4b6b      	ldr	r3, [pc, #428]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d0b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d0ba:	0b1b      	lsrs	r3, r3, #12
 800d0bc:	f003 030f 	and.w	r3, r3, #15
 800d0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0c2:	e005      	b.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800d0c4:	4b67      	ldr	r3, [pc, #412]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	0f1b      	lsrs	r3, r3, #28
 800d0ca:	f003 030f 	and.w	r3, r3, #15
 800d0ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d0d0:	4a65      	ldr	r2, [pc, #404]	@ (800d268 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0d8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d110      	bne.n	800d102 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d0e4:	e00d      	b.n	800d102 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d0e6:	4b5f      	ldr	r3, [pc, #380]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	f003 030c 	and.w	r3, r3, #12
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d102      	bne.n	800d0f8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d0f2:	4b5e      	ldr	r3, [pc, #376]	@ (800d26c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d0f4:	623b      	str	r3, [r7, #32]
 800d0f6:	e004      	b.n	800d102 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	2b08      	cmp	r3, #8
 800d0fc:	d101      	bne.n	800d102 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d0fe:	4b5b      	ldr	r3, [pc, #364]	@ (800d26c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d100:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	2b0c      	cmp	r3, #12
 800d106:	f040 80a5 	bne.w	800d254 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d10a:	4b56      	ldr	r3, [pc, #344]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d10e:	f003 0303 	and.w	r3, r3, #3
 800d112:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d114:	4b53      	ldr	r3, [pc, #332]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d118:	0a1b      	lsrs	r3, r3, #8
 800d11a:	f003 030f 	and.w	r3, r3, #15
 800d11e:	3301      	adds	r3, #1
 800d120:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d122:	4b50      	ldr	r3, [pc, #320]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d126:	091b      	lsrs	r3, r3, #4
 800d128:	f003 0301 	and.w	r3, r3, #1
 800d12c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d12e:	4b4d      	ldr	r3, [pc, #308]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d132:	08db      	lsrs	r3, r3, #3
 800d134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	fb02 f303 	mul.w	r3, r2, r3
 800d13e:	ee07 3a90 	vmov	s15, r3
 800d142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d146:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d003      	beq.n	800d158 <HAL_RCC_GetSysClockFreq+0xe4>
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	2b03      	cmp	r3, #3
 800d154:	d022      	beq.n	800d19c <HAL_RCC_GetSysClockFreq+0x128>
 800d156:	e043      	b.n	800d1e0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	ee07 3a90 	vmov	s15, r3
 800d15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d162:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800d270 <HAL_RCC_GetSysClockFreq+0x1fc>
 800d166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d16a:	4b3e      	ldr	r3, [pc, #248]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d172:	ee07 3a90 	vmov	s15, r3
 800d176:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d17a:	ed97 6a01 	vldr	s12, [r7, #4]
 800d17e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800d274 <HAL_RCC_GetSysClockFreq+0x200>
 800d182:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d186:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d18a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d19a:	e046      	b.n	800d22a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	ee07 3a90 	vmov	s15, r3
 800d1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800d270 <HAL_RCC_GetSysClockFreq+0x1fc>
 800d1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ae:	4b2d      	ldr	r3, [pc, #180]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d1b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b6:	ee07 3a90 	vmov	s15, r3
 800d1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d1be:	ed97 6a01 	vldr	s12, [r7, #4]
 800d1c2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800d274 <HAL_RCC_GetSysClockFreq+0x200>
 800d1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d1ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1de:	e024      	b.n	800d22a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e2:	ee07 3a90 	vmov	s15, r3
 800d1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	ee07 3a90 	vmov	s15, r3
 800d1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1f8:	4b1a      	ldr	r3, [pc, #104]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d1fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d200:	ee07 3a90 	vmov	s15, r3
 800d204:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d208:	ed97 6a01 	vldr	s12, [r7, #4]
 800d20c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800d274 <HAL_RCC_GetSysClockFreq+0x200>
 800d210:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d214:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d218:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d21c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d220:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d224:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d228:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800d22a:	4b0e      	ldr	r3, [pc, #56]	@ (800d264 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d22c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d22e:	0e1b      	lsrs	r3, r3, #24
 800d230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d234:	3301      	adds	r3, #1
 800d236:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	ee07 3a90 	vmov	s15, r3
 800d23e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d242:	edd7 6a07 	vldr	s13, [r7, #28]
 800d246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d24a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d24e:	ee17 3a90 	vmov	r3, s15
 800d252:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800d254:	6a3b      	ldr	r3, [r7, #32]
}
 800d256:	4618      	mov	r0, r3
 800d258:	372c      	adds	r7, #44	@ 0x2c
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	46020c00 	.word	0x46020c00
 800d268:	0801583c 	.word	0x0801583c
 800d26c:	00f42400 	.word	0x00f42400
 800d270:	4b742400 	.word	0x4b742400
 800d274:	46000000 	.word	0x46000000

0800d278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d27c:	f7ff fefa 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800d280:	4602      	mov	r2, r0
 800d282:	4b07      	ldr	r3, [pc, #28]	@ (800d2a0 <HAL_RCC_GetHCLKFreq+0x28>)
 800d284:	6a1b      	ldr	r3, [r3, #32]
 800d286:	f003 030f 	and.w	r3, r3, #15
 800d28a:	4906      	ldr	r1, [pc, #24]	@ (800d2a4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800d28c:	5ccb      	ldrb	r3, [r1, r3]
 800d28e:	fa22 f303 	lsr.w	r3, r2, r3
 800d292:	4a05      	ldr	r2, [pc, #20]	@ (800d2a8 <HAL_RCC_GetHCLKFreq+0x30>)
 800d294:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d296:	4b04      	ldr	r3, [pc, #16]	@ (800d2a8 <HAL_RCC_GetHCLKFreq+0x30>)
 800d298:	681b      	ldr	r3, [r3, #0]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	46020c00 	.word	0x46020c00
 800d2a4:	08015824 	.word	0x08015824
 800d2a8:	20000000 	.word	0x20000000

0800d2ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800d2b0:	f7ff ffe2 	bl	800d278 <HAL_RCC_GetHCLKFreq>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	4b05      	ldr	r3, [pc, #20]	@ (800d2cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800d2b8:	6a1b      	ldr	r3, [r3, #32]
 800d2ba:	091b      	lsrs	r3, r3, #4
 800d2bc:	f003 0307 	and.w	r3, r3, #7
 800d2c0:	4903      	ldr	r1, [pc, #12]	@ (800d2d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d2c2:	5ccb      	ldrb	r3, [r1, r3]
 800d2c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	46020c00 	.word	0x46020c00
 800d2d0:	08015834 	.word	0x08015834

0800d2d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800d2d8:	f7ff ffce 	bl	800d278 <HAL_RCC_GetHCLKFreq>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	4b05      	ldr	r3, [pc, #20]	@ (800d2f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	0a1b      	lsrs	r3, r3, #8
 800d2e4:	f003 0307 	and.w	r3, r3, #7
 800d2e8:	4903      	ldr	r1, [pc, #12]	@ (800d2f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2ea:	5ccb      	ldrb	r3, [r1, r3]
 800d2ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	46020c00 	.word	0x46020c00
 800d2f8:	08015834 	.word	0x08015834

0800d2fc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800d300:	f7ff ffba 	bl	800d278 <HAL_RCC_GetHCLKFreq>
 800d304:	4602      	mov	r2, r0
 800d306:	4b05      	ldr	r3, [pc, #20]	@ (800d31c <HAL_RCC_GetPCLK3Freq+0x20>)
 800d308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d30a:	091b      	lsrs	r3, r3, #4
 800d30c:	f003 0307 	and.w	r3, r3, #7
 800d310:	4903      	ldr	r1, [pc, #12]	@ (800d320 <HAL_RCC_GetPCLK3Freq+0x24>)
 800d312:	5ccb      	ldrb	r3, [r1, r3]
 800d314:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d318:	4618      	mov	r0, r3
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	46020c00 	.word	0x46020c00
 800d320:	08015834 	.word	0x08015834

0800d324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d32c:	4b3e      	ldr	r3, [pc, #248]	@ (800d428 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d332:	f003 0304 	and.w	r3, r3, #4
 800d336:	2b00      	cmp	r3, #0
 800d338:	d003      	beq.n	800d342 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d33a:	f7fe fd9f 	bl	800be7c <HAL_PWREx_GetVoltageRange>
 800d33e:	6178      	str	r0, [r7, #20]
 800d340:	e019      	b.n	800d376 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d342:	4b39      	ldr	r3, [pc, #228]	@ (800d428 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d344:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d348:	4a37      	ldr	r2, [pc, #220]	@ (800d428 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d34a:	f043 0304 	orr.w	r3, r3, #4
 800d34e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800d352:	4b35      	ldr	r3, [pc, #212]	@ (800d428 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d358:	f003 0304 	and.w	r3, r3, #4
 800d35c:	60fb      	str	r3, [r7, #12]
 800d35e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d360:	f7fe fd8c 	bl	800be7c <HAL_PWREx_GetVoltageRange>
 800d364:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d366:	4b30      	ldr	r3, [pc, #192]	@ (800d428 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d36c:	4a2e      	ldr	r2, [pc, #184]	@ (800d428 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d36e:	f023 0304 	bic.w	r3, r3, #4
 800d372:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d37c:	d003      	beq.n	800d386 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d384:	d109      	bne.n	800d39a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d38c:	d202      	bcs.n	800d394 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800d38e:	2301      	movs	r3, #1
 800d390:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d392:	e033      	b.n	800d3fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800d394:	2300      	movs	r3, #0
 800d396:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d398:	e030      	b.n	800d3fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3a0:	d208      	bcs.n	800d3b4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3a8:	d102      	bne.n	800d3b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	613b      	str	r3, [r7, #16]
 800d3ae:	e025      	b.n	800d3fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e035      	b.n	800d420 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3ba:	d90f      	bls.n	800d3dc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d109      	bne.n	800d3d6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d3c8:	d902      	bls.n	800d3d0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	613b      	str	r3, [r7, #16]
 800d3ce:	e015      	b.n	800d3fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	613b      	str	r3, [r7, #16]
 800d3d4:	e012      	b.n	800d3fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	613b      	str	r3, [r7, #16]
 800d3da:	e00f      	b.n	800d3fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3e2:	d109      	bne.n	800d3f8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3ea:	d102      	bne.n	800d3f2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	613b      	str	r3, [r7, #16]
 800d3f0:	e004      	b.n	800d3fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	613b      	str	r3, [r7, #16]
 800d3f6:	e001      	b.n	800d3fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d3fc:	4b0b      	ldr	r3, [pc, #44]	@ (800d42c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f023 020f 	bic.w	r2, r3, #15
 800d404:	4909      	ldr	r1, [pc, #36]	@ (800d42c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	4313      	orrs	r3, r2
 800d40a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d40c:	4b07      	ldr	r3, [pc, #28]	@ (800d42c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f003 030f 	and.w	r3, r3, #15
 800d414:	693a      	ldr	r2, [r7, #16]
 800d416:	429a      	cmp	r2, r3
 800d418:	d001      	beq.n	800d41e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e000      	b.n	800d420 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	46020c00 	.word	0x46020c00
 800d42c:	40022000 	.word	0x40022000

0800d430 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d434:	b0ba      	sub	sp, #232	@ 0xe8
 800d436:	af00      	add	r7, sp, #0
 800d438:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d43c:	2300      	movs	r3, #0
 800d43e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d442:	2300      	movs	r3, #0
 800d444:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d450:	f002 0401 	and.w	r4, r2, #1
 800d454:	2500      	movs	r5, #0
 800d456:	ea54 0305 	orrs.w	r3, r4, r5
 800d45a:	d00b      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d45c:	4bcb      	ldr	r3, [pc, #812]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d45e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d462:	f023 0103 	bic.w	r1, r3, #3
 800d466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d46c:	4ac7      	ldr	r2, [pc, #796]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d46e:	430b      	orrs	r3, r1
 800d470:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	f002 0802 	and.w	r8, r2, #2
 800d480:	f04f 0900 	mov.w	r9, #0
 800d484:	ea58 0309 	orrs.w	r3, r8, r9
 800d488:	d00b      	beq.n	800d4a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d48a:	4bc0      	ldr	r3, [pc, #768]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d48c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d490:	f023 010c 	bic.w	r1, r3, #12
 800d494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d49a:	4abc      	ldr	r2, [pc, #752]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d49c:	430b      	orrs	r3, r1
 800d49e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d4a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f002 0a04 	and.w	sl, r2, #4
 800d4ae:	f04f 0b00 	mov.w	fp, #0
 800d4b2:	ea5a 030b 	orrs.w	r3, sl, fp
 800d4b6:	d00b      	beq.n	800d4d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d4b8:	4bb4      	ldr	r3, [pc, #720]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d4ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4be:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d4c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4c8:	4ab0      	ldr	r2, [pc, #704]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d4ca:	430b      	orrs	r3, r1
 800d4cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d4d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	f002 0308 	and.w	r3, r2, #8
 800d4dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d4e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	d00b      	beq.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d4f0:	4ba6      	ldr	r3, [pc, #664]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d4f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d4fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d500:	4aa2      	ldr	r2, [pc, #648]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d502:	430b      	orrs	r3, r1
 800d504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d508:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	f002 0310 	and.w	r3, r2, #16
 800d514:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d518:	2300      	movs	r3, #0
 800d51a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d51e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d522:	460b      	mov	r3, r1
 800d524:	4313      	orrs	r3, r2
 800d526:	d00b      	beq.n	800d540 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d528:	4b98      	ldr	r3, [pc, #608]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d52a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d52e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d538:	4a94      	ldr	r2, [pc, #592]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d53a:	430b      	orrs	r3, r1
 800d53c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d540:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	f002 0320 	and.w	r3, r2, #32
 800d54c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d550:	2300      	movs	r3, #0
 800d552:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d556:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d55a:	460b      	mov	r3, r1
 800d55c:	4313      	orrs	r3, r2
 800d55e:	d00b      	beq.n	800d578 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d560:	4b8a      	ldr	r3, [pc, #552]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d566:	f023 0107 	bic.w	r1, r3, #7
 800d56a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d56e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d570:	4a86      	ldr	r2, [pc, #536]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d572:	430b      	orrs	r3, r1
 800d574:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d580:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d584:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d588:	2300      	movs	r3, #0
 800d58a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d58e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d592:	460b      	mov	r3, r1
 800d594:	4313      	orrs	r3, r2
 800d596:	d00b      	beq.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d598:	4b7c      	ldr	r3, [pc, #496]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d59a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d59e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800d5a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d5a8:	4a78      	ldr	r2, [pc, #480]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d5aa:	430b      	orrs	r3, r1
 800d5ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d5b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d5bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d5c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	d00b      	beq.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d5d0:	4b6e      	ldr	r3, [pc, #440]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d5d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d5da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5e0:	4a6a      	ldr	r2, [pc, #424]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d5e2:	430b      	orrs	r3, r1
 800d5e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d5e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800d5f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d5fe:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d602:	460b      	mov	r3, r1
 800d604:	4313      	orrs	r3, r2
 800d606:	d00b      	beq.n	800d620 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d608:	4b60      	ldr	r3, [pc, #384]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d60a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d60e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d618:	4a5c      	ldr	r2, [pc, #368]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d61a:	430b      	orrs	r3, r1
 800d61c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d628:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d62c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d630:	2300      	movs	r3, #0
 800d632:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d636:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d63a:	460b      	mov	r3, r1
 800d63c:	4313      	orrs	r3, r2
 800d63e:	d00b      	beq.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d640:	4b52      	ldr	r3, [pc, #328]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d646:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800d64a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d64e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d650:	4a4e      	ldr	r2, [pc, #312]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d652:	430b      	orrs	r3, r1
 800d654:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800d664:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d668:	2300      	movs	r3, #0
 800d66a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d66e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d672:	460b      	mov	r3, r1
 800d674:	4313      	orrs	r3, r2
 800d676:	d00b      	beq.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d678:	4b44      	ldr	r3, [pc, #272]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d67a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d67e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800d682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d688:	4a40      	ldr	r2, [pc, #256]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d68a:	430b      	orrs	r3, r1
 800d68c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d698:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d69c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d6a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	d00b      	beq.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d6b0:	4b36      	ldr	r3, [pc, #216]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d6b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6b6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800d6ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d6c0:	4a32      	ldr	r2, [pc, #200]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d6c2:	430b      	orrs	r3, r1
 800d6c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d6c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d6d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d6de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	d00c      	beq.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d6e8:	4b28      	ldr	r3, [pc, #160]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d6ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d6ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d6f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6fa:	4a24      	ldr	r2, [pc, #144]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d6fc:	430b      	orrs	r3, r1
 800d6fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d70e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d710:	2300      	movs	r3, #0
 800d712:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d714:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d718:	460b      	mov	r3, r1
 800d71a:	4313      	orrs	r3, r2
 800d71c:	d04f      	beq.n	800d7be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d71e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d726:	2b80      	cmp	r3, #128	@ 0x80
 800d728:	d02d      	beq.n	800d786 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800d72a:	2b80      	cmp	r3, #128	@ 0x80
 800d72c:	d827      	bhi.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d72e:	2b60      	cmp	r3, #96	@ 0x60
 800d730:	d02e      	beq.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d732:	2b60      	cmp	r3, #96	@ 0x60
 800d734:	d823      	bhi.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d736:	2b40      	cmp	r3, #64	@ 0x40
 800d738:	d006      	beq.n	800d748 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800d73a:	2b40      	cmp	r3, #64	@ 0x40
 800d73c:	d81f      	bhi.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800d742:	2b20      	cmp	r3, #32
 800d744:	d011      	beq.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800d746:	e01a      	b.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d748:	4b10      	ldr	r3, [pc, #64]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d74c:	4a0f      	ldr	r2, [pc, #60]	@ (800d78c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d74e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d752:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d754:	e01d      	b.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d75a:	3308      	adds	r3, #8
 800d75c:	4618      	mov	r0, r3
 800d75e:	f002 fa17 	bl	800fb90 <RCCEx_PLL2_Config>
 800d762:	4603      	mov	r3, r0
 800d764:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d768:	e013      	b.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d76a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d76e:	332c      	adds	r3, #44	@ 0x2c
 800d770:	4618      	mov	r0, r3
 800d772:	f002 faa5 	bl	800fcc0 <RCCEx_PLL3_Config>
 800d776:	4603      	mov	r3, r0
 800d778:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d77c:	e009      	b.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d784:	e005      	b.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800d786:	bf00      	nop
 800d788:	e003      	b.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d78a:	bf00      	nop
 800d78c:	46020c00 	.word	0x46020c00
        break;
 800d790:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d792:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10d      	bne.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d79a:	4bb6      	ldr	r3, [pc, #728]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d79c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d7a0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800d7a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7ac:	4ab1      	ldr	r2, [pc, #708]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d7ae:	430b      	orrs	r3, r1
 800d7b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d7b4:	e003      	b.n	800d7be <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d7ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d7be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d7ca:	673b      	str	r3, [r7, #112]	@ 0x70
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	677b      	str	r3, [r7, #116]	@ 0x74
 800d7d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	d053      	beq.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d7da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d7e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7e6:	d033      	beq.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800d7e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7ec:	d82c      	bhi.n	800d848 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d7ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d7f2:	d02f      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800d7f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d7f8:	d826      	bhi.n	800d848 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d7fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7fe:	d008      	beq.n	800d812 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800d800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d804:	d820      	bhi.n	800d848 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800d80a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d80e:	d011      	beq.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d810:	e01a      	b.n	800d848 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d812:	4b98      	ldr	r3, [pc, #608]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d816:	4a97      	ldr	r2, [pc, #604]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d81c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d81e:	e01a      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d824:	3308      	adds	r3, #8
 800d826:	4618      	mov	r0, r3
 800d828:	f002 f9b2 	bl	800fb90 <RCCEx_PLL2_Config>
 800d82c:	4603      	mov	r3, r0
 800d82e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d832:	e010      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d838:	332c      	adds	r3, #44	@ 0x2c
 800d83a:	4618      	mov	r0, r3
 800d83c:	f002 fa40 	bl	800fcc0 <RCCEx_PLL3_Config>
 800d840:	4603      	mov	r3, r0
 800d842:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d846:	e006      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d848:	2301      	movs	r3, #1
 800d84a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d84e:	e002      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800d850:	bf00      	nop
 800d852:	e000      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800d854:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d856:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10d      	bne.n	800d87a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d85e:	4b85      	ldr	r3, [pc, #532]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d860:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d864:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800d868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d86c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d870:	4a80      	ldr	r2, [pc, #512]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d872:	430b      	orrs	r3, r1
 800d874:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d878:	e003      	b.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d87a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d87e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800d882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d88e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d890:	2300      	movs	r3, #0
 800d892:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d894:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d898:	460b      	mov	r3, r1
 800d89a:	4313      	orrs	r3, r2
 800d89c:	d046      	beq.n	800d92c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800d89e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d8a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d8aa:	d028      	beq.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d8ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d8b0:	d821      	bhi.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d8b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8b6:	d022      	beq.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d8b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8bc:	d81b      	bhi.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d8be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8c2:	d01c      	beq.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d8c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8c8:	d815      	bhi.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d8ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8ce:	d008      	beq.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800d8d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8d4:	d80f      	bhi.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d011      	beq.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d8da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8de:	d00e      	beq.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d8e0:	e009      	b.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d8e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8e6:	3308      	adds	r3, #8
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f002 f951 	bl	800fb90 <RCCEx_PLL2_Config>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d8f4:	e004      	b.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d8fc:	e000      	b.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800d8fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d900:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10d      	bne.n	800d924 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800d908:	4b5a      	ldr	r3, [pc, #360]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d90a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d90e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d91a:	4a56      	ldr	r2, [pc, #344]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d91c:	430b      	orrs	r3, r1
 800d91e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d922:	e003      	b.n	800d92c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d924:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d928:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800d92c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d938:	663b      	str	r3, [r7, #96]	@ 0x60
 800d93a:	2300      	movs	r3, #0
 800d93c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d93e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d942:	460b      	mov	r3, r1
 800d944:	4313      	orrs	r3, r2
 800d946:	d03f      	beq.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800d948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d950:	2b04      	cmp	r3, #4
 800d952:	d81e      	bhi.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x562>
 800d954:	a201      	add	r2, pc, #4	@ (adr r2, 800d95c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800d956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d95a:	bf00      	nop
 800d95c:	0800d99b 	.word	0x0800d99b
 800d960:	0800d971 	.word	0x0800d971
 800d964:	0800d97f 	.word	0x0800d97f
 800d968:	0800d99b 	.word	0x0800d99b
 800d96c:	0800d99b 	.word	0x0800d99b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d970:	4b40      	ldr	r3, [pc, #256]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d974:	4a3f      	ldr	r2, [pc, #252]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d97a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800d97c:	e00e      	b.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d97e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d982:	332c      	adds	r3, #44	@ 0x2c
 800d984:	4618      	mov	r0, r3
 800d986:	f002 f99b 	bl	800fcc0 <RCCEx_PLL3_Config>
 800d98a:	4603      	mov	r3, r0
 800d98c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d990:	e004      	b.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d992:	2301      	movs	r3, #1
 800d994:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800d998:	e000      	b.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800d99a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d99c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10d      	bne.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800d9a4:	4b33      	ldr	r3, [pc, #204]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d9a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d9aa:	f023 0107 	bic.w	r1, r3, #7
 800d9ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9b6:	4a2f      	ldr	r2, [pc, #188]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d9b8:	430b      	orrs	r3, r1
 800d9ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d9be:	e003      	b.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800d9c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800d9c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d9d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	d04d      	beq.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800d9e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d9e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d9ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9f0:	d028      	beq.n	800da44 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800d9f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9f6:	d821      	bhi.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d9f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d9fc:	d024      	beq.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800d9fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800da02:	d81b      	bhi.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800da04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da08:	d00e      	beq.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800da0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da0e:	d815      	bhi.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800da10:	2b00      	cmp	r3, #0
 800da12:	d01b      	beq.n	800da4c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800da14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da18:	d110      	bne.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800da1a:	4b16      	ldr	r3, [pc, #88]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da1e:	4a15      	ldr	r2, [pc, #84]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da24:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800da26:	e012      	b.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800da28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800da2c:	332c      	adds	r3, #44	@ 0x2c
 800da2e:	4618      	mov	r0, r3
 800da30:	f002 f946 	bl	800fcc0 <RCCEx_PLL3_Config>
 800da34:	4603      	mov	r3, r0
 800da36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800da3a:	e008      	b.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800da3c:	2301      	movs	r3, #1
 800da3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800da42:	e004      	b.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800da44:	bf00      	nop
 800da46:	e002      	b.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800da48:	bf00      	nop
 800da4a:	e000      	b.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800da4c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800da4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800da52:	2b00      	cmp	r3, #0
 800da54:	d110      	bne.n	800da78 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800da56:	4b07      	ldr	r3, [pc, #28]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800da60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800da64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800da68:	4a02      	ldr	r2, [pc, #8]	@ (800da74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800da6a:	430b      	orrs	r3, r1
 800da6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800da70:	e006      	b.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800da72:	bf00      	nop
 800da74:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800da7c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800da80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800da8c:	653b      	str	r3, [r7, #80]	@ 0x50
 800da8e:	2300      	movs	r3, #0
 800da90:	657b      	str	r3, [r7, #84]	@ 0x54
 800da92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800da96:	460b      	mov	r3, r1
 800da98:	4313      	orrs	r3, r2
 800da9a:	f000 80b5 	beq.w	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800da9e:	2300      	movs	r3, #0
 800daa0:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800daa4:	4b9d      	ldr	r3, [pc, #628]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800daa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800daaa:	f003 0304 	and.w	r3, r3, #4
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d113      	bne.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dab2:	4b9a      	ldr	r3, [pc, #616]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dab8:	4a98      	ldr	r2, [pc, #608]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800daba:	f043 0304 	orr.w	r3, r3, #4
 800dabe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800dac2:	4b96      	ldr	r3, [pc, #600]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dac8:	f003 0304 	and.w	r3, r3, #4
 800dacc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 800dad4:	2301      	movs	r3, #1
 800dad6:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800dada:	4b91      	ldr	r3, [pc, #580]	@ (800dd20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800dadc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dade:	4a90      	ldr	r2, [pc, #576]	@ (800dd20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800dae0:	f043 0301 	orr.w	r3, r3, #1
 800dae4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dae6:	f7fb f8fd 	bl	8008ce4 <HAL_GetTick>
 800daea:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800daee:	e00b      	b.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800daf0:	f7fb f8f8 	bl	8008ce4 <HAL_GetTick>
 800daf4:	4602      	mov	r2, r0
 800daf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dafa:	1ad3      	subs	r3, r2, r3
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d903      	bls.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800db00:	2303      	movs	r3, #3
 800db02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800db06:	e005      	b.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800db08:	4b85      	ldr	r3, [pc, #532]	@ (800dd20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800db0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d0ed      	beq.n	800daf0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800db14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d165      	bne.n	800dbe8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800db1c:	4b7f      	ldr	r3, [pc, #508]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800db1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800db2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d023      	beq.n	800db7a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800db32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800db36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800db3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db3e:	4293      	cmp	r3, r2
 800db40:	d01b      	beq.n	800db7a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800db42:	4b76      	ldr	r3, [pc, #472]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800db44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800db50:	4b72      	ldr	r3, [pc, #456]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800db52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db56:	4a71      	ldr	r2, [pc, #452]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800db58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800db60:	4b6e      	ldr	r3, [pc, #440]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800db62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db66:	4a6d      	ldr	r2, [pc, #436]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800db68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800db70:	4a6a      	ldr	r2, [pc, #424]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800db72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800db7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db7e:	f003 0301 	and.w	r3, r3, #1
 800db82:	2b00      	cmp	r3, #0
 800db84:	d019      	beq.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db86:	f7fb f8ad 	bl	8008ce4 <HAL_GetTick>
 800db8a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db8e:	e00d      	b.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db90:	f7fb f8a8 	bl	8008ce4 <HAL_GetTick>
 800db94:	4602      	mov	r2, r0
 800db96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db9a:	1ad2      	subs	r2, r2, r3
 800db9c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d903      	bls.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800dba4:	2303      	movs	r3, #3
 800dba6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800dbaa:	e006      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dbac:	4b5b      	ldr	r3, [pc, #364]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dbae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dbb2:	f003 0302 	and.w	r3, r3, #2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d0ea      	beq.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800dbba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10d      	bne.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800dbc2:	4b56      	ldr	r3, [pc, #344]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dbc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dbc8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dbcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dbd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dbd4:	4a51      	ldr	r2, [pc, #324]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dbd6:	430b      	orrs	r3, r1
 800dbd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800dbdc:	e008      	b.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dbde:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dbe2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800dbe6:	e003      	b.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbe8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dbec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dbf0:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d107      	bne.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbf8:	4b48      	ldr	r3, [pc, #288]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dbfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dbfe:	4a47      	ldr	r2, [pc, #284]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dc00:	f023 0304 	bic.w	r3, r3, #4
 800dc04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800dc08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dc14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc16:	2300      	movs	r3, #0
 800dc18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc1a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800dc1e:	460b      	mov	r3, r1
 800dc20:	4313      	orrs	r3, r2
 800dc22:	d042      	beq.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800dc24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dc28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800dc30:	d022      	beq.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800dc32:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800dc36:	d81b      	bhi.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800dc38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc3c:	d011      	beq.n	800dc62 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800dc3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc42:	d815      	bhi.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d019      	beq.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800dc48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc4c:	d110      	bne.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dc4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dc52:	3308      	adds	r3, #8
 800dc54:	4618      	mov	r0, r3
 800dc56:	f001 ff9b 	bl	800fb90 <RCCEx_PLL2_Config>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dc60:	e00d      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc62:	4b2e      	ldr	r3, [pc, #184]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dc64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc66:	4a2d      	ldr	r2, [pc, #180]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dc68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc6c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800dc6e:	e006      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dc76:	e002      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800dc78:	bf00      	nop
 800dc7a:	e000      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800dc7c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dc7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10d      	bne.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800dc86:	4b25      	ldr	r3, [pc, #148]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dc88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dc8c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800dc90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dc94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc98:	4a20      	ldr	r2, [pc, #128]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dc9a:	430b      	orrs	r3, r1
 800dc9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800dca0:	e003      	b.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dca2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dca6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dcaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800dcb6:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcb8:	2300      	movs	r3, #0
 800dcba:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcbc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	d032      	beq.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800dcc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dcca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dcce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcd2:	d00b      	beq.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800dcd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcd8:	d804      	bhi.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d008      	beq.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800dcde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dce2:	d007      	beq.n	800dcf4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800dce4:	2301      	movs	r3, #1
 800dce6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800dcea:	e004      	b.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800dcec:	bf00      	nop
 800dcee:	e002      	b.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800dcf0:	bf00      	nop
 800dcf2:	e000      	b.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800dcf4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dcf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d112      	bne.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800dcfe:	4b07      	ldr	r3, [pc, #28]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dd08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dd10:	4a02      	ldr	r2, [pc, #8]	@ (800dd1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800dd12:	430b      	orrs	r3, r1
 800dd14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800dd18:	e008      	b.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800dd1a:	bf00      	nop
 800dd1c:	46020c00 	.word	0x46020c00
 800dd20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800dd28:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800dd2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd34:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dd38:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800dd42:	460b      	mov	r3, r1
 800dd44:	4313      	orrs	r3, r2
 800dd46:	d00c      	beq.n	800dd62 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800dd48:	4b98      	ldr	r3, [pc, #608]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dd4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd4e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800dd52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd5a:	4a94      	ldr	r2, [pc, #592]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dd5c:	430b      	orrs	r3, r1
 800dd5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800dd62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800dd6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd70:	2300      	movs	r3, #0
 800dd72:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800dd78:	460b      	mov	r3, r1
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	d019      	beq.n	800ddb2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800dd7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dd86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd8a:	d105      	bne.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dd8c:	4b87      	ldr	r3, [pc, #540]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd90:	4a86      	ldr	r2, [pc, #536]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dd92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd96:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800dd98:	4b84      	ldr	r3, [pc, #528]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dd9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd9e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800dda2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dda6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ddaa:	4a80      	ldr	r2, [pc, #512]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ddac:	430b      	orrs	r3, r1
 800ddae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800ddb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ddbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	d00c      	beq.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800ddce:	4b77      	ldr	r3, [pc, #476]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ddd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddd4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ddd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dddc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dde0:	4972      	ldr	r1, [pc, #456]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dde2:	4313      	orrs	r3, r2
 800dde4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800dde8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ddf4:	623b      	str	r3, [r7, #32]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddfa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ddfe:	460b      	mov	r3, r1
 800de00:	4313      	orrs	r3, r2
 800de02:	d00c      	beq.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800de04:	4b69      	ldr	r3, [pc, #420]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800de06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800de0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800de16:	4965      	ldr	r1, [pc, #404]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800de18:	4313      	orrs	r3, r2
 800de1a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800de1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800de2a:	61bb      	str	r3, [r7, #24]
 800de2c:	2300      	movs	r3, #0
 800de2e:	61fb      	str	r3, [r7, #28]
 800de30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800de34:	460b      	mov	r3, r1
 800de36:	4313      	orrs	r3, r2
 800de38:	d00c      	beq.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800de3a:	4b5c      	ldr	r3, [pc, #368]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800de3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de40:	f023 0218 	bic.w	r2, r3, #24
 800de44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800de4c:	4957      	ldr	r1, [pc, #348]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800de4e:	4313      	orrs	r3, r2
 800de50:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800de54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800de60:	613b      	str	r3, [r7, #16]
 800de62:	2300      	movs	r3, #0
 800de64:	617b      	str	r3, [r7, #20]
 800de66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800de6a:	460b      	mov	r3, r1
 800de6c:	4313      	orrs	r3, r2
 800de6e:	d032      	beq.n	800ded6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800de70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800de78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de7c:	d105      	bne.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de7e:	4b4b      	ldr	r3, [pc, #300]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800de80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de82:	4a4a      	ldr	r2, [pc, #296]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800de84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de88:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800de8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800de92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800de96:	d108      	bne.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800de98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de9c:	3308      	adds	r3, #8
 800de9e:	4618      	mov	r0, r3
 800dea0:	f001 fe76 	bl	800fb90 <RCCEx_PLL2_Config>
 800dea4:	4603      	mov	r3, r0
 800dea6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800deaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d10d      	bne.n	800dece <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800deb2:	4b3e      	ldr	r3, [pc, #248]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800deb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800deb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800debc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dec4:	4939      	ldr	r1, [pc, #228]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800dec6:	4313      	orrs	r3, r2
 800dec8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800decc:	e003      	b.n	800ded6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dece:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800ded2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800ded6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800deda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dede:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800dee2:	60bb      	str	r3, [r7, #8]
 800dee4:	2300      	movs	r3, #0
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800deec:	460b      	mov	r3, r1
 800deee:	4313      	orrs	r3, r2
 800def0:	d03a      	beq.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800def2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800def6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800defa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800defe:	d00e      	beq.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800df00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800df04:	d815      	bhi.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800df06:	2b00      	cmp	r3, #0
 800df08:	d017      	beq.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800df0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df0e:	d110      	bne.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df10:	4b26      	ldr	r3, [pc, #152]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800df12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df14:	4a25      	ldr	r2, [pc, #148]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800df16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df1a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800df1c:	e00e      	b.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800df1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df22:	3308      	adds	r3, #8
 800df24:	4618      	mov	r0, r3
 800df26:	f001 fe33 	bl	800fb90 <RCCEx_PLL2_Config>
 800df2a:	4603      	mov	r3, r0
 800df2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800df30:	e004      	b.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800df38:	e000      	b.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800df3a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800df3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10d      	bne.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800df44:	4b19      	ldr	r3, [pc, #100]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800df46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800df4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df56:	4915      	ldr	r1, [pc, #84]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800df58:	4313      	orrs	r3, r2
 800df5a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800df5e:	e003      	b.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df60:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800df64:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800df68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800df74:	603b      	str	r3, [r7, #0]
 800df76:	2300      	movs	r3, #0
 800df78:	607b      	str	r3, [r7, #4]
 800df7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800df7e:	460b      	mov	r3, r1
 800df80:	4313      	orrs	r3, r2
 800df82:	d00c      	beq.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800df84:	4b09      	ldr	r3, [pc, #36]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800df86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df8a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800df8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800df96:	4905      	ldr	r1, [pc, #20]	@ (800dfac <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800df98:	4313      	orrs	r3, r2
 800df9a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800df9e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	37e8      	adds	r7, #232	@ 0xe8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfac:	46020c00 	.word	0x46020c00

0800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b089      	sub	sp, #36	@ 0x24
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800dfb8:	4ba6      	ldr	r3, [pc, #664]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800dfba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfc0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800dfc2:	4ba4      	ldr	r3, [pc, #656]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800dfc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800dfcc:	4ba1      	ldr	r3, [pc, #644]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800dfce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd0:	0a1b      	lsrs	r3, r3, #8
 800dfd2:	f003 030f 	and.w	r3, r3, #15
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800dfda:	4b9e      	ldr	r3, [pc, #632]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfde:	091b      	lsrs	r3, r3, #4
 800dfe0:	f003 0301 	and.w	r3, r3, #1
 800dfe4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800dfe6:	4b9b      	ldr	r3, [pc, #620]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800dfe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfea:	08db      	lsrs	r3, r3, #3
 800dfec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	fb02 f303 	mul.w	r3, r2, r3
 800dff6:	ee07 3a90 	vmov	s15, r3
 800dffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dffe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2b03      	cmp	r3, #3
 800e006:	d062      	beq.n	800e0ce <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	2b03      	cmp	r3, #3
 800e00c:	f200 8081 	bhi.w	800e112 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d024      	beq.n	800e060 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	2b02      	cmp	r3, #2
 800e01a:	d17a      	bne.n	800e112 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	ee07 3a90 	vmov	s15, r3
 800e022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e026:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e258 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800e02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e02e:	4b89      	ldr	r3, [pc, #548]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e036:	ee07 3a90 	vmov	s15, r3
 800e03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e03e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e042:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e25c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e046:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e04e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e052:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e05a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e05e:	e08f      	b.n	800e180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e060:	4b7c      	ldr	r3, [pc, #496]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d005      	beq.n	800e078 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800e06c:	4b79      	ldr	r3, [pc, #484]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	0f1b      	lsrs	r3, r3, #28
 800e072:	f003 030f 	and.w	r3, r3, #15
 800e076:	e006      	b.n	800e086 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800e078:	4b76      	ldr	r3, [pc, #472]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e07a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e07e:	041b      	lsls	r3, r3, #16
 800e080:	0f1b      	lsrs	r3, r3, #28
 800e082:	f003 030f 	and.w	r3, r3, #15
 800e086:	4a76      	ldr	r2, [pc, #472]	@ (800e260 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800e088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e08c:	ee07 3a90 	vmov	s15, r3
 800e090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	ee07 3a90 	vmov	s15, r3
 800e09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	ee07 3a90 	vmov	s15, r3
 800e0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0ac:	ed97 6a02 	vldr	s12, [r7, #8]
 800e0b0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e25c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e0b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e0cc:	e058      	b.n	800e180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	ee07 3a90 	vmov	s15, r3
 800e0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0d8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e258 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800e0dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0e0:	4b5c      	ldr	r3, [pc, #368]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e0e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0e8:	ee07 3a90 	vmov	s15, r3
 800e0ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e0f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800e0f4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e25c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e0f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e0fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e104:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e10c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e110:	e036      	b.n	800e180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e112:	4b50      	ldr	r3, [pc, #320]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d005      	beq.n	800e12a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800e11e:	4b4d      	ldr	r3, [pc, #308]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	0f1b      	lsrs	r3, r3, #28
 800e124:	f003 030f 	and.w	r3, r3, #15
 800e128:	e006      	b.n	800e138 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800e12a:	4b4a      	ldr	r3, [pc, #296]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e12c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e130:	041b      	lsls	r3, r3, #16
 800e132:	0f1b      	lsrs	r3, r3, #28
 800e134:	f003 030f 	and.w	r3, r3, #15
 800e138:	4a49      	ldr	r2, [pc, #292]	@ (800e260 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800e13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e13e:	ee07 3a90 	vmov	s15, r3
 800e142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	ee07 3a90 	vmov	s15, r3
 800e14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	ee07 3a90 	vmov	s15, r3
 800e15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e15e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e162:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e25c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e16e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e172:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e17a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e17e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e180:	4b34      	ldr	r3, [pc, #208]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d017      	beq.n	800e1bc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e18c:	4b31      	ldr	r3, [pc, #196]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e190:	0a5b      	lsrs	r3, r3, #9
 800e192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e196:	ee07 3a90 	vmov	s15, r3
 800e19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e19e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e1a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e1a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1b2:	ee17 2a90 	vmov	r2, s15
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	601a      	str	r2, [r3, #0]
 800e1ba:	e002      	b.n	800e1c2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e1c2:	4b24      	ldr	r3, [pc, #144]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d017      	beq.n	800e1fe <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e1ce:	4b21      	ldr	r3, [pc, #132]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1d2:	0c1b      	lsrs	r3, r3, #16
 800e1d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1d8:	ee07 3a90 	vmov	s15, r3
 800e1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e1e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e1e4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e1e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1f4:	ee17 2a90 	vmov	r2, s15
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	605a      	str	r2, [r3, #4]
 800e1fc:	e002      	b.n	800e204 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2200      	movs	r2, #0
 800e202:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e204:	4b13      	ldr	r3, [pc, #76]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d017      	beq.n	800e240 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e210:	4b10      	ldr	r3, [pc, #64]	@ (800e254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e214:	0e1b      	lsrs	r3, r3, #24
 800e216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e21a:	ee07 3a90 	vmov	s15, r3
 800e21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e226:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e22a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e22e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e236:	ee17 2a90 	vmov	r2, s15
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e23e:	e002      	b.n	800e246 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	609a      	str	r2, [r3, #8]
}
 800e246:	bf00      	nop
 800e248:	3724      	adds	r7, #36	@ 0x24
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	46020c00 	.word	0x46020c00
 800e258:	4b742400 	.word	0x4b742400
 800e25c:	46000000 	.word	0x46000000
 800e260:	0801583c 	.word	0x0801583c

0800e264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e264:	b480      	push	{r7}
 800e266:	b089      	sub	sp, #36	@ 0x24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e26c:	4ba6      	ldr	r3, [pc, #664]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e274:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e276:	4ba4      	ldr	r3, [pc, #656]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e27a:	f003 0303 	and.w	r3, r3, #3
 800e27e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e280:	4ba1      	ldr	r3, [pc, #644]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e284:	0a1b      	lsrs	r3, r3, #8
 800e286:	f003 030f 	and.w	r3, r3, #15
 800e28a:	3301      	adds	r3, #1
 800e28c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e28e:	4b9e      	ldr	r3, [pc, #632]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e292:	091b      	lsrs	r3, r3, #4
 800e294:	f003 0301 	and.w	r3, r3, #1
 800e298:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e29a:	4b9b      	ldr	r3, [pc, #620]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e29e:	08db      	lsrs	r3, r3, #3
 800e2a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	fb02 f303 	mul.w	r3, r2, r3
 800e2aa:	ee07 3a90 	vmov	s15, r3
 800e2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2b2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b03      	cmp	r3, #3
 800e2ba:	d062      	beq.n	800e382 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	2b03      	cmp	r3, #3
 800e2c0:	f200 8081 	bhi.w	800e3c6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d024      	beq.n	800e314 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d17a      	bne.n	800e3c6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	ee07 3a90 	vmov	s15, r3
 800e2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2da:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e50c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800e2de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2e2:	4b89      	ldr	r3, [pc, #548]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2ea:	ee07 3a90 	vmov	s15, r3
 800e2ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2f6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e510 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e2fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e2fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e306:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e30e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e312:	e08f      	b.n	800e434 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e314:	4b7c      	ldr	r3, [pc, #496]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d005      	beq.n	800e32c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800e320:	4b79      	ldr	r3, [pc, #484]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	0f1b      	lsrs	r3, r3, #28
 800e326:	f003 030f 	and.w	r3, r3, #15
 800e32a:	e006      	b.n	800e33a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800e32c:	4b76      	ldr	r3, [pc, #472]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e32e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e332:	041b      	lsls	r3, r3, #16
 800e334:	0f1b      	lsrs	r3, r3, #28
 800e336:	f003 030f 	and.w	r3, r3, #15
 800e33a:	4a76      	ldr	r2, [pc, #472]	@ (800e514 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800e33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e340:	ee07 3a90 	vmov	s15, r3
 800e344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	ee07 3a90 	vmov	s15, r3
 800e34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	ee07 3a90 	vmov	s15, r3
 800e35c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e360:	ed97 6a02 	vldr	s12, [r7, #8]
 800e364:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e510 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e36c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e370:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e374:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e37c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e380:	e058      	b.n	800e434 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	ee07 3a90 	vmov	s15, r3
 800e388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e38c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e50c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800e390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e394:	4b5c      	ldr	r3, [pc, #368]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e39c:	ee07 3a90 	vmov	s15, r3
 800e3a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e3a4:	ed97 6a02 	vldr	s12, [r7, #8]
 800e3a8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e510 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e3ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e3b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e3b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e3b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e3bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e3c4:	e036      	b.n	800e434 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e3c6:	4b50      	ldr	r3, [pc, #320]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d005      	beq.n	800e3de <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800e3d2:	4b4d      	ldr	r3, [pc, #308]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	0f1b      	lsrs	r3, r3, #28
 800e3d8:	f003 030f 	and.w	r3, r3, #15
 800e3dc:	e006      	b.n	800e3ec <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800e3de:	4b4a      	ldr	r3, [pc, #296]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e3e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e3e4:	041b      	lsls	r3, r3, #16
 800e3e6:	0f1b      	lsrs	r3, r3, #28
 800e3e8:	f003 030f 	and.w	r3, r3, #15
 800e3ec:	4a49      	ldr	r2, [pc, #292]	@ (800e514 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800e3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3f2:	ee07 3a90 	vmov	s15, r3
 800e3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	ee07 3a90 	vmov	s15, r3
 800e400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	ee07 3a90 	vmov	s15, r3
 800e40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e412:	ed97 6a02 	vldr	s12, [r7, #8]
 800e416:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e510 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e426:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e42e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e432:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e434:	4b34      	ldr	r3, [pc, #208]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d017      	beq.n	800e470 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e440:	4b31      	ldr	r3, [pc, #196]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e444:	0a5b      	lsrs	r3, r3, #9
 800e446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e44a:	ee07 3a90 	vmov	s15, r3
 800e44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e456:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e45a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e45e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e466:	ee17 2a90 	vmov	r2, s15
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	e002      	b.n	800e476 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e476:	4b24      	ldr	r3, [pc, #144]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d017      	beq.n	800e4b2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e482:	4b21      	ldr	r3, [pc, #132]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e486:	0c1b      	lsrs	r3, r3, #16
 800e488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e48c:	ee07 3a90 	vmov	s15, r3
 800e490:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800e494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e498:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e49c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4a8:	ee17 2a90 	vmov	r2, s15
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	605a      	str	r2, [r3, #4]
 800e4b0:	e002      	b.n	800e4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800e4b8:	4b13      	ldr	r3, [pc, #76]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d017      	beq.n	800e4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e4c4:	4b10      	ldr	r3, [pc, #64]	@ (800e508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4c8:	0e1b      	lsrs	r3, r3, #24
 800e4ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4ce:	ee07 3a90 	vmov	s15, r3
 800e4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800e4d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e4da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e4de:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4ea:	ee17 2a90 	vmov	r2, s15
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e4f2:	e002      	b.n	800e4fa <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	609a      	str	r2, [r3, #8]
}
 800e4fa:	bf00      	nop
 800e4fc:	3724      	adds	r7, #36	@ 0x24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
 800e506:	bf00      	nop
 800e508:	46020c00 	.word	0x46020c00
 800e50c:	4b742400 	.word	0x4b742400
 800e510:	46000000 	.word	0x46000000
 800e514:	0801583c 	.word	0x0801583c

0800e518 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e518:	b480      	push	{r7}
 800e51a:	b089      	sub	sp, #36	@ 0x24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800e520:	4ba6      	ldr	r3, [pc, #664]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e528:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800e52a:	4ba4      	ldr	r3, [pc, #656]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e52e:	f003 0303 	and.w	r3, r3, #3
 800e532:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800e534:	4ba1      	ldr	r3, [pc, #644]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e538:	0a1b      	lsrs	r3, r3, #8
 800e53a:	f003 030f 	and.w	r3, r3, #15
 800e53e:	3301      	adds	r3, #1
 800e540:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800e542:	4b9e      	ldr	r3, [pc, #632]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e546:	091b      	lsrs	r3, r3, #4
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800e54e:	4b9b      	ldr	r3, [pc, #620]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e552:	08db      	lsrs	r3, r3, #3
 800e554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	fb02 f303 	mul.w	r3, r2, r3
 800e55e:	ee07 3a90 	vmov	s15, r3
 800e562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e566:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d062      	beq.n	800e636 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	2b03      	cmp	r3, #3
 800e574:	f200 8081 	bhi.w	800e67a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d024      	beq.n	800e5c8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d17a      	bne.n	800e67a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	ee07 3a90 	vmov	s15, r3
 800e58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800e592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e596:	4b89      	ldr	r3, [pc, #548]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e59e:	ee07 3a90 	vmov	s15, r3
 800e5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5aa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5c2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800e5c6:	e08f      	b.n	800e6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e5c8:	4b7c      	ldr	r3, [pc, #496]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d005      	beq.n	800e5e0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800e5d4:	4b79      	ldr	r3, [pc, #484]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	0f1b      	lsrs	r3, r3, #28
 800e5da:	f003 030f 	and.w	r3, r3, #15
 800e5de:	e006      	b.n	800e5ee <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800e5e0:	4b76      	ldr	r3, [pc, #472]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e5e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e5e6:	041b      	lsls	r3, r3, #16
 800e5e8:	0f1b      	lsrs	r3, r3, #28
 800e5ea:	f003 030f 	and.w	r3, r3, #15
 800e5ee:	4a76      	ldr	r2, [pc, #472]	@ (800e7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5f4:	ee07 3a90 	vmov	s15, r3
 800e5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	ee07 3a90 	vmov	s15, r3
 800e602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	ee07 3a90 	vmov	s15, r3
 800e610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e614:	ed97 6a02 	vldr	s12, [r7, #8]
 800e618:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e61c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e624:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e628:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e62c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e630:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e634:	e058      	b.n	800e6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	ee07 3a90 	vmov	s15, r3
 800e63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e640:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800e644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e648:	4b5c      	ldr	r3, [pc, #368]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e64a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e64c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e650:	ee07 3a90 	vmov	s15, r3
 800e654:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e658:	ed97 6a02 	vldr	s12, [r7, #8]
 800e65c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e660:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e664:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e668:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e66c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e670:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e674:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e678:	e036      	b.n	800e6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e67a:	4b50      	ldr	r3, [pc, #320]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e682:	2b00      	cmp	r3, #0
 800e684:	d005      	beq.n	800e692 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800e686:	4b4d      	ldr	r3, [pc, #308]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	0f1b      	lsrs	r3, r3, #28
 800e68c:	f003 030f 	and.w	r3, r3, #15
 800e690:	e006      	b.n	800e6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800e692:	4b4a      	ldr	r3, [pc, #296]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e698:	041b      	lsls	r3, r3, #16
 800e69a:	0f1b      	lsrs	r3, r3, #28
 800e69c:	f003 030f 	and.w	r3, r3, #15
 800e6a0:	4a49      	ldr	r2, [pc, #292]	@ (800e7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6a6:	ee07 3a90 	vmov	s15, r3
 800e6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	ee07 3a90 	vmov	s15, r3
 800e6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	ee07 3a90 	vmov	s15, r3
 800e6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6ca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e6e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e6e8:	4b34      	ldr	r3, [pc, #208]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d017      	beq.n	800e724 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e6f4:	4b31      	ldr	r3, [pc, #196]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e6f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6f8:	0a5b      	lsrs	r3, r3, #9
 800e6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6fe:	ee07 3a90 	vmov	s15, r3
 800e702:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e70a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e70e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e71a:	ee17 2a90 	vmov	r2, s15
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	e002      	b.n	800e72a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e72a:	4b24      	ldr	r3, [pc, #144]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e72e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e732:	2b00      	cmp	r3, #0
 800e734:	d017      	beq.n	800e766 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e736:	4b21      	ldr	r3, [pc, #132]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e73a:	0c1b      	lsrs	r3, r3, #16
 800e73c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e740:	ee07 3a90 	vmov	s15, r3
 800e744:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e748:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e74c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e750:	edd7 6a07 	vldr	s13, [r7, #28]
 800e754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e75c:	ee17 2a90 	vmov	r2, s15
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	605a      	str	r2, [r3, #4]
 800e764:	e002      	b.n	800e76c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2200      	movs	r2, #0
 800e76a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e76c:	4b13      	ldr	r3, [pc, #76]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e76e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e774:	2b00      	cmp	r3, #0
 800e776:	d017      	beq.n	800e7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e778:	4b10      	ldr	r3, [pc, #64]	@ (800e7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e77a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e77c:	0e1b      	lsrs	r3, r3, #24
 800e77e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e782:	ee07 3a90 	vmov	s15, r3
 800e786:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e78a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e78e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e792:	edd7 6a07 	vldr	s13, [r7, #28]
 800e796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e79e:	ee17 2a90 	vmov	r2, s15
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e7a6:	e002      	b.n	800e7ae <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	609a      	str	r2, [r3, #8]
}
 800e7ae:	bf00      	nop
 800e7b0:	3724      	adds	r7, #36	@ 0x24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	46020c00 	.word	0x46020c00
 800e7c0:	4b742400 	.word	0x4b742400
 800e7c4:	46000000 	.word	0x46000000
 800e7c8:	0801583c 	.word	0x0801583c

0800e7cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b08e      	sub	sp, #56	@ 0x38
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800e7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7da:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800e7de:	430b      	orrs	r3, r1
 800e7e0:	d145      	bne.n	800e86e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e7e2:	4ba7      	ldr	r3, [pc, #668]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e7e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e7e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7ec:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800e7ee:	4ba4      	ldr	r3, [pc, #656]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e7f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d108      	bne.n	800e80e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800e7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e802:	d104      	bne.n	800e80e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800e804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e808:	637b      	str	r3, [r7, #52]	@ 0x34
 800e80a:	f001 b9b3 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800e80e:	4b9c      	ldr	r3, [pc, #624]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e81c:	d114      	bne.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800e81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e824:	d110      	bne.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e826:	4b96      	ldr	r3, [pc, #600]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e82c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e834:	d103      	bne.n	800e83e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800e836:	23fa      	movs	r3, #250	@ 0xfa
 800e838:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e83a:	f001 b99b 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800e83e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e842:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e844:	f001 b996 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800e848:	4b8d      	ldr	r3, [pc, #564]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e854:	d107      	bne.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800e856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e85c:	d103      	bne.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800e85e:	4b89      	ldr	r3, [pc, #548]	@ (800ea84 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800e860:	637b      	str	r3, [r7, #52]	@ 0x34
 800e862:	f001 b987 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800e866:	2300      	movs	r3, #0
 800e868:	637b      	str	r3, [r7, #52]	@ 0x34
 800e86a:	f001 b983 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e86e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e872:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800e876:	430b      	orrs	r3, r1
 800e878:	d151      	bne.n	800e91e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e87a:	4b81      	ldr	r3, [pc, #516]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e87c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e880:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800e884:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e888:	2b80      	cmp	r3, #128	@ 0x80
 800e88a:	d035      	beq.n	800e8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800e88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e88e:	2b80      	cmp	r3, #128	@ 0x80
 800e890:	d841      	bhi.n	800e916 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e894:	2b60      	cmp	r3, #96	@ 0x60
 800e896:	d02a      	beq.n	800e8ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800e898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e89a:	2b60      	cmp	r3, #96	@ 0x60
 800e89c:	d83b      	bhi.n	800e916 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a0:	2b40      	cmp	r3, #64	@ 0x40
 800e8a2:	d009      	beq.n	800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a6:	2b40      	cmp	r3, #64	@ 0x40
 800e8a8:	d835      	bhi.n	800e916 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00c      	beq.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b2:	2b20      	cmp	r3, #32
 800e8b4:	d012      	beq.n	800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e8b6:	e02e      	b.n	800e916 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff fb77 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e8c6:	f001 b955 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8ca:	f107 0318 	add.w	r3, r7, #24
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7ff fcc8 	bl	800e264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e8d8:	f001 b94c 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8dc:	f107 030c 	add.w	r3, r7, #12
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff fe19 	bl	800e518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e8ea:	f001 b943 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e8ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e8f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e8f4:	f001 b93e 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e8f8:	4b61      	ldr	r3, [pc, #388]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e904:	d103      	bne.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800e906:	4b60      	ldr	r3, [pc, #384]	@ (800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e908:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e90a:	f001 b933 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800e90e:	2300      	movs	r3, #0
 800e910:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e912:	f001 b92f 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800e916:	2300      	movs	r3, #0
 800e918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e91a:	f001 b92b 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e922:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800e926:	430b      	orrs	r3, r1
 800e928:	d158      	bne.n	800e9dc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800e92a:	4b55      	ldr	r3, [pc, #340]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e92c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e930:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e934:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e93c:	d03b      	beq.n	800e9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e944:	d846      	bhi.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e94c:	d02e      	beq.n	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800e94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e950:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e954:	d83e      	bhi.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e95c:	d00b      	beq.n	800e976 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800e95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e964:	d836      	bhi.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00d      	beq.n	800e988 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800e96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e96e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e972:	d012      	beq.n	800e99a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800e974:	e02e      	b.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7ff fb18 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e984:	f001 b8f6 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e988:	f107 0318 	add.w	r3, r7, #24
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff fc69 	bl	800e264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e996:	f001 b8ed 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e99a:	f107 030c 	add.w	r3, r7, #12
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7ff fdba 	bl	800e518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e9a8:	f001 b8e4 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e9ac:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e9b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e9b2:	f001 b8df 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e9b6:	4b32      	ldr	r3, [pc, #200]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e9be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e9c2:	d103      	bne.n	800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800e9c4:	4b30      	ldr	r3, [pc, #192]	@ (800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e9c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e9c8:	f001 b8d4 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e9d0:	f001 b8d0 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e9d8:	f001 b8cc 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800e9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9e0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800e9e4:	430b      	orrs	r3, r1
 800e9e6:	d126      	bne.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800e9e8:	4b25      	ldr	r3, [pc, #148]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e9ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e9ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e9f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800e9f4:	4b22      	ldr	r3, [pc, #136]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e9fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea00:	d106      	bne.n	800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ea02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d103      	bne.n	800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ea08:	4b1f      	ldr	r3, [pc, #124]	@ (800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ea0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea0c:	f001 b8b2 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ea10:	4b1b      	ldr	r3, [pc, #108]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ea18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea1c:	d107      	bne.n	800ea2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ea1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea24:	d103      	bne.n	800ea2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ea26:	4b19      	ldr	r3, [pc, #100]	@ (800ea8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ea28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea2a:	f001 b8a3 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea32:	f001 b89f 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ea36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea3a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800ea3e:	430b      	orrs	r3, r1
 800ea40:	d16e      	bne.n	800eb20 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ea42:	4b0f      	ldr	r3, [pc, #60]	@ (800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea48:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ea4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea50:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ea54:	d03d      	beq.n	800ead2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ea56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea58:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ea5c:	d85c      	bhi.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea64:	d014      	beq.n	800ea90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ea66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea6c:	d854      	bhi.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d01f      	beq.n	800eab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800ea74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea7a:	d012      	beq.n	800eaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ea7c:	e04c      	b.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ea7e:	bf00      	nop
 800ea80:	46020c00 	.word	0x46020c00
 800ea84:	0007a120 	.word	0x0007a120
 800ea88:	00f42400 	.word	0x00f42400
 800ea8c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7ff fa8b 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ea9e:	f001 b869 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaa2:	f107 0318 	add.w	r3, r7, #24
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7ff fbdc 	bl	800e264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eab0:	f001 b860 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800eab4:	4ba7      	ldr	r3, [pc, #668]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eabc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eac0:	d103      	bne.n	800eaca <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800eac2:	4ba5      	ldr	r3, [pc, #660]	@ (800ed58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800eac4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eac6:	f001 b855 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800eaca:	2300      	movs	r3, #0
 800eacc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eace:	f001 b851 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ead2:	4ba0      	ldr	r3, [pc, #640]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f003 0320 	and.w	r3, r3, #32
 800eada:	2b20      	cmp	r3, #32
 800eadc:	d118      	bne.n	800eb10 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eade:	4b9d      	ldr	r3, [pc, #628]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d005      	beq.n	800eaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800eaea:	4b9a      	ldr	r3, [pc, #616]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	0e1b      	lsrs	r3, r3, #24
 800eaf0:	f003 030f 	and.w	r3, r3, #15
 800eaf4:	e006      	b.n	800eb04 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800eaf6:	4b97      	ldr	r3, [pc, #604]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eaf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800eafc:	041b      	lsls	r3, r3, #16
 800eafe:	0e1b      	lsrs	r3, r3, #24
 800eb00:	f003 030f 	and.w	r3, r3, #15
 800eb04:	4a95      	ldr	r2, [pc, #596]	@ (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800eb06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eb0c:	f001 b832 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800eb10:	2300      	movs	r3, #0
 800eb12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb14:	f001 b82e 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb1c:	f001 b82a 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800eb20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb24:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800eb28:	430b      	orrs	r3, r1
 800eb2a:	d17f      	bne.n	800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800eb2c:	4b89      	ldr	r3, [pc, #548]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eb32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eb36:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800eb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d165      	bne.n	800ec0a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800eb3e:	4b85      	ldr	r3, [pc, #532]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eb44:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800eb48:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800eb50:	d034      	beq.n	800ebbc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800eb58:	d853      	bhi.n	800ec02 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eb60:	d00b      	beq.n	800eb7a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800eb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eb68:	d84b      	bhi.n	800ec02 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d016      	beq.n	800eb9e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800eb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eb76:	d009      	beq.n	800eb8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800eb78:	e043      	b.n	800ec02 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff fa16 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb86:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800eb88:	f000 bff4 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb8c:	f107 0318 	add.w	r3, r7, #24
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff fb67 	bl	800e264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800eb9a:	f000 bfeb 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800eb9e:	4b6d      	ldr	r3, [pc, #436]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ebaa:	d103      	bne.n	800ebb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800ebac:	4b6a      	ldr	r3, [pc, #424]	@ (800ed58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ebae:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ebb0:	f000 bfe0 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ebb8:	f000 bfdc 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ebbc:	4b65      	ldr	r3, [pc, #404]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f003 0320 	and.w	r3, r3, #32
 800ebc4:	2b20      	cmp	r3, #32
 800ebc6:	d118      	bne.n	800ebfa <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ebc8:	4b62      	ldr	r3, [pc, #392]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800ebd4:	4b5f      	ldr	r3, [pc, #380]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	0e1b      	lsrs	r3, r3, #24
 800ebda:	f003 030f 	and.w	r3, r3, #15
 800ebde:	e006      	b.n	800ebee <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ebe0:	4b5c      	ldr	r3, [pc, #368]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ebe6:	041b      	lsls	r3, r3, #16
 800ebe8:	0e1b      	lsrs	r3, r3, #24
 800ebea:	f003 030f 	and.w	r3, r3, #15
 800ebee:	4a5b      	ldr	r2, [pc, #364]	@ (800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ebf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebf4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ebf6:	f000 bfbd 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ebfe:	f000 bfb9 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800ec02:	2300      	movs	r3, #0
 800ec04:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ec06:	f000 bfb5 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ec10:	d108      	bne.n	800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7ff f9ca 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec20:	f000 bfa8 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800ec24:	2300      	movs	r3, #0
 800ec26:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec28:	f000 bfa4 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800ec2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec30:	1e51      	subs	r1, r2, #1
 800ec32:	430b      	orrs	r3, r1
 800ec34:	d136      	bne.n	800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ec36:	4b47      	ldr	r3, [pc, #284]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ec3c:	f003 0303 	and.w	r3, r3, #3
 800ec40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800ec42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d104      	bne.n	800ec52 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800ec48:	f7fe fb44 	bl	800d2d4 <HAL_RCC_GetPCLK2Freq>
 800ec4c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ec4e:	f000 bf91 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800ec52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d104      	bne.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ec58:	f7fe fa0c 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800ec5c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ec5e:	f000 bf89 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ec62:	4b3c      	ldr	r3, [pc, #240]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec6e:	d106      	bne.n	800ec7e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ec70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d103      	bne.n	800ec7e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800ec76:	4b3a      	ldr	r3, [pc, #232]	@ (800ed60 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ec78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec7a:	f000 bf7b 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ec7e:	4b35      	ldr	r3, [pc, #212]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ec84:	f003 0302 	and.w	r3, r3, #2
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d107      	bne.n	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d104      	bne.n	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800ec92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec98:	f000 bf6c 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800eca0:	f000 bf68 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800eca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eca8:	1e91      	subs	r1, r2, #2
 800ecaa:	430b      	orrs	r3, r1
 800ecac:	d136      	bne.n	800ed1c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ecae:	4b29      	ldr	r3, [pc, #164]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ecb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ecb4:	f003 030c 	and.w	r3, r3, #12
 800ecb8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ecba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d104      	bne.n	800ecca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ecc0:	f7fe faf4 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800ecc4:	6378      	str	r0, [r7, #52]	@ 0x34
 800ecc6:	f000 bf55 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ecca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eccc:	2b04      	cmp	r3, #4
 800ecce:	d104      	bne.n	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ecd0:	f7fe f9d0 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800ecd4:	6378      	str	r0, [r7, #52]	@ 0x34
 800ecd6:	f000 bf4d 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ecda:	4b1e      	ldr	r3, [pc, #120]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ece2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ece6:	d106      	bne.n	800ecf6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ece8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecea:	2b08      	cmp	r3, #8
 800ecec:	d103      	bne.n	800ecf6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ecee:	4b1c      	ldr	r3, [pc, #112]	@ (800ed60 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ecf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecf2:	f000 bf3f 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ecf6:	4b17      	ldr	r3, [pc, #92]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ecf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ecfc:	f003 0302 	and.w	r3, r3, #2
 800ed00:	2b02      	cmp	r3, #2
 800ed02:	d107      	bne.n	800ed14 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ed04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed06:	2b0c      	cmp	r3, #12
 800ed08:	d104      	bne.n	800ed14 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ed0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed10:	f000 bf30 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ed14:	2300      	movs	r3, #0
 800ed16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed18:	f000 bf2c 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ed1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed20:	1f11      	subs	r1, r2, #4
 800ed22:	430b      	orrs	r3, r1
 800ed24:	d13f      	bne.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ed26:	4b0b      	ldr	r3, [pc, #44]	@ (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ed30:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ed32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d104      	bne.n	800ed42 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ed38:	f7fe fab8 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800ed3c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ed3e:	f000 bf19 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ed42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed44:	2b10      	cmp	r3, #16
 800ed46:	d10d      	bne.n	800ed64 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ed48:	f7fe f994 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800ed4c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ed4e:	f000 bf11 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800ed52:	bf00      	nop
 800ed54:	46020c00 	.word	0x46020c00
 800ed58:	02dc6c00 	.word	0x02dc6c00
 800ed5c:	0801583c 	.word	0x0801583c
 800ed60:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ed64:	4ba6      	ldr	r3, [pc, #664]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed70:	d106      	bne.n	800ed80 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ed72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed74:	2b20      	cmp	r3, #32
 800ed76:	d103      	bne.n	800ed80 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ed78:	4ba2      	ldr	r3, [pc, #648]	@ (800f004 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ed7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed7c:	f000 befa 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ed80:	4b9f      	ldr	r3, [pc, #636]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ed82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ed86:	f003 0302 	and.w	r3, r3, #2
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d107      	bne.n	800ed9e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed90:	2b30      	cmp	r3, #48	@ 0x30
 800ed92:	d104      	bne.n	800ed9e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ed94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed98:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed9a:	f000 beeb 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	637b      	str	r3, [r7, #52]	@ 0x34
 800eda2:	f000 bee7 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800eda6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edaa:	f1a2 0108 	sub.w	r1, r2, #8
 800edae:	430b      	orrs	r3, r1
 800edb0:	d136      	bne.n	800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800edb2:	4b93      	ldr	r3, [pc, #588]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800edb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800edb8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800edbc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800edbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d104      	bne.n	800edce <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800edc4:	f7fe fa72 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800edc8:	6378      	str	r0, [r7, #52]	@ 0x34
 800edca:	f000 bed3 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800edce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd0:	2b40      	cmp	r3, #64	@ 0x40
 800edd2:	d104      	bne.n	800edde <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800edd4:	f7fe f94e 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800edd8:	6378      	str	r0, [r7, #52]	@ 0x34
 800edda:	f000 becb 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800edde:	4b88      	ldr	r3, [pc, #544]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ede6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800edea:	d106      	bne.n	800edfa <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800edec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edee:	2b80      	cmp	r3, #128	@ 0x80
 800edf0:	d103      	bne.n	800edfa <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800edf2:	4b84      	ldr	r3, [pc, #528]	@ (800f004 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800edf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800edf6:	f000 bebd 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800edfa:	4b81      	ldr	r3, [pc, #516]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800edfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ee00:	f003 0302 	and.w	r3, r3, #2
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	d107      	bne.n	800ee18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ee08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ee0c:	d104      	bne.n	800ee18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800ee0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee14:	f000 beae 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee1c:	f000 beaa 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800ee20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee24:	f1a2 0110 	sub.w	r1, r2, #16
 800ee28:	430b      	orrs	r3, r1
 800ee2a:	d139      	bne.n	800eea0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ee2c:	4b74      	ldr	r3, [pc, #464]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ee2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ee36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ee38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d104      	bne.n	800ee48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ee3e:	f7fe fa35 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800ee42:	6378      	str	r0, [r7, #52]	@ 0x34
 800ee44:	f000 be96 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800ee48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee4e:	d104      	bne.n	800ee5a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ee50:	f7fe f910 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800ee54:	6378      	str	r0, [r7, #52]	@ 0x34
 800ee56:	f000 be8d 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ee5a:	4b69      	ldr	r3, [pc, #420]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee66:	d107      	bne.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800ee68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee6e:	d103      	bne.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800ee70:	4b64      	ldr	r3, [pc, #400]	@ (800f004 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ee72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee74:	f000 be7e 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ee78:	4b61      	ldr	r3, [pc, #388]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ee7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ee7e:	f003 0302 	and.w	r3, r3, #2
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	d108      	bne.n	800ee98 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ee86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ee8c:	d104      	bne.n	800ee98 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ee8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee94:	f000 be6e 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee9c:	f000 be6a 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800eea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eea4:	f1a2 0120 	sub.w	r1, r2, #32
 800eea8:	430b      	orrs	r3, r1
 800eeaa:	d158      	bne.n	800ef5e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800eeac:	4b54      	ldr	r3, [pc, #336]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800eeae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800eeb2:	f003 0307 	and.w	r3, r3, #7
 800eeb6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d104      	bne.n	800eec8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800eebe:	f7fe fa1d 	bl	800d2fc <HAL_RCC_GetPCLK3Freq>
 800eec2:	6378      	str	r0, [r7, #52]	@ 0x34
 800eec4:	f000 be56 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800eec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d104      	bne.n	800eed8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eece:	f7fe f8d1 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800eed2:	6378      	str	r0, [r7, #52]	@ 0x34
 800eed4:	f000 be4e 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800eed8:	4b49      	ldr	r3, [pc, #292]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eee4:	d106      	bne.n	800eef4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800eee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d103      	bne.n	800eef4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800eeec:	4b45      	ldr	r3, [pc, #276]	@ (800f004 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800eeee:	637b      	str	r3, [r7, #52]	@ 0x34
 800eef0:	f000 be40 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800eef4:	4b42      	ldr	r3, [pc, #264]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800eef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eefa:	f003 0302 	and.w	r3, r3, #2
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d107      	bne.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800ef02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d104      	bne.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800ef08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef0e:	f000 be31 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ef12:	4b3b      	ldr	r3, [pc, #236]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f003 0320 	and.w	r3, r3, #32
 800ef1a:	2b20      	cmp	r3, #32
 800ef1c:	d11b      	bne.n	800ef56 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef20:	2b04      	cmp	r3, #4
 800ef22:	d118      	bne.n	800ef56 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ef24:	4b36      	ldr	r3, [pc, #216]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d005      	beq.n	800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ef30:	4b33      	ldr	r3, [pc, #204]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	0e1b      	lsrs	r3, r3, #24
 800ef36:	f003 030f 	and.w	r3, r3, #15
 800ef3a:	e006      	b.n	800ef4a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800ef3c:	4b30      	ldr	r3, [pc, #192]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ef3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ef42:	041b      	lsls	r3, r3, #16
 800ef44:	0e1b      	lsrs	r3, r3, #24
 800ef46:	f003 030f 	and.w	r3, r3, #15
 800ef4a:	4a2f      	ldr	r2, [pc, #188]	@ (800f008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef52:	f000 be0f 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ef56:	2300      	movs	r3, #0
 800ef58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef5a:	f000 be0b 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ef5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef62:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ef66:	430b      	orrs	r3, r1
 800ef68:	d172      	bne.n	800f050 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ef6a:	4b25      	ldr	r3, [pc, #148]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ef6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ef70:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ef74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ef76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef7c:	d104      	bne.n	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ef7e:	f7fe f879 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800ef82:	6378      	str	r0, [r7, #52]	@ 0x34
 800ef84:	f000 bdf6 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800ef88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef8e:	d108      	bne.n	800efa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef90:	f107 0318 	add.w	r3, r7, #24
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff f965 	bl	800e264 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef9e:	f000 bde9 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800efa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d104      	bne.n	800efb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800efa8:	f7fe f966 	bl	800d278 <HAL_RCC_GetHCLKFreq>
 800efac:	6378      	str	r0, [r7, #52]	@ 0x34
 800efae:	f000 bde1 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800efb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800efb8:	d128      	bne.n	800f00c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800efba:	4b11      	ldr	r3, [pc, #68]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f003 0320 	and.w	r3, r3, #32
 800efc2:	2b20      	cmp	r3, #32
 800efc4:	d118      	bne.n	800eff8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800efc6:	4b0e      	ldr	r3, [pc, #56]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800efc8:	689b      	ldr	r3, [r3, #8]
 800efca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d005      	beq.n	800efde <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800efd2:	4b0b      	ldr	r3, [pc, #44]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	0e1b      	lsrs	r3, r3, #24
 800efd8:	f003 030f 	and.w	r3, r3, #15
 800efdc:	e006      	b.n	800efec <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800efde:	4b08      	ldr	r3, [pc, #32]	@ (800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800efe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800efe4:	041b      	lsls	r3, r3, #16
 800efe6:	0e1b      	lsrs	r3, r3, #24
 800efe8:	f003 030f 	and.w	r3, r3, #15
 800efec:	4a06      	ldr	r2, [pc, #24]	@ (800f008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800efee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800eff4:	f000 bdbe 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800eff8:	2300      	movs	r3, #0
 800effa:	637b      	str	r3, [r7, #52]	@ 0x34
 800effc:	f000 bdba 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f000:	46020c00 	.word	0x46020c00
 800f004:	00f42400 	.word	0x00f42400
 800f008:	0801583c 	.word	0x0801583c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f00c:	4baf      	ldr	r3, [pc, #700]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f018:	d107      	bne.n	800f02a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800f01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f01c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f020:	d103      	bne.n	800f02a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800f022:	4bab      	ldr	r3, [pc, #684]	@ (800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f024:	637b      	str	r3, [r7, #52]	@ 0x34
 800f026:	f000 bda5 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f02a:	4ba8      	ldr	r3, [pc, #672]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f036:	d107      	bne.n	800f048 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800f038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f03a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f03e:	d103      	bne.n	800f048 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800f040:	4ba3      	ldr	r3, [pc, #652]	@ (800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f042:	637b      	str	r3, [r7, #52]	@ 0x34
 800f044:	f000 bd96 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f048:	2300      	movs	r3, #0
 800f04a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f04c:	f000 bd92 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f050:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f054:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f058:	430b      	orrs	r3, r1
 800f05a:	d158      	bne.n	800f10e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f05c:	4b9b      	ldr	r3, [pc, #620]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f05e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f062:	f003 0307 	and.w	r3, r3, #7
 800f066:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f06a:	2b04      	cmp	r3, #4
 800f06c:	d84b      	bhi.n	800f106 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800f06e:	a201      	add	r2, pc, #4	@ (adr r2, 800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800f070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f074:	0800f0ad 	.word	0x0800f0ad
 800f078:	0800f089 	.word	0x0800f089
 800f07c:	0800f09b 	.word	0x0800f09b
 800f080:	0800f0b7 	.word	0x0800f0b7
 800f084:	0800f0c1 	.word	0x0800f0c1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fe ff8f 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f096:	f000 bd6d 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f09a:	f107 030c 	add.w	r3, r7, #12
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fa3a 	bl	800e518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f0a8:	f000 bd64 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f0ac:	f7fe f8e4 	bl	800d278 <HAL_RCC_GetHCLKFreq>
 800f0b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f0b2:	f000 bd5f 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f0b6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f0ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f0bc:	f000 bd5a 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f0c0:	4b82      	ldr	r3, [pc, #520]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f003 0320 	and.w	r3, r3, #32
 800f0c8:	2b20      	cmp	r3, #32
 800f0ca:	d118      	bne.n	800f0fe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f0cc:	4b7f      	ldr	r3, [pc, #508]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d005      	beq.n	800f0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800f0d8:	4b7c      	ldr	r3, [pc, #496]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	0e1b      	lsrs	r3, r3, #24
 800f0de:	f003 030f 	and.w	r3, r3, #15
 800f0e2:	e006      	b.n	800f0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800f0e4:	4b79      	ldr	r3, [pc, #484]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f0e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f0ea:	041b      	lsls	r3, r3, #16
 800f0ec:	0e1b      	lsrs	r3, r3, #24
 800f0ee:	f003 030f 	and.w	r3, r3, #15
 800f0f2:	4a78      	ldr	r2, [pc, #480]	@ (800f2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f0fa:	f000 bd3b 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f0fe:	2300      	movs	r3, #0
 800f100:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f102:	f000 bd37 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f10a:	f000 bd33 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f10e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f112:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800f116:	430b      	orrs	r3, r1
 800f118:	d167      	bne.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f11a:	4b6c      	ldr	r3, [pc, #432]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f11c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f120:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f124:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f128:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f12c:	d036      	beq.n	800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800f12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f130:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f134:	d855      	bhi.n	800f1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f138:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f13c:	d029      	beq.n	800f192 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f144:	d84d      	bhi.n	800f1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f14c:	d013      	beq.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800f14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f154:	d845      	bhi.n	800f1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d015      	beq.n	800f188 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800f15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f162:	d13e      	bne.n	800f1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fe ff21 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f170:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f172:	f000 bcff 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f176:	f107 030c 	add.w	r3, r7, #12
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff f9cc 	bl	800e518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f184:	f000 bcf6 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f188:	f7fe f876 	bl	800d278 <HAL_RCC_GetHCLKFreq>
 800f18c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f18e:	f000 bcf1 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f192:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f198:	f000 bcec 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f19c:	4b4b      	ldr	r3, [pc, #300]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f003 0320 	and.w	r3, r3, #32
 800f1a4:	2b20      	cmp	r3, #32
 800f1a6:	d118      	bne.n	800f1da <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f1a8:	4b48      	ldr	r3, [pc, #288]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d005      	beq.n	800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800f1b4:	4b45      	ldr	r3, [pc, #276]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	0e1b      	lsrs	r3, r3, #24
 800f1ba:	f003 030f 	and.w	r3, r3, #15
 800f1be:	e006      	b.n	800f1ce <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f1c0:	4b42      	ldr	r3, [pc, #264]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f1c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f1c6:	041b      	lsls	r3, r3, #16
 800f1c8:	0e1b      	lsrs	r3, r3, #24
 800f1ca:	f003 030f 	and.w	r3, r3, #15
 800f1ce:	4a41      	ldr	r2, [pc, #260]	@ (800f2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f1d6:	f000 bccd 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f1de:	f000 bcc9 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f1e6:	f000 bcc5 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ee:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800f1f2:	430b      	orrs	r3, r1
 800f1f4:	d14c      	bne.n	800f290 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f1f6:	4b35      	ldr	r3, [pc, #212]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f1f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f1fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f200:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f204:	2b00      	cmp	r3, #0
 800f206:	d104      	bne.n	800f212 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f208:	f7fe f850 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800f20c:	6378      	str	r0, [r7, #52]	@ 0x34
 800f20e:	f000 bcb1 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f218:	d104      	bne.n	800f224 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f21a:	f7fd ff2b 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800f21e:	6378      	str	r0, [r7, #52]	@ 0x34
 800f220:	f000 bca8 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f224:	4b29      	ldr	r3, [pc, #164]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f22c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f230:	d107      	bne.n	800f242 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f238:	d103      	bne.n	800f242 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800f23a:	4b25      	ldr	r3, [pc, #148]	@ (800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800f23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f23e:	f000 bc99 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f242:	4b22      	ldr	r3, [pc, #136]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f003 0320 	and.w	r3, r3, #32
 800f24a:	2b20      	cmp	r3, #32
 800f24c:	d11c      	bne.n	800f288 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800f24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f250:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f254:	d118      	bne.n	800f288 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f256:	4b1d      	ldr	r3, [pc, #116]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d005      	beq.n	800f26e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800f262:	4b1a      	ldr	r3, [pc, #104]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	0e1b      	lsrs	r3, r3, #24
 800f268:	f003 030f 	and.w	r3, r3, #15
 800f26c:	e006      	b.n	800f27c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800f26e:	4b17      	ldr	r3, [pc, #92]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f274:	041b      	lsls	r3, r3, #16
 800f276:	0e1b      	lsrs	r3, r3, #24
 800f278:	f003 030f 	and.w	r3, r3, #15
 800f27c:	4a15      	ldr	r2, [pc, #84]	@ (800f2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800f27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f282:	637b      	str	r3, [r7, #52]	@ 0x34
 800f284:	f000 bc76 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f288:	2300      	movs	r3, #0
 800f28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f28c:	f000 bc72 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f290:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f294:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800f298:	430b      	orrs	r3, r1
 800f29a:	d153      	bne.n	800f344 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f29c:	4b0b      	ldr	r3, [pc, #44]	@ (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800f29e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f2a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f2a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d104      	bne.n	800f2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f2ae:	f7fd fffd 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800f2b2:	6378      	str	r0, [r7, #52]	@ 0x34
 800f2b4:	f000 bc5e 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2be:	d10b      	bne.n	800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f2c0:	f7fd fed8 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800f2c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800f2c6:	f000 bc55 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f2ca:	bf00      	nop
 800f2cc:	46020c00 	.word	0x46020c00
 800f2d0:	00f42400 	.word	0x00f42400
 800f2d4:	0801583c 	.word	0x0801583c
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f2d8:	4ba1      	ldr	r3, [pc, #644]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f2e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2e4:	d107      	bne.n	800f2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2ec:	d103      	bne.n	800f2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800f2ee:	4b9d      	ldr	r3, [pc, #628]	@ (800f564 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f2f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2f2:	f000 bc3f 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f2f6:	4b9a      	ldr	r3, [pc, #616]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f003 0320 	and.w	r3, r3, #32
 800f2fe:	2b20      	cmp	r3, #32
 800f300:	d11c      	bne.n	800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800f302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f304:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f308:	d118      	bne.n	800f33c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f30a:	4b95      	ldr	r3, [pc, #596]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f312:	2b00      	cmp	r3, #0
 800f314:	d005      	beq.n	800f322 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800f316:	4b92      	ldr	r3, [pc, #584]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	0e1b      	lsrs	r3, r3, #24
 800f31c:	f003 030f 	and.w	r3, r3, #15
 800f320:	e006      	b.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800f322:	4b8f      	ldr	r3, [pc, #572]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f328:	041b      	lsls	r3, r3, #16
 800f32a:	0e1b      	lsrs	r3, r3, #24
 800f32c:	f003 030f 	and.w	r3, r3, #15
 800f330:	4a8d      	ldr	r2, [pc, #564]	@ (800f568 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f336:	637b      	str	r3, [r7, #52]	@ 0x34
 800f338:	f000 bc1c 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f33c:	2300      	movs	r3, #0
 800f33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f340:	f000 bc18 	b.w	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f348:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f34c:	430b      	orrs	r3, r1
 800f34e:	d151      	bne.n	800f3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f350:	4b83      	ldr	r3, [pc, #524]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f356:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f35a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f35e:	2bc0      	cmp	r3, #192	@ 0xc0
 800f360:	d024      	beq.n	800f3ac <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800f362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f364:	2bc0      	cmp	r3, #192	@ 0xc0
 800f366:	d842      	bhi.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800f368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f36a:	2b80      	cmp	r3, #128	@ 0x80
 800f36c:	d00d      	beq.n	800f38a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800f36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f370:	2b80      	cmp	r3, #128	@ 0x80
 800f372:	d83c      	bhi.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800f374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f376:	2b00      	cmp	r3, #0
 800f378:	d003      	beq.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800f37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f37c:	2b40      	cmp	r3, #64	@ 0x40
 800f37e:	d011      	beq.n	800f3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800f380:	e035      	b.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f382:	f7fd ffbb 	bl	800d2fc <HAL_RCC_GetPCLK3Freq>
 800f386:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f388:	e3f4      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f38a:	4b75      	ldr	r3, [pc, #468]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f396:	d102      	bne.n	800f39e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800f398:	4b72      	ldr	r3, [pc, #456]	@ (800f564 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f39a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f39c:	e3ea      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3a2:	e3e7      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f3a4:	f7fd fe66 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800f3a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f3aa:	e3e3      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f3ac:	4b6c      	ldr	r3, [pc, #432]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f003 0320 	and.w	r3, r3, #32
 800f3b4:	2b20      	cmp	r3, #32
 800f3b6:	d117      	bne.n	800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f3b8:	4b69      	ldr	r3, [pc, #420]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800f3c4:	4b66      	ldr	r3, [pc, #408]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	0e1b      	lsrs	r3, r3, #24
 800f3ca:	f003 030f 	and.w	r3, r3, #15
 800f3ce:	e006      	b.n	800f3de <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800f3d0:	4b63      	ldr	r3, [pc, #396]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f3d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f3d6:	041b      	lsls	r3, r3, #16
 800f3d8:	0e1b      	lsrs	r3, r3, #24
 800f3da:	f003 030f 	and.w	r3, r3, #15
 800f3de:	4a62      	ldr	r2, [pc, #392]	@ (800f568 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f3e6:	e3c5      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3ec:	e3c2      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3f2:	e3bf      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f3f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3f8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800f3fc:	430b      	orrs	r3, r1
 800f3fe:	d147      	bne.n	800f490 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f400:	4b57      	ldr	r3, [pc, #348]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f406:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f40a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d103      	bne.n	800f41a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f412:	f7fd ff4b 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800f416:	6378      	str	r0, [r7, #52]	@ 0x34
 800f418:	e3ac      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f420:	d103      	bne.n	800f42a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f422:	f7fd fe27 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800f426:	6378      	str	r0, [r7, #52]	@ 0x34
 800f428:	e3a4      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f42a:	4b4d      	ldr	r3, [pc, #308]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f436:	d106      	bne.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800f438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f43a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f43e:	d102      	bne.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800f440:	4b48      	ldr	r3, [pc, #288]	@ (800f564 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f442:	637b      	str	r3, [r7, #52]	@ 0x34
 800f444:	e396      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f446:	4b46      	ldr	r3, [pc, #280]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f003 0320 	and.w	r3, r3, #32
 800f44e:	2b20      	cmp	r3, #32
 800f450:	d11b      	bne.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800f452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f454:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f458:	d117      	bne.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f45a:	4b41      	ldr	r3, [pc, #260]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f462:	2b00      	cmp	r3, #0
 800f464:	d005      	beq.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800f466:	4b3e      	ldr	r3, [pc, #248]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	0e1b      	lsrs	r3, r3, #24
 800f46c:	f003 030f 	and.w	r3, r3, #15
 800f470:	e006      	b.n	800f480 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800f472:	4b3b      	ldr	r3, [pc, #236]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f478:	041b      	lsls	r3, r3, #16
 800f47a:	0e1b      	lsrs	r3, r3, #24
 800f47c:	f003 030f 	and.w	r3, r3, #15
 800f480:	4a39      	ldr	r2, [pc, #228]	@ (800f568 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f486:	637b      	str	r3, [r7, #52]	@ 0x34
 800f488:	e374      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800f48a:	2300      	movs	r3, #0
 800f48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f48e:	e371      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800f490:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f494:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f498:	430b      	orrs	r3, r1
 800f49a:	d16a      	bne.n	800f572 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800f49c:	4b30      	ldr	r3, [pc, #192]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f49e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f4a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f4a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800f4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d120      	bne.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f4ae:	4b2c      	ldr	r3, [pc, #176]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f003 0320 	and.w	r3, r3, #32
 800f4b6:	2b20      	cmp	r3, #32
 800f4b8:	d117      	bne.n	800f4ea <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f4ba:	4b29      	ldr	r3, [pc, #164]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f4bc:	689b      	ldr	r3, [r3, #8]
 800f4be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d005      	beq.n	800f4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800f4c6:	4b26      	ldr	r3, [pc, #152]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	0e1b      	lsrs	r3, r3, #24
 800f4cc:	f003 030f 	and.w	r3, r3, #15
 800f4d0:	e006      	b.n	800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800f4d2:	4b23      	ldr	r3, [pc, #140]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f4d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f4d8:	041b      	lsls	r3, r3, #16
 800f4da:	0e1b      	lsrs	r3, r3, #24
 800f4dc:	f003 030f 	and.w	r3, r3, #15
 800f4e0:	4a21      	ldr	r2, [pc, #132]	@ (800f568 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800f4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4e8:	e344      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ee:	e341      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800f4f0:	4b1b      	ldr	r3, [pc, #108]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f4f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f4f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4fe:	d112      	bne.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800f500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f506:	d10e      	bne.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f508:	4b15      	ldr	r3, [pc, #84]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f50a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f50e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f516:	d102      	bne.n	800f51e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800f518:	23fa      	movs	r3, #250	@ 0xfa
 800f51a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f51c:	e32a      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f51e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f522:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f524:	e326      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800f526:	4b0e      	ldr	r3, [pc, #56]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f52e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f532:	d106      	bne.n	800f542 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800f534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f53a:	d102      	bne.n	800f542 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800f53c:	4b09      	ldr	r3, [pc, #36]	@ (800f564 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800f53e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f540:	e318      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800f542:	4b07      	ldr	r3, [pc, #28]	@ (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800f544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f548:	f003 0302 	and.w	r3, r3, #2
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d10d      	bne.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800f550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f556:	d109      	bne.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800f558:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f55c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f55e:	e309      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f560:	46020c00 	.word	0x46020c00
 800f564:	00f42400 	.word	0x00f42400
 800f568:	0801583c 	.word	0x0801583c
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800f56c:	2300      	movs	r3, #0
 800f56e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f570:	e300      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800f572:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f576:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800f57a:	430b      	orrs	r3, r1
 800f57c:	d164      	bne.n	800f648 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f57e:	4ba2      	ldr	r3, [pc, #648]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f584:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f588:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800f58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d120      	bne.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f590:	4b9d      	ldr	r3, [pc, #628]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f003 0320 	and.w	r3, r3, #32
 800f598:	2b20      	cmp	r3, #32
 800f59a:	d117      	bne.n	800f5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f59c:	4b9a      	ldr	r3, [pc, #616]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d005      	beq.n	800f5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800f5a8:	4b97      	ldr	r3, [pc, #604]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	0e1b      	lsrs	r3, r3, #24
 800f5ae:	f003 030f 	and.w	r3, r3, #15
 800f5b2:	e006      	b.n	800f5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800f5b4:	4b94      	ldr	r3, [pc, #592]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f5b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f5ba:	041b      	lsls	r3, r3, #16
 800f5bc:	0e1b      	lsrs	r3, r3, #24
 800f5be:	f003 030f 	and.w	r3, r3, #15
 800f5c2:	4a92      	ldr	r2, [pc, #584]	@ (800f80c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800f5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5ca:	e2d3      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5d0:	e2d0      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800f5d2:	4b8d      	ldr	r3, [pc, #564]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f5d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f5d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f5e0:	d112      	bne.n	800f608 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f5e8:	d10e      	bne.n	800f608 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f5ea:	4b87      	ldr	r3, [pc, #540]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f5ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f5f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f5f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5f8:	d102      	bne.n	800f600 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800f5fa:	23fa      	movs	r3, #250	@ 0xfa
 800f5fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f5fe:	e2b9      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f600:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f604:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f606:	e2b5      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800f608:	4b7f      	ldr	r3, [pc, #508]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f614:	d106      	bne.n	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800f616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f61c:	d102      	bne.n	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800f61e:	4b7c      	ldr	r3, [pc, #496]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f620:	637b      	str	r3, [r7, #52]	@ 0x34
 800f622:	e2a7      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800f624:	4b78      	ldr	r3, [pc, #480]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f62a:	f003 0302 	and.w	r3, r3, #2
 800f62e:	2b02      	cmp	r3, #2
 800f630:	d107      	bne.n	800f642 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800f632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f634:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f638:	d103      	bne.n	800f642 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800f63a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f63e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f640:	e298      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800f642:	2300      	movs	r3, #0
 800f644:	637b      	str	r3, [r7, #52]	@ 0x34
 800f646:	e295      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800f648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f64c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f650:	430b      	orrs	r3, r1
 800f652:	d147      	bne.n	800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800f654:	4b6c      	ldr	r3, [pc, #432]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f65a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800f65e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800f660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f662:	2b00      	cmp	r3, #0
 800f664:	d103      	bne.n	800f66e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f666:	f7fd fe21 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800f66a:	6378      	str	r0, [r7, #52]	@ 0x34
 800f66c:	e282      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800f66e:	4b66      	ldr	r3, [pc, #408]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f67c:	d112      	bne.n	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800f67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f680:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f684:	d10e      	bne.n	800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f686:	4b60      	ldr	r3, [pc, #384]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f68c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f694:	d102      	bne.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800f696:	23fa      	movs	r3, #250	@ 0xfa
 800f698:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f69a:	e26b      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800f69c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f6a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f6a2:	e267      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800f6a4:	4b58      	ldr	r3, [pc, #352]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f6ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f6b0:	d106      	bne.n	800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800f6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f6b8:	d102      	bne.n	800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800f6ba:	4b55      	ldr	r3, [pc, #340]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f6bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6be:	e259      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800f6c0:	4b51      	ldr	r3, [pc, #324]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f6c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f6c6:	f003 0302 	and.w	r3, r3, #2
 800f6ca:	2b02      	cmp	r3, #2
 800f6cc:	d107      	bne.n	800f6de <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800f6d4:	d103      	bne.n	800f6de <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800f6d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6da:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6dc:	e24a      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6e2:	e247      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800f6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6e8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800f6ec:	430b      	orrs	r3, r1
 800f6ee:	d12d      	bne.n	800f74c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800f6f0:	4b45      	ldr	r3, [pc, #276]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f6f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f6f6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800f6fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800f6fc:	4b42      	ldr	r3, [pc, #264]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f708:	d105      	bne.n	800f716 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d102      	bne.n	800f716 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800f710:	4b3f      	ldr	r3, [pc, #252]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f712:	637b      	str	r3, [r7, #52]	@ 0x34
 800f714:	e22e      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f71c:	d107      	bne.n	800f72e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f71e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe fc44 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800f728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f72a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f72c:	e222      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800f72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f734:	d107      	bne.n	800f746 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f736:	f107 0318 	add.w	r3, r7, #24
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe fd92 	bl	800e264 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	637b      	str	r3, [r7, #52]	@ 0x34
 800f744:	e216      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800f746:	2300      	movs	r3, #0
 800f748:	637b      	str	r3, [r7, #52]	@ 0x34
 800f74a:	e213      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800f74c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f750:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800f754:	430b      	orrs	r3, r1
 800f756:	d15d      	bne.n	800f814 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f758:	4b2b      	ldr	r3, [pc, #172]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f75a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f75e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800f762:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800f764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f766:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f76a:	d028      	beq.n	800f7be <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800f76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f76e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f772:	d845      	bhi.n	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800f774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f776:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f77a:	d013      	beq.n	800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800f77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f782:	d83d      	bhi.n	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800f784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f786:	2b00      	cmp	r3, #0
 800f788:	d004      	beq.n	800f794 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800f78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f78c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f790:	d004      	beq.n	800f79c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800f792:	e035      	b.n	800f800 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800f794:	f7fd fd9e 	bl	800d2d4 <HAL_RCC_GetPCLK2Freq>
 800f798:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f79a:	e1eb      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f79c:	f7fd fc6a 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800f7a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f7a2:	e1e7      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f7a4:	4b18      	ldr	r3, [pc, #96]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f7ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f7b0:	d102      	bne.n	800f7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800f7b2:	4b17      	ldr	r3, [pc, #92]	@ (800f810 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800f7b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f7b6:	e1dd      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f7bc:	e1da      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f7be:	4b12      	ldr	r3, [pc, #72]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f003 0320 	and.w	r3, r3, #32
 800f7c6:	2b20      	cmp	r3, #32
 800f7c8:	d117      	bne.n	800f7fa <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f7ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d005      	beq.n	800f7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800f7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	0e1b      	lsrs	r3, r3, #24
 800f7dc:	f003 030f 	and.w	r3, r3, #15
 800f7e0:	e006      	b.n	800f7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800f7e2:	4b09      	ldr	r3, [pc, #36]	@ (800f808 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800f7e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f7e8:	041b      	lsls	r3, r3, #16
 800f7ea:	0e1b      	lsrs	r3, r3, #24
 800f7ec:	f003 030f 	and.w	r3, r3, #15
 800f7f0:	4a06      	ldr	r2, [pc, #24]	@ (800f80c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800f7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f7f8:	e1bc      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f7fe:	e1b9      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f800:	2300      	movs	r3, #0
 800f802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f804:	e1b6      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800f806:	bf00      	nop
 800f808:	46020c00 	.word	0x46020c00
 800f80c:	0801583c 	.word	0x0801583c
 800f810:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800f814:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f818:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800f81c:	430b      	orrs	r3, r1
 800f81e:	d156      	bne.n	800f8ce <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800f820:	4ba5      	ldr	r3, [pc, #660]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f826:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f82a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800f82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f82e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f832:	d028      	beq.n	800f886 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800f834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f836:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f83a:	d845      	bhi.n	800f8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800f83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f83e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f842:	d013      	beq.n	800f86c <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800f844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f84a:	d83d      	bhi.n	800f8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800f84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d004      	beq.n	800f85c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800f852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f858:	d004      	beq.n	800f864 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800f85a:	e035      	b.n	800f8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800f85c:	f7fd fd26 	bl	800d2ac <HAL_RCC_GetPCLK1Freq>
 800f860:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f862:	e187      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f864:	f7fd fc06 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800f868:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f86a:	e183      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f86c:	4b92      	ldr	r3, [pc, #584]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f878:	d102      	bne.n	800f880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800f87a:	4b90      	ldr	r3, [pc, #576]	@ (800fabc <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f87c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f87e:	e179      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f880:	2300      	movs	r3, #0
 800f882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f884:	e176      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f886:	4b8c      	ldr	r3, [pc, #560]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f003 0320 	and.w	r3, r3, #32
 800f88e:	2b20      	cmp	r3, #32
 800f890:	d117      	bne.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f892:	4b89      	ldr	r3, [pc, #548]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f894:	689b      	ldr	r3, [r3, #8]
 800f896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d005      	beq.n	800f8aa <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800f89e:	4b86      	ldr	r3, [pc, #536]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	0e1b      	lsrs	r3, r3, #24
 800f8a4:	f003 030f 	and.w	r3, r3, #15
 800f8a8:	e006      	b.n	800f8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800f8aa:	4b83      	ldr	r3, [pc, #524]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f8ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f8b0:	041b      	lsls	r3, r3, #16
 800f8b2:	0e1b      	lsrs	r3, r3, #24
 800f8b4:	f003 030f 	and.w	r3, r3, #15
 800f8b8:	4a81      	ldr	r2, [pc, #516]	@ (800fac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800f8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f8c0:	e158      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f8c6:	e155      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f8cc:	e152      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800f8ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8d2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800f8d6:	430b      	orrs	r3, r1
 800f8d8:	d177      	bne.n	800f9ca <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800f8da:	4b77      	ldr	r3, [pc, #476]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f8dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f8e0:	f003 0318 	and.w	r3, r3, #24
 800f8e4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e8:	2b18      	cmp	r3, #24
 800f8ea:	d86b      	bhi.n	800f9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800f8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800f8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f2:	bf00      	nop
 800f8f4:	0800f959 	.word	0x0800f959
 800f8f8:	0800f9c5 	.word	0x0800f9c5
 800f8fc:	0800f9c5 	.word	0x0800f9c5
 800f900:	0800f9c5 	.word	0x0800f9c5
 800f904:	0800f9c5 	.word	0x0800f9c5
 800f908:	0800f9c5 	.word	0x0800f9c5
 800f90c:	0800f9c5 	.word	0x0800f9c5
 800f910:	0800f9c5 	.word	0x0800f9c5
 800f914:	0800f961 	.word	0x0800f961
 800f918:	0800f9c5 	.word	0x0800f9c5
 800f91c:	0800f9c5 	.word	0x0800f9c5
 800f920:	0800f9c5 	.word	0x0800f9c5
 800f924:	0800f9c5 	.word	0x0800f9c5
 800f928:	0800f9c5 	.word	0x0800f9c5
 800f92c:	0800f9c5 	.word	0x0800f9c5
 800f930:	0800f9c5 	.word	0x0800f9c5
 800f934:	0800f969 	.word	0x0800f969
 800f938:	0800f9c5 	.word	0x0800f9c5
 800f93c:	0800f9c5 	.word	0x0800f9c5
 800f940:	0800f9c5 	.word	0x0800f9c5
 800f944:	0800f9c5 	.word	0x0800f9c5
 800f948:	0800f9c5 	.word	0x0800f9c5
 800f94c:	0800f9c5 	.word	0x0800f9c5
 800f950:	0800f9c5 	.word	0x0800f9c5
 800f954:	0800f983 	.word	0x0800f983
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800f958:	f7fd fcd0 	bl	800d2fc <HAL_RCC_GetPCLK3Freq>
 800f95c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f95e:	e109      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f960:	f7fd fb88 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800f964:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f966:	e105      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f968:	4b53      	ldr	r3, [pc, #332]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f974:	d102      	bne.n	800f97c <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800f976:	4b51      	ldr	r3, [pc, #324]	@ (800fabc <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f978:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f97a:	e0fb      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f97c:	2300      	movs	r3, #0
 800f97e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f980:	e0f8      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f982:	4b4d      	ldr	r3, [pc, #308]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f003 0320 	and.w	r3, r3, #32
 800f98a:	2b20      	cmp	r3, #32
 800f98c:	d117      	bne.n	800f9be <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f98e:	4b4a      	ldr	r3, [pc, #296]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f990:	689b      	ldr	r3, [r3, #8]
 800f992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f996:	2b00      	cmp	r3, #0
 800f998:	d005      	beq.n	800f9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800f99a:	4b47      	ldr	r3, [pc, #284]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	0e1b      	lsrs	r3, r3, #24
 800f9a0:	f003 030f 	and.w	r3, r3, #15
 800f9a4:	e006      	b.n	800f9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800f9a6:	4b44      	ldr	r3, [pc, #272]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f9a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f9ac:	041b      	lsls	r3, r3, #16
 800f9ae:	0e1b      	lsrs	r3, r3, #24
 800f9b0:	f003 030f 	and.w	r3, r3, #15
 800f9b4:	4a42      	ldr	r2, [pc, #264]	@ (800fac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800f9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f9bc:	e0da      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f9c2:	e0d7      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f9c8:	e0d4      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800f9ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9ce:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800f9d2:	430b      	orrs	r3, r1
 800f9d4:	d155      	bne.n	800fa82 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800f9d6:	4b38      	ldr	r3, [pc, #224]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f9d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f9dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800f9e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f9e8:	d013      	beq.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800f9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f9f0:	d844      	bhi.n	800fa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f9f8:	d013      	beq.n	800fa22 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800f9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fa00:	d83c      	bhi.n	800fa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800fa02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d014      	beq.n	800fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800fa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa0e:	d014      	beq.n	800fa3a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800fa10:	e034      	b.n	800fa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa12:	f107 0318 	add.w	r3, r7, #24
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fe fc24 	bl	800e264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa20:	e0a8      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fa22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fe fac2 	bl	800dfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa30:	e0a0      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fa32:	f7fd fb1f 	bl	800d074 <HAL_RCC_GetSysClockFreq>
 800fa36:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fa38:	e09c      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fa3a:	4b1f      	ldr	r3, [pc, #124]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f003 0320 	and.w	r3, r3, #32
 800fa42:	2b20      	cmp	r3, #32
 800fa44:	d117      	bne.n	800fa76 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fa46:	4b1c      	ldr	r3, [pc, #112]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d005      	beq.n	800fa5e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800fa52:	4b19      	ldr	r3, [pc, #100]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fa54:	689b      	ldr	r3, [r3, #8]
 800fa56:	0e1b      	lsrs	r3, r3, #24
 800fa58:	f003 030f 	and.w	r3, r3, #15
 800fa5c:	e006      	b.n	800fa6c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800fa5e:	4b16      	ldr	r3, [pc, #88]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fa60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fa64:	041b      	lsls	r3, r3, #16
 800fa66:	0e1b      	lsrs	r3, r3, #24
 800fa68:	f003 030f 	and.w	r3, r3, #15
 800fa6c:	4a14      	ldr	r2, [pc, #80]	@ (800fac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800fa6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fa74:	e07e      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800fa76:	2300      	movs	r3, #0
 800fa78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa7a:	e07b      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fa80:	e078      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800fa82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa86:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800fa8a:	430b      	orrs	r3, r1
 800fa8c:	d138      	bne.n	800fb00 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800fa8e:	4b0a      	ldr	r3, [pc, #40]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fa90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fa94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa98:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800fa9a:	4b07      	ldr	r3, [pc, #28]	@ (800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fa9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800faa0:	f003 0302 	and.w	r3, r3, #2
 800faa4:	2b02      	cmp	r3, #2
 800faa6:	d10d      	bne.n	800fac4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800faa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d10a      	bne.n	800fac4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800faae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fab4:	e05e      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800fab6:	bf00      	nop
 800fab8:	46020c00 	.word	0x46020c00
 800fabc:	00f42400 	.word	0x00f42400
 800fac0:	0801583c 	.word	0x0801583c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800fac4:	4b2e      	ldr	r3, [pc, #184]	@ (800fb80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800faca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800face:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fad2:	d112      	bne.n	800fafa <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800fad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fada:	d10e      	bne.n	800fafa <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fadc:	4b28      	ldr	r3, [pc, #160]	@ (800fb80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800faea:	d102      	bne.n	800faf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800faec:	23fa      	movs	r3, #250	@ 0xfa
 800faee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800faf0:	e040      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800faf2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800faf6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800faf8:	e03c      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800fafa:	2300      	movs	r3, #0
 800fafc:	637b      	str	r3, [r7, #52]	@ 0x34
 800fafe:	e039      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800fb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb04:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800fb08:	430b      	orrs	r3, r1
 800fb0a:	d131      	bne.n	800fb70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800fb0c:	4b1c      	ldr	r3, [pc, #112]	@ (800fb80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fb0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fb12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800fb16:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800fb18:	4b19      	ldr	r3, [pc, #100]	@ (800fb80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fb20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb24:	d105      	bne.n	800fb32 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800fb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d102      	bne.n	800fb32 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800fb2c:	4b15      	ldr	r3, [pc, #84]	@ (800fb84 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800fb2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb30:	e020      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800fb32:	4b13      	ldr	r3, [pc, #76]	@ (800fb80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fb3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb3e:	d106      	bne.n	800fb4e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800fb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb46:	d102      	bne.n	800fb4e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800fb48:	4b0f      	ldr	r3, [pc, #60]	@ (800fb88 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800fb4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb4c:	e012      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800fb4e:	4b0c      	ldr	r3, [pc, #48]	@ (800fb80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb5a:	d106      	bne.n	800fb6a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb62:	d102      	bne.n	800fb6a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800fb64:	4b09      	ldr	r3, [pc, #36]	@ (800fb8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800fb66:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb68:	e004      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb6e:	e001      	b.n	800fb74 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800fb70:	2300      	movs	r3, #0
 800fb72:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800fb74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3738      	adds	r7, #56	@ 0x38
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	46020c00 	.word	0x46020c00
 800fb84:	02dc6c00 	.word	0x02dc6c00
 800fb88:	016e3600 	.word	0x016e3600
 800fb8c:	00f42400 	.word	0x00f42400

0800fb90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800fb98:	4b47      	ldr	r3, [pc, #284]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a46      	ldr	r2, [pc, #280]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fb9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fba2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fba4:	f7f9 f89e 	bl	8008ce4 <HAL_GetTick>
 800fba8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fbaa:	e008      	b.n	800fbbe <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fbac:	f7f9 f89a 	bl	8008ce4 <HAL_GetTick>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	d901      	bls.n	800fbbe <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fbba:	2303      	movs	r3, #3
 800fbbc:	e077      	b.n	800fcae <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fbbe:	4b3e      	ldr	r3, [pc, #248]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1f0      	bne.n	800fbac <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800fbca:	4b3b      	ldr	r3, [pc, #236]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800fbd2:	f023 0303 	bic.w	r3, r3, #3
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	6811      	ldr	r1, [r2, #0]
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	6852      	ldr	r2, [r2, #4]
 800fbde:	3a01      	subs	r2, #1
 800fbe0:	0212      	lsls	r2, r2, #8
 800fbe2:	430a      	orrs	r2, r1
 800fbe4:	4934      	ldr	r1, [pc, #208]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800fbea:	4b33      	ldr	r3, [pc, #204]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fbec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fbee:	4b33      	ldr	r3, [pc, #204]	@ (800fcbc <RCCEx_PLL2_Config+0x12c>)
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	6892      	ldr	r2, [r2, #8]
 800fbf6:	3a01      	subs	r2, #1
 800fbf8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	68d2      	ldr	r2, [r2, #12]
 800fc00:	3a01      	subs	r2, #1
 800fc02:	0252      	lsls	r2, r2, #9
 800fc04:	b292      	uxth	r2, r2
 800fc06:	4311      	orrs	r1, r2
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	6912      	ldr	r2, [r2, #16]
 800fc0c:	3a01      	subs	r2, #1
 800fc0e:	0412      	lsls	r2, r2, #16
 800fc10:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800fc14:	4311      	orrs	r1, r2
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	6952      	ldr	r2, [r2, #20]
 800fc1a:	3a01      	subs	r2, #1
 800fc1c:	0612      	lsls	r2, r2, #24
 800fc1e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800fc22:	430a      	orrs	r2, r1
 800fc24:	4924      	ldr	r1, [pc, #144]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc26:	4313      	orrs	r3, r2
 800fc28:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800fc2a:	4b23      	ldr	r3, [pc, #140]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc2e:	f023 020c 	bic.w	r2, r3, #12
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	699b      	ldr	r3, [r3, #24]
 800fc36:	4920      	ldr	r1, [pc, #128]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800fc3c:	4b1e      	ldr	r3, [pc, #120]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6a1b      	ldr	r3, [r3, #32]
 800fc44:	491c      	ldr	r1, [pc, #112]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc46:	4313      	orrs	r3, r2
 800fc48:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800fc4a:	4b1b      	ldr	r3, [pc, #108]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4e:	4a1a      	ldr	r2, [pc, #104]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc50:	f023 0310 	bic.w	r3, r3, #16
 800fc54:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fc56:	4b18      	ldr	r3, [pc, #96]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fc5e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	69d2      	ldr	r2, [r2, #28]
 800fc66:	00d2      	lsls	r2, r2, #3
 800fc68:	4913      	ldr	r1, [pc, #76]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800fc6e:	4b12      	ldr	r3, [pc, #72]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc72:	4a11      	ldr	r2, [pc, #68]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc74:	f043 0310 	orr.w	r3, r3, #16
 800fc78:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800fc7a:	4b0f      	ldr	r3, [pc, #60]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4a0e      	ldr	r2, [pc, #56]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fc80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fc84:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fc86:	f7f9 f82d 	bl	8008ce4 <HAL_GetTick>
 800fc8a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc8c:	e008      	b.n	800fca0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fc8e:	f7f9 f829 	bl	8008ce4 <HAL_GetTick>
 800fc92:	4602      	mov	r2, r0
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	2b02      	cmp	r3, #2
 800fc9a:	d901      	bls.n	800fca0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800fc9c:	2303      	movs	r3, #3
 800fc9e:	e006      	b.n	800fcae <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fca0:	4b05      	ldr	r3, [pc, #20]	@ (800fcb8 <RCCEx_PLL2_Config+0x128>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d0f0      	beq.n	800fc8e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800fcac:	2300      	movs	r3, #0

}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3710      	adds	r7, #16
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	46020c00 	.word	0x46020c00
 800fcbc:	80800000 	.word	0x80800000

0800fcc0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800fcc8:	4b47      	ldr	r3, [pc, #284]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a46      	ldr	r2, [pc, #280]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fcce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fcd2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fcd4:	f7f9 f806 	bl	8008ce4 <HAL_GetTick>
 800fcd8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fcda:	e008      	b.n	800fcee <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fcdc:	f7f9 f802 	bl	8008ce4 <HAL_GetTick>
 800fce0:	4602      	mov	r2, r0
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	2b02      	cmp	r3, #2
 800fce8:	d901      	bls.n	800fcee <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fcea:	2303      	movs	r3, #3
 800fcec:	e077      	b.n	800fdde <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fcee:	4b3e      	ldr	r3, [pc, #248]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d1f0      	bne.n	800fcdc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800fcfa:	4b3b      	ldr	r3, [pc, #236]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fcfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcfe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800fd02:	f023 0303 	bic.w	r3, r3, #3
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	6811      	ldr	r1, [r2, #0]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	6852      	ldr	r2, [r2, #4]
 800fd0e:	3a01      	subs	r2, #1
 800fd10:	0212      	lsls	r2, r2, #8
 800fd12:	430a      	orrs	r2, r1
 800fd14:	4934      	ldr	r1, [pc, #208]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd16:	4313      	orrs	r3, r2
 800fd18:	630b      	str	r3, [r1, #48]	@ 0x30
 800fd1a:	4b33      	ldr	r3, [pc, #204]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd1e:	4b33      	ldr	r3, [pc, #204]	@ (800fdec <RCCEx_PLL3_Config+0x12c>)
 800fd20:	4013      	ands	r3, r2
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	6892      	ldr	r2, [r2, #8]
 800fd26:	3a01      	subs	r2, #1
 800fd28:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	68d2      	ldr	r2, [r2, #12]
 800fd30:	3a01      	subs	r2, #1
 800fd32:	0252      	lsls	r2, r2, #9
 800fd34:	b292      	uxth	r2, r2
 800fd36:	4311      	orrs	r1, r2
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	6912      	ldr	r2, [r2, #16]
 800fd3c:	3a01      	subs	r2, #1
 800fd3e:	0412      	lsls	r2, r2, #16
 800fd40:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800fd44:	4311      	orrs	r1, r2
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	6952      	ldr	r2, [r2, #20]
 800fd4a:	3a01      	subs	r2, #1
 800fd4c:	0612      	lsls	r2, r2, #24
 800fd4e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800fd52:	430a      	orrs	r2, r1
 800fd54:	4924      	ldr	r1, [pc, #144]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd56:	4313      	orrs	r3, r2
 800fd58:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800fd5a:	4b23      	ldr	r3, [pc, #140]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd5e:	f023 020c 	bic.w	r2, r3, #12
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	699b      	ldr	r3, [r3, #24]
 800fd66:	4920      	ldr	r1, [pc, #128]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800fd6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a1b      	ldr	r3, [r3, #32]
 800fd74:	491c      	ldr	r1, [pc, #112]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd76:	4313      	orrs	r3, r2
 800fd78:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800fd7a:	4b1b      	ldr	r3, [pc, #108]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd7e:	4a1a      	ldr	r2, [pc, #104]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd80:	f023 0310 	bic.w	r3, r3, #16
 800fd84:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fd86:	4b18      	ldr	r3, [pc, #96]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fd8e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	69d2      	ldr	r2, [r2, #28]
 800fd96:	00d2      	lsls	r2, r2, #3
 800fd98:	4913      	ldr	r1, [pc, #76]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800fd9e:	4b12      	ldr	r3, [pc, #72]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fda2:	4a11      	ldr	r2, [pc, #68]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fda4:	f043 0310 	orr.w	r3, r3, #16
 800fda8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800fdaa:	4b0f      	ldr	r3, [pc, #60]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a0e      	ldr	r2, [pc, #56]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fdb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fdb4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fdb6:	f7f8 ff95 	bl	8008ce4 <HAL_GetTick>
 800fdba:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fdbc:	e008      	b.n	800fdd0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fdbe:	f7f8 ff91 	bl	8008ce4 <HAL_GetTick>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	2b02      	cmp	r3, #2
 800fdca:	d901      	bls.n	800fdd0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800fdcc:	2303      	movs	r3, #3
 800fdce:	e006      	b.n	800fdde <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fdd0:	4b05      	ldr	r3, [pc, #20]	@ (800fde8 <RCCEx_PLL3_Config+0x128>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d0f0      	beq.n	800fdbe <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	46020c00 	.word	0x46020c00
 800fdec:	80800000 	.word	0x80800000

0800fdf0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b08a      	sub	sp, #40	@ 0x28
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	695b      	ldr	r3, [r3, #20]
 800fe06:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800fe08:	6a3a      	ldr	r2, [r7, #32]
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	4013      	ands	r3, r2
 800fe0e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800fe22:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	3330      	adds	r3, #48	@ 0x30
 800fe2a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d010      	beq.n	800fe58 <HAL_SPI_IRQHandler+0x68>
 800fe36:	6a3b      	ldr	r3, [r7, #32]
 800fe38:	f003 0308 	and.w	r3, r3, #8
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00b      	beq.n	800fe58 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	699a      	ldr	r2, [r3, #24]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fe4e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 f9c9 	bl	80101e8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800fe56:	e19a      	b.n	801018e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d113      	bne.n	800fe8a <HAL_SPI_IRQHandler+0x9a>
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	f003 0320 	and.w	r3, r3, #32
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10e      	bne.n	800fe8a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d009      	beq.n	800fe8a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	4798      	blx	r3
    handled = 1UL;
 800fe86:	2301      	movs	r3, #1
 800fe88:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d10f      	bne.n	800feb4 <HAL_SPI_IRQHandler+0xc4>
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	f003 0301 	and.w	r3, r3, #1
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00a      	beq.n	800feb4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d105      	bne.n	800feb4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	4798      	blx	r3
    handled = 1UL;
 800feb0:	2301      	movs	r3, #1
 800feb2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800feb4:	69bb      	ldr	r3, [r7, #24]
 800feb6:	f003 0320 	and.w	r3, r3, #32
 800feba:	2b00      	cmp	r3, #0
 800febc:	d10f      	bne.n	800fede <HAL_SPI_IRQHandler+0xee>
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	f003 0302 	and.w	r3, r3, #2
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00a      	beq.n	800fede <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d105      	bne.n	800fede <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	4798      	blx	r3
    handled = 1UL;
 800feda:	2301      	movs	r3, #1
 800fedc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800fede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	f040 814f 	bne.w	8010184 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	f003 0308 	and.w	r3, r3, #8
 800feec:	2b00      	cmp	r3, #0
 800feee:	f000 808b 	beq.w	8010008 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	699a      	ldr	r2, [r3, #24]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f042 0208 	orr.w	r2, r2, #8
 800ff00:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	699a      	ldr	r2, [r3, #24]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	f042 0210 	orr.w	r2, r2, #16
 800ff10:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	699a      	ldr	r2, [r3, #24]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff20:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	691a      	ldr	r2, [r3, #16]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f022 0208 	bic.w	r2, r2, #8
 800ff30:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	689b      	ldr	r3, [r3, #8]
 800ff38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d13d      	bne.n	800ffbc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ff40:	e036      	b.n	800ffb0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	2b0f      	cmp	r3, #15
 800ff48:	d90b      	bls.n	800ff62 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ff54:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff5a:	1d1a      	adds	r2, r3, #4
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ff60:	e01d      	b.n	800ff9e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	2b07      	cmp	r3, #7
 800ff68:	d90b      	bls.n	800ff82 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	8812      	ldrh	r2, [r2, #0]
 800ff72:	b292      	uxth	r2, r2
 800ff74:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff7a:	1c9a      	adds	r2, r3, #2
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ff80:	e00d      	b.n	800ff9e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff8e:	7812      	ldrb	r2, [r2, #0]
 800ff90:	b2d2      	uxtb	r2, r2
 800ff92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff98:	1c5a      	adds	r2, r3, #1
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d1c2      	bne.n	800ff42 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f000 f937 	bl	8010230 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d003      	beq.n	800ffdc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 f8fd 	bl	80101d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ffda:	e0d8      	b.n	801018e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ffdc:	7cfb      	ldrb	r3, [r7, #19]
 800ffde:	2b05      	cmp	r3, #5
 800ffe0:	d103      	bne.n	800ffea <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 f8ec 	bl	80101c0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ffe8:	e0ce      	b.n	8010188 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ffea:	7cfb      	ldrb	r3, [r7, #19]
 800ffec:	2b04      	cmp	r3, #4
 800ffee:	d103      	bne.n	800fff8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 f8db 	bl	80101ac <HAL_SPI_RxCpltCallback>
    return;
 800fff6:	e0c7      	b.n	8010188 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800fff8:	7cfb      	ldrb	r3, [r7, #19]
 800fffa:	2b03      	cmp	r3, #3
 800fffc:	f040 80c4 	bne.w	8010188 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f000 f8c9 	bl	8010198 <HAL_SPI_TxCpltCallback>
    return;
 8010006:	e0bf      	b.n	8010188 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 80bd 	beq.w	801018e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00f      	beq.n	801003e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010024:	f043 0204 	orr.w	r2, r3, #4
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	699a      	ldr	r2, [r3, #24]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801003c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00f      	beq.n	8010068 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801004e:	f043 0201 	orr.w	r2, r3, #1
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	699a      	ldr	r2, [r3, #24]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010066:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00f      	beq.n	8010092 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010078:	f043 0208 	orr.w	r2, r3, #8
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	699a      	ldr	r2, [r3, #24]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010090:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8010092:	69bb      	ldr	r3, [r7, #24]
 8010094:	f003 0320 	and.w	r3, r3, #32
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00f      	beq.n	80100bc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	699a      	ldr	r2, [r3, #24]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f042 0220 	orr.w	r2, r2, #32
 80100ba:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d062      	beq.n	801018c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f022 0201 	bic.w	r2, r2, #1
 80100d4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	691b      	ldr	r3, [r3, #16]
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	6812      	ldr	r2, [r2, #0]
 80100e0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 80100e4:	f023 0303 	bic.w	r3, r3, #3
 80100e8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80100f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80100f4:	d13e      	bne.n	8010174 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	689a      	ldr	r2, [r3, #8]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010104:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801010c:	2b00      	cmp	r3, #0
 801010e:	d015      	beq.n	801013c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010116:	4a1f      	ldr	r2, [pc, #124]	@ (8010194 <HAL_SPI_IRQHandler+0x3a4>)
 8010118:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010120:	4618      	mov	r0, r3
 8010122:	f7f9 f9f1 	bl	8009508 <HAL_DMA_Abort_IT>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d007      	beq.n	801013c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010132:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010142:	2b00      	cmp	r3, #0
 8010144:	d022      	beq.n	801018c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801014c:	4a11      	ldr	r2, [pc, #68]	@ (8010194 <HAL_SPI_IRQHandler+0x3a4>)
 801014e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010156:	4618      	mov	r0, r3
 8010158:	f7f9 f9d6 	bl	8009508 <HAL_DMA_Abort_IT>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d014      	beq.n	801018c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010168:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010172:	e00b      	b.n	801018c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2201      	movs	r2, #1
 8010178:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 f829 	bl	80101d4 <HAL_SPI_ErrorCallback>
    return;
 8010182:	e003      	b.n	801018c <HAL_SPI_IRQHandler+0x39c>
    return;
 8010184:	bf00      	nop
 8010186:	e002      	b.n	801018e <HAL_SPI_IRQHandler+0x39e>
    return;
 8010188:	bf00      	nop
 801018a:	e000      	b.n	801018e <HAL_SPI_IRQHandler+0x39e>
    return;
 801018c:	bf00      	nop
  }
}
 801018e:	3728      	adds	r7, #40	@ 0x28
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	080101fd 	.word	0x080101fd

08010198 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80101a0:	bf00      	nop
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr

080101ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80101b4:	bf00      	nop
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80101c8:	bf00      	nop
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80101dc:	bf00      	nop
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010208:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2200      	movs	r2, #0
 801020e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2201      	movs	r2, #1
 801021e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010222:	68f8      	ldr	r0, [r7, #12]
 8010224:	f7ff ffd6 	bl	80101d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010228:	bf00      	nop
 801022a:	3710      	adds	r7, #16
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	695b      	ldr	r3, [r3, #20]
 801023e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	699a      	ldr	r2, [r3, #24]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f042 0208 	orr.w	r2, r2, #8
 801024e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	699a      	ldr	r2, [r3, #24]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f042 0210 	orr.w	r2, r2, #16
 801025e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f022 0201 	bic.w	r2, r2, #1
 801026e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	691b      	ldr	r3, [r3, #16]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	6812      	ldr	r2, [r2, #0]
 801027a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 801027e:	f023 0303 	bic.w	r3, r3, #3
 8010282:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	689a      	ldr	r2, [r3, #8]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010292:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 801029a:	b2db      	uxtb	r3, r3
 801029c:	2b04      	cmp	r3, #4
 801029e:	d014      	beq.n	80102ca <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f003 0320 	and.w	r3, r3, #32
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00f      	beq.n	80102ca <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	699a      	ldr	r2, [r3, #24]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f042 0220 	orr.w	r2, r2, #32
 80102c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	2b03      	cmp	r3, #3
 80102d4:	d014      	beq.n	8010300 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00f      	beq.n	8010300 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102e6:	f043 0204 	orr.w	r2, r3, #4
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	699a      	ldr	r2, [r3, #24]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010306:	2b00      	cmp	r3, #0
 8010308:	d00f      	beq.n	801032a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010310:	f043 0201 	orr.w	r2, r3, #1
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	699a      	ldr	r2, [r3, #24]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010328:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00f      	beq.n	8010354 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801033a:	f043 0208 	orr.w	r2, r3, #8
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	699a      	ldr	r2, [r3, #24]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010352:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2200      	movs	r2, #0
 8010360:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8010364:	bf00      	nop
 8010366:	3714      	adds	r7, #20
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d101      	bne.n	8010382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801037e:	2301      	movs	r3, #1
 8010380:	e042      	b.n	8010408 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010388:	2b00      	cmp	r3, #0
 801038a:	d106      	bne.n	801039a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7f1 fb9b 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2224      	movs	r2, #36	@ 0x24
 801039e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f022 0201 	bic.w	r2, r2, #1
 80103b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d002      	beq.n	80103c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f000 f9ca 	bl	8010754 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 f825 	bl	8010410 <UART_SetConfig>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d101      	bne.n	80103d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80103cc:	2301      	movs	r3, #1
 80103ce:	e01b      	b.n	8010408 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	685a      	ldr	r2, [r3, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80103de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	689a      	ldr	r2, [r3, #8]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80103ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f042 0201 	orr.w	r2, r2, #1
 80103fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 fa49 	bl	8010898 <UART_CheckIdleState>
 8010406:	4603      	mov	r3, r0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010414:	b094      	sub	sp, #80	@ 0x50
 8010416:	af00      	add	r7, sp, #0
 8010418:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801041a:	2300      	movs	r3, #0
 801041c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	4b7e      	ldr	r3, [pc, #504]	@ (8010620 <UART_SetConfig+0x210>)
 8010426:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801042a:	689a      	ldr	r2, [r3, #8]
 801042c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	431a      	orrs	r2, r3
 8010432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010434:	695b      	ldr	r3, [r3, #20]
 8010436:	431a      	orrs	r2, r3
 8010438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043a:	69db      	ldr	r3, [r3, #28]
 801043c:	4313      	orrs	r3, r2
 801043e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	4977      	ldr	r1, [pc, #476]	@ (8010624 <UART_SetConfig+0x214>)
 8010448:	4019      	ands	r1, r3
 801044a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010450:	430b      	orrs	r3, r1
 8010452:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801045e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010460:	68d9      	ldr	r1, [r3, #12]
 8010462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	ea40 0301 	orr.w	r3, r0, r1
 801046a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801046c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046e:	699b      	ldr	r3, [r3, #24]
 8010470:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	4b6a      	ldr	r3, [pc, #424]	@ (8010620 <UART_SetConfig+0x210>)
 8010478:	429a      	cmp	r2, r3
 801047a:	d009      	beq.n	8010490 <UART_SetConfig+0x80>
 801047c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	4b69      	ldr	r3, [pc, #420]	@ (8010628 <UART_SetConfig+0x218>)
 8010482:	429a      	cmp	r2, r3
 8010484:	d004      	beq.n	8010490 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010488:	6a1a      	ldr	r2, [r3, #32]
 801048a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801048c:	4313      	orrs	r3, r2
 801048e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801049a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801049e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104a4:	430b      	orrs	r3, r1
 80104a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80104a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104ae:	f023 000f 	bic.w	r0, r3, #15
 80104b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80104b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	ea40 0301 	orr.w	r3, r0, r1
 80104be:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80104c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	4b59      	ldr	r3, [pc, #356]	@ (801062c <UART_SetConfig+0x21c>)
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d102      	bne.n	80104d0 <UART_SetConfig+0xc0>
 80104ca:	2301      	movs	r3, #1
 80104cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80104ce:	e029      	b.n	8010524 <UART_SetConfig+0x114>
 80104d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	4b56      	ldr	r3, [pc, #344]	@ (8010630 <UART_SetConfig+0x220>)
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d102      	bne.n	80104e0 <UART_SetConfig+0xd0>
 80104da:	2302      	movs	r3, #2
 80104dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80104de:	e021      	b.n	8010524 <UART_SetConfig+0x114>
 80104e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	4b53      	ldr	r3, [pc, #332]	@ (8010634 <UART_SetConfig+0x224>)
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d102      	bne.n	80104f0 <UART_SetConfig+0xe0>
 80104ea:	2304      	movs	r3, #4
 80104ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80104ee:	e019      	b.n	8010524 <UART_SetConfig+0x114>
 80104f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	4b50      	ldr	r3, [pc, #320]	@ (8010638 <UART_SetConfig+0x228>)
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d102      	bne.n	8010500 <UART_SetConfig+0xf0>
 80104fa:	2308      	movs	r3, #8
 80104fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80104fe:	e011      	b.n	8010524 <UART_SetConfig+0x114>
 8010500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	4b4d      	ldr	r3, [pc, #308]	@ (801063c <UART_SetConfig+0x22c>)
 8010506:	429a      	cmp	r2, r3
 8010508:	d102      	bne.n	8010510 <UART_SetConfig+0x100>
 801050a:	2310      	movs	r3, #16
 801050c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801050e:	e009      	b.n	8010524 <UART_SetConfig+0x114>
 8010510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010512:	681a      	ldr	r2, [r3, #0]
 8010514:	4b42      	ldr	r3, [pc, #264]	@ (8010620 <UART_SetConfig+0x210>)
 8010516:	429a      	cmp	r2, r3
 8010518:	d102      	bne.n	8010520 <UART_SetConfig+0x110>
 801051a:	2320      	movs	r3, #32
 801051c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801051e:	e001      	b.n	8010524 <UART_SetConfig+0x114>
 8010520:	2300      	movs	r3, #0
 8010522:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010526:	681a      	ldr	r2, [r3, #0]
 8010528:	4b3d      	ldr	r3, [pc, #244]	@ (8010620 <UART_SetConfig+0x210>)
 801052a:	429a      	cmp	r2, r3
 801052c:	d005      	beq.n	801053a <UART_SetConfig+0x12a>
 801052e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	4b3d      	ldr	r3, [pc, #244]	@ (8010628 <UART_SetConfig+0x218>)
 8010534:	429a      	cmp	r2, r3
 8010536:	f040 8085 	bne.w	8010644 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801053a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801053c:	2200      	movs	r2, #0
 801053e:	623b      	str	r3, [r7, #32]
 8010540:	627a      	str	r2, [r7, #36]	@ 0x24
 8010542:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010546:	f7fe f941 	bl	800e7cc <HAL_RCCEx_GetPeriphCLKFreq>
 801054a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801054c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801054e:	2b00      	cmp	r3, #0
 8010550:	f000 80e8 	beq.w	8010724 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010558:	4a39      	ldr	r2, [pc, #228]	@ (8010640 <UART_SetConfig+0x230>)
 801055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801055e:	461a      	mov	r2, r3
 8010560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010562:	fbb3 f3f2 	udiv	r3, r3, r2
 8010566:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	4613      	mov	r3, r2
 801056e:	005b      	lsls	r3, r3, #1
 8010570:	4413      	add	r3, r2
 8010572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010574:	429a      	cmp	r2, r3
 8010576:	d305      	bcc.n	8010584 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801057e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010580:	429a      	cmp	r2, r3
 8010582:	d903      	bls.n	801058c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8010584:	2301      	movs	r3, #1
 8010586:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801058a:	e048      	b.n	801061e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801058c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801058e:	2200      	movs	r2, #0
 8010590:	61bb      	str	r3, [r7, #24]
 8010592:	61fa      	str	r2, [r7, #28]
 8010594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010598:	4a29      	ldr	r2, [pc, #164]	@ (8010640 <UART_SetConfig+0x230>)
 801059a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801059e:	b29b      	uxth	r3, r3
 80105a0:	2200      	movs	r2, #0
 80105a2:	613b      	str	r3, [r7, #16]
 80105a4:	617a      	str	r2, [r7, #20]
 80105a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80105aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80105ae:	f7f0 fb6f 	bl	8000c90 <__aeabi_uldivmod>
 80105b2:	4602      	mov	r2, r0
 80105b4:	460b      	mov	r3, r1
 80105b6:	4610      	mov	r0, r2
 80105b8:	4619      	mov	r1, r3
 80105ba:	f04f 0200 	mov.w	r2, #0
 80105be:	f04f 0300 	mov.w	r3, #0
 80105c2:	020b      	lsls	r3, r1, #8
 80105c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105c8:	0202      	lsls	r2, r0, #8
 80105ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80105cc:	6849      	ldr	r1, [r1, #4]
 80105ce:	0849      	lsrs	r1, r1, #1
 80105d0:	2000      	movs	r0, #0
 80105d2:	460c      	mov	r4, r1
 80105d4:	4605      	mov	r5, r0
 80105d6:	eb12 0804 	adds.w	r8, r2, r4
 80105da:	eb43 0905 	adc.w	r9, r3, r5
 80105de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	2200      	movs	r2, #0
 80105e4:	60bb      	str	r3, [r7, #8]
 80105e6:	60fa      	str	r2, [r7, #12]
 80105e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80105ec:	4640      	mov	r0, r8
 80105ee:	4649      	mov	r1, r9
 80105f0:	f7f0 fb4e 	bl	8000c90 <__aeabi_uldivmod>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	4613      	mov	r3, r2
 80105fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80105fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010602:	d308      	bcc.n	8010616 <UART_SetConfig+0x206>
 8010604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801060a:	d204      	bcs.n	8010616 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 801060c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010612:	60da      	str	r2, [r3, #12]
 8010614:	e003      	b.n	801061e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8010616:	2301      	movs	r3, #1
 8010618:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 801061c:	e082      	b.n	8010724 <UART_SetConfig+0x314>
 801061e:	e081      	b.n	8010724 <UART_SetConfig+0x314>
 8010620:	46002400 	.word	0x46002400
 8010624:	cfff69f3 	.word	0xcfff69f3
 8010628:	56002400 	.word	0x56002400
 801062c:	40013800 	.word	0x40013800
 8010630:	40004400 	.word	0x40004400
 8010634:	40004800 	.word	0x40004800
 8010638:	40004c00 	.word	0x40004c00
 801063c:	40005000 	.word	0x40005000
 8010640:	08015924 	.word	0x08015924
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010646:	69db      	ldr	r3, [r3, #28]
 8010648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801064c:	d13c      	bne.n	80106c8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801064e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010650:	2200      	movs	r2, #0
 8010652:	603b      	str	r3, [r7, #0]
 8010654:	607a      	str	r2, [r7, #4]
 8010656:	e9d7 0100 	ldrd	r0, r1, [r7]
 801065a:	f7fe f8b7 	bl	800e7cc <HAL_RCCEx_GetPeriphCLKFreq>
 801065e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010662:	2b00      	cmp	r3, #0
 8010664:	d05e      	beq.n	8010724 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801066a:	4a39      	ldr	r2, [pc, #228]	@ (8010750 <UART_SetConfig+0x340>)
 801066c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010670:	461a      	mov	r2, r3
 8010672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010674:	fbb3 f3f2 	udiv	r3, r3, r2
 8010678:	005a      	lsls	r2, r3, #1
 801067a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	085b      	lsrs	r3, r3, #1
 8010680:	441a      	add	r2, r3
 8010682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	fbb2 f3f3 	udiv	r3, r2, r3
 801068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801068c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801068e:	2b0f      	cmp	r3, #15
 8010690:	d916      	bls.n	80106c0 <UART_SetConfig+0x2b0>
 8010692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010698:	d212      	bcs.n	80106c0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801069a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801069c:	b29b      	uxth	r3, r3
 801069e:	f023 030f 	bic.w	r3, r3, #15
 80106a2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80106a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106a6:	085b      	lsrs	r3, r3, #1
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	f003 0307 	and.w	r3, r3, #7
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80106b2:	4313      	orrs	r3, r2
 80106b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80106b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80106bc:	60da      	str	r2, [r3, #12]
 80106be:	e031      	b.n	8010724 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80106c0:	2301      	movs	r3, #1
 80106c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80106c6:	e02d      	b.n	8010724 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80106c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106ca:	2200      	movs	r2, #0
 80106cc:	469a      	mov	sl, r3
 80106ce:	4693      	mov	fp, r2
 80106d0:	4650      	mov	r0, sl
 80106d2:	4659      	mov	r1, fp
 80106d4:	f7fe f87a 	bl	800e7cc <HAL_RCCEx_GetPeriphCLKFreq>
 80106d8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80106da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d021      	beq.n	8010724 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106e4:	4a1a      	ldr	r2, [pc, #104]	@ (8010750 <UART_SetConfig+0x340>)
 80106e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106ea:	461a      	mov	r2, r3
 80106ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80106f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	085b      	lsrs	r3, r3, #1
 80106f8:	441a      	add	r2, r3
 80106fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010702:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010706:	2b0f      	cmp	r3, #15
 8010708:	d909      	bls.n	801071e <UART_SetConfig+0x30e>
 801070a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801070c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010710:	d205      	bcs.n	801071e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010714:	b29a      	uxth	r2, r3
 8010716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	60da      	str	r2, [r3, #12]
 801071c:	e002      	b.n	8010724 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 801071e:	2301      	movs	r3, #1
 8010720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010726:	2201      	movs	r2, #1
 8010728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801072c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801072e:	2201      	movs	r2, #1
 8010730:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010736:	2200      	movs	r2, #0
 8010738:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801073a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073c:	2200      	movs	r2, #0
 801073e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010740:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010744:	4618      	mov	r0, r3
 8010746:	3750      	adds	r7, #80	@ 0x50
 8010748:	46bd      	mov	sp, r7
 801074a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801074e:	bf00      	nop
 8010750:	08015924 	.word	0x08015924

08010754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010760:	f003 0308 	and.w	r3, r3, #8
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00a      	beq.n	801077e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	430a      	orrs	r2, r1
 801077c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010782:	f003 0301 	and.w	r3, r3, #1
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00a      	beq.n	80107a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	430a      	orrs	r2, r1
 801079e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107a4:	f003 0302 	and.w	r3, r3, #2
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00a      	beq.n	80107c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	430a      	orrs	r2, r1
 80107c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107c6:	f003 0304 	and.w	r3, r3, #4
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00a      	beq.n	80107e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	430a      	orrs	r2, r1
 80107e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107e8:	f003 0310 	and.w	r3, r3, #16
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d00a      	beq.n	8010806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	689b      	ldr	r3, [r3, #8]
 80107f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	430a      	orrs	r2, r1
 8010804:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801080a:	f003 0320 	and.w	r3, r3, #32
 801080e:	2b00      	cmp	r3, #0
 8010810:	d00a      	beq.n	8010828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	430a      	orrs	r2, r1
 8010826:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010830:	2b00      	cmp	r3, #0
 8010832:	d01a      	beq.n	801086a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	430a      	orrs	r2, r1
 8010848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801084e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010852:	d10a      	bne.n	801086a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	430a      	orrs	r2, r1
 8010868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801086e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010872:	2b00      	cmp	r3, #0
 8010874:	d00a      	beq.n	801088c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	430a      	orrs	r2, r1
 801088a:	605a      	str	r2, [r3, #4]
  }
}
 801088c:	bf00      	nop
 801088e:	370c      	adds	r7, #12
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr

08010898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b098      	sub	sp, #96	@ 0x60
 801089c:	af02      	add	r7, sp, #8
 801089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80108a8:	f7f8 fa1c 	bl	8008ce4 <HAL_GetTick>
 80108ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f003 0308 	and.w	r3, r3, #8
 80108b8:	2b08      	cmp	r3, #8
 80108ba:	d12f      	bne.n	801091c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80108bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108c4:	2200      	movs	r2, #0
 80108c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f000 f88e 	bl	80109ec <UART_WaitOnFlagUntilTimeout>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d022      	beq.n	801091c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108de:	e853 3f00 	ldrex	r3, [r3]
 80108e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80108e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80108ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	461a      	mov	r2, r3
 80108f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80108f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80108fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80108fc:	e841 2300 	strex	r3, r2, [r1]
 8010900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010904:	2b00      	cmp	r3, #0
 8010906:	d1e6      	bne.n	80108d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2220      	movs	r2, #32
 801090c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2200      	movs	r2, #0
 8010914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010918:	2303      	movs	r3, #3
 801091a:	e063      	b.n	80109e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f003 0304 	and.w	r3, r3, #4
 8010926:	2b04      	cmp	r3, #4
 8010928:	d149      	bne.n	80109be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801092a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801092e:	9300      	str	r3, [sp, #0]
 8010930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010932:	2200      	movs	r2, #0
 8010934:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 f857 	bl	80109ec <UART_WaitOnFlagUntilTimeout>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d03c      	beq.n	80109be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801094c:	e853 3f00 	ldrex	r3, [r3]
 8010950:	623b      	str	r3, [r7, #32]
   return(result);
 8010952:	6a3b      	ldr	r3, [r7, #32]
 8010954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	461a      	mov	r2, r3
 8010960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010962:	633b      	str	r3, [r7, #48]	@ 0x30
 8010964:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801096a:	e841 2300 	strex	r3, r2, [r1]
 801096e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010972:	2b00      	cmp	r3, #0
 8010974:	d1e6      	bne.n	8010944 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	3308      	adds	r3, #8
 801097c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	e853 3f00 	ldrex	r3, [r3]
 8010984:	60fb      	str	r3, [r7, #12]
   return(result);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f023 0301 	bic.w	r3, r3, #1
 801098c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	3308      	adds	r3, #8
 8010994:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010996:	61fa      	str	r2, [r7, #28]
 8010998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801099a:	69b9      	ldr	r1, [r7, #24]
 801099c:	69fa      	ldr	r2, [r7, #28]
 801099e:	e841 2300 	strex	r3, r2, [r1]
 80109a2:	617b      	str	r3, [r7, #20]
   return(result);
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1e5      	bne.n	8010976 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2220      	movs	r2, #32
 80109ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109ba:	2303      	movs	r3, #3
 80109bc:	e012      	b.n	80109e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2220      	movs	r2, #32
 80109c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2220      	movs	r2, #32
 80109ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2200      	movs	r2, #0
 80109de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109e2:	2300      	movs	r3, #0
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3758      	adds	r7, #88	@ 0x58
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	603b      	str	r3, [r7, #0]
 80109f8:	4613      	mov	r3, r2
 80109fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80109fc:	e04f      	b.n	8010a9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a04:	d04b      	beq.n	8010a9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a06:	f7f8 f96d 	bl	8008ce4 <HAL_GetTick>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	1ad3      	subs	r3, r2, r3
 8010a10:	69ba      	ldr	r2, [r7, #24]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d302      	bcc.n	8010a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d101      	bne.n	8010a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010a1c:	2303      	movs	r3, #3
 8010a1e:	e04e      	b.n	8010abe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	f003 0304 	and.w	r3, r3, #4
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d037      	beq.n	8010a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	2b80      	cmp	r3, #128	@ 0x80
 8010a32:	d034      	beq.n	8010a9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2b40      	cmp	r3, #64	@ 0x40
 8010a38:	d031      	beq.n	8010a9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	69db      	ldr	r3, [r3, #28]
 8010a40:	f003 0308 	and.w	r3, r3, #8
 8010a44:	2b08      	cmp	r3, #8
 8010a46:	d110      	bne.n	8010a6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2208      	movs	r2, #8
 8010a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f000 f838 	bl	8010ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2208      	movs	r2, #8
 8010a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2200      	movs	r2, #0
 8010a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010a66:	2301      	movs	r3, #1
 8010a68:	e029      	b.n	8010abe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	69db      	ldr	r3, [r3, #28]
 8010a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010a78:	d111      	bne.n	8010a9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010a82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010a84:	68f8      	ldr	r0, [r7, #12]
 8010a86:	f000 f81e 	bl	8010ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2220      	movs	r2, #32
 8010a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2200      	movs	r2, #0
 8010a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010a9a:	2303      	movs	r3, #3
 8010a9c:	e00f      	b.n	8010abe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	69da      	ldr	r2, [r3, #28]
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	4013      	ands	r3, r2
 8010aa8:	68ba      	ldr	r2, [r7, #8]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	bf0c      	ite	eq
 8010aae:	2301      	moveq	r3, #1
 8010ab0:	2300      	movne	r3, #0
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	79fb      	ldrb	r3, [r7, #7]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d0a0      	beq.n	80109fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ac6:	b480      	push	{r7}
 8010ac8:	b095      	sub	sp, #84	@ 0x54
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ad6:	e853 3f00 	ldrex	r3, [r3]
 8010ada:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	461a      	mov	r2, r3
 8010aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8010aee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010af4:	e841 2300 	strex	r3, r2, [r1]
 8010af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d1e6      	bne.n	8010ace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	3308      	adds	r3, #8
 8010b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b08:	6a3b      	ldr	r3, [r7, #32]
 8010b0a:	e853 3f00 	ldrex	r3, [r3]
 8010b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010b16:	f023 0301 	bic.w	r3, r3, #1
 8010b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	3308      	adds	r3, #8
 8010b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b2c:	e841 2300 	strex	r3, r2, [r1]
 8010b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d1e3      	bne.n	8010b00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d118      	bne.n	8010b72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	e853 3f00 	ldrex	r3, [r3]
 8010b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	f023 0310 	bic.w	r3, r3, #16
 8010b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b5e:	61bb      	str	r3, [r7, #24]
 8010b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b62:	6979      	ldr	r1, [r7, #20]
 8010b64:	69ba      	ldr	r2, [r7, #24]
 8010b66:	e841 2300 	strex	r3, r2, [r1]
 8010b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d1e6      	bne.n	8010b40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2220      	movs	r2, #32
 8010b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010b86:	bf00      	nop
 8010b88:	3754      	adds	r7, #84	@ 0x54
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b92:	b480      	push	{r7}
 8010b94:	b085      	sub	sp, #20
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d101      	bne.n	8010ba8 <HAL_UARTEx_DisableFifoMode+0x16>
 8010ba4:	2302      	movs	r3, #2
 8010ba6:	e027      	b.n	8010bf8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2201      	movs	r2, #1
 8010bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2224      	movs	r2, #36	@ 0x24
 8010bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f022 0201 	bic.w	r2, r2, #1
 8010bce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010bd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2220      	movs	r2, #32
 8010bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010bf6:	2300      	movs	r3, #0
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3714      	adds	r7, #20
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c14:	2b01      	cmp	r3, #1
 8010c16:	d101      	bne.n	8010c1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010c18:	2302      	movs	r3, #2
 8010c1a:	e02d      	b.n	8010c78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2224      	movs	r2, #36	@ 0x24
 8010c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f022 0201 	bic.w	r2, r2, #1
 8010c42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	683a      	ldr	r2, [r7, #0]
 8010c54:	430a      	orrs	r2, r1
 8010c56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f000 f84f 	bl	8010cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2220      	movs	r2, #32
 8010c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c76:	2300      	movs	r3, #0
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3710      	adds	r7, #16
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d101      	bne.n	8010c98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c94:	2302      	movs	r3, #2
 8010c96:	e02d      	b.n	8010cf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2224      	movs	r2, #36	@ 0x24
 8010ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f022 0201 	bic.w	r2, r2, #1
 8010cbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	689b      	ldr	r3, [r3, #8]
 8010cc6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	683a      	ldr	r2, [r7, #0]
 8010cd0:	430a      	orrs	r2, r1
 8010cd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 f811 	bl	8010cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2220      	movs	r2, #32
 8010ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3710      	adds	r7, #16
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b085      	sub	sp, #20
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d108      	bne.n	8010d1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2201      	movs	r2, #1
 8010d18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d1c:	e031      	b.n	8010d82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d1e:	2308      	movs	r3, #8
 8010d20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d22:	2308      	movs	r3, #8
 8010d24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	0e5b      	lsrs	r3, r3, #25
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	f003 0307 	and.w	r3, r3, #7
 8010d34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	689b      	ldr	r3, [r3, #8]
 8010d3c:	0f5b      	lsrs	r3, r3, #29
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	f003 0307 	and.w	r3, r3, #7
 8010d44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d46:	7bbb      	ldrb	r3, [r7, #14]
 8010d48:	7b3a      	ldrb	r2, [r7, #12]
 8010d4a:	4911      	ldr	r1, [pc, #68]	@ (8010d90 <UARTEx_SetNbDataToProcess+0x94>)
 8010d4c:	5c8a      	ldrb	r2, [r1, r2]
 8010d4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d52:	7b3a      	ldrb	r2, [r7, #12]
 8010d54:	490f      	ldr	r1, [pc, #60]	@ (8010d94 <UARTEx_SetNbDataToProcess+0x98>)
 8010d56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d64:	7bfb      	ldrb	r3, [r7, #15]
 8010d66:	7b7a      	ldrb	r2, [r7, #13]
 8010d68:	4909      	ldr	r1, [pc, #36]	@ (8010d90 <UARTEx_SetNbDataToProcess+0x94>)
 8010d6a:	5c8a      	ldrb	r2, [r1, r2]
 8010d6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d70:	7b7a      	ldrb	r2, [r7, #13]
 8010d72:	4908      	ldr	r1, [pc, #32]	@ (8010d94 <UARTEx_SetNbDataToProcess+0x98>)
 8010d74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d76:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010d82:	bf00      	nop
 8010d84:	3714      	adds	r7, #20
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	0801593c 	.word	0x0801593c
 8010d94:	08015944 	.word	0x08015944

08010d98 <__cvt>:
 8010d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d9c:	ec57 6b10 	vmov	r6, r7, d0
 8010da0:	2f00      	cmp	r7, #0
 8010da2:	460c      	mov	r4, r1
 8010da4:	4619      	mov	r1, r3
 8010da6:	463b      	mov	r3, r7
 8010da8:	bfb4      	ite	lt
 8010daa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010dae:	2300      	movge	r3, #0
 8010db0:	4691      	mov	r9, r2
 8010db2:	bfbf      	itttt	lt
 8010db4:	4632      	movlt	r2, r6
 8010db6:	461f      	movlt	r7, r3
 8010db8:	232d      	movlt	r3, #45	@ 0x2d
 8010dba:	4616      	movlt	r6, r2
 8010dbc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010dc0:	700b      	strb	r3, [r1, #0]
 8010dc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010dc4:	f023 0820 	bic.w	r8, r3, #32
 8010dc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010dcc:	d005      	beq.n	8010dda <__cvt+0x42>
 8010dce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010dd2:	d100      	bne.n	8010dd6 <__cvt+0x3e>
 8010dd4:	3401      	adds	r4, #1
 8010dd6:	2102      	movs	r1, #2
 8010dd8:	e000      	b.n	8010ddc <__cvt+0x44>
 8010dda:	2103      	movs	r1, #3
 8010ddc:	ab03      	add	r3, sp, #12
 8010dde:	4622      	mov	r2, r4
 8010de0:	9301      	str	r3, [sp, #4]
 8010de2:	ab02      	add	r3, sp, #8
 8010de4:	ec47 6b10 	vmov	d0, r6, r7
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	4653      	mov	r3, sl
 8010dec:	f001 f98c 	bl	8012108 <_dtoa_r>
 8010df0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010df4:	4605      	mov	r5, r0
 8010df6:	d119      	bne.n	8010e2c <__cvt+0x94>
 8010df8:	f019 0f01 	tst.w	r9, #1
 8010dfc:	d00e      	beq.n	8010e1c <__cvt+0x84>
 8010dfe:	eb00 0904 	add.w	r9, r0, r4
 8010e02:	2200      	movs	r2, #0
 8010e04:	2300      	movs	r3, #0
 8010e06:	4630      	mov	r0, r6
 8010e08:	4639      	mov	r1, r7
 8010e0a:	f7ef fe61 	bl	8000ad0 <__aeabi_dcmpeq>
 8010e0e:	b108      	cbz	r0, 8010e14 <__cvt+0x7c>
 8010e10:	f8cd 900c 	str.w	r9, [sp, #12]
 8010e14:	2230      	movs	r2, #48	@ 0x30
 8010e16:	9b03      	ldr	r3, [sp, #12]
 8010e18:	454b      	cmp	r3, r9
 8010e1a:	d31e      	bcc.n	8010e5a <__cvt+0xc2>
 8010e1c:	9b03      	ldr	r3, [sp, #12]
 8010e1e:	4628      	mov	r0, r5
 8010e20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e22:	1b5b      	subs	r3, r3, r5
 8010e24:	6013      	str	r3, [r2, #0]
 8010e26:	b004      	add	sp, #16
 8010e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e30:	eb00 0904 	add.w	r9, r0, r4
 8010e34:	d1e5      	bne.n	8010e02 <__cvt+0x6a>
 8010e36:	7803      	ldrb	r3, [r0, #0]
 8010e38:	2b30      	cmp	r3, #48	@ 0x30
 8010e3a:	d10a      	bne.n	8010e52 <__cvt+0xba>
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2300      	movs	r3, #0
 8010e40:	4630      	mov	r0, r6
 8010e42:	4639      	mov	r1, r7
 8010e44:	f7ef fe44 	bl	8000ad0 <__aeabi_dcmpeq>
 8010e48:	b918      	cbnz	r0, 8010e52 <__cvt+0xba>
 8010e4a:	f1c4 0401 	rsb	r4, r4, #1
 8010e4e:	f8ca 4000 	str.w	r4, [sl]
 8010e52:	f8da 3000 	ldr.w	r3, [sl]
 8010e56:	4499      	add	r9, r3
 8010e58:	e7d3      	b.n	8010e02 <__cvt+0x6a>
 8010e5a:	1c59      	adds	r1, r3, #1
 8010e5c:	9103      	str	r1, [sp, #12]
 8010e5e:	701a      	strb	r2, [r3, #0]
 8010e60:	e7d9      	b.n	8010e16 <__cvt+0x7e>

08010e62 <__exponent>:
 8010e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e64:	2900      	cmp	r1, #0
 8010e66:	7002      	strb	r2, [r0, #0]
 8010e68:	bfba      	itte	lt
 8010e6a:	4249      	neglt	r1, r1
 8010e6c:	232d      	movlt	r3, #45	@ 0x2d
 8010e6e:	232b      	movge	r3, #43	@ 0x2b
 8010e70:	2909      	cmp	r1, #9
 8010e72:	7043      	strb	r3, [r0, #1]
 8010e74:	dd28      	ble.n	8010ec8 <__exponent+0x66>
 8010e76:	f10d 0307 	add.w	r3, sp, #7
 8010e7a:	270a      	movs	r7, #10
 8010e7c:	461d      	mov	r5, r3
 8010e7e:	461a      	mov	r2, r3
 8010e80:	3b01      	subs	r3, #1
 8010e82:	fbb1 f6f7 	udiv	r6, r1, r7
 8010e86:	fb07 1416 	mls	r4, r7, r6, r1
 8010e8a:	3430      	adds	r4, #48	@ 0x30
 8010e8c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010e90:	460c      	mov	r4, r1
 8010e92:	4631      	mov	r1, r6
 8010e94:	2c63      	cmp	r4, #99	@ 0x63
 8010e96:	dcf2      	bgt.n	8010e7e <__exponent+0x1c>
 8010e98:	3130      	adds	r1, #48	@ 0x30
 8010e9a:	1e94      	subs	r4, r2, #2
 8010e9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010ea0:	1c41      	adds	r1, r0, #1
 8010ea2:	4623      	mov	r3, r4
 8010ea4:	42ab      	cmp	r3, r5
 8010ea6:	d30a      	bcc.n	8010ebe <__exponent+0x5c>
 8010ea8:	f10d 0309 	add.w	r3, sp, #9
 8010eac:	1a9b      	subs	r3, r3, r2
 8010eae:	42ac      	cmp	r4, r5
 8010eb0:	bf88      	it	hi
 8010eb2:	2300      	movhi	r3, #0
 8010eb4:	3302      	adds	r3, #2
 8010eb6:	4403      	add	r3, r0
 8010eb8:	1a18      	subs	r0, r3, r0
 8010eba:	b003      	add	sp, #12
 8010ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ebe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010ec2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010ec6:	e7ed      	b.n	8010ea4 <__exponent+0x42>
 8010ec8:	2330      	movs	r3, #48	@ 0x30
 8010eca:	3130      	adds	r1, #48	@ 0x30
 8010ecc:	7083      	strb	r3, [r0, #2]
 8010ece:	1d03      	adds	r3, r0, #4
 8010ed0:	70c1      	strb	r1, [r0, #3]
 8010ed2:	e7f1      	b.n	8010eb8 <__exponent+0x56>

08010ed4 <_printf_float>:
 8010ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed8:	b08d      	sub	sp, #52	@ 0x34
 8010eda:	460c      	mov	r4, r1
 8010edc:	4616      	mov	r6, r2
 8010ede:	461f      	mov	r7, r3
 8010ee0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	f000 fff5 	bl	8011ed4 <_localeconv_r>
 8010eea:	6803      	ldr	r3, [r0, #0]
 8010eec:	4618      	mov	r0, r3
 8010eee:	9304      	str	r3, [sp, #16]
 8010ef0:	f7ef f9c2 	bl	8000278 <strlen>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	9005      	str	r0, [sp, #20]
 8010ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8010efa:	f8d8 3000 	ldr.w	r3, [r8]
 8010efe:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010f02:	3307      	adds	r3, #7
 8010f04:	f8d4 b000 	ldr.w	fp, [r4]
 8010f08:	f023 0307 	bic.w	r3, r3, #7
 8010f0c:	f103 0208 	add.w	r2, r3, #8
 8010f10:	f8c8 2000 	str.w	r2, [r8]
 8010f14:	f04f 32ff 	mov.w	r2, #4294967295
 8010f18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010f20:	f8cd 8018 	str.w	r8, [sp, #24]
 8010f24:	9307      	str	r3, [sp, #28]
 8010f26:	4b9d      	ldr	r3, [pc, #628]	@ (801119c <_printf_float+0x2c8>)
 8010f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010f30:	f7ef fe00 	bl	8000b34 <__aeabi_dcmpun>
 8010f34:	bb70      	cbnz	r0, 8010f94 <_printf_float+0xc0>
 8010f36:	f04f 32ff 	mov.w	r2, #4294967295
 8010f3a:	4b98      	ldr	r3, [pc, #608]	@ (801119c <_printf_float+0x2c8>)
 8010f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f40:	f7ef fdda 	bl	8000af8 <__aeabi_dcmple>
 8010f44:	bb30      	cbnz	r0, 8010f94 <_printf_float+0xc0>
 8010f46:	2200      	movs	r2, #0
 8010f48:	2300      	movs	r3, #0
 8010f4a:	4640      	mov	r0, r8
 8010f4c:	4649      	mov	r1, r9
 8010f4e:	f7ef fdc9 	bl	8000ae4 <__aeabi_dcmplt>
 8010f52:	b110      	cbz	r0, 8010f5a <_printf_float+0x86>
 8010f54:	232d      	movs	r3, #45	@ 0x2d
 8010f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f5a:	4a91      	ldr	r2, [pc, #580]	@ (80111a0 <_printf_float+0x2cc>)
 8010f5c:	4b91      	ldr	r3, [pc, #580]	@ (80111a4 <_printf_float+0x2d0>)
 8010f5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010f62:	bf94      	ite	ls
 8010f64:	4690      	movls	r8, r2
 8010f66:	4698      	movhi	r8, r3
 8010f68:	2303      	movs	r3, #3
 8010f6a:	f04f 0900 	mov.w	r9, #0
 8010f6e:	6123      	str	r3, [r4, #16]
 8010f70:	f02b 0304 	bic.w	r3, fp, #4
 8010f74:	6023      	str	r3, [r4, #0]
 8010f76:	4633      	mov	r3, r6
 8010f78:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010f7a:	4621      	mov	r1, r4
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	9700      	str	r7, [sp, #0]
 8010f80:	f000 f9d2 	bl	8011328 <_printf_common>
 8010f84:	3001      	adds	r0, #1
 8010f86:	f040 808d 	bne.w	80110a4 <_printf_float+0x1d0>
 8010f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f8e:	b00d      	add	sp, #52	@ 0x34
 8010f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f94:	4642      	mov	r2, r8
 8010f96:	464b      	mov	r3, r9
 8010f98:	4640      	mov	r0, r8
 8010f9a:	4649      	mov	r1, r9
 8010f9c:	f7ef fdca 	bl	8000b34 <__aeabi_dcmpun>
 8010fa0:	b140      	cbz	r0, 8010fb4 <_printf_float+0xe0>
 8010fa2:	464b      	mov	r3, r9
 8010fa4:	4a80      	ldr	r2, [pc, #512]	@ (80111a8 <_printf_float+0x2d4>)
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	bfbc      	itt	lt
 8010faa:	232d      	movlt	r3, #45	@ 0x2d
 8010fac:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80111ac <_printf_float+0x2d8>)
 8010fb2:	e7d4      	b.n	8010f5e <_printf_float+0x8a>
 8010fb4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010fb8:	6863      	ldr	r3, [r4, #4]
 8010fba:	9206      	str	r2, [sp, #24]
 8010fbc:	1c5a      	adds	r2, r3, #1
 8010fbe:	d13b      	bne.n	8011038 <_printf_float+0x164>
 8010fc0:	2306      	movs	r3, #6
 8010fc2:	6063      	str	r3, [r4, #4]
 8010fc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4628      	mov	r0, r5
 8010fcc:	6022      	str	r2, [r4, #0]
 8010fce:	9303      	str	r3, [sp, #12]
 8010fd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8010fd2:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010fd6:	ab09      	add	r3, sp, #36	@ 0x24
 8010fd8:	ec49 8b10 	vmov	d0, r8, r9
 8010fdc:	9300      	str	r3, [sp, #0]
 8010fde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010fe2:	6861      	ldr	r1, [r4, #4]
 8010fe4:	f7ff fed8 	bl	8010d98 <__cvt>
 8010fe8:	9b06      	ldr	r3, [sp, #24]
 8010fea:	4680      	mov	r8, r0
 8010fec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010fee:	2b47      	cmp	r3, #71	@ 0x47
 8010ff0:	d129      	bne.n	8011046 <_printf_float+0x172>
 8010ff2:	1cc8      	adds	r0, r1, #3
 8010ff4:	db02      	blt.n	8010ffc <_printf_float+0x128>
 8010ff6:	6863      	ldr	r3, [r4, #4]
 8010ff8:	4299      	cmp	r1, r3
 8010ffa:	dd41      	ble.n	8011080 <_printf_float+0x1ac>
 8010ffc:	f1aa 0a02 	sub.w	sl, sl, #2
 8011000:	fa5f fa8a 	uxtb.w	sl, sl
 8011004:	3901      	subs	r1, #1
 8011006:	4652      	mov	r2, sl
 8011008:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801100c:	9109      	str	r1, [sp, #36]	@ 0x24
 801100e:	f7ff ff28 	bl	8010e62 <__exponent>
 8011012:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011014:	4681      	mov	r9, r0
 8011016:	1813      	adds	r3, r2, r0
 8011018:	2a01      	cmp	r2, #1
 801101a:	6123      	str	r3, [r4, #16]
 801101c:	dc02      	bgt.n	8011024 <_printf_float+0x150>
 801101e:	6822      	ldr	r2, [r4, #0]
 8011020:	07d2      	lsls	r2, r2, #31
 8011022:	d501      	bpl.n	8011028 <_printf_float+0x154>
 8011024:	3301      	adds	r3, #1
 8011026:	6123      	str	r3, [r4, #16]
 8011028:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801102c:	2b00      	cmp	r3, #0
 801102e:	d0a2      	beq.n	8010f76 <_printf_float+0xa2>
 8011030:	232d      	movs	r3, #45	@ 0x2d
 8011032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011036:	e79e      	b.n	8010f76 <_printf_float+0xa2>
 8011038:	9a06      	ldr	r2, [sp, #24]
 801103a:	2a47      	cmp	r2, #71	@ 0x47
 801103c:	d1c2      	bne.n	8010fc4 <_printf_float+0xf0>
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1c0      	bne.n	8010fc4 <_printf_float+0xf0>
 8011042:	2301      	movs	r3, #1
 8011044:	e7bd      	b.n	8010fc2 <_printf_float+0xee>
 8011046:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801104a:	d9db      	bls.n	8011004 <_printf_float+0x130>
 801104c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011050:	d118      	bne.n	8011084 <_printf_float+0x1b0>
 8011052:	2900      	cmp	r1, #0
 8011054:	6863      	ldr	r3, [r4, #4]
 8011056:	dd0b      	ble.n	8011070 <_printf_float+0x19c>
 8011058:	6121      	str	r1, [r4, #16]
 801105a:	b913      	cbnz	r3, 8011062 <_printf_float+0x18e>
 801105c:	6822      	ldr	r2, [r4, #0]
 801105e:	07d0      	lsls	r0, r2, #31
 8011060:	d502      	bpl.n	8011068 <_printf_float+0x194>
 8011062:	3301      	adds	r3, #1
 8011064:	440b      	add	r3, r1
 8011066:	6123      	str	r3, [r4, #16]
 8011068:	f04f 0900 	mov.w	r9, #0
 801106c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801106e:	e7db      	b.n	8011028 <_printf_float+0x154>
 8011070:	b913      	cbnz	r3, 8011078 <_printf_float+0x1a4>
 8011072:	6822      	ldr	r2, [r4, #0]
 8011074:	07d2      	lsls	r2, r2, #31
 8011076:	d501      	bpl.n	801107c <_printf_float+0x1a8>
 8011078:	3302      	adds	r3, #2
 801107a:	e7f4      	b.n	8011066 <_printf_float+0x192>
 801107c:	2301      	movs	r3, #1
 801107e:	e7f2      	b.n	8011066 <_printf_float+0x192>
 8011080:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011086:	4299      	cmp	r1, r3
 8011088:	db05      	blt.n	8011096 <_printf_float+0x1c2>
 801108a:	6823      	ldr	r3, [r4, #0]
 801108c:	6121      	str	r1, [r4, #16]
 801108e:	07d8      	lsls	r0, r3, #31
 8011090:	d5ea      	bpl.n	8011068 <_printf_float+0x194>
 8011092:	1c4b      	adds	r3, r1, #1
 8011094:	e7e7      	b.n	8011066 <_printf_float+0x192>
 8011096:	2900      	cmp	r1, #0
 8011098:	bfd4      	ite	le
 801109a:	f1c1 0202 	rsble	r2, r1, #2
 801109e:	2201      	movgt	r2, #1
 80110a0:	4413      	add	r3, r2
 80110a2:	e7e0      	b.n	8011066 <_printf_float+0x192>
 80110a4:	6823      	ldr	r3, [r4, #0]
 80110a6:	055a      	lsls	r2, r3, #21
 80110a8:	d407      	bmi.n	80110ba <_printf_float+0x1e6>
 80110aa:	6923      	ldr	r3, [r4, #16]
 80110ac:	4642      	mov	r2, r8
 80110ae:	4631      	mov	r1, r6
 80110b0:	4628      	mov	r0, r5
 80110b2:	47b8      	blx	r7
 80110b4:	3001      	adds	r0, #1
 80110b6:	d12b      	bne.n	8011110 <_printf_float+0x23c>
 80110b8:	e767      	b.n	8010f8a <_printf_float+0xb6>
 80110ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80110be:	f240 80dd 	bls.w	801127c <_printf_float+0x3a8>
 80110c2:	2200      	movs	r2, #0
 80110c4:	2300      	movs	r3, #0
 80110c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80110ca:	f7ef fd01 	bl	8000ad0 <__aeabi_dcmpeq>
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d033      	beq.n	801113a <_printf_float+0x266>
 80110d2:	2301      	movs	r3, #1
 80110d4:	4a36      	ldr	r2, [pc, #216]	@ (80111b0 <_printf_float+0x2dc>)
 80110d6:	4631      	mov	r1, r6
 80110d8:	4628      	mov	r0, r5
 80110da:	47b8      	blx	r7
 80110dc:	3001      	adds	r0, #1
 80110de:	f43f af54 	beq.w	8010f8a <_printf_float+0xb6>
 80110e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80110e6:	4543      	cmp	r3, r8
 80110e8:	db02      	blt.n	80110f0 <_printf_float+0x21c>
 80110ea:	6823      	ldr	r3, [r4, #0]
 80110ec:	07d8      	lsls	r0, r3, #31
 80110ee:	d50f      	bpl.n	8011110 <_printf_float+0x23c>
 80110f0:	4631      	mov	r1, r6
 80110f2:	4628      	mov	r0, r5
 80110f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110f8:	47b8      	blx	r7
 80110fa:	3001      	adds	r0, #1
 80110fc:	f43f af45 	beq.w	8010f8a <_printf_float+0xb6>
 8011100:	f04f 0900 	mov.w	r9, #0
 8011104:	f108 38ff 	add.w	r8, r8, #4294967295
 8011108:	f104 0a1a 	add.w	sl, r4, #26
 801110c:	45c8      	cmp	r8, r9
 801110e:	dc09      	bgt.n	8011124 <_printf_float+0x250>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	079b      	lsls	r3, r3, #30
 8011114:	f100 8103 	bmi.w	801131e <_printf_float+0x44a>
 8011118:	68e0      	ldr	r0, [r4, #12]
 801111a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801111c:	4298      	cmp	r0, r3
 801111e:	bfb8      	it	lt
 8011120:	4618      	movlt	r0, r3
 8011122:	e734      	b.n	8010f8e <_printf_float+0xba>
 8011124:	2301      	movs	r3, #1
 8011126:	4652      	mov	r2, sl
 8011128:	4631      	mov	r1, r6
 801112a:	4628      	mov	r0, r5
 801112c:	47b8      	blx	r7
 801112e:	3001      	adds	r0, #1
 8011130:	f43f af2b 	beq.w	8010f8a <_printf_float+0xb6>
 8011134:	f109 0901 	add.w	r9, r9, #1
 8011138:	e7e8      	b.n	801110c <_printf_float+0x238>
 801113a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801113c:	2b00      	cmp	r3, #0
 801113e:	dc39      	bgt.n	80111b4 <_printf_float+0x2e0>
 8011140:	2301      	movs	r3, #1
 8011142:	4a1b      	ldr	r2, [pc, #108]	@ (80111b0 <_printf_float+0x2dc>)
 8011144:	4631      	mov	r1, r6
 8011146:	4628      	mov	r0, r5
 8011148:	47b8      	blx	r7
 801114a:	3001      	adds	r0, #1
 801114c:	f43f af1d 	beq.w	8010f8a <_printf_float+0xb6>
 8011150:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011154:	ea59 0303 	orrs.w	r3, r9, r3
 8011158:	d102      	bne.n	8011160 <_printf_float+0x28c>
 801115a:	6823      	ldr	r3, [r4, #0]
 801115c:	07d9      	lsls	r1, r3, #31
 801115e:	d5d7      	bpl.n	8011110 <_printf_float+0x23c>
 8011160:	4631      	mov	r1, r6
 8011162:	4628      	mov	r0, r5
 8011164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011168:	47b8      	blx	r7
 801116a:	3001      	adds	r0, #1
 801116c:	f43f af0d 	beq.w	8010f8a <_printf_float+0xb6>
 8011170:	f04f 0a00 	mov.w	sl, #0
 8011174:	f104 0b1a 	add.w	fp, r4, #26
 8011178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801117a:	425b      	negs	r3, r3
 801117c:	4553      	cmp	r3, sl
 801117e:	dc01      	bgt.n	8011184 <_printf_float+0x2b0>
 8011180:	464b      	mov	r3, r9
 8011182:	e793      	b.n	80110ac <_printf_float+0x1d8>
 8011184:	2301      	movs	r3, #1
 8011186:	465a      	mov	r2, fp
 8011188:	4631      	mov	r1, r6
 801118a:	4628      	mov	r0, r5
 801118c:	47b8      	blx	r7
 801118e:	3001      	adds	r0, #1
 8011190:	f43f aefb 	beq.w	8010f8a <_printf_float+0xb6>
 8011194:	f10a 0a01 	add.w	sl, sl, #1
 8011198:	e7ee      	b.n	8011178 <_printf_float+0x2a4>
 801119a:	bf00      	nop
 801119c:	7fefffff 	.word	0x7fefffff
 80111a0:	0801594c 	.word	0x0801594c
 80111a4:	08015950 	.word	0x08015950
 80111a8:	08015954 	.word	0x08015954
 80111ac:	08015958 	.word	0x08015958
 80111b0:	0801595c 	.word	0x0801595c
 80111b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80111b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80111ba:	4553      	cmp	r3, sl
 80111bc:	bfa8      	it	ge
 80111be:	4653      	movge	r3, sl
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	4699      	mov	r9, r3
 80111c4:	dc36      	bgt.n	8011234 <_printf_float+0x360>
 80111c6:	f04f 0b00 	mov.w	fp, #0
 80111ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111ce:	f104 021a 	add.w	r2, r4, #26
 80111d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80111d4:	9306      	str	r3, [sp, #24]
 80111d6:	eba3 0309 	sub.w	r3, r3, r9
 80111da:	455b      	cmp	r3, fp
 80111dc:	dc31      	bgt.n	8011242 <_printf_float+0x36e>
 80111de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111e0:	459a      	cmp	sl, r3
 80111e2:	dc3a      	bgt.n	801125a <_printf_float+0x386>
 80111e4:	6823      	ldr	r3, [r4, #0]
 80111e6:	07da      	lsls	r2, r3, #31
 80111e8:	d437      	bmi.n	801125a <_printf_float+0x386>
 80111ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111ec:	ebaa 0903 	sub.w	r9, sl, r3
 80111f0:	9b06      	ldr	r3, [sp, #24]
 80111f2:	ebaa 0303 	sub.w	r3, sl, r3
 80111f6:	4599      	cmp	r9, r3
 80111f8:	bfa8      	it	ge
 80111fa:	4699      	movge	r9, r3
 80111fc:	f1b9 0f00 	cmp.w	r9, #0
 8011200:	dc33      	bgt.n	801126a <_printf_float+0x396>
 8011202:	f04f 0800 	mov.w	r8, #0
 8011206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801120a:	f104 0b1a 	add.w	fp, r4, #26
 801120e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011210:	ebaa 0303 	sub.w	r3, sl, r3
 8011214:	eba3 0309 	sub.w	r3, r3, r9
 8011218:	4543      	cmp	r3, r8
 801121a:	f77f af79 	ble.w	8011110 <_printf_float+0x23c>
 801121e:	2301      	movs	r3, #1
 8011220:	465a      	mov	r2, fp
 8011222:	4631      	mov	r1, r6
 8011224:	4628      	mov	r0, r5
 8011226:	47b8      	blx	r7
 8011228:	3001      	adds	r0, #1
 801122a:	f43f aeae 	beq.w	8010f8a <_printf_float+0xb6>
 801122e:	f108 0801 	add.w	r8, r8, #1
 8011232:	e7ec      	b.n	801120e <_printf_float+0x33a>
 8011234:	4642      	mov	r2, r8
 8011236:	4631      	mov	r1, r6
 8011238:	4628      	mov	r0, r5
 801123a:	47b8      	blx	r7
 801123c:	3001      	adds	r0, #1
 801123e:	d1c2      	bne.n	80111c6 <_printf_float+0x2f2>
 8011240:	e6a3      	b.n	8010f8a <_printf_float+0xb6>
 8011242:	2301      	movs	r3, #1
 8011244:	4631      	mov	r1, r6
 8011246:	4628      	mov	r0, r5
 8011248:	9206      	str	r2, [sp, #24]
 801124a:	47b8      	blx	r7
 801124c:	3001      	adds	r0, #1
 801124e:	f43f ae9c 	beq.w	8010f8a <_printf_float+0xb6>
 8011252:	f10b 0b01 	add.w	fp, fp, #1
 8011256:	9a06      	ldr	r2, [sp, #24]
 8011258:	e7bb      	b.n	80111d2 <_printf_float+0x2fe>
 801125a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801125e:	4631      	mov	r1, r6
 8011260:	4628      	mov	r0, r5
 8011262:	47b8      	blx	r7
 8011264:	3001      	adds	r0, #1
 8011266:	d1c0      	bne.n	80111ea <_printf_float+0x316>
 8011268:	e68f      	b.n	8010f8a <_printf_float+0xb6>
 801126a:	9a06      	ldr	r2, [sp, #24]
 801126c:	464b      	mov	r3, r9
 801126e:	4631      	mov	r1, r6
 8011270:	4628      	mov	r0, r5
 8011272:	4442      	add	r2, r8
 8011274:	47b8      	blx	r7
 8011276:	3001      	adds	r0, #1
 8011278:	d1c3      	bne.n	8011202 <_printf_float+0x32e>
 801127a:	e686      	b.n	8010f8a <_printf_float+0xb6>
 801127c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011280:	f1ba 0f01 	cmp.w	sl, #1
 8011284:	dc01      	bgt.n	801128a <_printf_float+0x3b6>
 8011286:	07db      	lsls	r3, r3, #31
 8011288:	d536      	bpl.n	80112f8 <_printf_float+0x424>
 801128a:	2301      	movs	r3, #1
 801128c:	4642      	mov	r2, r8
 801128e:	4631      	mov	r1, r6
 8011290:	4628      	mov	r0, r5
 8011292:	47b8      	blx	r7
 8011294:	3001      	adds	r0, #1
 8011296:	f43f ae78 	beq.w	8010f8a <_printf_float+0xb6>
 801129a:	4631      	mov	r1, r6
 801129c:	4628      	mov	r0, r5
 801129e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112a2:	47b8      	blx	r7
 80112a4:	3001      	adds	r0, #1
 80112a6:	f43f ae70 	beq.w	8010f8a <_printf_float+0xb6>
 80112aa:	2200      	movs	r2, #0
 80112ac:	2300      	movs	r3, #0
 80112ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80112b6:	f7ef fc0b 	bl	8000ad0 <__aeabi_dcmpeq>
 80112ba:	b9c0      	cbnz	r0, 80112ee <_printf_float+0x41a>
 80112bc:	4653      	mov	r3, sl
 80112be:	f108 0201 	add.w	r2, r8, #1
 80112c2:	4631      	mov	r1, r6
 80112c4:	4628      	mov	r0, r5
 80112c6:	47b8      	blx	r7
 80112c8:	3001      	adds	r0, #1
 80112ca:	d10c      	bne.n	80112e6 <_printf_float+0x412>
 80112cc:	e65d      	b.n	8010f8a <_printf_float+0xb6>
 80112ce:	2301      	movs	r3, #1
 80112d0:	465a      	mov	r2, fp
 80112d2:	4631      	mov	r1, r6
 80112d4:	4628      	mov	r0, r5
 80112d6:	47b8      	blx	r7
 80112d8:	3001      	adds	r0, #1
 80112da:	f43f ae56 	beq.w	8010f8a <_printf_float+0xb6>
 80112de:	f108 0801 	add.w	r8, r8, #1
 80112e2:	45d0      	cmp	r8, sl
 80112e4:	dbf3      	blt.n	80112ce <_printf_float+0x3fa>
 80112e6:	464b      	mov	r3, r9
 80112e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80112ec:	e6df      	b.n	80110ae <_printf_float+0x1da>
 80112ee:	f04f 0800 	mov.w	r8, #0
 80112f2:	f104 0b1a 	add.w	fp, r4, #26
 80112f6:	e7f4      	b.n	80112e2 <_printf_float+0x40e>
 80112f8:	2301      	movs	r3, #1
 80112fa:	4642      	mov	r2, r8
 80112fc:	e7e1      	b.n	80112c2 <_printf_float+0x3ee>
 80112fe:	2301      	movs	r3, #1
 8011300:	464a      	mov	r2, r9
 8011302:	4631      	mov	r1, r6
 8011304:	4628      	mov	r0, r5
 8011306:	47b8      	blx	r7
 8011308:	3001      	adds	r0, #1
 801130a:	f43f ae3e 	beq.w	8010f8a <_printf_float+0xb6>
 801130e:	f108 0801 	add.w	r8, r8, #1
 8011312:	68e3      	ldr	r3, [r4, #12]
 8011314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011316:	1a5b      	subs	r3, r3, r1
 8011318:	4543      	cmp	r3, r8
 801131a:	dcf0      	bgt.n	80112fe <_printf_float+0x42a>
 801131c:	e6fc      	b.n	8011118 <_printf_float+0x244>
 801131e:	f04f 0800 	mov.w	r8, #0
 8011322:	f104 0919 	add.w	r9, r4, #25
 8011326:	e7f4      	b.n	8011312 <_printf_float+0x43e>

08011328 <_printf_common>:
 8011328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801132c:	4616      	mov	r6, r2
 801132e:	4698      	mov	r8, r3
 8011330:	688a      	ldr	r2, [r1, #8]
 8011332:	4607      	mov	r7, r0
 8011334:	690b      	ldr	r3, [r1, #16]
 8011336:	460c      	mov	r4, r1
 8011338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801133c:	4293      	cmp	r3, r2
 801133e:	bfb8      	it	lt
 8011340:	4613      	movlt	r3, r2
 8011342:	6033      	str	r3, [r6, #0]
 8011344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011348:	b10a      	cbz	r2, 801134e <_printf_common+0x26>
 801134a:	3301      	adds	r3, #1
 801134c:	6033      	str	r3, [r6, #0]
 801134e:	6823      	ldr	r3, [r4, #0]
 8011350:	0699      	lsls	r1, r3, #26
 8011352:	bf42      	ittt	mi
 8011354:	6833      	ldrmi	r3, [r6, #0]
 8011356:	3302      	addmi	r3, #2
 8011358:	6033      	strmi	r3, [r6, #0]
 801135a:	6825      	ldr	r5, [r4, #0]
 801135c:	f015 0506 	ands.w	r5, r5, #6
 8011360:	d106      	bne.n	8011370 <_printf_common+0x48>
 8011362:	f104 0a19 	add.w	sl, r4, #25
 8011366:	68e3      	ldr	r3, [r4, #12]
 8011368:	6832      	ldr	r2, [r6, #0]
 801136a:	1a9b      	subs	r3, r3, r2
 801136c:	42ab      	cmp	r3, r5
 801136e:	dc2b      	bgt.n	80113c8 <_printf_common+0xa0>
 8011370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011374:	6822      	ldr	r2, [r4, #0]
 8011376:	3b00      	subs	r3, #0
 8011378:	bf18      	it	ne
 801137a:	2301      	movne	r3, #1
 801137c:	0692      	lsls	r2, r2, #26
 801137e:	d430      	bmi.n	80113e2 <_printf_common+0xba>
 8011380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011384:	4641      	mov	r1, r8
 8011386:	4638      	mov	r0, r7
 8011388:	47c8      	blx	r9
 801138a:	3001      	adds	r0, #1
 801138c:	d023      	beq.n	80113d6 <_printf_common+0xae>
 801138e:	6823      	ldr	r3, [r4, #0]
 8011390:	341a      	adds	r4, #26
 8011392:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8011396:	f003 0306 	and.w	r3, r3, #6
 801139a:	2b04      	cmp	r3, #4
 801139c:	bf0a      	itet	eq
 801139e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80113a2:	2500      	movne	r5, #0
 80113a4:	6833      	ldreq	r3, [r6, #0]
 80113a6:	f04f 0600 	mov.w	r6, #0
 80113aa:	bf08      	it	eq
 80113ac:	1aed      	subeq	r5, r5, r3
 80113ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80113b2:	bf08      	it	eq
 80113b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113b8:	4293      	cmp	r3, r2
 80113ba:	bfc4      	itt	gt
 80113bc:	1a9b      	subgt	r3, r3, r2
 80113be:	18ed      	addgt	r5, r5, r3
 80113c0:	42b5      	cmp	r5, r6
 80113c2:	d11a      	bne.n	80113fa <_printf_common+0xd2>
 80113c4:	2000      	movs	r0, #0
 80113c6:	e008      	b.n	80113da <_printf_common+0xb2>
 80113c8:	2301      	movs	r3, #1
 80113ca:	4652      	mov	r2, sl
 80113cc:	4641      	mov	r1, r8
 80113ce:	4638      	mov	r0, r7
 80113d0:	47c8      	blx	r9
 80113d2:	3001      	adds	r0, #1
 80113d4:	d103      	bne.n	80113de <_printf_common+0xb6>
 80113d6:	f04f 30ff 	mov.w	r0, #4294967295
 80113da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113de:	3501      	adds	r5, #1
 80113e0:	e7c1      	b.n	8011366 <_printf_common+0x3e>
 80113e2:	18e1      	adds	r1, r4, r3
 80113e4:	1c5a      	adds	r2, r3, #1
 80113e6:	2030      	movs	r0, #48	@ 0x30
 80113e8:	3302      	adds	r3, #2
 80113ea:	4422      	add	r2, r4
 80113ec:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80113f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80113f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80113f8:	e7c2      	b.n	8011380 <_printf_common+0x58>
 80113fa:	2301      	movs	r3, #1
 80113fc:	4622      	mov	r2, r4
 80113fe:	4641      	mov	r1, r8
 8011400:	4638      	mov	r0, r7
 8011402:	47c8      	blx	r9
 8011404:	3001      	adds	r0, #1
 8011406:	d0e6      	beq.n	80113d6 <_printf_common+0xae>
 8011408:	3601      	adds	r6, #1
 801140a:	e7d9      	b.n	80113c0 <_printf_common+0x98>

0801140c <_printf_i>:
 801140c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011410:	7e0f      	ldrb	r7, [r1, #24]
 8011412:	4691      	mov	r9, r2
 8011414:	4680      	mov	r8, r0
 8011416:	460c      	mov	r4, r1
 8011418:	2f78      	cmp	r7, #120	@ 0x78
 801141a:	469a      	mov	sl, r3
 801141c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801141e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011422:	d807      	bhi.n	8011434 <_printf_i+0x28>
 8011424:	2f62      	cmp	r7, #98	@ 0x62
 8011426:	d80a      	bhi.n	801143e <_printf_i+0x32>
 8011428:	2f00      	cmp	r7, #0
 801142a:	f000 80d2 	beq.w	80115d2 <_printf_i+0x1c6>
 801142e:	2f58      	cmp	r7, #88	@ 0x58
 8011430:	f000 80b9 	beq.w	80115a6 <_printf_i+0x19a>
 8011434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011438:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801143c:	e03a      	b.n	80114b4 <_printf_i+0xa8>
 801143e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011442:	2b15      	cmp	r3, #21
 8011444:	d8f6      	bhi.n	8011434 <_printf_i+0x28>
 8011446:	a101      	add	r1, pc, #4	@ (adr r1, 801144c <_printf_i+0x40>)
 8011448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801144c:	080114a5 	.word	0x080114a5
 8011450:	080114b9 	.word	0x080114b9
 8011454:	08011435 	.word	0x08011435
 8011458:	08011435 	.word	0x08011435
 801145c:	08011435 	.word	0x08011435
 8011460:	08011435 	.word	0x08011435
 8011464:	080114b9 	.word	0x080114b9
 8011468:	08011435 	.word	0x08011435
 801146c:	08011435 	.word	0x08011435
 8011470:	08011435 	.word	0x08011435
 8011474:	08011435 	.word	0x08011435
 8011478:	080115b9 	.word	0x080115b9
 801147c:	080114e3 	.word	0x080114e3
 8011480:	08011573 	.word	0x08011573
 8011484:	08011435 	.word	0x08011435
 8011488:	08011435 	.word	0x08011435
 801148c:	080115db 	.word	0x080115db
 8011490:	08011435 	.word	0x08011435
 8011494:	080114e3 	.word	0x080114e3
 8011498:	08011435 	.word	0x08011435
 801149c:	08011435 	.word	0x08011435
 80114a0:	0801157b 	.word	0x0801157b
 80114a4:	6833      	ldr	r3, [r6, #0]
 80114a6:	1d1a      	adds	r2, r3, #4
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	6032      	str	r2, [r6, #0]
 80114ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80114b4:	2301      	movs	r3, #1
 80114b6:	e09d      	b.n	80115f4 <_printf_i+0x1e8>
 80114b8:	6833      	ldr	r3, [r6, #0]
 80114ba:	6820      	ldr	r0, [r4, #0]
 80114bc:	1d19      	adds	r1, r3, #4
 80114be:	6031      	str	r1, [r6, #0]
 80114c0:	0606      	lsls	r6, r0, #24
 80114c2:	d501      	bpl.n	80114c8 <_printf_i+0xbc>
 80114c4:	681d      	ldr	r5, [r3, #0]
 80114c6:	e003      	b.n	80114d0 <_printf_i+0xc4>
 80114c8:	0645      	lsls	r5, r0, #25
 80114ca:	d5fb      	bpl.n	80114c4 <_printf_i+0xb8>
 80114cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80114d0:	2d00      	cmp	r5, #0
 80114d2:	da03      	bge.n	80114dc <_printf_i+0xd0>
 80114d4:	232d      	movs	r3, #45	@ 0x2d
 80114d6:	426d      	negs	r5, r5
 80114d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114dc:	4859      	ldr	r0, [pc, #356]	@ (8011644 <_printf_i+0x238>)
 80114de:	230a      	movs	r3, #10
 80114e0:	e011      	b.n	8011506 <_printf_i+0xfa>
 80114e2:	6821      	ldr	r1, [r4, #0]
 80114e4:	6833      	ldr	r3, [r6, #0]
 80114e6:	0608      	lsls	r0, r1, #24
 80114e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80114ec:	d402      	bmi.n	80114f4 <_printf_i+0xe8>
 80114ee:	0649      	lsls	r1, r1, #25
 80114f0:	bf48      	it	mi
 80114f2:	b2ad      	uxthmi	r5, r5
 80114f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80114f6:	6033      	str	r3, [r6, #0]
 80114f8:	4852      	ldr	r0, [pc, #328]	@ (8011644 <_printf_i+0x238>)
 80114fa:	bf14      	ite	ne
 80114fc:	230a      	movne	r3, #10
 80114fe:	2308      	moveq	r3, #8
 8011500:	2100      	movs	r1, #0
 8011502:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011506:	6866      	ldr	r6, [r4, #4]
 8011508:	2e00      	cmp	r6, #0
 801150a:	60a6      	str	r6, [r4, #8]
 801150c:	bfa2      	ittt	ge
 801150e:	6821      	ldrge	r1, [r4, #0]
 8011510:	f021 0104 	bicge.w	r1, r1, #4
 8011514:	6021      	strge	r1, [r4, #0]
 8011516:	b90d      	cbnz	r5, 801151c <_printf_i+0x110>
 8011518:	2e00      	cmp	r6, #0
 801151a:	d04b      	beq.n	80115b4 <_printf_i+0x1a8>
 801151c:	4616      	mov	r6, r2
 801151e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011522:	fb03 5711 	mls	r7, r3, r1, r5
 8011526:	5dc7      	ldrb	r7, [r0, r7]
 8011528:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801152c:	462f      	mov	r7, r5
 801152e:	460d      	mov	r5, r1
 8011530:	42bb      	cmp	r3, r7
 8011532:	d9f4      	bls.n	801151e <_printf_i+0x112>
 8011534:	2b08      	cmp	r3, #8
 8011536:	d10b      	bne.n	8011550 <_printf_i+0x144>
 8011538:	6823      	ldr	r3, [r4, #0]
 801153a:	07df      	lsls	r7, r3, #31
 801153c:	d508      	bpl.n	8011550 <_printf_i+0x144>
 801153e:	6923      	ldr	r3, [r4, #16]
 8011540:	6861      	ldr	r1, [r4, #4]
 8011542:	4299      	cmp	r1, r3
 8011544:	bfde      	ittt	le
 8011546:	2330      	movle	r3, #48	@ 0x30
 8011548:	f806 3c01 	strble.w	r3, [r6, #-1]
 801154c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011550:	1b92      	subs	r2, r2, r6
 8011552:	6122      	str	r2, [r4, #16]
 8011554:	464b      	mov	r3, r9
 8011556:	aa03      	add	r2, sp, #12
 8011558:	4621      	mov	r1, r4
 801155a:	4640      	mov	r0, r8
 801155c:	f8cd a000 	str.w	sl, [sp]
 8011560:	f7ff fee2 	bl	8011328 <_printf_common>
 8011564:	3001      	adds	r0, #1
 8011566:	d14a      	bne.n	80115fe <_printf_i+0x1f2>
 8011568:	f04f 30ff 	mov.w	r0, #4294967295
 801156c:	b004      	add	sp, #16
 801156e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011572:	6823      	ldr	r3, [r4, #0]
 8011574:	f043 0320 	orr.w	r3, r3, #32
 8011578:	6023      	str	r3, [r4, #0]
 801157a:	2778      	movs	r7, #120	@ 0x78
 801157c:	4832      	ldr	r0, [pc, #200]	@ (8011648 <_printf_i+0x23c>)
 801157e:	6823      	ldr	r3, [r4, #0]
 8011580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011584:	061f      	lsls	r7, r3, #24
 8011586:	6831      	ldr	r1, [r6, #0]
 8011588:	f851 5b04 	ldr.w	r5, [r1], #4
 801158c:	d402      	bmi.n	8011594 <_printf_i+0x188>
 801158e:	065f      	lsls	r7, r3, #25
 8011590:	bf48      	it	mi
 8011592:	b2ad      	uxthmi	r5, r5
 8011594:	6031      	str	r1, [r6, #0]
 8011596:	07d9      	lsls	r1, r3, #31
 8011598:	bf44      	itt	mi
 801159a:	f043 0320 	orrmi.w	r3, r3, #32
 801159e:	6023      	strmi	r3, [r4, #0]
 80115a0:	b11d      	cbz	r5, 80115aa <_printf_i+0x19e>
 80115a2:	2310      	movs	r3, #16
 80115a4:	e7ac      	b.n	8011500 <_printf_i+0xf4>
 80115a6:	4827      	ldr	r0, [pc, #156]	@ (8011644 <_printf_i+0x238>)
 80115a8:	e7e9      	b.n	801157e <_printf_i+0x172>
 80115aa:	6823      	ldr	r3, [r4, #0]
 80115ac:	f023 0320 	bic.w	r3, r3, #32
 80115b0:	6023      	str	r3, [r4, #0]
 80115b2:	e7f6      	b.n	80115a2 <_printf_i+0x196>
 80115b4:	4616      	mov	r6, r2
 80115b6:	e7bd      	b.n	8011534 <_printf_i+0x128>
 80115b8:	6833      	ldr	r3, [r6, #0]
 80115ba:	6825      	ldr	r5, [r4, #0]
 80115bc:	1d18      	adds	r0, r3, #4
 80115be:	6961      	ldr	r1, [r4, #20]
 80115c0:	6030      	str	r0, [r6, #0]
 80115c2:	062e      	lsls	r6, r5, #24
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	d501      	bpl.n	80115cc <_printf_i+0x1c0>
 80115c8:	6019      	str	r1, [r3, #0]
 80115ca:	e002      	b.n	80115d2 <_printf_i+0x1c6>
 80115cc:	0668      	lsls	r0, r5, #25
 80115ce:	d5fb      	bpl.n	80115c8 <_printf_i+0x1bc>
 80115d0:	8019      	strh	r1, [r3, #0]
 80115d2:	2300      	movs	r3, #0
 80115d4:	4616      	mov	r6, r2
 80115d6:	6123      	str	r3, [r4, #16]
 80115d8:	e7bc      	b.n	8011554 <_printf_i+0x148>
 80115da:	6833      	ldr	r3, [r6, #0]
 80115dc:	2100      	movs	r1, #0
 80115de:	1d1a      	adds	r2, r3, #4
 80115e0:	6032      	str	r2, [r6, #0]
 80115e2:	681e      	ldr	r6, [r3, #0]
 80115e4:	6862      	ldr	r2, [r4, #4]
 80115e6:	4630      	mov	r0, r6
 80115e8:	f000 fceb 	bl	8011fc2 <memchr>
 80115ec:	b108      	cbz	r0, 80115f2 <_printf_i+0x1e6>
 80115ee:	1b80      	subs	r0, r0, r6
 80115f0:	6060      	str	r0, [r4, #4]
 80115f2:	6863      	ldr	r3, [r4, #4]
 80115f4:	6123      	str	r3, [r4, #16]
 80115f6:	2300      	movs	r3, #0
 80115f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115fc:	e7aa      	b.n	8011554 <_printf_i+0x148>
 80115fe:	6923      	ldr	r3, [r4, #16]
 8011600:	4632      	mov	r2, r6
 8011602:	4649      	mov	r1, r9
 8011604:	4640      	mov	r0, r8
 8011606:	47d0      	blx	sl
 8011608:	3001      	adds	r0, #1
 801160a:	d0ad      	beq.n	8011568 <_printf_i+0x15c>
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	079b      	lsls	r3, r3, #30
 8011610:	d413      	bmi.n	801163a <_printf_i+0x22e>
 8011612:	68e0      	ldr	r0, [r4, #12]
 8011614:	9b03      	ldr	r3, [sp, #12]
 8011616:	4298      	cmp	r0, r3
 8011618:	bfb8      	it	lt
 801161a:	4618      	movlt	r0, r3
 801161c:	e7a6      	b.n	801156c <_printf_i+0x160>
 801161e:	2301      	movs	r3, #1
 8011620:	4632      	mov	r2, r6
 8011622:	4649      	mov	r1, r9
 8011624:	4640      	mov	r0, r8
 8011626:	47d0      	blx	sl
 8011628:	3001      	adds	r0, #1
 801162a:	d09d      	beq.n	8011568 <_printf_i+0x15c>
 801162c:	3501      	adds	r5, #1
 801162e:	68e3      	ldr	r3, [r4, #12]
 8011630:	9903      	ldr	r1, [sp, #12]
 8011632:	1a5b      	subs	r3, r3, r1
 8011634:	42ab      	cmp	r3, r5
 8011636:	dcf2      	bgt.n	801161e <_printf_i+0x212>
 8011638:	e7eb      	b.n	8011612 <_printf_i+0x206>
 801163a:	2500      	movs	r5, #0
 801163c:	f104 0619 	add.w	r6, r4, #25
 8011640:	e7f5      	b.n	801162e <_printf_i+0x222>
 8011642:	bf00      	nop
 8011644:	0801595e 	.word	0x0801595e
 8011648:	0801596f 	.word	0x0801596f

0801164c <_scanf_float>:
 801164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011650:	b087      	sub	sp, #28
 8011652:	4617      	mov	r7, r2
 8011654:	4680      	mov	r8, r0
 8011656:	460c      	mov	r4, r1
 8011658:	9303      	str	r3, [sp, #12]
 801165a:	688b      	ldr	r3, [r1, #8]
 801165c:	1e5a      	subs	r2, r3, #1
 801165e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011662:	460a      	mov	r2, r1
 8011664:	bf89      	itett	hi
 8011666:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801166a:	f04f 0b00 	movls.w	fp, #0
 801166e:	eb03 0b05 	addhi.w	fp, r3, r5
 8011672:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011676:	f04f 0500 	mov.w	r5, #0
 801167a:	bf88      	it	hi
 801167c:	608b      	strhi	r3, [r1, #8]
 801167e:	680b      	ldr	r3, [r1, #0]
 8011680:	46aa      	mov	sl, r5
 8011682:	46a9      	mov	r9, r5
 8011684:	9502      	str	r5, [sp, #8]
 8011686:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801168a:	f842 3b1c 	str.w	r3, [r2], #28
 801168e:	4616      	mov	r6, r2
 8011690:	9201      	str	r2, [sp, #4]
 8011692:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011696:	68a2      	ldr	r2, [r4, #8]
 8011698:	b152      	cbz	r2, 80116b0 <_scanf_float+0x64>
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	2b4e      	cmp	r3, #78	@ 0x4e
 80116a0:	d864      	bhi.n	801176c <_scanf_float+0x120>
 80116a2:	2b40      	cmp	r3, #64	@ 0x40
 80116a4:	d83c      	bhi.n	8011720 <_scanf_float+0xd4>
 80116a6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80116aa:	b2c8      	uxtb	r0, r1
 80116ac:	280e      	cmp	r0, #14
 80116ae:	d93a      	bls.n	8011726 <_scanf_float+0xda>
 80116b0:	f1b9 0f00 	cmp.w	r9, #0
 80116b4:	d003      	beq.n	80116be <_scanf_float+0x72>
 80116b6:	6823      	ldr	r3, [r4, #0]
 80116b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116bc:	6023      	str	r3, [r4, #0]
 80116be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80116c2:	f1ba 0f01 	cmp.w	sl, #1
 80116c6:	f200 8117 	bhi.w	80118f8 <_scanf_float+0x2ac>
 80116ca:	9b01      	ldr	r3, [sp, #4]
 80116cc:	429e      	cmp	r6, r3
 80116ce:	f200 8108 	bhi.w	80118e2 <_scanf_float+0x296>
 80116d2:	2001      	movs	r0, #1
 80116d4:	b007      	add	sp, #28
 80116d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116da:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80116de:	2a0d      	cmp	r2, #13
 80116e0:	d8e6      	bhi.n	80116b0 <_scanf_float+0x64>
 80116e2:	a101      	add	r1, pc, #4	@ (adr r1, 80116e8 <_scanf_float+0x9c>)
 80116e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80116e8:	0801182f 	.word	0x0801182f
 80116ec:	080116b1 	.word	0x080116b1
 80116f0:	080116b1 	.word	0x080116b1
 80116f4:	080116b1 	.word	0x080116b1
 80116f8:	0801188f 	.word	0x0801188f
 80116fc:	08011867 	.word	0x08011867
 8011700:	080116b1 	.word	0x080116b1
 8011704:	080116b1 	.word	0x080116b1
 8011708:	0801183d 	.word	0x0801183d
 801170c:	080116b1 	.word	0x080116b1
 8011710:	080116b1 	.word	0x080116b1
 8011714:	080116b1 	.word	0x080116b1
 8011718:	080116b1 	.word	0x080116b1
 801171c:	080117f5 	.word	0x080117f5
 8011720:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011724:	e7db      	b.n	80116de <_scanf_float+0x92>
 8011726:	290e      	cmp	r1, #14
 8011728:	d8c2      	bhi.n	80116b0 <_scanf_float+0x64>
 801172a:	a001      	add	r0, pc, #4	@ (adr r0, 8011730 <_scanf_float+0xe4>)
 801172c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011730:	080117e5 	.word	0x080117e5
 8011734:	080116b1 	.word	0x080116b1
 8011738:	080117e5 	.word	0x080117e5
 801173c:	0801187b 	.word	0x0801187b
 8011740:	080116b1 	.word	0x080116b1
 8011744:	0801178d 	.word	0x0801178d
 8011748:	080117cb 	.word	0x080117cb
 801174c:	080117cb 	.word	0x080117cb
 8011750:	080117cb 	.word	0x080117cb
 8011754:	080117cb 	.word	0x080117cb
 8011758:	080117cb 	.word	0x080117cb
 801175c:	080117cb 	.word	0x080117cb
 8011760:	080117cb 	.word	0x080117cb
 8011764:	080117cb 	.word	0x080117cb
 8011768:	080117cb 	.word	0x080117cb
 801176c:	2b6e      	cmp	r3, #110	@ 0x6e
 801176e:	d809      	bhi.n	8011784 <_scanf_float+0x138>
 8011770:	2b60      	cmp	r3, #96	@ 0x60
 8011772:	d8b2      	bhi.n	80116da <_scanf_float+0x8e>
 8011774:	2b54      	cmp	r3, #84	@ 0x54
 8011776:	d07b      	beq.n	8011870 <_scanf_float+0x224>
 8011778:	2b59      	cmp	r3, #89	@ 0x59
 801177a:	d199      	bne.n	80116b0 <_scanf_float+0x64>
 801177c:	2d07      	cmp	r5, #7
 801177e:	d197      	bne.n	80116b0 <_scanf_float+0x64>
 8011780:	2508      	movs	r5, #8
 8011782:	e02c      	b.n	80117de <_scanf_float+0x192>
 8011784:	2b74      	cmp	r3, #116	@ 0x74
 8011786:	d073      	beq.n	8011870 <_scanf_float+0x224>
 8011788:	2b79      	cmp	r3, #121	@ 0x79
 801178a:	e7f6      	b.n	801177a <_scanf_float+0x12e>
 801178c:	6821      	ldr	r1, [r4, #0]
 801178e:	05c8      	lsls	r0, r1, #23
 8011790:	d51b      	bpl.n	80117ca <_scanf_float+0x17e>
 8011792:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011796:	f109 0901 	add.w	r9, r9, #1
 801179a:	6021      	str	r1, [r4, #0]
 801179c:	f1bb 0f00 	cmp.w	fp, #0
 80117a0:	d003      	beq.n	80117aa <_scanf_float+0x15e>
 80117a2:	3201      	adds	r2, #1
 80117a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80117a8:	60a2      	str	r2, [r4, #8]
 80117aa:	68a3      	ldr	r3, [r4, #8]
 80117ac:	3b01      	subs	r3, #1
 80117ae:	60a3      	str	r3, [r4, #8]
 80117b0:	6923      	ldr	r3, [r4, #16]
 80117b2:	3301      	adds	r3, #1
 80117b4:	6123      	str	r3, [r4, #16]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	3b01      	subs	r3, #1
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	607b      	str	r3, [r7, #4]
 80117be:	f340 8087 	ble.w	80118d0 <_scanf_float+0x284>
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	3301      	adds	r3, #1
 80117c6:	603b      	str	r3, [r7, #0]
 80117c8:	e765      	b.n	8011696 <_scanf_float+0x4a>
 80117ca:	eb1a 0105 	adds.w	r1, sl, r5
 80117ce:	f47f af6f 	bne.w	80116b0 <_scanf_float+0x64>
 80117d2:	6822      	ldr	r2, [r4, #0]
 80117d4:	460d      	mov	r5, r1
 80117d6:	468a      	mov	sl, r1
 80117d8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80117dc:	6022      	str	r2, [r4, #0]
 80117de:	f806 3b01 	strb.w	r3, [r6], #1
 80117e2:	e7e2      	b.n	80117aa <_scanf_float+0x15e>
 80117e4:	6822      	ldr	r2, [r4, #0]
 80117e6:	0610      	lsls	r0, r2, #24
 80117e8:	f57f af62 	bpl.w	80116b0 <_scanf_float+0x64>
 80117ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80117f0:	6022      	str	r2, [r4, #0]
 80117f2:	e7f4      	b.n	80117de <_scanf_float+0x192>
 80117f4:	f1ba 0f00 	cmp.w	sl, #0
 80117f8:	d10e      	bne.n	8011818 <_scanf_float+0x1cc>
 80117fa:	f1b9 0f00 	cmp.w	r9, #0
 80117fe:	d10e      	bne.n	801181e <_scanf_float+0x1d2>
 8011800:	6822      	ldr	r2, [r4, #0]
 8011802:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011806:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801180a:	d108      	bne.n	801181e <_scanf_float+0x1d2>
 801180c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011810:	f04f 0a01 	mov.w	sl, #1
 8011814:	6022      	str	r2, [r4, #0]
 8011816:	e7e2      	b.n	80117de <_scanf_float+0x192>
 8011818:	f1ba 0f02 	cmp.w	sl, #2
 801181c:	d055      	beq.n	80118ca <_scanf_float+0x27e>
 801181e:	2d01      	cmp	r5, #1
 8011820:	d002      	beq.n	8011828 <_scanf_float+0x1dc>
 8011822:	2d04      	cmp	r5, #4
 8011824:	f47f af44 	bne.w	80116b0 <_scanf_float+0x64>
 8011828:	3501      	adds	r5, #1
 801182a:	b2ed      	uxtb	r5, r5
 801182c:	e7d7      	b.n	80117de <_scanf_float+0x192>
 801182e:	f1ba 0f01 	cmp.w	sl, #1
 8011832:	f47f af3d 	bne.w	80116b0 <_scanf_float+0x64>
 8011836:	f04f 0a02 	mov.w	sl, #2
 801183a:	e7d0      	b.n	80117de <_scanf_float+0x192>
 801183c:	b97d      	cbnz	r5, 801185e <_scanf_float+0x212>
 801183e:	f1b9 0f00 	cmp.w	r9, #0
 8011842:	f47f af38 	bne.w	80116b6 <_scanf_float+0x6a>
 8011846:	6822      	ldr	r2, [r4, #0]
 8011848:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801184c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011850:	f040 8107 	bne.w	8011a62 <_scanf_float+0x416>
 8011854:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011858:	2501      	movs	r5, #1
 801185a:	6022      	str	r2, [r4, #0]
 801185c:	e7bf      	b.n	80117de <_scanf_float+0x192>
 801185e:	2d03      	cmp	r5, #3
 8011860:	d0e2      	beq.n	8011828 <_scanf_float+0x1dc>
 8011862:	2d05      	cmp	r5, #5
 8011864:	e7de      	b.n	8011824 <_scanf_float+0x1d8>
 8011866:	2d02      	cmp	r5, #2
 8011868:	f47f af22 	bne.w	80116b0 <_scanf_float+0x64>
 801186c:	2503      	movs	r5, #3
 801186e:	e7b6      	b.n	80117de <_scanf_float+0x192>
 8011870:	2d06      	cmp	r5, #6
 8011872:	f47f af1d 	bne.w	80116b0 <_scanf_float+0x64>
 8011876:	2507      	movs	r5, #7
 8011878:	e7b1      	b.n	80117de <_scanf_float+0x192>
 801187a:	6822      	ldr	r2, [r4, #0]
 801187c:	0591      	lsls	r1, r2, #22
 801187e:	f57f af17 	bpl.w	80116b0 <_scanf_float+0x64>
 8011882:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011886:	f8cd 9008 	str.w	r9, [sp, #8]
 801188a:	6022      	str	r2, [r4, #0]
 801188c:	e7a7      	b.n	80117de <_scanf_float+0x192>
 801188e:	6822      	ldr	r2, [r4, #0]
 8011890:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011894:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011898:	d006      	beq.n	80118a8 <_scanf_float+0x25c>
 801189a:	0550      	lsls	r0, r2, #21
 801189c:	f57f af08 	bpl.w	80116b0 <_scanf_float+0x64>
 80118a0:	f1b9 0f00 	cmp.w	r9, #0
 80118a4:	f000 80dd 	beq.w	8011a62 <_scanf_float+0x416>
 80118a8:	0591      	lsls	r1, r2, #22
 80118aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118ae:	bf58      	it	pl
 80118b0:	9902      	ldrpl	r1, [sp, #8]
 80118b2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80118b6:	bf58      	it	pl
 80118b8:	eba9 0101 	subpl.w	r1, r9, r1
 80118bc:	6022      	str	r2, [r4, #0]
 80118be:	f04f 0900 	mov.w	r9, #0
 80118c2:	bf58      	it	pl
 80118c4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80118c8:	e789      	b.n	80117de <_scanf_float+0x192>
 80118ca:	f04f 0a03 	mov.w	sl, #3
 80118ce:	e786      	b.n	80117de <_scanf_float+0x192>
 80118d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80118d4:	4639      	mov	r1, r7
 80118d6:	4640      	mov	r0, r8
 80118d8:	4798      	blx	r3
 80118da:	2800      	cmp	r0, #0
 80118dc:	f43f aedb 	beq.w	8011696 <_scanf_float+0x4a>
 80118e0:	e6e6      	b.n	80116b0 <_scanf_float+0x64>
 80118e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80118e6:	463a      	mov	r2, r7
 80118e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80118ec:	4640      	mov	r0, r8
 80118ee:	4798      	blx	r3
 80118f0:	6923      	ldr	r3, [r4, #16]
 80118f2:	3b01      	subs	r3, #1
 80118f4:	6123      	str	r3, [r4, #16]
 80118f6:	e6e8      	b.n	80116ca <_scanf_float+0x7e>
 80118f8:	1e6b      	subs	r3, r5, #1
 80118fa:	2b06      	cmp	r3, #6
 80118fc:	d824      	bhi.n	8011948 <_scanf_float+0x2fc>
 80118fe:	2d02      	cmp	r5, #2
 8011900:	d836      	bhi.n	8011970 <_scanf_float+0x324>
 8011902:	9b01      	ldr	r3, [sp, #4]
 8011904:	429e      	cmp	r6, r3
 8011906:	f67f aee4 	bls.w	80116d2 <_scanf_float+0x86>
 801190a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801190e:	463a      	mov	r2, r7
 8011910:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011914:	4640      	mov	r0, r8
 8011916:	4798      	blx	r3
 8011918:	6923      	ldr	r3, [r4, #16]
 801191a:	3b01      	subs	r3, #1
 801191c:	6123      	str	r3, [r4, #16]
 801191e:	e7f0      	b.n	8011902 <_scanf_float+0x2b6>
 8011920:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011924:	463a      	mov	r2, r7
 8011926:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801192a:	4640      	mov	r0, r8
 801192c:	4798      	blx	r3
 801192e:	6923      	ldr	r3, [r4, #16]
 8011930:	3b01      	subs	r3, #1
 8011932:	6123      	str	r3, [r4, #16]
 8011934:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011938:	fa5f fa8a 	uxtb.w	sl, sl
 801193c:	f1ba 0f02 	cmp.w	sl, #2
 8011940:	d1ee      	bne.n	8011920 <_scanf_float+0x2d4>
 8011942:	3d03      	subs	r5, #3
 8011944:	b2ed      	uxtb	r5, r5
 8011946:	1b76      	subs	r6, r6, r5
 8011948:	6823      	ldr	r3, [r4, #0]
 801194a:	05da      	lsls	r2, r3, #23
 801194c:	d52f      	bpl.n	80119ae <_scanf_float+0x362>
 801194e:	055b      	lsls	r3, r3, #21
 8011950:	d511      	bpl.n	8011976 <_scanf_float+0x32a>
 8011952:	9b01      	ldr	r3, [sp, #4]
 8011954:	429e      	cmp	r6, r3
 8011956:	f67f aebc 	bls.w	80116d2 <_scanf_float+0x86>
 801195a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801195e:	463a      	mov	r2, r7
 8011960:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011964:	4640      	mov	r0, r8
 8011966:	4798      	blx	r3
 8011968:	6923      	ldr	r3, [r4, #16]
 801196a:	3b01      	subs	r3, #1
 801196c:	6123      	str	r3, [r4, #16]
 801196e:	e7f0      	b.n	8011952 <_scanf_float+0x306>
 8011970:	46aa      	mov	sl, r5
 8011972:	46b3      	mov	fp, r6
 8011974:	e7de      	b.n	8011934 <_scanf_float+0x2e8>
 8011976:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801197a:	1e75      	subs	r5, r6, #1
 801197c:	6923      	ldr	r3, [r4, #16]
 801197e:	2965      	cmp	r1, #101	@ 0x65
 8011980:	f103 33ff 	add.w	r3, r3, #4294967295
 8011984:	6123      	str	r3, [r4, #16]
 8011986:	d00c      	beq.n	80119a2 <_scanf_float+0x356>
 8011988:	2945      	cmp	r1, #69	@ 0x45
 801198a:	d00a      	beq.n	80119a2 <_scanf_float+0x356>
 801198c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011990:	463a      	mov	r2, r7
 8011992:	4640      	mov	r0, r8
 8011994:	1eb5      	subs	r5, r6, #2
 8011996:	4798      	blx	r3
 8011998:	6923      	ldr	r3, [r4, #16]
 801199a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801199e:	3b01      	subs	r3, #1
 80119a0:	6123      	str	r3, [r4, #16]
 80119a2:	462e      	mov	r6, r5
 80119a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119a8:	463a      	mov	r2, r7
 80119aa:	4640      	mov	r0, r8
 80119ac:	4798      	blx	r3
 80119ae:	6822      	ldr	r2, [r4, #0]
 80119b0:	f012 0210 	ands.w	r2, r2, #16
 80119b4:	d001      	beq.n	80119ba <_scanf_float+0x36e>
 80119b6:	2000      	movs	r0, #0
 80119b8:	e68c      	b.n	80116d4 <_scanf_float+0x88>
 80119ba:	7032      	strb	r2, [r6, #0]
 80119bc:	6823      	ldr	r3, [r4, #0]
 80119be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80119c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80119c6:	d11c      	bne.n	8011a02 <_scanf_float+0x3b6>
 80119c8:	9b02      	ldr	r3, [sp, #8]
 80119ca:	454b      	cmp	r3, r9
 80119cc:	eba3 0209 	sub.w	r2, r3, r9
 80119d0:	d123      	bne.n	8011a1a <_scanf_float+0x3ce>
 80119d2:	2200      	movs	r2, #0
 80119d4:	9901      	ldr	r1, [sp, #4]
 80119d6:	4640      	mov	r0, r8
 80119d8:	f002 fd1a 	bl	8014410 <_strtod_r>
 80119dc:	6821      	ldr	r1, [r4, #0]
 80119de:	9b03      	ldr	r3, [sp, #12]
 80119e0:	f011 0f02 	tst.w	r1, #2
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	ec57 6b10 	vmov	r6, r7, d0
 80119ea:	f103 0204 	add.w	r2, r3, #4
 80119ee:	d01f      	beq.n	8011a30 <_scanf_float+0x3e4>
 80119f0:	9903      	ldr	r1, [sp, #12]
 80119f2:	600a      	str	r2, [r1, #0]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	e9c3 6700 	strd	r6, r7, [r3]
 80119fa:	68e3      	ldr	r3, [r4, #12]
 80119fc:	3301      	adds	r3, #1
 80119fe:	60e3      	str	r3, [r4, #12]
 8011a00:	e7d9      	b.n	80119b6 <_scanf_float+0x36a>
 8011a02:	9b04      	ldr	r3, [sp, #16]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d0e4      	beq.n	80119d2 <_scanf_float+0x386>
 8011a08:	9905      	ldr	r1, [sp, #20]
 8011a0a:	230a      	movs	r3, #10
 8011a0c:	4640      	mov	r0, r8
 8011a0e:	3101      	adds	r1, #1
 8011a10:	f002 fd7e 	bl	8014510 <_strtol_r>
 8011a14:	9b04      	ldr	r3, [sp, #16]
 8011a16:	9e05      	ldr	r6, [sp, #20]
 8011a18:	1ac2      	subs	r2, r0, r3
 8011a1a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011a1e:	4912      	ldr	r1, [pc, #72]	@ (8011a68 <_scanf_float+0x41c>)
 8011a20:	429e      	cmp	r6, r3
 8011a22:	bf28      	it	cs
 8011a24:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f000 f953 	bl	8011cd4 <siprintf>
 8011a2e:	e7d0      	b.n	80119d2 <_scanf_float+0x386>
 8011a30:	f011 0f04 	tst.w	r1, #4
 8011a34:	9903      	ldr	r1, [sp, #12]
 8011a36:	600a      	str	r2, [r1, #0]
 8011a38:	d1dc      	bne.n	80119f4 <_scanf_float+0x3a8>
 8011a3a:	681d      	ldr	r5, [r3, #0]
 8011a3c:	4632      	mov	r2, r6
 8011a3e:	463b      	mov	r3, r7
 8011a40:	4630      	mov	r0, r6
 8011a42:	4639      	mov	r1, r7
 8011a44:	f7ef f876 	bl	8000b34 <__aeabi_dcmpun>
 8011a48:	b128      	cbz	r0, 8011a56 <_scanf_float+0x40a>
 8011a4a:	4808      	ldr	r0, [pc, #32]	@ (8011a6c <_scanf_float+0x420>)
 8011a4c:	f000 fac8 	bl	8011fe0 <nanf>
 8011a50:	ed85 0a00 	vstr	s0, [r5]
 8011a54:	e7d1      	b.n	80119fa <_scanf_float+0x3ae>
 8011a56:	4630      	mov	r0, r6
 8011a58:	4639      	mov	r1, r7
 8011a5a:	f7ef f8c9 	bl	8000bf0 <__aeabi_d2f>
 8011a5e:	6028      	str	r0, [r5, #0]
 8011a60:	e7cb      	b.n	80119fa <_scanf_float+0x3ae>
 8011a62:	f04f 0900 	mov.w	r9, #0
 8011a66:	e62a      	b.n	80116be <_scanf_float+0x72>
 8011a68:	08015980 	.word	0x08015980
 8011a6c:	08015d15 	.word	0x08015d15

08011a70 <std>:
 8011a70:	2300      	movs	r3, #0
 8011a72:	b510      	push	{r4, lr}
 8011a74:	4604      	mov	r4, r0
 8011a76:	6083      	str	r3, [r0, #8]
 8011a78:	8181      	strh	r1, [r0, #12]
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	6643      	str	r3, [r0, #100]	@ 0x64
 8011a7e:	81c2      	strh	r2, [r0, #14]
 8011a80:	2208      	movs	r2, #8
 8011a82:	6183      	str	r3, [r0, #24]
 8011a84:	e9c0 3300 	strd	r3, r3, [r0]
 8011a88:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a8c:	305c      	adds	r0, #92	@ 0x5c
 8011a8e:	f000 fa19 	bl	8011ec4 <memset>
 8011a92:	4b0d      	ldr	r3, [pc, #52]	@ (8011ac8 <std+0x58>)
 8011a94:	6224      	str	r4, [r4, #32]
 8011a96:	6263      	str	r3, [r4, #36]	@ 0x24
 8011a98:	4b0c      	ldr	r3, [pc, #48]	@ (8011acc <std+0x5c>)
 8011a9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8011ad0 <std+0x60>)
 8011a9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8011ad4 <std+0x64>)
 8011aa2:	6323      	str	r3, [r4, #48]	@ 0x30
 8011aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8011ad8 <std+0x68>)
 8011aa6:	429c      	cmp	r4, r3
 8011aa8:	d006      	beq.n	8011ab8 <std+0x48>
 8011aaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011aae:	4294      	cmp	r4, r2
 8011ab0:	d002      	beq.n	8011ab8 <std+0x48>
 8011ab2:	33d0      	adds	r3, #208	@ 0xd0
 8011ab4:	429c      	cmp	r4, r3
 8011ab6:	d105      	bne.n	8011ac4 <std+0x54>
 8011ab8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ac0:	f000 ba7c 	b.w	8011fbc <__retarget_lock_init_recursive>
 8011ac4:	bd10      	pop	{r4, pc}
 8011ac6:	bf00      	nop
 8011ac8:	08011d15 	.word	0x08011d15
 8011acc:	08011d37 	.word	0x08011d37
 8011ad0:	08011d6f 	.word	0x08011d6f
 8011ad4:	08011d93 	.word	0x08011d93
 8011ad8:	200008e8 	.word	0x200008e8

08011adc <stdio_exit_handler>:
 8011adc:	4a02      	ldr	r2, [pc, #8]	@ (8011ae8 <stdio_exit_handler+0xc>)
 8011ade:	4903      	ldr	r1, [pc, #12]	@ (8011aec <stdio_exit_handler+0x10>)
 8011ae0:	4803      	ldr	r0, [pc, #12]	@ (8011af0 <stdio_exit_handler+0x14>)
 8011ae2:	f000 b869 	b.w	8011bb8 <_fwalk_sglue>
 8011ae6:	bf00      	nop
 8011ae8:	20000170 	.word	0x20000170
 8011aec:	08014b51 	.word	0x08014b51
 8011af0:	20000180 	.word	0x20000180

08011af4 <cleanup_stdio>:
 8011af4:	6841      	ldr	r1, [r0, #4]
 8011af6:	4b0c      	ldr	r3, [pc, #48]	@ (8011b28 <cleanup_stdio+0x34>)
 8011af8:	4299      	cmp	r1, r3
 8011afa:	b510      	push	{r4, lr}
 8011afc:	4604      	mov	r4, r0
 8011afe:	d001      	beq.n	8011b04 <cleanup_stdio+0x10>
 8011b00:	f003 f826 	bl	8014b50 <_fflush_r>
 8011b04:	68a1      	ldr	r1, [r4, #8]
 8011b06:	4b09      	ldr	r3, [pc, #36]	@ (8011b2c <cleanup_stdio+0x38>)
 8011b08:	4299      	cmp	r1, r3
 8011b0a:	d002      	beq.n	8011b12 <cleanup_stdio+0x1e>
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f003 f81f 	bl	8014b50 <_fflush_r>
 8011b12:	68e1      	ldr	r1, [r4, #12]
 8011b14:	4b06      	ldr	r3, [pc, #24]	@ (8011b30 <cleanup_stdio+0x3c>)
 8011b16:	4299      	cmp	r1, r3
 8011b18:	d004      	beq.n	8011b24 <cleanup_stdio+0x30>
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b20:	f003 b816 	b.w	8014b50 <_fflush_r>
 8011b24:	bd10      	pop	{r4, pc}
 8011b26:	bf00      	nop
 8011b28:	200008e8 	.word	0x200008e8
 8011b2c:	20000950 	.word	0x20000950
 8011b30:	200009b8 	.word	0x200009b8

08011b34 <global_stdio_init.part.0>:
 8011b34:	b510      	push	{r4, lr}
 8011b36:	4b0b      	ldr	r3, [pc, #44]	@ (8011b64 <global_stdio_init.part.0+0x30>)
 8011b38:	2104      	movs	r1, #4
 8011b3a:	4c0b      	ldr	r4, [pc, #44]	@ (8011b68 <global_stdio_init.part.0+0x34>)
 8011b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8011b6c <global_stdio_init.part.0+0x38>)
 8011b3e:	4620      	mov	r0, r4
 8011b40:	601a      	str	r2, [r3, #0]
 8011b42:	2200      	movs	r2, #0
 8011b44:	f7ff ff94 	bl	8011a70 <std>
 8011b48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	2109      	movs	r1, #9
 8011b50:	f7ff ff8e 	bl	8011a70 <std>
 8011b54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011b58:	2202      	movs	r2, #2
 8011b5a:	2112      	movs	r1, #18
 8011b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b60:	f7ff bf86 	b.w	8011a70 <std>
 8011b64:	20000a20 	.word	0x20000a20
 8011b68:	200008e8 	.word	0x200008e8
 8011b6c:	08011add 	.word	0x08011add

08011b70 <__sfp_lock_acquire>:
 8011b70:	4801      	ldr	r0, [pc, #4]	@ (8011b78 <__sfp_lock_acquire+0x8>)
 8011b72:	f000 ba24 	b.w	8011fbe <__retarget_lock_acquire_recursive>
 8011b76:	bf00      	nop
 8011b78:	20000a29 	.word	0x20000a29

08011b7c <__sfp_lock_release>:
 8011b7c:	4801      	ldr	r0, [pc, #4]	@ (8011b84 <__sfp_lock_release+0x8>)
 8011b7e:	f000 ba1f 	b.w	8011fc0 <__retarget_lock_release_recursive>
 8011b82:	bf00      	nop
 8011b84:	20000a29 	.word	0x20000a29

08011b88 <__sinit>:
 8011b88:	b510      	push	{r4, lr}
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	f7ff fff0 	bl	8011b70 <__sfp_lock_acquire>
 8011b90:	6a23      	ldr	r3, [r4, #32]
 8011b92:	b11b      	cbz	r3, 8011b9c <__sinit+0x14>
 8011b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b98:	f7ff bff0 	b.w	8011b7c <__sfp_lock_release>
 8011b9c:	4b04      	ldr	r3, [pc, #16]	@ (8011bb0 <__sinit+0x28>)
 8011b9e:	6223      	str	r3, [r4, #32]
 8011ba0:	4b04      	ldr	r3, [pc, #16]	@ (8011bb4 <__sinit+0x2c>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d1f5      	bne.n	8011b94 <__sinit+0xc>
 8011ba8:	f7ff ffc4 	bl	8011b34 <global_stdio_init.part.0>
 8011bac:	e7f2      	b.n	8011b94 <__sinit+0xc>
 8011bae:	bf00      	nop
 8011bb0:	08011af5 	.word	0x08011af5
 8011bb4:	20000a20 	.word	0x20000a20

08011bb8 <_fwalk_sglue>:
 8011bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bbc:	4607      	mov	r7, r0
 8011bbe:	4688      	mov	r8, r1
 8011bc0:	4614      	mov	r4, r2
 8011bc2:	2600      	movs	r6, #0
 8011bc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011bc8:	f1b9 0901 	subs.w	r9, r9, #1
 8011bcc:	d505      	bpl.n	8011bda <_fwalk_sglue+0x22>
 8011bce:	6824      	ldr	r4, [r4, #0]
 8011bd0:	2c00      	cmp	r4, #0
 8011bd2:	d1f7      	bne.n	8011bc4 <_fwalk_sglue+0xc>
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bda:	89ab      	ldrh	r3, [r5, #12]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d907      	bls.n	8011bf0 <_fwalk_sglue+0x38>
 8011be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011be4:	3301      	adds	r3, #1
 8011be6:	d003      	beq.n	8011bf0 <_fwalk_sglue+0x38>
 8011be8:	4629      	mov	r1, r5
 8011bea:	4638      	mov	r0, r7
 8011bec:	47c0      	blx	r8
 8011bee:	4306      	orrs	r6, r0
 8011bf0:	3568      	adds	r5, #104	@ 0x68
 8011bf2:	e7e9      	b.n	8011bc8 <_fwalk_sglue+0x10>

08011bf4 <iprintf>:
 8011bf4:	b40f      	push	{r0, r1, r2, r3}
 8011bf6:	b507      	push	{r0, r1, r2, lr}
 8011bf8:	4906      	ldr	r1, [pc, #24]	@ (8011c14 <iprintf+0x20>)
 8011bfa:	ab04      	add	r3, sp, #16
 8011bfc:	6808      	ldr	r0, [r1, #0]
 8011bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c02:	6881      	ldr	r1, [r0, #8]
 8011c04:	9301      	str	r3, [sp, #4]
 8011c06:	f002 fe07 	bl	8014818 <_vfiprintf_r>
 8011c0a:	b003      	add	sp, #12
 8011c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c10:	b004      	add	sp, #16
 8011c12:	4770      	bx	lr
 8011c14:	2000017c 	.word	0x2000017c

08011c18 <_puts_r>:
 8011c18:	6a03      	ldr	r3, [r0, #32]
 8011c1a:	b570      	push	{r4, r5, r6, lr}
 8011c1c:	4605      	mov	r5, r0
 8011c1e:	460e      	mov	r6, r1
 8011c20:	6884      	ldr	r4, [r0, #8]
 8011c22:	b90b      	cbnz	r3, 8011c28 <_puts_r+0x10>
 8011c24:	f7ff ffb0 	bl	8011b88 <__sinit>
 8011c28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c2a:	07db      	lsls	r3, r3, #31
 8011c2c:	d405      	bmi.n	8011c3a <_puts_r+0x22>
 8011c2e:	89a3      	ldrh	r3, [r4, #12]
 8011c30:	0598      	lsls	r0, r3, #22
 8011c32:	d402      	bmi.n	8011c3a <_puts_r+0x22>
 8011c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c36:	f000 f9c2 	bl	8011fbe <__retarget_lock_acquire_recursive>
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	0719      	lsls	r1, r3, #28
 8011c3e:	d502      	bpl.n	8011c46 <_puts_r+0x2e>
 8011c40:	6923      	ldr	r3, [r4, #16]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d135      	bne.n	8011cb2 <_puts_r+0x9a>
 8011c46:	4621      	mov	r1, r4
 8011c48:	4628      	mov	r0, r5
 8011c4a:	f000 f8e5 	bl	8011e18 <__swsetup_r>
 8011c4e:	b380      	cbz	r0, 8011cb2 <_puts_r+0x9a>
 8011c50:	f04f 35ff 	mov.w	r5, #4294967295
 8011c54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c56:	07da      	lsls	r2, r3, #31
 8011c58:	d405      	bmi.n	8011c66 <_puts_r+0x4e>
 8011c5a:	89a3      	ldrh	r3, [r4, #12]
 8011c5c:	059b      	lsls	r3, r3, #22
 8011c5e:	d402      	bmi.n	8011c66 <_puts_r+0x4e>
 8011c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c62:	f000 f9ad 	bl	8011fc0 <__retarget_lock_release_recursive>
 8011c66:	4628      	mov	r0, r5
 8011c68:	bd70      	pop	{r4, r5, r6, pc}
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	da04      	bge.n	8011c78 <_puts_r+0x60>
 8011c6e:	69a2      	ldr	r2, [r4, #24]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	dc17      	bgt.n	8011ca4 <_puts_r+0x8c>
 8011c74:	290a      	cmp	r1, #10
 8011c76:	d015      	beq.n	8011ca4 <_puts_r+0x8c>
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	6022      	str	r2, [r4, #0]
 8011c7e:	7019      	strb	r1, [r3, #0]
 8011c80:	68a3      	ldr	r3, [r4, #8]
 8011c82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c86:	3b01      	subs	r3, #1
 8011c88:	60a3      	str	r3, [r4, #8]
 8011c8a:	2900      	cmp	r1, #0
 8011c8c:	d1ed      	bne.n	8011c6a <_puts_r+0x52>
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	da11      	bge.n	8011cb6 <_puts_r+0x9e>
 8011c92:	4622      	mov	r2, r4
 8011c94:	210a      	movs	r1, #10
 8011c96:	4628      	mov	r0, r5
 8011c98:	f000 f87f 	bl	8011d9a <__swbuf_r>
 8011c9c:	3001      	adds	r0, #1
 8011c9e:	d0d7      	beq.n	8011c50 <_puts_r+0x38>
 8011ca0:	250a      	movs	r5, #10
 8011ca2:	e7d7      	b.n	8011c54 <_puts_r+0x3c>
 8011ca4:	4622      	mov	r2, r4
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	f000 f877 	bl	8011d9a <__swbuf_r>
 8011cac:	3001      	adds	r0, #1
 8011cae:	d1e7      	bne.n	8011c80 <_puts_r+0x68>
 8011cb0:	e7ce      	b.n	8011c50 <_puts_r+0x38>
 8011cb2:	3e01      	subs	r6, #1
 8011cb4:	e7e4      	b.n	8011c80 <_puts_r+0x68>
 8011cb6:	6823      	ldr	r3, [r4, #0]
 8011cb8:	1c5a      	adds	r2, r3, #1
 8011cba:	6022      	str	r2, [r4, #0]
 8011cbc:	220a      	movs	r2, #10
 8011cbe:	701a      	strb	r2, [r3, #0]
 8011cc0:	e7ee      	b.n	8011ca0 <_puts_r+0x88>
	...

08011cc4 <puts>:
 8011cc4:	4b02      	ldr	r3, [pc, #8]	@ (8011cd0 <puts+0xc>)
 8011cc6:	4601      	mov	r1, r0
 8011cc8:	6818      	ldr	r0, [r3, #0]
 8011cca:	f7ff bfa5 	b.w	8011c18 <_puts_r>
 8011cce:	bf00      	nop
 8011cd0:	2000017c 	.word	0x2000017c

08011cd4 <siprintf>:
 8011cd4:	b40e      	push	{r1, r2, r3}
 8011cd6:	b500      	push	{lr}
 8011cd8:	b09c      	sub	sp, #112	@ 0x70
 8011cda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011cde:	ab1d      	add	r3, sp, #116	@ 0x74
 8011ce0:	9002      	str	r0, [sp, #8]
 8011ce2:	9006      	str	r0, [sp, #24]
 8011ce4:	9107      	str	r1, [sp, #28]
 8011ce6:	9104      	str	r1, [sp, #16]
 8011ce8:	4808      	ldr	r0, [pc, #32]	@ (8011d0c <siprintf+0x38>)
 8011cea:	4909      	ldr	r1, [pc, #36]	@ (8011d10 <siprintf+0x3c>)
 8011cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cf0:	9105      	str	r1, [sp, #20]
 8011cf2:	a902      	add	r1, sp, #8
 8011cf4:	6800      	ldr	r0, [r0, #0]
 8011cf6:	9301      	str	r3, [sp, #4]
 8011cf8:	f002 fc68 	bl	80145cc <_svfiprintf_r>
 8011cfc:	9b02      	ldr	r3, [sp, #8]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	701a      	strb	r2, [r3, #0]
 8011d02:	b01c      	add	sp, #112	@ 0x70
 8011d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d08:	b003      	add	sp, #12
 8011d0a:	4770      	bx	lr
 8011d0c:	2000017c 	.word	0x2000017c
 8011d10:	ffff0208 	.word	0xffff0208

08011d14 <__sread>:
 8011d14:	b510      	push	{r4, lr}
 8011d16:	460c      	mov	r4, r1
 8011d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d1c:	f000 f900 	bl	8011f20 <_read_r>
 8011d20:	2800      	cmp	r0, #0
 8011d22:	bfab      	itete	ge
 8011d24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d26:	89a3      	ldrhlt	r3, [r4, #12]
 8011d28:	181b      	addge	r3, r3, r0
 8011d2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d2e:	bfac      	ite	ge
 8011d30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d32:	81a3      	strhlt	r3, [r4, #12]
 8011d34:	bd10      	pop	{r4, pc}

08011d36 <__swrite>:
 8011d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3a:	461f      	mov	r7, r3
 8011d3c:	898b      	ldrh	r3, [r1, #12]
 8011d3e:	4605      	mov	r5, r0
 8011d40:	460c      	mov	r4, r1
 8011d42:	05db      	lsls	r3, r3, #23
 8011d44:	4616      	mov	r6, r2
 8011d46:	d505      	bpl.n	8011d54 <__swrite+0x1e>
 8011d48:	2302      	movs	r3, #2
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d50:	f000 f8d4 	bl	8011efc <_lseek_r>
 8011d54:	89a3      	ldrh	r3, [r4, #12]
 8011d56:	4632      	mov	r2, r6
 8011d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d62:	81a3      	strh	r3, [r4, #12]
 8011d64:	463b      	mov	r3, r7
 8011d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6a:	f000 b8eb 	b.w	8011f44 <_write_r>

08011d6e <__sseek>:
 8011d6e:	b510      	push	{r4, lr}
 8011d70:	460c      	mov	r4, r1
 8011d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d76:	f000 f8c1 	bl	8011efc <_lseek_r>
 8011d7a:	1c43      	adds	r3, r0, #1
 8011d7c:	89a3      	ldrh	r3, [r4, #12]
 8011d7e:	bf15      	itete	ne
 8011d80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d8a:	81a3      	strheq	r3, [r4, #12]
 8011d8c:	bf18      	it	ne
 8011d8e:	81a3      	strhne	r3, [r4, #12]
 8011d90:	bd10      	pop	{r4, pc}

08011d92 <__sclose>:
 8011d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d96:	f000 b8a1 	b.w	8011edc <_close_r>

08011d9a <__swbuf_r>:
 8011d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d9c:	460e      	mov	r6, r1
 8011d9e:	4614      	mov	r4, r2
 8011da0:	4605      	mov	r5, r0
 8011da2:	b118      	cbz	r0, 8011dac <__swbuf_r+0x12>
 8011da4:	6a03      	ldr	r3, [r0, #32]
 8011da6:	b90b      	cbnz	r3, 8011dac <__swbuf_r+0x12>
 8011da8:	f7ff feee 	bl	8011b88 <__sinit>
 8011dac:	69a3      	ldr	r3, [r4, #24]
 8011dae:	60a3      	str	r3, [r4, #8]
 8011db0:	89a3      	ldrh	r3, [r4, #12]
 8011db2:	071a      	lsls	r2, r3, #28
 8011db4:	d501      	bpl.n	8011dba <__swbuf_r+0x20>
 8011db6:	6923      	ldr	r3, [r4, #16]
 8011db8:	b943      	cbnz	r3, 8011dcc <__swbuf_r+0x32>
 8011dba:	4621      	mov	r1, r4
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	f000 f82b 	bl	8011e18 <__swsetup_r>
 8011dc2:	b118      	cbz	r0, 8011dcc <__swbuf_r+0x32>
 8011dc4:	f04f 37ff 	mov.w	r7, #4294967295
 8011dc8:	4638      	mov	r0, r7
 8011dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dcc:	6823      	ldr	r3, [r4, #0]
 8011dce:	b2f6      	uxtb	r6, r6
 8011dd0:	6922      	ldr	r2, [r4, #16]
 8011dd2:	4637      	mov	r7, r6
 8011dd4:	1a98      	subs	r0, r3, r2
 8011dd6:	6963      	ldr	r3, [r4, #20]
 8011dd8:	4283      	cmp	r3, r0
 8011dda:	dc05      	bgt.n	8011de8 <__swbuf_r+0x4e>
 8011ddc:	4621      	mov	r1, r4
 8011dde:	4628      	mov	r0, r5
 8011de0:	f002 feb6 	bl	8014b50 <_fflush_r>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	d1ed      	bne.n	8011dc4 <__swbuf_r+0x2a>
 8011de8:	68a3      	ldr	r3, [r4, #8]
 8011dea:	3b01      	subs	r3, #1
 8011dec:	60a3      	str	r3, [r4, #8]
 8011dee:	6823      	ldr	r3, [r4, #0]
 8011df0:	1c5a      	adds	r2, r3, #1
 8011df2:	6022      	str	r2, [r4, #0]
 8011df4:	701e      	strb	r6, [r3, #0]
 8011df6:	1c43      	adds	r3, r0, #1
 8011df8:	6962      	ldr	r2, [r4, #20]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d004      	beq.n	8011e08 <__swbuf_r+0x6e>
 8011dfe:	89a3      	ldrh	r3, [r4, #12]
 8011e00:	07db      	lsls	r3, r3, #31
 8011e02:	d5e1      	bpl.n	8011dc8 <__swbuf_r+0x2e>
 8011e04:	2e0a      	cmp	r6, #10
 8011e06:	d1df      	bne.n	8011dc8 <__swbuf_r+0x2e>
 8011e08:	4621      	mov	r1, r4
 8011e0a:	4628      	mov	r0, r5
 8011e0c:	f002 fea0 	bl	8014b50 <_fflush_r>
 8011e10:	2800      	cmp	r0, #0
 8011e12:	d0d9      	beq.n	8011dc8 <__swbuf_r+0x2e>
 8011e14:	e7d6      	b.n	8011dc4 <__swbuf_r+0x2a>
	...

08011e18 <__swsetup_r>:
 8011e18:	b538      	push	{r3, r4, r5, lr}
 8011e1a:	4b29      	ldr	r3, [pc, #164]	@ (8011ec0 <__swsetup_r+0xa8>)
 8011e1c:	4605      	mov	r5, r0
 8011e1e:	460c      	mov	r4, r1
 8011e20:	6818      	ldr	r0, [r3, #0]
 8011e22:	b118      	cbz	r0, 8011e2c <__swsetup_r+0x14>
 8011e24:	6a03      	ldr	r3, [r0, #32]
 8011e26:	b90b      	cbnz	r3, 8011e2c <__swsetup_r+0x14>
 8011e28:	f7ff feae 	bl	8011b88 <__sinit>
 8011e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e30:	0719      	lsls	r1, r3, #28
 8011e32:	d422      	bmi.n	8011e7a <__swsetup_r+0x62>
 8011e34:	06da      	lsls	r2, r3, #27
 8011e36:	d407      	bmi.n	8011e48 <__swsetup_r+0x30>
 8011e38:	2209      	movs	r2, #9
 8011e3a:	602a      	str	r2, [r5, #0]
 8011e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e40:	f04f 30ff 	mov.w	r0, #4294967295
 8011e44:	81a3      	strh	r3, [r4, #12]
 8011e46:	e033      	b.n	8011eb0 <__swsetup_r+0x98>
 8011e48:	0758      	lsls	r0, r3, #29
 8011e4a:	d512      	bpl.n	8011e72 <__swsetup_r+0x5a>
 8011e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e4e:	b141      	cbz	r1, 8011e62 <__swsetup_r+0x4a>
 8011e50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e54:	4299      	cmp	r1, r3
 8011e56:	d002      	beq.n	8011e5e <__swsetup_r+0x46>
 8011e58:	4628      	mov	r0, r5
 8011e5a:	f000 ff19 	bl	8012c90 <_free_r>
 8011e5e:	2300      	movs	r3, #0
 8011e60:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e62:	89a3      	ldrh	r3, [r4, #12]
 8011e64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011e68:	81a3      	strh	r3, [r4, #12]
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	6063      	str	r3, [r4, #4]
 8011e6e:	6923      	ldr	r3, [r4, #16]
 8011e70:	6023      	str	r3, [r4, #0]
 8011e72:	89a3      	ldrh	r3, [r4, #12]
 8011e74:	f043 0308 	orr.w	r3, r3, #8
 8011e78:	81a3      	strh	r3, [r4, #12]
 8011e7a:	6923      	ldr	r3, [r4, #16]
 8011e7c:	b94b      	cbnz	r3, 8011e92 <__swsetup_r+0x7a>
 8011e7e:	89a3      	ldrh	r3, [r4, #12]
 8011e80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e88:	d003      	beq.n	8011e92 <__swsetup_r+0x7a>
 8011e8a:	4621      	mov	r1, r4
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	f002 feac 	bl	8014bea <__smakebuf_r>
 8011e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e96:	f013 0201 	ands.w	r2, r3, #1
 8011e9a:	d00a      	beq.n	8011eb2 <__swsetup_r+0x9a>
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	60a2      	str	r2, [r4, #8]
 8011ea0:	6962      	ldr	r2, [r4, #20]
 8011ea2:	4252      	negs	r2, r2
 8011ea4:	61a2      	str	r2, [r4, #24]
 8011ea6:	6922      	ldr	r2, [r4, #16]
 8011ea8:	b942      	cbnz	r2, 8011ebc <__swsetup_r+0xa4>
 8011eaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011eae:	d1c5      	bne.n	8011e3c <__swsetup_r+0x24>
 8011eb0:	bd38      	pop	{r3, r4, r5, pc}
 8011eb2:	0799      	lsls	r1, r3, #30
 8011eb4:	bf58      	it	pl
 8011eb6:	6962      	ldrpl	r2, [r4, #20]
 8011eb8:	60a2      	str	r2, [r4, #8]
 8011eba:	e7f4      	b.n	8011ea6 <__swsetup_r+0x8e>
 8011ebc:	2000      	movs	r0, #0
 8011ebe:	e7f7      	b.n	8011eb0 <__swsetup_r+0x98>
 8011ec0:	2000017c 	.word	0x2000017c

08011ec4 <memset>:
 8011ec4:	4402      	add	r2, r0
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d100      	bne.n	8011ece <memset+0xa>
 8011ecc:	4770      	bx	lr
 8011ece:	f803 1b01 	strb.w	r1, [r3], #1
 8011ed2:	e7f9      	b.n	8011ec8 <memset+0x4>

08011ed4 <_localeconv_r>:
 8011ed4:	4800      	ldr	r0, [pc, #0]	@ (8011ed8 <_localeconv_r+0x4>)
 8011ed6:	4770      	bx	lr
 8011ed8:	200002bc 	.word	0x200002bc

08011edc <_close_r>:
 8011edc:	b538      	push	{r3, r4, r5, lr}
 8011ede:	2300      	movs	r3, #0
 8011ee0:	4d05      	ldr	r5, [pc, #20]	@ (8011ef8 <_close_r+0x1c>)
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	4608      	mov	r0, r1
 8011ee6:	602b      	str	r3, [r5, #0]
 8011ee8:	f7ef ffd6 	bl	8001e98 <_close>
 8011eec:	1c43      	adds	r3, r0, #1
 8011eee:	d102      	bne.n	8011ef6 <_close_r+0x1a>
 8011ef0:	682b      	ldr	r3, [r5, #0]
 8011ef2:	b103      	cbz	r3, 8011ef6 <_close_r+0x1a>
 8011ef4:	6023      	str	r3, [r4, #0]
 8011ef6:	bd38      	pop	{r3, r4, r5, pc}
 8011ef8:	20000a24 	.word	0x20000a24

08011efc <_lseek_r>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	4604      	mov	r4, r0
 8011f00:	4d06      	ldr	r5, [pc, #24]	@ (8011f1c <_lseek_r+0x20>)
 8011f02:	4608      	mov	r0, r1
 8011f04:	4611      	mov	r1, r2
 8011f06:	2200      	movs	r2, #0
 8011f08:	602a      	str	r2, [r5, #0]
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	f7ef ffeb 	bl	8001ee6 <_lseek>
 8011f10:	1c43      	adds	r3, r0, #1
 8011f12:	d102      	bne.n	8011f1a <_lseek_r+0x1e>
 8011f14:	682b      	ldr	r3, [r5, #0]
 8011f16:	b103      	cbz	r3, 8011f1a <_lseek_r+0x1e>
 8011f18:	6023      	str	r3, [r4, #0]
 8011f1a:	bd38      	pop	{r3, r4, r5, pc}
 8011f1c:	20000a24 	.word	0x20000a24

08011f20 <_read_r>:
 8011f20:	b538      	push	{r3, r4, r5, lr}
 8011f22:	4604      	mov	r4, r0
 8011f24:	4d06      	ldr	r5, [pc, #24]	@ (8011f40 <_read_r+0x20>)
 8011f26:	4608      	mov	r0, r1
 8011f28:	4611      	mov	r1, r2
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	602a      	str	r2, [r5, #0]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	f7ef ff95 	bl	8001e5e <_read>
 8011f34:	1c43      	adds	r3, r0, #1
 8011f36:	d102      	bne.n	8011f3e <_read_r+0x1e>
 8011f38:	682b      	ldr	r3, [r5, #0]
 8011f3a:	b103      	cbz	r3, 8011f3e <_read_r+0x1e>
 8011f3c:	6023      	str	r3, [r4, #0]
 8011f3e:	bd38      	pop	{r3, r4, r5, pc}
 8011f40:	20000a24 	.word	0x20000a24

08011f44 <_write_r>:
 8011f44:	b538      	push	{r3, r4, r5, lr}
 8011f46:	4604      	mov	r4, r0
 8011f48:	4d06      	ldr	r5, [pc, #24]	@ (8011f64 <_write_r+0x20>)
 8011f4a:	4608      	mov	r0, r1
 8011f4c:	4611      	mov	r1, r2
 8011f4e:	2200      	movs	r2, #0
 8011f50:	602a      	str	r2, [r5, #0]
 8011f52:	461a      	mov	r2, r3
 8011f54:	f7ef faae 	bl	80014b4 <_write>
 8011f58:	1c43      	adds	r3, r0, #1
 8011f5a:	d102      	bne.n	8011f62 <_write_r+0x1e>
 8011f5c:	682b      	ldr	r3, [r5, #0]
 8011f5e:	b103      	cbz	r3, 8011f62 <_write_r+0x1e>
 8011f60:	6023      	str	r3, [r4, #0]
 8011f62:	bd38      	pop	{r3, r4, r5, pc}
 8011f64:	20000a24 	.word	0x20000a24

08011f68 <__errno>:
 8011f68:	4b01      	ldr	r3, [pc, #4]	@ (8011f70 <__errno+0x8>)
 8011f6a:	6818      	ldr	r0, [r3, #0]
 8011f6c:	4770      	bx	lr
 8011f6e:	bf00      	nop
 8011f70:	2000017c 	.word	0x2000017c

08011f74 <__libc_init_array>:
 8011f74:	b570      	push	{r4, r5, r6, lr}
 8011f76:	4d0d      	ldr	r5, [pc, #52]	@ (8011fac <__libc_init_array+0x38>)
 8011f78:	2600      	movs	r6, #0
 8011f7a:	4c0d      	ldr	r4, [pc, #52]	@ (8011fb0 <__libc_init_array+0x3c>)
 8011f7c:	1b64      	subs	r4, r4, r5
 8011f7e:	10a4      	asrs	r4, r4, #2
 8011f80:	42a6      	cmp	r6, r4
 8011f82:	d109      	bne.n	8011f98 <__libc_init_array+0x24>
 8011f84:	4d0b      	ldr	r5, [pc, #44]	@ (8011fb4 <__libc_init_array+0x40>)
 8011f86:	2600      	movs	r6, #0
 8011f88:	4c0b      	ldr	r4, [pc, #44]	@ (8011fb8 <__libc_init_array+0x44>)
 8011f8a:	f003 fafb 	bl	8015584 <_init>
 8011f8e:	1b64      	subs	r4, r4, r5
 8011f90:	10a4      	asrs	r4, r4, #2
 8011f92:	42a6      	cmp	r6, r4
 8011f94:	d105      	bne.n	8011fa2 <__libc_init_array+0x2e>
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
 8011f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f9c:	3601      	adds	r6, #1
 8011f9e:	4798      	blx	r3
 8011fa0:	e7ee      	b.n	8011f80 <__libc_init_array+0xc>
 8011fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fa6:	3601      	adds	r6, #1
 8011fa8:	4798      	blx	r3
 8011faa:	e7f2      	b.n	8011f92 <__libc_init_array+0x1e>
 8011fac:	08015d80 	.word	0x08015d80
 8011fb0:	08015d80 	.word	0x08015d80
 8011fb4:	08015d80 	.word	0x08015d80
 8011fb8:	08015d84 	.word	0x08015d84

08011fbc <__retarget_lock_init_recursive>:
 8011fbc:	4770      	bx	lr

08011fbe <__retarget_lock_acquire_recursive>:
 8011fbe:	4770      	bx	lr

08011fc0 <__retarget_lock_release_recursive>:
 8011fc0:	4770      	bx	lr

08011fc2 <memchr>:
 8011fc2:	b2c9      	uxtb	r1, r1
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	4402      	add	r2, r0
 8011fc8:	b510      	push	{r4, lr}
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	4618      	mov	r0, r3
 8011fce:	d101      	bne.n	8011fd4 <memchr+0x12>
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	e003      	b.n	8011fdc <memchr+0x1a>
 8011fd4:	7804      	ldrb	r4, [r0, #0]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	428c      	cmp	r4, r1
 8011fda:	d1f6      	bne.n	8011fca <memchr+0x8>
 8011fdc:	bd10      	pop	{r4, pc}
	...

08011fe0 <nanf>:
 8011fe0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011fe8 <nanf+0x8>
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	7fc00000 	.word	0x7fc00000

08011fec <quorem>:
 8011fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff0:	6903      	ldr	r3, [r0, #16]
 8011ff2:	4607      	mov	r7, r0
 8011ff4:	690c      	ldr	r4, [r1, #16]
 8011ff6:	42a3      	cmp	r3, r4
 8011ff8:	f2c0 8083 	blt.w	8012102 <quorem+0x116>
 8011ffc:	3c01      	subs	r4, #1
 8011ffe:	f100 0514 	add.w	r5, r0, #20
 8012002:	f101 0814 	add.w	r8, r1, #20
 8012006:	00a3      	lsls	r3, r4, #2
 8012008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801200c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012010:	9300      	str	r3, [sp, #0]
 8012012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012016:	9301      	str	r3, [sp, #4]
 8012018:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801201c:	3301      	adds	r3, #1
 801201e:	429a      	cmp	r2, r3
 8012020:	fbb2 f6f3 	udiv	r6, r2, r3
 8012024:	d331      	bcc.n	801208a <quorem+0x9e>
 8012026:	f04f 0a00 	mov.w	sl, #0
 801202a:	46c4      	mov	ip, r8
 801202c:	46ae      	mov	lr, r5
 801202e:	46d3      	mov	fp, sl
 8012030:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012034:	b298      	uxth	r0, r3
 8012036:	45e1      	cmp	r9, ip
 8012038:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801203c:	fb06 a000 	mla	r0, r6, r0, sl
 8012040:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012044:	b280      	uxth	r0, r0
 8012046:	fb06 2303 	mla	r3, r6, r3, r2
 801204a:	f8de 2000 	ldr.w	r2, [lr]
 801204e:	b292      	uxth	r2, r2
 8012050:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012054:	eba2 0200 	sub.w	r2, r2, r0
 8012058:	b29b      	uxth	r3, r3
 801205a:	f8de 0000 	ldr.w	r0, [lr]
 801205e:	445a      	add	r2, fp
 8012060:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012064:	b292      	uxth	r2, r2
 8012066:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801206a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801206e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012072:	f84e 2b04 	str.w	r2, [lr], #4
 8012076:	d2db      	bcs.n	8012030 <quorem+0x44>
 8012078:	9b00      	ldr	r3, [sp, #0]
 801207a:	58eb      	ldr	r3, [r5, r3]
 801207c:	b92b      	cbnz	r3, 801208a <quorem+0x9e>
 801207e:	9b01      	ldr	r3, [sp, #4]
 8012080:	3b04      	subs	r3, #4
 8012082:	429d      	cmp	r5, r3
 8012084:	461a      	mov	r2, r3
 8012086:	d330      	bcc.n	80120ea <quorem+0xfe>
 8012088:	613c      	str	r4, [r7, #16]
 801208a:	4638      	mov	r0, r7
 801208c:	f001 f9c6 	bl	801341c <__mcmp>
 8012090:	2800      	cmp	r0, #0
 8012092:	db26      	blt.n	80120e2 <quorem+0xf6>
 8012094:	4629      	mov	r1, r5
 8012096:	2000      	movs	r0, #0
 8012098:	f858 2b04 	ldr.w	r2, [r8], #4
 801209c:	f8d1 c000 	ldr.w	ip, [r1]
 80120a0:	fa1f fe82 	uxth.w	lr, r2
 80120a4:	45c1      	cmp	r9, r8
 80120a6:	fa1f f38c 	uxth.w	r3, ip
 80120aa:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80120ae:	eba3 030e 	sub.w	r3, r3, lr
 80120b2:	4403      	add	r3, r0
 80120b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80120be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80120c6:	f841 3b04 	str.w	r3, [r1], #4
 80120ca:	d2e5      	bcs.n	8012098 <quorem+0xac>
 80120cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120d4:	b922      	cbnz	r2, 80120e0 <quorem+0xf4>
 80120d6:	3b04      	subs	r3, #4
 80120d8:	429d      	cmp	r5, r3
 80120da:	461a      	mov	r2, r3
 80120dc:	d30b      	bcc.n	80120f6 <quorem+0x10a>
 80120de:	613c      	str	r4, [r7, #16]
 80120e0:	3601      	adds	r6, #1
 80120e2:	4630      	mov	r0, r6
 80120e4:	b003      	add	sp, #12
 80120e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ea:	6812      	ldr	r2, [r2, #0]
 80120ec:	3b04      	subs	r3, #4
 80120ee:	2a00      	cmp	r2, #0
 80120f0:	d1ca      	bne.n	8012088 <quorem+0x9c>
 80120f2:	3c01      	subs	r4, #1
 80120f4:	e7c5      	b.n	8012082 <quorem+0x96>
 80120f6:	6812      	ldr	r2, [r2, #0]
 80120f8:	3b04      	subs	r3, #4
 80120fa:	2a00      	cmp	r2, #0
 80120fc:	d1ef      	bne.n	80120de <quorem+0xf2>
 80120fe:	3c01      	subs	r4, #1
 8012100:	e7ea      	b.n	80120d8 <quorem+0xec>
 8012102:	2000      	movs	r0, #0
 8012104:	e7ee      	b.n	80120e4 <quorem+0xf8>
	...

08012108 <_dtoa_r>:
 8012108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801210c:	69c7      	ldr	r7, [r0, #28]
 801210e:	b099      	sub	sp, #100	@ 0x64
 8012110:	4683      	mov	fp, r0
 8012112:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012114:	9109      	str	r1, [sp, #36]	@ 0x24
 8012116:	920e      	str	r2, [sp, #56]	@ 0x38
 8012118:	9313      	str	r3, [sp, #76]	@ 0x4c
 801211a:	ec55 4b10 	vmov	r4, r5, d0
 801211e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012122:	b97f      	cbnz	r7, 8012144 <_dtoa_r+0x3c>
 8012124:	2010      	movs	r0, #16
 8012126:	f000 fdfd 	bl	8012d24 <malloc>
 801212a:	4602      	mov	r2, r0
 801212c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012130:	b920      	cbnz	r0, 801213c <_dtoa_r+0x34>
 8012132:	4ba7      	ldr	r3, [pc, #668]	@ (80123d0 <_dtoa_r+0x2c8>)
 8012134:	21ef      	movs	r1, #239	@ 0xef
 8012136:	48a7      	ldr	r0, [pc, #668]	@ (80123d4 <_dtoa_r+0x2cc>)
 8012138:	f002 fe0a 	bl	8014d50 <__assert_func>
 801213c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012140:	6007      	str	r7, [r0, #0]
 8012142:	60c7      	str	r7, [r0, #12]
 8012144:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012148:	6819      	ldr	r1, [r3, #0]
 801214a:	b159      	cbz	r1, 8012164 <_dtoa_r+0x5c>
 801214c:	685a      	ldr	r2, [r3, #4]
 801214e:	2301      	movs	r3, #1
 8012150:	4658      	mov	r0, fp
 8012152:	4093      	lsls	r3, r2
 8012154:	604a      	str	r2, [r1, #4]
 8012156:	608b      	str	r3, [r1, #8]
 8012158:	f000 feda 	bl	8012f10 <_Bfree>
 801215c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012160:	2200      	movs	r2, #0
 8012162:	601a      	str	r2, [r3, #0]
 8012164:	1e2b      	subs	r3, r5, #0
 8012166:	bfb7      	itett	lt
 8012168:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801216c:	2300      	movge	r3, #0
 801216e:	2201      	movlt	r2, #1
 8012170:	9303      	strlt	r3, [sp, #12]
 8012172:	bfa8      	it	ge
 8012174:	6033      	strge	r3, [r6, #0]
 8012176:	9f03      	ldr	r7, [sp, #12]
 8012178:	4b97      	ldr	r3, [pc, #604]	@ (80123d8 <_dtoa_r+0x2d0>)
 801217a:	bfb8      	it	lt
 801217c:	6032      	strlt	r2, [r6, #0]
 801217e:	43bb      	bics	r3, r7
 8012180:	d112      	bne.n	80121a8 <_dtoa_r+0xa0>
 8012182:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012186:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012188:	6013      	str	r3, [r2, #0]
 801218a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801218e:	4323      	orrs	r3, r4
 8012190:	f000 854c 	beq.w	8012c2c <_dtoa_r+0xb24>
 8012194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012196:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80123ec <_dtoa_r+0x2e4>
 801219a:	2b00      	cmp	r3, #0
 801219c:	f000 854e 	beq.w	8012c3c <_dtoa_r+0xb34>
 80121a0:	f10a 0303 	add.w	r3, sl, #3
 80121a4:	f000 bd48 	b.w	8012c38 <_dtoa_r+0xb30>
 80121a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80121ac:	2200      	movs	r2, #0
 80121ae:	2300      	movs	r3, #0
 80121b0:	ec51 0b17 	vmov	r0, r1, d7
 80121b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80121b8:	f7ee fc8a 	bl	8000ad0 <__aeabi_dcmpeq>
 80121bc:	4680      	mov	r8, r0
 80121be:	b158      	cbz	r0, 80121d8 <_dtoa_r+0xd0>
 80121c0:	2301      	movs	r3, #1
 80121c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80121c4:	6013      	str	r3, [r2, #0]
 80121c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80121c8:	b113      	cbz	r3, 80121d0 <_dtoa_r+0xc8>
 80121ca:	4b84      	ldr	r3, [pc, #528]	@ (80123dc <_dtoa_r+0x2d4>)
 80121cc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80121ce:	6013      	str	r3, [r2, #0]
 80121d0:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80123f0 <_dtoa_r+0x2e8>
 80121d4:	f000 bd32 	b.w	8012c3c <_dtoa_r+0xb34>
 80121d8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80121dc:	aa16      	add	r2, sp, #88	@ 0x58
 80121de:	a917      	add	r1, sp, #92	@ 0x5c
 80121e0:	4658      	mov	r0, fp
 80121e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80121e6:	f001 fa41 	bl	801366c <__d2b>
 80121ea:	4681      	mov	r9, r0
 80121ec:	2e00      	cmp	r6, #0
 80121ee:	d075      	beq.n	80122dc <_dtoa_r+0x1d4>
 80121f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121f2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80121f6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80121fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121fe:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012206:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801220a:	4619      	mov	r1, r3
 801220c:	2200      	movs	r2, #0
 801220e:	4b74      	ldr	r3, [pc, #464]	@ (80123e0 <_dtoa_r+0x2d8>)
 8012210:	f7ee f83e 	bl	8000290 <__aeabi_dsub>
 8012214:	a368      	add	r3, pc, #416	@ (adr r3, 80123b8 <_dtoa_r+0x2b0>)
 8012216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221a:	f7ee f9f1 	bl	8000600 <__aeabi_dmul>
 801221e:	a368      	add	r3, pc, #416	@ (adr r3, 80123c0 <_dtoa_r+0x2b8>)
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	f7ee f836 	bl	8000294 <__adddf3>
 8012228:	4604      	mov	r4, r0
 801222a:	460d      	mov	r5, r1
 801222c:	4630      	mov	r0, r6
 801222e:	f7ee f97d 	bl	800052c <__aeabi_i2d>
 8012232:	a365      	add	r3, pc, #404	@ (adr r3, 80123c8 <_dtoa_r+0x2c0>)
 8012234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012238:	f7ee f9e2 	bl	8000600 <__aeabi_dmul>
 801223c:	4602      	mov	r2, r0
 801223e:	460b      	mov	r3, r1
 8012240:	4620      	mov	r0, r4
 8012242:	4629      	mov	r1, r5
 8012244:	f7ee f826 	bl	8000294 <__adddf3>
 8012248:	4604      	mov	r4, r0
 801224a:	460d      	mov	r5, r1
 801224c:	f7ee fc88 	bl	8000b60 <__aeabi_d2iz>
 8012250:	2200      	movs	r2, #0
 8012252:	4607      	mov	r7, r0
 8012254:	2300      	movs	r3, #0
 8012256:	4620      	mov	r0, r4
 8012258:	4629      	mov	r1, r5
 801225a:	f7ee fc43 	bl	8000ae4 <__aeabi_dcmplt>
 801225e:	b140      	cbz	r0, 8012272 <_dtoa_r+0x16a>
 8012260:	4638      	mov	r0, r7
 8012262:	f7ee f963 	bl	800052c <__aeabi_i2d>
 8012266:	4622      	mov	r2, r4
 8012268:	462b      	mov	r3, r5
 801226a:	f7ee fc31 	bl	8000ad0 <__aeabi_dcmpeq>
 801226e:	b900      	cbnz	r0, 8012272 <_dtoa_r+0x16a>
 8012270:	3f01      	subs	r7, #1
 8012272:	2f16      	cmp	r7, #22
 8012274:	d851      	bhi.n	801231a <_dtoa_r+0x212>
 8012276:	4b5b      	ldr	r3, [pc, #364]	@ (80123e4 <_dtoa_r+0x2dc>)
 8012278:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801227c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012284:	f7ee fc2e 	bl	8000ae4 <__aeabi_dcmplt>
 8012288:	2800      	cmp	r0, #0
 801228a:	d048      	beq.n	801231e <_dtoa_r+0x216>
 801228c:	3f01      	subs	r7, #1
 801228e:	2300      	movs	r3, #0
 8012290:	9312      	str	r3, [sp, #72]	@ 0x48
 8012292:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012294:	1b9b      	subs	r3, r3, r6
 8012296:	1e5a      	subs	r2, r3, #1
 8012298:	bf46      	itte	mi
 801229a:	f1c3 0801 	rsbmi	r8, r3, #1
 801229e:	2300      	movmi	r3, #0
 80122a0:	f04f 0800 	movpl.w	r8, #0
 80122a4:	9208      	str	r2, [sp, #32]
 80122a6:	bf48      	it	mi
 80122a8:	9308      	strmi	r3, [sp, #32]
 80122aa:	2f00      	cmp	r7, #0
 80122ac:	db39      	blt.n	8012322 <_dtoa_r+0x21a>
 80122ae:	9b08      	ldr	r3, [sp, #32]
 80122b0:	970f      	str	r7, [sp, #60]	@ 0x3c
 80122b2:	443b      	add	r3, r7
 80122b4:	9308      	str	r3, [sp, #32]
 80122b6:	2300      	movs	r3, #0
 80122b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80122ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122bc:	2b09      	cmp	r3, #9
 80122be:	d864      	bhi.n	801238a <_dtoa_r+0x282>
 80122c0:	2b05      	cmp	r3, #5
 80122c2:	bfc5      	ittet	gt
 80122c4:	3b04      	subgt	r3, #4
 80122c6:	2400      	movgt	r4, #0
 80122c8:	2401      	movle	r4, #1
 80122ca:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80122cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122ce:	3b02      	subs	r3, #2
 80122d0:	2b03      	cmp	r3, #3
 80122d2:	d865      	bhi.n	80123a0 <_dtoa_r+0x298>
 80122d4:	e8df f003 	tbb	[pc, r3]
 80122d8:	5737392c 	.word	0x5737392c
 80122dc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80122e0:	441e      	add	r6, r3
 80122e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80122e6:	2b20      	cmp	r3, #32
 80122e8:	bfc9      	itett	gt
 80122ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80122ee:	f1c3 0320 	rsble	r3, r3, #32
 80122f2:	409f      	lslgt	r7, r3
 80122f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80122f8:	bfd8      	it	le
 80122fa:	fa04 f003 	lslle.w	r0, r4, r3
 80122fe:	f106 36ff 	add.w	r6, r6, #4294967295
 8012302:	bfc4      	itt	gt
 8012304:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012308:	ea47 0003 	orrgt.w	r0, r7, r3
 801230c:	f7ee f8fe 	bl	800050c <__aeabi_ui2d>
 8012310:	2201      	movs	r2, #1
 8012312:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012316:	9214      	str	r2, [sp, #80]	@ 0x50
 8012318:	e777      	b.n	801220a <_dtoa_r+0x102>
 801231a:	2301      	movs	r3, #1
 801231c:	e7b8      	b.n	8012290 <_dtoa_r+0x188>
 801231e:	9012      	str	r0, [sp, #72]	@ 0x48
 8012320:	e7b7      	b.n	8012292 <_dtoa_r+0x18a>
 8012322:	427b      	negs	r3, r7
 8012324:	eba8 0807 	sub.w	r8, r8, r7
 8012328:	930a      	str	r3, [sp, #40]	@ 0x28
 801232a:	2300      	movs	r3, #0
 801232c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801232e:	e7c4      	b.n	80122ba <_dtoa_r+0x1b2>
 8012330:	2300      	movs	r3, #0
 8012332:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012336:	2b00      	cmp	r3, #0
 8012338:	dc35      	bgt.n	80123a6 <_dtoa_r+0x29e>
 801233a:	2301      	movs	r3, #1
 801233c:	461a      	mov	r2, r3
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	9307      	str	r3, [sp, #28]
 8012342:	920e      	str	r2, [sp, #56]	@ 0x38
 8012344:	e00b      	b.n	801235e <_dtoa_r+0x256>
 8012346:	2301      	movs	r3, #1
 8012348:	e7f3      	b.n	8012332 <_dtoa_r+0x22a>
 801234a:	2300      	movs	r3, #0
 801234c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801234e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012350:	18fb      	adds	r3, r7, r3
 8012352:	9300      	str	r3, [sp, #0]
 8012354:	3301      	adds	r3, #1
 8012356:	2b01      	cmp	r3, #1
 8012358:	9307      	str	r3, [sp, #28]
 801235a:	bfb8      	it	lt
 801235c:	2301      	movlt	r3, #1
 801235e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012362:	2100      	movs	r1, #0
 8012364:	2204      	movs	r2, #4
 8012366:	f102 0514 	add.w	r5, r2, #20
 801236a:	429d      	cmp	r5, r3
 801236c:	d91f      	bls.n	80123ae <_dtoa_r+0x2a6>
 801236e:	6041      	str	r1, [r0, #4]
 8012370:	4658      	mov	r0, fp
 8012372:	f000 fd8d 	bl	8012e90 <_Balloc>
 8012376:	4682      	mov	sl, r0
 8012378:	2800      	cmp	r0, #0
 801237a:	d13b      	bne.n	80123f4 <_dtoa_r+0x2ec>
 801237c:	4b1a      	ldr	r3, [pc, #104]	@ (80123e8 <_dtoa_r+0x2e0>)
 801237e:	4602      	mov	r2, r0
 8012380:	f240 11af 	movw	r1, #431	@ 0x1af
 8012384:	e6d7      	b.n	8012136 <_dtoa_r+0x2e>
 8012386:	2301      	movs	r3, #1
 8012388:	e7e0      	b.n	801234c <_dtoa_r+0x244>
 801238a:	2401      	movs	r4, #1
 801238c:	2300      	movs	r3, #0
 801238e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012390:	9309      	str	r3, [sp, #36]	@ 0x24
 8012392:	f04f 33ff 	mov.w	r3, #4294967295
 8012396:	2200      	movs	r2, #0
 8012398:	9300      	str	r3, [sp, #0]
 801239a:	9307      	str	r3, [sp, #28]
 801239c:	2312      	movs	r3, #18
 801239e:	e7d0      	b.n	8012342 <_dtoa_r+0x23a>
 80123a0:	2301      	movs	r3, #1
 80123a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123a4:	e7f5      	b.n	8012392 <_dtoa_r+0x28a>
 80123a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123a8:	9300      	str	r3, [sp, #0]
 80123aa:	9307      	str	r3, [sp, #28]
 80123ac:	e7d7      	b.n	801235e <_dtoa_r+0x256>
 80123ae:	3101      	adds	r1, #1
 80123b0:	0052      	lsls	r2, r2, #1
 80123b2:	e7d8      	b.n	8012366 <_dtoa_r+0x25e>
 80123b4:	f3af 8000 	nop.w
 80123b8:	636f4361 	.word	0x636f4361
 80123bc:	3fd287a7 	.word	0x3fd287a7
 80123c0:	8b60c8b3 	.word	0x8b60c8b3
 80123c4:	3fc68a28 	.word	0x3fc68a28
 80123c8:	509f79fb 	.word	0x509f79fb
 80123cc:	3fd34413 	.word	0x3fd34413
 80123d0:	08015992 	.word	0x08015992
 80123d4:	080159a9 	.word	0x080159a9
 80123d8:	7ff00000 	.word	0x7ff00000
 80123dc:	0801595d 	.word	0x0801595d
 80123e0:	3ff80000 	.word	0x3ff80000
 80123e4:	08015aa0 	.word	0x08015aa0
 80123e8:	08015a01 	.word	0x08015a01
 80123ec:	0801598e 	.word	0x0801598e
 80123f0:	0801595c 	.word	0x0801595c
 80123f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80123f8:	6018      	str	r0, [r3, #0]
 80123fa:	9b07      	ldr	r3, [sp, #28]
 80123fc:	2b0e      	cmp	r3, #14
 80123fe:	f200 80a4 	bhi.w	801254a <_dtoa_r+0x442>
 8012402:	2c00      	cmp	r4, #0
 8012404:	f000 80a1 	beq.w	801254a <_dtoa_r+0x442>
 8012408:	2f00      	cmp	r7, #0
 801240a:	dd33      	ble.n	8012474 <_dtoa_r+0x36c>
 801240c:	f007 020f 	and.w	r2, r7, #15
 8012410:	4bac      	ldr	r3, [pc, #688]	@ (80126c4 <_dtoa_r+0x5bc>)
 8012412:	05f8      	lsls	r0, r7, #23
 8012414:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801241c:	ed93 7b00 	vldr	d7, [r3]
 8012420:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012424:	d516      	bpl.n	8012454 <_dtoa_r+0x34c>
 8012426:	4ba8      	ldr	r3, [pc, #672]	@ (80126c8 <_dtoa_r+0x5c0>)
 8012428:	f004 040f 	and.w	r4, r4, #15
 801242c:	2603      	movs	r6, #3
 801242e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012432:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012436:	f7ee fa0d 	bl	8000854 <__aeabi_ddiv>
 801243a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801243e:	4da2      	ldr	r5, [pc, #648]	@ (80126c8 <_dtoa_r+0x5c0>)
 8012440:	b954      	cbnz	r4, 8012458 <_dtoa_r+0x350>
 8012442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801244a:	f7ee fa03 	bl	8000854 <__aeabi_ddiv>
 801244e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012452:	e028      	b.n	80124a6 <_dtoa_r+0x39e>
 8012454:	2602      	movs	r6, #2
 8012456:	e7f2      	b.n	801243e <_dtoa_r+0x336>
 8012458:	07e1      	lsls	r1, r4, #31
 801245a:	d508      	bpl.n	801246e <_dtoa_r+0x366>
 801245c:	3601      	adds	r6, #1
 801245e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012462:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012466:	f7ee f8cb 	bl	8000600 <__aeabi_dmul>
 801246a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801246e:	1064      	asrs	r4, r4, #1
 8012470:	3508      	adds	r5, #8
 8012472:	e7e5      	b.n	8012440 <_dtoa_r+0x338>
 8012474:	f000 80d2 	beq.w	801261c <_dtoa_r+0x514>
 8012478:	427c      	negs	r4, r7
 801247a:	4b92      	ldr	r3, [pc, #584]	@ (80126c4 <_dtoa_r+0x5bc>)
 801247c:	4d92      	ldr	r5, [pc, #584]	@ (80126c8 <_dtoa_r+0x5c0>)
 801247e:	2602      	movs	r6, #2
 8012480:	f004 020f 	and.w	r2, r4, #15
 8012484:	1124      	asrs	r4, r4, #4
 8012486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801248a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012492:	f7ee f8b5 	bl	8000600 <__aeabi_dmul>
 8012496:	2300      	movs	r3, #0
 8012498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801249c:	2c00      	cmp	r4, #0
 801249e:	f040 80b2 	bne.w	8012606 <_dtoa_r+0x4fe>
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d1d3      	bne.n	801244e <_dtoa_r+0x346>
 80124a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80124a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	f000 80b7 	beq.w	8012620 <_dtoa_r+0x518>
 80124b2:	2200      	movs	r2, #0
 80124b4:	4b85      	ldr	r3, [pc, #532]	@ (80126cc <_dtoa_r+0x5c4>)
 80124b6:	4620      	mov	r0, r4
 80124b8:	4629      	mov	r1, r5
 80124ba:	f7ee fb13 	bl	8000ae4 <__aeabi_dcmplt>
 80124be:	2800      	cmp	r0, #0
 80124c0:	f000 80ae 	beq.w	8012620 <_dtoa_r+0x518>
 80124c4:	9b07      	ldr	r3, [sp, #28]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f000 80aa 	beq.w	8012620 <_dtoa_r+0x518>
 80124cc:	9b00      	ldr	r3, [sp, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	dd37      	ble.n	8012542 <_dtoa_r+0x43a>
 80124d2:	1e7b      	subs	r3, r7, #1
 80124d4:	4620      	mov	r0, r4
 80124d6:	2200      	movs	r2, #0
 80124d8:	4629      	mov	r1, r5
 80124da:	9304      	str	r3, [sp, #16]
 80124dc:	3601      	adds	r6, #1
 80124de:	4b7c      	ldr	r3, [pc, #496]	@ (80126d0 <_dtoa_r+0x5c8>)
 80124e0:	f7ee f88e 	bl	8000600 <__aeabi_dmul>
 80124e4:	9c00      	ldr	r4, [sp, #0]
 80124e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124ea:	4630      	mov	r0, r6
 80124ec:	f7ee f81e 	bl	800052c <__aeabi_i2d>
 80124f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124f4:	f7ee f884 	bl	8000600 <__aeabi_dmul>
 80124f8:	2200      	movs	r2, #0
 80124fa:	4b76      	ldr	r3, [pc, #472]	@ (80126d4 <_dtoa_r+0x5cc>)
 80124fc:	f7ed feca 	bl	8000294 <__adddf3>
 8012500:	4605      	mov	r5, r0
 8012502:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012506:	2c00      	cmp	r4, #0
 8012508:	f040 808d 	bne.w	8012626 <_dtoa_r+0x51e>
 801250c:	2200      	movs	r2, #0
 801250e:	4b72      	ldr	r3, [pc, #456]	@ (80126d8 <_dtoa_r+0x5d0>)
 8012510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012514:	f7ed febc 	bl	8000290 <__aeabi_dsub>
 8012518:	4602      	mov	r2, r0
 801251a:	460b      	mov	r3, r1
 801251c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012520:	462a      	mov	r2, r5
 8012522:	4633      	mov	r3, r6
 8012524:	f7ee fafc 	bl	8000b20 <__aeabi_dcmpgt>
 8012528:	2800      	cmp	r0, #0
 801252a:	f040 828b 	bne.w	8012a44 <_dtoa_r+0x93c>
 801252e:	462a      	mov	r2, r5
 8012530:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012538:	f7ee fad4 	bl	8000ae4 <__aeabi_dcmplt>
 801253c:	2800      	cmp	r0, #0
 801253e:	f040 8128 	bne.w	8012792 <_dtoa_r+0x68a>
 8012542:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012546:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801254a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801254c:	2b00      	cmp	r3, #0
 801254e:	f2c0 815a 	blt.w	8012806 <_dtoa_r+0x6fe>
 8012552:	2f0e      	cmp	r7, #14
 8012554:	f300 8157 	bgt.w	8012806 <_dtoa_r+0x6fe>
 8012558:	4b5a      	ldr	r3, [pc, #360]	@ (80126c4 <_dtoa_r+0x5bc>)
 801255a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801255e:	ed93 7b00 	vldr	d7, [r3]
 8012562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012564:	2b00      	cmp	r3, #0
 8012566:	ed8d 7b00 	vstr	d7, [sp]
 801256a:	da03      	bge.n	8012574 <_dtoa_r+0x46c>
 801256c:	9b07      	ldr	r3, [sp, #28]
 801256e:	2b00      	cmp	r3, #0
 8012570:	f340 8101 	ble.w	8012776 <_dtoa_r+0x66e>
 8012574:	4656      	mov	r6, sl
 8012576:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801257a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801257e:	4620      	mov	r0, r4
 8012580:	4629      	mov	r1, r5
 8012582:	f7ee f967 	bl	8000854 <__aeabi_ddiv>
 8012586:	f7ee faeb 	bl	8000b60 <__aeabi_d2iz>
 801258a:	4680      	mov	r8, r0
 801258c:	f7ed ffce 	bl	800052c <__aeabi_i2d>
 8012590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012594:	f7ee f834 	bl	8000600 <__aeabi_dmul>
 8012598:	4602      	mov	r2, r0
 801259a:	4620      	mov	r0, r4
 801259c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80125a0:	460b      	mov	r3, r1
 80125a2:	4629      	mov	r1, r5
 80125a4:	f7ed fe74 	bl	8000290 <__aeabi_dsub>
 80125a8:	9d07      	ldr	r5, [sp, #28]
 80125aa:	f806 4b01 	strb.w	r4, [r6], #1
 80125ae:	eba6 040a 	sub.w	r4, r6, sl
 80125b2:	4602      	mov	r2, r0
 80125b4:	460b      	mov	r3, r1
 80125b6:	42a5      	cmp	r5, r4
 80125b8:	f040 8117 	bne.w	80127ea <_dtoa_r+0x6e2>
 80125bc:	f7ed fe6a 	bl	8000294 <__adddf3>
 80125c0:	4604      	mov	r4, r0
 80125c2:	460d      	mov	r5, r1
 80125c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125c8:	f7ee faaa 	bl	8000b20 <__aeabi_dcmpgt>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	f040 80f9 	bne.w	80127c4 <_dtoa_r+0x6bc>
 80125d2:	4620      	mov	r0, r4
 80125d4:	4629      	mov	r1, r5
 80125d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125da:	f7ee fa79 	bl	8000ad0 <__aeabi_dcmpeq>
 80125de:	b118      	cbz	r0, 80125e8 <_dtoa_r+0x4e0>
 80125e0:	f018 0f01 	tst.w	r8, #1
 80125e4:	f040 80ee 	bne.w	80127c4 <_dtoa_r+0x6bc>
 80125e8:	4649      	mov	r1, r9
 80125ea:	4658      	mov	r0, fp
 80125ec:	f000 fc90 	bl	8012f10 <_Bfree>
 80125f0:	2300      	movs	r3, #0
 80125f2:	3701      	adds	r7, #1
 80125f4:	7033      	strb	r3, [r6, #0]
 80125f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80125f8:	601f      	str	r7, [r3, #0]
 80125fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	f000 831d 	beq.w	8012c3c <_dtoa_r+0xb34>
 8012602:	601e      	str	r6, [r3, #0]
 8012604:	e31a      	b.n	8012c3c <_dtoa_r+0xb34>
 8012606:	07e2      	lsls	r2, r4, #31
 8012608:	d505      	bpl.n	8012616 <_dtoa_r+0x50e>
 801260a:	3601      	adds	r6, #1
 801260c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012610:	f7ed fff6 	bl	8000600 <__aeabi_dmul>
 8012614:	2301      	movs	r3, #1
 8012616:	1064      	asrs	r4, r4, #1
 8012618:	3508      	adds	r5, #8
 801261a:	e73f      	b.n	801249c <_dtoa_r+0x394>
 801261c:	2602      	movs	r6, #2
 801261e:	e742      	b.n	80124a6 <_dtoa_r+0x39e>
 8012620:	9c07      	ldr	r4, [sp, #28]
 8012622:	9704      	str	r7, [sp, #16]
 8012624:	e761      	b.n	80124ea <_dtoa_r+0x3e2>
 8012626:	4b27      	ldr	r3, [pc, #156]	@ (80126c4 <_dtoa_r+0x5bc>)
 8012628:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801262a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801262e:	4454      	add	r4, sl
 8012630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012634:	2900      	cmp	r1, #0
 8012636:	d053      	beq.n	80126e0 <_dtoa_r+0x5d8>
 8012638:	2000      	movs	r0, #0
 801263a:	4928      	ldr	r1, [pc, #160]	@ (80126dc <_dtoa_r+0x5d4>)
 801263c:	f7ee f90a 	bl	8000854 <__aeabi_ddiv>
 8012640:	4633      	mov	r3, r6
 8012642:	4656      	mov	r6, sl
 8012644:	462a      	mov	r2, r5
 8012646:	f7ed fe23 	bl	8000290 <__aeabi_dsub>
 801264a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801264e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012652:	f7ee fa85 	bl	8000b60 <__aeabi_d2iz>
 8012656:	4605      	mov	r5, r0
 8012658:	f7ed ff68 	bl	800052c <__aeabi_i2d>
 801265c:	4602      	mov	r2, r0
 801265e:	460b      	mov	r3, r1
 8012660:	3530      	adds	r5, #48	@ 0x30
 8012662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012666:	f7ed fe13 	bl	8000290 <__aeabi_dsub>
 801266a:	4602      	mov	r2, r0
 801266c:	460b      	mov	r3, r1
 801266e:	f806 5b01 	strb.w	r5, [r6], #1
 8012672:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012676:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801267a:	f7ee fa33 	bl	8000ae4 <__aeabi_dcmplt>
 801267e:	2800      	cmp	r0, #0
 8012680:	d171      	bne.n	8012766 <_dtoa_r+0x65e>
 8012682:	2000      	movs	r0, #0
 8012684:	4911      	ldr	r1, [pc, #68]	@ (80126cc <_dtoa_r+0x5c4>)
 8012686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801268a:	f7ed fe01 	bl	8000290 <__aeabi_dsub>
 801268e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012692:	f7ee fa27 	bl	8000ae4 <__aeabi_dcmplt>
 8012696:	2800      	cmp	r0, #0
 8012698:	f040 8095 	bne.w	80127c6 <_dtoa_r+0x6be>
 801269c:	42a6      	cmp	r6, r4
 801269e:	f43f af50 	beq.w	8012542 <_dtoa_r+0x43a>
 80126a2:	2200      	movs	r2, #0
 80126a4:	4b0a      	ldr	r3, [pc, #40]	@ (80126d0 <_dtoa_r+0x5c8>)
 80126a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80126aa:	f7ed ffa9 	bl	8000600 <__aeabi_dmul>
 80126ae:	2200      	movs	r2, #0
 80126b0:	4b07      	ldr	r3, [pc, #28]	@ (80126d0 <_dtoa_r+0x5c8>)
 80126b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80126b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126ba:	f7ed ffa1 	bl	8000600 <__aeabi_dmul>
 80126be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126c2:	e7c4      	b.n	801264e <_dtoa_r+0x546>
 80126c4:	08015aa0 	.word	0x08015aa0
 80126c8:	08015a78 	.word	0x08015a78
 80126cc:	3ff00000 	.word	0x3ff00000
 80126d0:	40240000 	.word	0x40240000
 80126d4:	401c0000 	.word	0x401c0000
 80126d8:	40140000 	.word	0x40140000
 80126dc:	3fe00000 	.word	0x3fe00000
 80126e0:	4631      	mov	r1, r6
 80126e2:	4656      	mov	r6, sl
 80126e4:	4628      	mov	r0, r5
 80126e6:	f7ed ff8b 	bl	8000600 <__aeabi_dmul>
 80126ea:	9415      	str	r4, [sp, #84]	@ 0x54
 80126ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80126f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126f4:	f7ee fa34 	bl	8000b60 <__aeabi_d2iz>
 80126f8:	4605      	mov	r5, r0
 80126fa:	f7ed ff17 	bl	800052c <__aeabi_i2d>
 80126fe:	4602      	mov	r2, r0
 8012700:	3530      	adds	r5, #48	@ 0x30
 8012702:	460b      	mov	r3, r1
 8012704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012708:	f7ed fdc2 	bl	8000290 <__aeabi_dsub>
 801270c:	f806 5b01 	strb.w	r5, [r6], #1
 8012710:	4602      	mov	r2, r0
 8012712:	460b      	mov	r3, r1
 8012714:	42a6      	cmp	r6, r4
 8012716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801271a:	f04f 0200 	mov.w	r2, #0
 801271e:	d124      	bne.n	801276a <_dtoa_r+0x662>
 8012720:	4bac      	ldr	r3, [pc, #688]	@ (80129d4 <_dtoa_r+0x8cc>)
 8012722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012726:	f7ed fdb5 	bl	8000294 <__adddf3>
 801272a:	4602      	mov	r2, r0
 801272c:	460b      	mov	r3, r1
 801272e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012732:	f7ee f9f5 	bl	8000b20 <__aeabi_dcmpgt>
 8012736:	2800      	cmp	r0, #0
 8012738:	d145      	bne.n	80127c6 <_dtoa_r+0x6be>
 801273a:	2000      	movs	r0, #0
 801273c:	49a5      	ldr	r1, [pc, #660]	@ (80129d4 <_dtoa_r+0x8cc>)
 801273e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012742:	f7ed fda5 	bl	8000290 <__aeabi_dsub>
 8012746:	4602      	mov	r2, r0
 8012748:	460b      	mov	r3, r1
 801274a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801274e:	f7ee f9c9 	bl	8000ae4 <__aeabi_dcmplt>
 8012752:	2800      	cmp	r0, #0
 8012754:	f43f aef5 	beq.w	8012542 <_dtoa_r+0x43a>
 8012758:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801275a:	1e73      	subs	r3, r6, #1
 801275c:	9315      	str	r3, [sp, #84]	@ 0x54
 801275e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012762:	2b30      	cmp	r3, #48	@ 0x30
 8012764:	d0f8      	beq.n	8012758 <_dtoa_r+0x650>
 8012766:	9f04      	ldr	r7, [sp, #16]
 8012768:	e73e      	b.n	80125e8 <_dtoa_r+0x4e0>
 801276a:	4b9b      	ldr	r3, [pc, #620]	@ (80129d8 <_dtoa_r+0x8d0>)
 801276c:	f7ed ff48 	bl	8000600 <__aeabi_dmul>
 8012770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012774:	e7bc      	b.n	80126f0 <_dtoa_r+0x5e8>
 8012776:	d10c      	bne.n	8012792 <_dtoa_r+0x68a>
 8012778:	2200      	movs	r2, #0
 801277a:	4b98      	ldr	r3, [pc, #608]	@ (80129dc <_dtoa_r+0x8d4>)
 801277c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012780:	f7ed ff3e 	bl	8000600 <__aeabi_dmul>
 8012784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012788:	f7ee f9c0 	bl	8000b0c <__aeabi_dcmpge>
 801278c:	2800      	cmp	r0, #0
 801278e:	f000 8157 	beq.w	8012a40 <_dtoa_r+0x938>
 8012792:	2400      	movs	r4, #0
 8012794:	4625      	mov	r5, r4
 8012796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012798:	4656      	mov	r6, sl
 801279a:	43db      	mvns	r3, r3
 801279c:	9304      	str	r3, [sp, #16]
 801279e:	2700      	movs	r7, #0
 80127a0:	4621      	mov	r1, r4
 80127a2:	4658      	mov	r0, fp
 80127a4:	f000 fbb4 	bl	8012f10 <_Bfree>
 80127a8:	2d00      	cmp	r5, #0
 80127aa:	d0dc      	beq.n	8012766 <_dtoa_r+0x65e>
 80127ac:	b12f      	cbz	r7, 80127ba <_dtoa_r+0x6b2>
 80127ae:	42af      	cmp	r7, r5
 80127b0:	d003      	beq.n	80127ba <_dtoa_r+0x6b2>
 80127b2:	4639      	mov	r1, r7
 80127b4:	4658      	mov	r0, fp
 80127b6:	f000 fbab 	bl	8012f10 <_Bfree>
 80127ba:	4629      	mov	r1, r5
 80127bc:	4658      	mov	r0, fp
 80127be:	f000 fba7 	bl	8012f10 <_Bfree>
 80127c2:	e7d0      	b.n	8012766 <_dtoa_r+0x65e>
 80127c4:	9704      	str	r7, [sp, #16]
 80127c6:	4633      	mov	r3, r6
 80127c8:	461e      	mov	r6, r3
 80127ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127ce:	2a39      	cmp	r2, #57	@ 0x39
 80127d0:	d107      	bne.n	80127e2 <_dtoa_r+0x6da>
 80127d2:	459a      	cmp	sl, r3
 80127d4:	d1f8      	bne.n	80127c8 <_dtoa_r+0x6c0>
 80127d6:	9a04      	ldr	r2, [sp, #16]
 80127d8:	3201      	adds	r2, #1
 80127da:	9204      	str	r2, [sp, #16]
 80127dc:	2230      	movs	r2, #48	@ 0x30
 80127de:	f88a 2000 	strb.w	r2, [sl]
 80127e2:	781a      	ldrb	r2, [r3, #0]
 80127e4:	3201      	adds	r2, #1
 80127e6:	701a      	strb	r2, [r3, #0]
 80127e8:	e7bd      	b.n	8012766 <_dtoa_r+0x65e>
 80127ea:	2200      	movs	r2, #0
 80127ec:	4b7a      	ldr	r3, [pc, #488]	@ (80129d8 <_dtoa_r+0x8d0>)
 80127ee:	f7ed ff07 	bl	8000600 <__aeabi_dmul>
 80127f2:	2200      	movs	r2, #0
 80127f4:	2300      	movs	r3, #0
 80127f6:	4604      	mov	r4, r0
 80127f8:	460d      	mov	r5, r1
 80127fa:	f7ee f969 	bl	8000ad0 <__aeabi_dcmpeq>
 80127fe:	2800      	cmp	r0, #0
 8012800:	f43f aebb 	beq.w	801257a <_dtoa_r+0x472>
 8012804:	e6f0      	b.n	80125e8 <_dtoa_r+0x4e0>
 8012806:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012808:	2a00      	cmp	r2, #0
 801280a:	f000 80db 	beq.w	80129c4 <_dtoa_r+0x8bc>
 801280e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012810:	2a01      	cmp	r2, #1
 8012812:	f300 80bf 	bgt.w	8012994 <_dtoa_r+0x88c>
 8012816:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012818:	2a00      	cmp	r2, #0
 801281a:	f000 80b7 	beq.w	801298c <_dtoa_r+0x884>
 801281e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012822:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012824:	4646      	mov	r6, r8
 8012826:	9a08      	ldr	r2, [sp, #32]
 8012828:	2101      	movs	r1, #1
 801282a:	4658      	mov	r0, fp
 801282c:	4498      	add	r8, r3
 801282e:	441a      	add	r2, r3
 8012830:	9208      	str	r2, [sp, #32]
 8012832:	f000 fc6d 	bl	8013110 <__i2b>
 8012836:	4605      	mov	r5, r0
 8012838:	b15e      	cbz	r6, 8012852 <_dtoa_r+0x74a>
 801283a:	9b08      	ldr	r3, [sp, #32]
 801283c:	2b00      	cmp	r3, #0
 801283e:	dd08      	ble.n	8012852 <_dtoa_r+0x74a>
 8012840:	42b3      	cmp	r3, r6
 8012842:	9a08      	ldr	r2, [sp, #32]
 8012844:	bfa8      	it	ge
 8012846:	4633      	movge	r3, r6
 8012848:	eba8 0803 	sub.w	r8, r8, r3
 801284c:	1af6      	subs	r6, r6, r3
 801284e:	1ad3      	subs	r3, r2, r3
 8012850:	9308      	str	r3, [sp, #32]
 8012852:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012854:	b1f3      	cbz	r3, 8012894 <_dtoa_r+0x78c>
 8012856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012858:	2b00      	cmp	r3, #0
 801285a:	f000 80b7 	beq.w	80129cc <_dtoa_r+0x8c4>
 801285e:	b18c      	cbz	r4, 8012884 <_dtoa_r+0x77c>
 8012860:	4629      	mov	r1, r5
 8012862:	4622      	mov	r2, r4
 8012864:	4658      	mov	r0, fp
 8012866:	f000 fd13 	bl	8013290 <__pow5mult>
 801286a:	464a      	mov	r2, r9
 801286c:	4601      	mov	r1, r0
 801286e:	4605      	mov	r5, r0
 8012870:	4658      	mov	r0, fp
 8012872:	f000 fc63 	bl	801313c <__multiply>
 8012876:	4649      	mov	r1, r9
 8012878:	9004      	str	r0, [sp, #16]
 801287a:	4658      	mov	r0, fp
 801287c:	f000 fb48 	bl	8012f10 <_Bfree>
 8012880:	9b04      	ldr	r3, [sp, #16]
 8012882:	4699      	mov	r9, r3
 8012884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012886:	1b1a      	subs	r2, r3, r4
 8012888:	d004      	beq.n	8012894 <_dtoa_r+0x78c>
 801288a:	4649      	mov	r1, r9
 801288c:	4658      	mov	r0, fp
 801288e:	f000 fcff 	bl	8013290 <__pow5mult>
 8012892:	4681      	mov	r9, r0
 8012894:	2101      	movs	r1, #1
 8012896:	4658      	mov	r0, fp
 8012898:	f000 fc3a 	bl	8013110 <__i2b>
 801289c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801289e:	4604      	mov	r4, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 81cf 	beq.w	8012c44 <_dtoa_r+0xb3c>
 80128a6:	461a      	mov	r2, r3
 80128a8:	4601      	mov	r1, r0
 80128aa:	4658      	mov	r0, fp
 80128ac:	f000 fcf0 	bl	8013290 <__pow5mult>
 80128b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128b2:	4604      	mov	r4, r0
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	f300 8095 	bgt.w	80129e4 <_dtoa_r+0x8dc>
 80128ba:	9b02      	ldr	r3, [sp, #8]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	f040 8087 	bne.w	80129d0 <_dtoa_r+0x8c8>
 80128c2:	9b03      	ldr	r3, [sp, #12]
 80128c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f040 8089 	bne.w	80129e0 <_dtoa_r+0x8d8>
 80128ce:	9b03      	ldr	r3, [sp, #12]
 80128d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80128d4:	0d1b      	lsrs	r3, r3, #20
 80128d6:	051b      	lsls	r3, r3, #20
 80128d8:	b12b      	cbz	r3, 80128e6 <_dtoa_r+0x7de>
 80128da:	9b08      	ldr	r3, [sp, #32]
 80128dc:	f108 0801 	add.w	r8, r8, #1
 80128e0:	3301      	adds	r3, #1
 80128e2:	9308      	str	r3, [sp, #32]
 80128e4:	2301      	movs	r3, #1
 80128e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80128e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	f000 81b0 	beq.w	8012c50 <_dtoa_r+0xb48>
 80128f0:	6923      	ldr	r3, [r4, #16]
 80128f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80128f6:	6918      	ldr	r0, [r3, #16]
 80128f8:	f000 fbbe 	bl	8013078 <__hi0bits>
 80128fc:	f1c0 0020 	rsb	r0, r0, #32
 8012900:	9b08      	ldr	r3, [sp, #32]
 8012902:	4418      	add	r0, r3
 8012904:	f010 001f 	ands.w	r0, r0, #31
 8012908:	d077      	beq.n	80129fa <_dtoa_r+0x8f2>
 801290a:	f1c0 0320 	rsb	r3, r0, #32
 801290e:	2b04      	cmp	r3, #4
 8012910:	dd6b      	ble.n	80129ea <_dtoa_r+0x8e2>
 8012912:	f1c0 001c 	rsb	r0, r0, #28
 8012916:	9b08      	ldr	r3, [sp, #32]
 8012918:	4480      	add	r8, r0
 801291a:	4403      	add	r3, r0
 801291c:	4406      	add	r6, r0
 801291e:	9308      	str	r3, [sp, #32]
 8012920:	f1b8 0f00 	cmp.w	r8, #0
 8012924:	dd05      	ble.n	8012932 <_dtoa_r+0x82a>
 8012926:	4649      	mov	r1, r9
 8012928:	4642      	mov	r2, r8
 801292a:	4658      	mov	r0, fp
 801292c:	f000 fd0a 	bl	8013344 <__lshift>
 8012930:	4681      	mov	r9, r0
 8012932:	9b08      	ldr	r3, [sp, #32]
 8012934:	2b00      	cmp	r3, #0
 8012936:	dd05      	ble.n	8012944 <_dtoa_r+0x83c>
 8012938:	4621      	mov	r1, r4
 801293a:	461a      	mov	r2, r3
 801293c:	4658      	mov	r0, fp
 801293e:	f000 fd01 	bl	8013344 <__lshift>
 8012942:	4604      	mov	r4, r0
 8012944:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012946:	2b00      	cmp	r3, #0
 8012948:	d059      	beq.n	80129fe <_dtoa_r+0x8f6>
 801294a:	4621      	mov	r1, r4
 801294c:	4648      	mov	r0, r9
 801294e:	f000 fd65 	bl	801341c <__mcmp>
 8012952:	2800      	cmp	r0, #0
 8012954:	da53      	bge.n	80129fe <_dtoa_r+0x8f6>
 8012956:	1e7b      	subs	r3, r7, #1
 8012958:	4649      	mov	r1, r9
 801295a:	220a      	movs	r2, #10
 801295c:	4658      	mov	r0, fp
 801295e:	9304      	str	r3, [sp, #16]
 8012960:	2300      	movs	r3, #0
 8012962:	f000 faf7 	bl	8012f54 <__multadd>
 8012966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012968:	4681      	mov	r9, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	f000 8172 	beq.w	8012c54 <_dtoa_r+0xb4c>
 8012970:	2300      	movs	r3, #0
 8012972:	4629      	mov	r1, r5
 8012974:	220a      	movs	r2, #10
 8012976:	4658      	mov	r0, fp
 8012978:	f000 faec 	bl	8012f54 <__multadd>
 801297c:	9b00      	ldr	r3, [sp, #0]
 801297e:	4605      	mov	r5, r0
 8012980:	2b00      	cmp	r3, #0
 8012982:	dc67      	bgt.n	8012a54 <_dtoa_r+0x94c>
 8012984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012986:	2b02      	cmp	r3, #2
 8012988:	dc41      	bgt.n	8012a0e <_dtoa_r+0x906>
 801298a:	e063      	b.n	8012a54 <_dtoa_r+0x94c>
 801298c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801298e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012992:	e746      	b.n	8012822 <_dtoa_r+0x71a>
 8012994:	9b07      	ldr	r3, [sp, #28]
 8012996:	1e5c      	subs	r4, r3, #1
 8012998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801299a:	42a3      	cmp	r3, r4
 801299c:	bfb7      	itett	lt
 801299e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80129a0:	1b1c      	subge	r4, r3, r4
 80129a2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80129a4:	1ae3      	sublt	r3, r4, r3
 80129a6:	bfbe      	ittt	lt
 80129a8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80129aa:	2400      	movlt	r4, #0
 80129ac:	18d2      	addlt	r2, r2, r3
 80129ae:	9b07      	ldr	r3, [sp, #28]
 80129b0:	bfb8      	it	lt
 80129b2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	bfb5      	itete	lt
 80129b8:	eba8 0603 	sublt.w	r6, r8, r3
 80129bc:	4646      	movge	r6, r8
 80129be:	2300      	movlt	r3, #0
 80129c0:	9b07      	ldrge	r3, [sp, #28]
 80129c2:	e730      	b.n	8012826 <_dtoa_r+0x71e>
 80129c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80129c6:	4646      	mov	r6, r8
 80129c8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80129ca:	e735      	b.n	8012838 <_dtoa_r+0x730>
 80129cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80129ce:	e75c      	b.n	801288a <_dtoa_r+0x782>
 80129d0:	2300      	movs	r3, #0
 80129d2:	e788      	b.n	80128e6 <_dtoa_r+0x7de>
 80129d4:	3fe00000 	.word	0x3fe00000
 80129d8:	40240000 	.word	0x40240000
 80129dc:	40140000 	.word	0x40140000
 80129e0:	9b02      	ldr	r3, [sp, #8]
 80129e2:	e780      	b.n	80128e6 <_dtoa_r+0x7de>
 80129e4:	2300      	movs	r3, #0
 80129e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80129e8:	e782      	b.n	80128f0 <_dtoa_r+0x7e8>
 80129ea:	d099      	beq.n	8012920 <_dtoa_r+0x818>
 80129ec:	331c      	adds	r3, #28
 80129ee:	9a08      	ldr	r2, [sp, #32]
 80129f0:	441a      	add	r2, r3
 80129f2:	4498      	add	r8, r3
 80129f4:	441e      	add	r6, r3
 80129f6:	9208      	str	r2, [sp, #32]
 80129f8:	e792      	b.n	8012920 <_dtoa_r+0x818>
 80129fa:	4603      	mov	r3, r0
 80129fc:	e7f6      	b.n	80129ec <_dtoa_r+0x8e4>
 80129fe:	9b07      	ldr	r3, [sp, #28]
 8012a00:	9704      	str	r7, [sp, #16]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	dc20      	bgt.n	8012a48 <_dtoa_r+0x940>
 8012a06:	9300      	str	r3, [sp, #0]
 8012a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a0a:	2b02      	cmp	r3, #2
 8012a0c:	dd1e      	ble.n	8012a4c <_dtoa_r+0x944>
 8012a0e:	9b00      	ldr	r3, [sp, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	f47f aec0 	bne.w	8012796 <_dtoa_r+0x68e>
 8012a16:	4621      	mov	r1, r4
 8012a18:	2205      	movs	r2, #5
 8012a1a:	4658      	mov	r0, fp
 8012a1c:	f000 fa9a 	bl	8012f54 <__multadd>
 8012a20:	4601      	mov	r1, r0
 8012a22:	4604      	mov	r4, r0
 8012a24:	4648      	mov	r0, r9
 8012a26:	f000 fcf9 	bl	801341c <__mcmp>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	f77f aeb3 	ble.w	8012796 <_dtoa_r+0x68e>
 8012a30:	2331      	movs	r3, #49	@ 0x31
 8012a32:	4656      	mov	r6, sl
 8012a34:	f806 3b01 	strb.w	r3, [r6], #1
 8012a38:	9b04      	ldr	r3, [sp, #16]
 8012a3a:	3301      	adds	r3, #1
 8012a3c:	9304      	str	r3, [sp, #16]
 8012a3e:	e6ae      	b.n	801279e <_dtoa_r+0x696>
 8012a40:	9c07      	ldr	r4, [sp, #28]
 8012a42:	9704      	str	r7, [sp, #16]
 8012a44:	4625      	mov	r5, r4
 8012a46:	e7f3      	b.n	8012a30 <_dtoa_r+0x928>
 8012a48:	9b07      	ldr	r3, [sp, #28]
 8012a4a:	9300      	str	r3, [sp, #0]
 8012a4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f000 8104 	beq.w	8012c5c <_dtoa_r+0xb54>
 8012a54:	2e00      	cmp	r6, #0
 8012a56:	dd05      	ble.n	8012a64 <_dtoa_r+0x95c>
 8012a58:	4629      	mov	r1, r5
 8012a5a:	4632      	mov	r2, r6
 8012a5c:	4658      	mov	r0, fp
 8012a5e:	f000 fc71 	bl	8013344 <__lshift>
 8012a62:	4605      	mov	r5, r0
 8012a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d05a      	beq.n	8012b20 <_dtoa_r+0xa18>
 8012a6a:	6869      	ldr	r1, [r5, #4]
 8012a6c:	4658      	mov	r0, fp
 8012a6e:	f000 fa0f 	bl	8012e90 <_Balloc>
 8012a72:	4606      	mov	r6, r0
 8012a74:	b928      	cbnz	r0, 8012a82 <_dtoa_r+0x97a>
 8012a76:	4b84      	ldr	r3, [pc, #528]	@ (8012c88 <_dtoa_r+0xb80>)
 8012a78:	4602      	mov	r2, r0
 8012a7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012a7e:	f7ff bb5a 	b.w	8012136 <_dtoa_r+0x2e>
 8012a82:	692a      	ldr	r2, [r5, #16]
 8012a84:	f105 010c 	add.w	r1, r5, #12
 8012a88:	300c      	adds	r0, #12
 8012a8a:	3202      	adds	r2, #2
 8012a8c:	0092      	lsls	r2, r2, #2
 8012a8e:	f002 f947 	bl	8014d20 <memcpy>
 8012a92:	2201      	movs	r2, #1
 8012a94:	4631      	mov	r1, r6
 8012a96:	4658      	mov	r0, fp
 8012a98:	f000 fc54 	bl	8013344 <__lshift>
 8012a9c:	f10a 0301 	add.w	r3, sl, #1
 8012aa0:	462f      	mov	r7, r5
 8012aa2:	4605      	mov	r5, r0
 8012aa4:	9307      	str	r3, [sp, #28]
 8012aa6:	9b00      	ldr	r3, [sp, #0]
 8012aa8:	4453      	add	r3, sl
 8012aaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012aac:	9b02      	ldr	r3, [sp, #8]
 8012aae:	f003 0301 	and.w	r3, r3, #1
 8012ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ab4:	9b07      	ldr	r3, [sp, #28]
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	4648      	mov	r0, r9
 8012aba:	3b01      	subs	r3, #1
 8012abc:	9300      	str	r3, [sp, #0]
 8012abe:	f7ff fa95 	bl	8011fec <quorem>
 8012ac2:	4639      	mov	r1, r7
 8012ac4:	9002      	str	r0, [sp, #8]
 8012ac6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012aca:	4648      	mov	r0, r9
 8012acc:	f000 fca6 	bl	801341c <__mcmp>
 8012ad0:	462a      	mov	r2, r5
 8012ad2:	9008      	str	r0, [sp, #32]
 8012ad4:	4621      	mov	r1, r4
 8012ad6:	4658      	mov	r0, fp
 8012ad8:	f000 fcbc 	bl	8013454 <__mdiff>
 8012adc:	68c2      	ldr	r2, [r0, #12]
 8012ade:	4606      	mov	r6, r0
 8012ae0:	bb02      	cbnz	r2, 8012b24 <_dtoa_r+0xa1c>
 8012ae2:	4601      	mov	r1, r0
 8012ae4:	4648      	mov	r0, r9
 8012ae6:	f000 fc99 	bl	801341c <__mcmp>
 8012aea:	4602      	mov	r2, r0
 8012aec:	4631      	mov	r1, r6
 8012aee:	4658      	mov	r0, fp
 8012af0:	920e      	str	r2, [sp, #56]	@ 0x38
 8012af2:	f000 fa0d 	bl	8012f10 <_Bfree>
 8012af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012af8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012afa:	9e07      	ldr	r6, [sp, #28]
 8012afc:	ea43 0102 	orr.w	r1, r3, r2
 8012b00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b02:	4319      	orrs	r1, r3
 8012b04:	d110      	bne.n	8012b28 <_dtoa_r+0xa20>
 8012b06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b0a:	d029      	beq.n	8012b60 <_dtoa_r+0xa58>
 8012b0c:	9b08      	ldr	r3, [sp, #32]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	dd02      	ble.n	8012b18 <_dtoa_r+0xa10>
 8012b12:	9b02      	ldr	r3, [sp, #8]
 8012b14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012b18:	9b00      	ldr	r3, [sp, #0]
 8012b1a:	f883 8000 	strb.w	r8, [r3]
 8012b1e:	e63f      	b.n	80127a0 <_dtoa_r+0x698>
 8012b20:	4628      	mov	r0, r5
 8012b22:	e7bb      	b.n	8012a9c <_dtoa_r+0x994>
 8012b24:	2201      	movs	r2, #1
 8012b26:	e7e1      	b.n	8012aec <_dtoa_r+0x9e4>
 8012b28:	9b08      	ldr	r3, [sp, #32]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	db04      	blt.n	8012b38 <_dtoa_r+0xa30>
 8012b2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b30:	430b      	orrs	r3, r1
 8012b32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012b34:	430b      	orrs	r3, r1
 8012b36:	d120      	bne.n	8012b7a <_dtoa_r+0xa72>
 8012b38:	2a00      	cmp	r2, #0
 8012b3a:	dded      	ble.n	8012b18 <_dtoa_r+0xa10>
 8012b3c:	4649      	mov	r1, r9
 8012b3e:	2201      	movs	r2, #1
 8012b40:	4658      	mov	r0, fp
 8012b42:	f000 fbff 	bl	8013344 <__lshift>
 8012b46:	4621      	mov	r1, r4
 8012b48:	4681      	mov	r9, r0
 8012b4a:	f000 fc67 	bl	801341c <__mcmp>
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	dc03      	bgt.n	8012b5a <_dtoa_r+0xa52>
 8012b52:	d1e1      	bne.n	8012b18 <_dtoa_r+0xa10>
 8012b54:	f018 0f01 	tst.w	r8, #1
 8012b58:	d0de      	beq.n	8012b18 <_dtoa_r+0xa10>
 8012b5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b5e:	d1d8      	bne.n	8012b12 <_dtoa_r+0xa0a>
 8012b60:	2339      	movs	r3, #57	@ 0x39
 8012b62:	9a00      	ldr	r2, [sp, #0]
 8012b64:	7013      	strb	r3, [r2, #0]
 8012b66:	4633      	mov	r3, r6
 8012b68:	461e      	mov	r6, r3
 8012b6a:	3b01      	subs	r3, #1
 8012b6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012b70:	2a39      	cmp	r2, #57	@ 0x39
 8012b72:	d052      	beq.n	8012c1a <_dtoa_r+0xb12>
 8012b74:	3201      	adds	r2, #1
 8012b76:	701a      	strb	r2, [r3, #0]
 8012b78:	e612      	b.n	80127a0 <_dtoa_r+0x698>
 8012b7a:	2a00      	cmp	r2, #0
 8012b7c:	dd07      	ble.n	8012b8e <_dtoa_r+0xa86>
 8012b7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b82:	d0ed      	beq.n	8012b60 <_dtoa_r+0xa58>
 8012b84:	f108 0301 	add.w	r3, r8, #1
 8012b88:	9a00      	ldr	r2, [sp, #0]
 8012b8a:	7013      	strb	r3, [r2, #0]
 8012b8c:	e608      	b.n	80127a0 <_dtoa_r+0x698>
 8012b8e:	9b07      	ldr	r3, [sp, #28]
 8012b90:	9a07      	ldr	r2, [sp, #28]
 8012b92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d028      	beq.n	8012bee <_dtoa_r+0xae6>
 8012b9c:	4649      	mov	r1, r9
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	220a      	movs	r2, #10
 8012ba2:	4658      	mov	r0, fp
 8012ba4:	f000 f9d6 	bl	8012f54 <__multadd>
 8012ba8:	42af      	cmp	r7, r5
 8012baa:	4681      	mov	r9, r0
 8012bac:	f04f 0300 	mov.w	r3, #0
 8012bb0:	f04f 020a 	mov.w	r2, #10
 8012bb4:	4639      	mov	r1, r7
 8012bb6:	4658      	mov	r0, fp
 8012bb8:	d107      	bne.n	8012bca <_dtoa_r+0xac2>
 8012bba:	f000 f9cb 	bl	8012f54 <__multadd>
 8012bbe:	4607      	mov	r7, r0
 8012bc0:	4605      	mov	r5, r0
 8012bc2:	9b07      	ldr	r3, [sp, #28]
 8012bc4:	3301      	adds	r3, #1
 8012bc6:	9307      	str	r3, [sp, #28]
 8012bc8:	e774      	b.n	8012ab4 <_dtoa_r+0x9ac>
 8012bca:	f000 f9c3 	bl	8012f54 <__multadd>
 8012bce:	4629      	mov	r1, r5
 8012bd0:	4607      	mov	r7, r0
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	220a      	movs	r2, #10
 8012bd6:	4658      	mov	r0, fp
 8012bd8:	f000 f9bc 	bl	8012f54 <__multadd>
 8012bdc:	4605      	mov	r5, r0
 8012bde:	e7f0      	b.n	8012bc2 <_dtoa_r+0xaba>
 8012be0:	9b00      	ldr	r3, [sp, #0]
 8012be2:	2700      	movs	r7, #0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	bfcc      	ite	gt
 8012be8:	461e      	movgt	r6, r3
 8012bea:	2601      	movle	r6, #1
 8012bec:	4456      	add	r6, sl
 8012bee:	4649      	mov	r1, r9
 8012bf0:	2201      	movs	r2, #1
 8012bf2:	4658      	mov	r0, fp
 8012bf4:	f000 fba6 	bl	8013344 <__lshift>
 8012bf8:	4621      	mov	r1, r4
 8012bfa:	4681      	mov	r9, r0
 8012bfc:	f000 fc0e 	bl	801341c <__mcmp>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	dcb0      	bgt.n	8012b66 <_dtoa_r+0xa5e>
 8012c04:	d102      	bne.n	8012c0c <_dtoa_r+0xb04>
 8012c06:	f018 0f01 	tst.w	r8, #1
 8012c0a:	d1ac      	bne.n	8012b66 <_dtoa_r+0xa5e>
 8012c0c:	4633      	mov	r3, r6
 8012c0e:	461e      	mov	r6, r3
 8012c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c14:	2a30      	cmp	r2, #48	@ 0x30
 8012c16:	d0fa      	beq.n	8012c0e <_dtoa_r+0xb06>
 8012c18:	e5c2      	b.n	80127a0 <_dtoa_r+0x698>
 8012c1a:	459a      	cmp	sl, r3
 8012c1c:	d1a4      	bne.n	8012b68 <_dtoa_r+0xa60>
 8012c1e:	9b04      	ldr	r3, [sp, #16]
 8012c20:	3301      	adds	r3, #1
 8012c22:	9304      	str	r3, [sp, #16]
 8012c24:	2331      	movs	r3, #49	@ 0x31
 8012c26:	f88a 3000 	strb.w	r3, [sl]
 8012c2a:	e5b9      	b.n	80127a0 <_dtoa_r+0x698>
 8012c2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012c8c <_dtoa_r+0xb84>
 8012c32:	b11b      	cbz	r3, 8012c3c <_dtoa_r+0xb34>
 8012c34:	f10a 0308 	add.w	r3, sl, #8
 8012c38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012c3a:	6013      	str	r3, [r2, #0]
 8012c3c:	4650      	mov	r0, sl
 8012c3e:	b019      	add	sp, #100	@ 0x64
 8012c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	f77f ae37 	ble.w	80128ba <_dtoa_r+0x7b2>
 8012c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c50:	2001      	movs	r0, #1
 8012c52:	e655      	b.n	8012900 <_dtoa_r+0x7f8>
 8012c54:	9b00      	ldr	r3, [sp, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f77f aed6 	ble.w	8012a08 <_dtoa_r+0x900>
 8012c5c:	4656      	mov	r6, sl
 8012c5e:	4621      	mov	r1, r4
 8012c60:	4648      	mov	r0, r9
 8012c62:	f7ff f9c3 	bl	8011fec <quorem>
 8012c66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012c6a:	9b00      	ldr	r3, [sp, #0]
 8012c6c:	f806 8b01 	strb.w	r8, [r6], #1
 8012c70:	eba6 020a 	sub.w	r2, r6, sl
 8012c74:	4293      	cmp	r3, r2
 8012c76:	ddb3      	ble.n	8012be0 <_dtoa_r+0xad8>
 8012c78:	4649      	mov	r1, r9
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	220a      	movs	r2, #10
 8012c7e:	4658      	mov	r0, fp
 8012c80:	f000 f968 	bl	8012f54 <__multadd>
 8012c84:	4681      	mov	r9, r0
 8012c86:	e7ea      	b.n	8012c5e <_dtoa_r+0xb56>
 8012c88:	08015a01 	.word	0x08015a01
 8012c8c:	08015985 	.word	0x08015985

08012c90 <_free_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	4605      	mov	r5, r0
 8012c94:	2900      	cmp	r1, #0
 8012c96:	d041      	beq.n	8012d1c <_free_r+0x8c>
 8012c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c9c:	1f0c      	subs	r4, r1, #4
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	bfb8      	it	lt
 8012ca2:	18e4      	addlt	r4, r4, r3
 8012ca4:	f000 f8e8 	bl	8012e78 <__malloc_lock>
 8012ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8012d20 <_free_r+0x90>)
 8012caa:	6813      	ldr	r3, [r2, #0]
 8012cac:	b933      	cbnz	r3, 8012cbc <_free_r+0x2c>
 8012cae:	6063      	str	r3, [r4, #4]
 8012cb0:	6014      	str	r4, [r2, #0]
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cb8:	f000 b8e4 	b.w	8012e84 <__malloc_unlock>
 8012cbc:	42a3      	cmp	r3, r4
 8012cbe:	d908      	bls.n	8012cd2 <_free_r+0x42>
 8012cc0:	6820      	ldr	r0, [r4, #0]
 8012cc2:	1821      	adds	r1, r4, r0
 8012cc4:	428b      	cmp	r3, r1
 8012cc6:	bf01      	itttt	eq
 8012cc8:	6819      	ldreq	r1, [r3, #0]
 8012cca:	685b      	ldreq	r3, [r3, #4]
 8012ccc:	1809      	addeq	r1, r1, r0
 8012cce:	6021      	streq	r1, [r4, #0]
 8012cd0:	e7ed      	b.n	8012cae <_free_r+0x1e>
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	b10b      	cbz	r3, 8012cdc <_free_r+0x4c>
 8012cd8:	42a3      	cmp	r3, r4
 8012cda:	d9fa      	bls.n	8012cd2 <_free_r+0x42>
 8012cdc:	6811      	ldr	r1, [r2, #0]
 8012cde:	1850      	adds	r0, r2, r1
 8012ce0:	42a0      	cmp	r0, r4
 8012ce2:	d10b      	bne.n	8012cfc <_free_r+0x6c>
 8012ce4:	6820      	ldr	r0, [r4, #0]
 8012ce6:	4401      	add	r1, r0
 8012ce8:	1850      	adds	r0, r2, r1
 8012cea:	6011      	str	r1, [r2, #0]
 8012cec:	4283      	cmp	r3, r0
 8012cee:	d1e0      	bne.n	8012cb2 <_free_r+0x22>
 8012cf0:	6818      	ldr	r0, [r3, #0]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	4408      	add	r0, r1
 8012cf6:	6053      	str	r3, [r2, #4]
 8012cf8:	6010      	str	r0, [r2, #0]
 8012cfa:	e7da      	b.n	8012cb2 <_free_r+0x22>
 8012cfc:	d902      	bls.n	8012d04 <_free_r+0x74>
 8012cfe:	230c      	movs	r3, #12
 8012d00:	602b      	str	r3, [r5, #0]
 8012d02:	e7d6      	b.n	8012cb2 <_free_r+0x22>
 8012d04:	6820      	ldr	r0, [r4, #0]
 8012d06:	1821      	adds	r1, r4, r0
 8012d08:	428b      	cmp	r3, r1
 8012d0a:	bf02      	ittt	eq
 8012d0c:	6819      	ldreq	r1, [r3, #0]
 8012d0e:	685b      	ldreq	r3, [r3, #4]
 8012d10:	1809      	addeq	r1, r1, r0
 8012d12:	6063      	str	r3, [r4, #4]
 8012d14:	bf08      	it	eq
 8012d16:	6021      	streq	r1, [r4, #0]
 8012d18:	6054      	str	r4, [r2, #4]
 8012d1a:	e7ca      	b.n	8012cb2 <_free_r+0x22>
 8012d1c:	bd38      	pop	{r3, r4, r5, pc}
 8012d1e:	bf00      	nop
 8012d20:	20000a30 	.word	0x20000a30

08012d24 <malloc>:
 8012d24:	4b02      	ldr	r3, [pc, #8]	@ (8012d30 <malloc+0xc>)
 8012d26:	4601      	mov	r1, r0
 8012d28:	6818      	ldr	r0, [r3, #0]
 8012d2a:	f000 b825 	b.w	8012d78 <_malloc_r>
 8012d2e:	bf00      	nop
 8012d30:	2000017c 	.word	0x2000017c

08012d34 <sbrk_aligned>:
 8012d34:	b570      	push	{r4, r5, r6, lr}
 8012d36:	4e0f      	ldr	r6, [pc, #60]	@ (8012d74 <sbrk_aligned+0x40>)
 8012d38:	460c      	mov	r4, r1
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	6831      	ldr	r1, [r6, #0]
 8012d3e:	b911      	cbnz	r1, 8012d46 <sbrk_aligned+0x12>
 8012d40:	f001 ffde 	bl	8014d00 <_sbrk_r>
 8012d44:	6030      	str	r0, [r6, #0]
 8012d46:	4621      	mov	r1, r4
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f001 ffd9 	bl	8014d00 <_sbrk_r>
 8012d4e:	1c43      	adds	r3, r0, #1
 8012d50:	d103      	bne.n	8012d5a <sbrk_aligned+0x26>
 8012d52:	f04f 34ff 	mov.w	r4, #4294967295
 8012d56:	4620      	mov	r0, r4
 8012d58:	bd70      	pop	{r4, r5, r6, pc}
 8012d5a:	1cc4      	adds	r4, r0, #3
 8012d5c:	f024 0403 	bic.w	r4, r4, #3
 8012d60:	42a0      	cmp	r0, r4
 8012d62:	d0f8      	beq.n	8012d56 <sbrk_aligned+0x22>
 8012d64:	1a21      	subs	r1, r4, r0
 8012d66:	4628      	mov	r0, r5
 8012d68:	f001 ffca 	bl	8014d00 <_sbrk_r>
 8012d6c:	3001      	adds	r0, #1
 8012d6e:	d1f2      	bne.n	8012d56 <sbrk_aligned+0x22>
 8012d70:	e7ef      	b.n	8012d52 <sbrk_aligned+0x1e>
 8012d72:	bf00      	nop
 8012d74:	20000a2c 	.word	0x20000a2c

08012d78 <_malloc_r>:
 8012d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d7c:	1ccd      	adds	r5, r1, #3
 8012d7e:	4606      	mov	r6, r0
 8012d80:	f025 0503 	bic.w	r5, r5, #3
 8012d84:	3508      	adds	r5, #8
 8012d86:	2d0c      	cmp	r5, #12
 8012d88:	bf38      	it	cc
 8012d8a:	250c      	movcc	r5, #12
 8012d8c:	2d00      	cmp	r5, #0
 8012d8e:	db01      	blt.n	8012d94 <_malloc_r+0x1c>
 8012d90:	42a9      	cmp	r1, r5
 8012d92:	d904      	bls.n	8012d9e <_malloc_r+0x26>
 8012d94:	230c      	movs	r3, #12
 8012d96:	6033      	str	r3, [r6, #0]
 8012d98:	2000      	movs	r0, #0
 8012d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012e74 <_malloc_r+0xfc>
 8012da2:	f000 f869 	bl	8012e78 <__malloc_lock>
 8012da6:	f8d8 3000 	ldr.w	r3, [r8]
 8012daa:	461c      	mov	r4, r3
 8012dac:	bb44      	cbnz	r4, 8012e00 <_malloc_r+0x88>
 8012dae:	4629      	mov	r1, r5
 8012db0:	4630      	mov	r0, r6
 8012db2:	f7ff ffbf 	bl	8012d34 <sbrk_aligned>
 8012db6:	1c43      	adds	r3, r0, #1
 8012db8:	4604      	mov	r4, r0
 8012dba:	d158      	bne.n	8012e6e <_malloc_r+0xf6>
 8012dbc:	f8d8 4000 	ldr.w	r4, [r8]
 8012dc0:	4627      	mov	r7, r4
 8012dc2:	2f00      	cmp	r7, #0
 8012dc4:	d143      	bne.n	8012e4e <_malloc_r+0xd6>
 8012dc6:	2c00      	cmp	r4, #0
 8012dc8:	d04b      	beq.n	8012e62 <_malloc_r+0xea>
 8012dca:	6823      	ldr	r3, [r4, #0]
 8012dcc:	4639      	mov	r1, r7
 8012dce:	4630      	mov	r0, r6
 8012dd0:	eb04 0903 	add.w	r9, r4, r3
 8012dd4:	f001 ff94 	bl	8014d00 <_sbrk_r>
 8012dd8:	4581      	cmp	r9, r0
 8012dda:	d142      	bne.n	8012e62 <_malloc_r+0xea>
 8012ddc:	6821      	ldr	r1, [r4, #0]
 8012dde:	4630      	mov	r0, r6
 8012de0:	1a6d      	subs	r5, r5, r1
 8012de2:	4629      	mov	r1, r5
 8012de4:	f7ff ffa6 	bl	8012d34 <sbrk_aligned>
 8012de8:	3001      	adds	r0, #1
 8012dea:	d03a      	beq.n	8012e62 <_malloc_r+0xea>
 8012dec:	6823      	ldr	r3, [r4, #0]
 8012dee:	442b      	add	r3, r5
 8012df0:	6023      	str	r3, [r4, #0]
 8012df2:	f8d8 3000 	ldr.w	r3, [r8]
 8012df6:	685a      	ldr	r2, [r3, #4]
 8012df8:	bb62      	cbnz	r2, 8012e54 <_malloc_r+0xdc>
 8012dfa:	f8c8 7000 	str.w	r7, [r8]
 8012dfe:	e00f      	b.n	8012e20 <_malloc_r+0xa8>
 8012e00:	6822      	ldr	r2, [r4, #0]
 8012e02:	1b52      	subs	r2, r2, r5
 8012e04:	d420      	bmi.n	8012e48 <_malloc_r+0xd0>
 8012e06:	2a0b      	cmp	r2, #11
 8012e08:	d917      	bls.n	8012e3a <_malloc_r+0xc2>
 8012e0a:	1961      	adds	r1, r4, r5
 8012e0c:	42a3      	cmp	r3, r4
 8012e0e:	6025      	str	r5, [r4, #0]
 8012e10:	bf18      	it	ne
 8012e12:	6059      	strne	r1, [r3, #4]
 8012e14:	6863      	ldr	r3, [r4, #4]
 8012e16:	bf08      	it	eq
 8012e18:	f8c8 1000 	streq.w	r1, [r8]
 8012e1c:	5162      	str	r2, [r4, r5]
 8012e1e:	604b      	str	r3, [r1, #4]
 8012e20:	4630      	mov	r0, r6
 8012e22:	f000 f82f 	bl	8012e84 <__malloc_unlock>
 8012e26:	f104 000b 	add.w	r0, r4, #11
 8012e2a:	1d23      	adds	r3, r4, #4
 8012e2c:	f020 0007 	bic.w	r0, r0, #7
 8012e30:	1ac2      	subs	r2, r0, r3
 8012e32:	bf1c      	itt	ne
 8012e34:	1a1b      	subne	r3, r3, r0
 8012e36:	50a3      	strne	r3, [r4, r2]
 8012e38:	e7af      	b.n	8012d9a <_malloc_r+0x22>
 8012e3a:	6862      	ldr	r2, [r4, #4]
 8012e3c:	42a3      	cmp	r3, r4
 8012e3e:	bf0c      	ite	eq
 8012e40:	f8c8 2000 	streq.w	r2, [r8]
 8012e44:	605a      	strne	r2, [r3, #4]
 8012e46:	e7eb      	b.n	8012e20 <_malloc_r+0xa8>
 8012e48:	4623      	mov	r3, r4
 8012e4a:	6864      	ldr	r4, [r4, #4]
 8012e4c:	e7ae      	b.n	8012dac <_malloc_r+0x34>
 8012e4e:	463c      	mov	r4, r7
 8012e50:	687f      	ldr	r7, [r7, #4]
 8012e52:	e7b6      	b.n	8012dc2 <_malloc_r+0x4a>
 8012e54:	461a      	mov	r2, r3
 8012e56:	685b      	ldr	r3, [r3, #4]
 8012e58:	42a3      	cmp	r3, r4
 8012e5a:	d1fb      	bne.n	8012e54 <_malloc_r+0xdc>
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	6053      	str	r3, [r2, #4]
 8012e60:	e7de      	b.n	8012e20 <_malloc_r+0xa8>
 8012e62:	230c      	movs	r3, #12
 8012e64:	4630      	mov	r0, r6
 8012e66:	6033      	str	r3, [r6, #0]
 8012e68:	f000 f80c 	bl	8012e84 <__malloc_unlock>
 8012e6c:	e794      	b.n	8012d98 <_malloc_r+0x20>
 8012e6e:	6005      	str	r5, [r0, #0]
 8012e70:	e7d6      	b.n	8012e20 <_malloc_r+0xa8>
 8012e72:	bf00      	nop
 8012e74:	20000a30 	.word	0x20000a30

08012e78 <__malloc_lock>:
 8012e78:	4801      	ldr	r0, [pc, #4]	@ (8012e80 <__malloc_lock+0x8>)
 8012e7a:	f7ff b8a0 	b.w	8011fbe <__retarget_lock_acquire_recursive>
 8012e7e:	bf00      	nop
 8012e80:	20000a28 	.word	0x20000a28

08012e84 <__malloc_unlock>:
 8012e84:	4801      	ldr	r0, [pc, #4]	@ (8012e8c <__malloc_unlock+0x8>)
 8012e86:	f7ff b89b 	b.w	8011fc0 <__retarget_lock_release_recursive>
 8012e8a:	bf00      	nop
 8012e8c:	20000a28 	.word	0x20000a28

08012e90 <_Balloc>:
 8012e90:	b570      	push	{r4, r5, r6, lr}
 8012e92:	69c6      	ldr	r6, [r0, #28]
 8012e94:	4604      	mov	r4, r0
 8012e96:	460d      	mov	r5, r1
 8012e98:	b976      	cbnz	r6, 8012eb8 <_Balloc+0x28>
 8012e9a:	2010      	movs	r0, #16
 8012e9c:	f7ff ff42 	bl	8012d24 <malloc>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	61e0      	str	r0, [r4, #28]
 8012ea4:	b920      	cbnz	r0, 8012eb0 <_Balloc+0x20>
 8012ea6:	4b18      	ldr	r3, [pc, #96]	@ (8012f08 <_Balloc+0x78>)
 8012ea8:	216b      	movs	r1, #107	@ 0x6b
 8012eaa:	4818      	ldr	r0, [pc, #96]	@ (8012f0c <_Balloc+0x7c>)
 8012eac:	f001 ff50 	bl	8014d50 <__assert_func>
 8012eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012eb4:	6006      	str	r6, [r0, #0]
 8012eb6:	60c6      	str	r6, [r0, #12]
 8012eb8:	69e6      	ldr	r6, [r4, #28]
 8012eba:	68f3      	ldr	r3, [r6, #12]
 8012ebc:	b183      	cbz	r3, 8012ee0 <_Balloc+0x50>
 8012ebe:	69e3      	ldr	r3, [r4, #28]
 8012ec0:	68db      	ldr	r3, [r3, #12]
 8012ec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ec6:	b9b8      	cbnz	r0, 8012ef8 <_Balloc+0x68>
 8012ec8:	2101      	movs	r1, #1
 8012eca:	4620      	mov	r0, r4
 8012ecc:	fa01 f605 	lsl.w	r6, r1, r5
 8012ed0:	1d72      	adds	r2, r6, #5
 8012ed2:	0092      	lsls	r2, r2, #2
 8012ed4:	f001 ff5a 	bl	8014d8c <_calloc_r>
 8012ed8:	b160      	cbz	r0, 8012ef4 <_Balloc+0x64>
 8012eda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ede:	e00e      	b.n	8012efe <_Balloc+0x6e>
 8012ee0:	2221      	movs	r2, #33	@ 0x21
 8012ee2:	2104      	movs	r1, #4
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	f001 ff51 	bl	8014d8c <_calloc_r>
 8012eea:	69e3      	ldr	r3, [r4, #28]
 8012eec:	60f0      	str	r0, [r6, #12]
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d1e4      	bne.n	8012ebe <_Balloc+0x2e>
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	bd70      	pop	{r4, r5, r6, pc}
 8012ef8:	6802      	ldr	r2, [r0, #0]
 8012efa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012efe:	2300      	movs	r3, #0
 8012f00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f04:	e7f7      	b.n	8012ef6 <_Balloc+0x66>
 8012f06:	bf00      	nop
 8012f08:	08015992 	.word	0x08015992
 8012f0c:	08015a12 	.word	0x08015a12

08012f10 <_Bfree>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	69c6      	ldr	r6, [r0, #28]
 8012f14:	4605      	mov	r5, r0
 8012f16:	460c      	mov	r4, r1
 8012f18:	b976      	cbnz	r6, 8012f38 <_Bfree+0x28>
 8012f1a:	2010      	movs	r0, #16
 8012f1c:	f7ff ff02 	bl	8012d24 <malloc>
 8012f20:	4602      	mov	r2, r0
 8012f22:	61e8      	str	r0, [r5, #28]
 8012f24:	b920      	cbnz	r0, 8012f30 <_Bfree+0x20>
 8012f26:	4b09      	ldr	r3, [pc, #36]	@ (8012f4c <_Bfree+0x3c>)
 8012f28:	218f      	movs	r1, #143	@ 0x8f
 8012f2a:	4809      	ldr	r0, [pc, #36]	@ (8012f50 <_Bfree+0x40>)
 8012f2c:	f001 ff10 	bl	8014d50 <__assert_func>
 8012f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f34:	6006      	str	r6, [r0, #0]
 8012f36:	60c6      	str	r6, [r0, #12]
 8012f38:	b13c      	cbz	r4, 8012f4a <_Bfree+0x3a>
 8012f3a:	69eb      	ldr	r3, [r5, #28]
 8012f3c:	6862      	ldr	r2, [r4, #4]
 8012f3e:	68db      	ldr	r3, [r3, #12]
 8012f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f44:	6021      	str	r1, [r4, #0]
 8012f46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012f4a:	bd70      	pop	{r4, r5, r6, pc}
 8012f4c:	08015992 	.word	0x08015992
 8012f50:	08015a12 	.word	0x08015a12

08012f54 <__multadd>:
 8012f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f58:	f101 0c14 	add.w	ip, r1, #20
 8012f5c:	4607      	mov	r7, r0
 8012f5e:	460c      	mov	r4, r1
 8012f60:	461e      	mov	r6, r3
 8012f62:	690d      	ldr	r5, [r1, #16]
 8012f64:	2000      	movs	r0, #0
 8012f66:	f8dc 3000 	ldr.w	r3, [ip]
 8012f6a:	3001      	adds	r0, #1
 8012f6c:	b299      	uxth	r1, r3
 8012f6e:	4285      	cmp	r5, r0
 8012f70:	fb02 6101 	mla	r1, r2, r1, r6
 8012f74:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f78:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8012f7c:	b289      	uxth	r1, r1
 8012f7e:	fb02 3306 	mla	r3, r2, r6, r3
 8012f82:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012f86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f8a:	f84c 1b04 	str.w	r1, [ip], #4
 8012f8e:	dcea      	bgt.n	8012f66 <__multadd+0x12>
 8012f90:	b30e      	cbz	r6, 8012fd6 <__multadd+0x82>
 8012f92:	68a3      	ldr	r3, [r4, #8]
 8012f94:	42ab      	cmp	r3, r5
 8012f96:	dc19      	bgt.n	8012fcc <__multadd+0x78>
 8012f98:	6861      	ldr	r1, [r4, #4]
 8012f9a:	4638      	mov	r0, r7
 8012f9c:	3101      	adds	r1, #1
 8012f9e:	f7ff ff77 	bl	8012e90 <_Balloc>
 8012fa2:	4680      	mov	r8, r0
 8012fa4:	b928      	cbnz	r0, 8012fb2 <__multadd+0x5e>
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8012fdc <__multadd+0x88>)
 8012faa:	21ba      	movs	r1, #186	@ 0xba
 8012fac:	480c      	ldr	r0, [pc, #48]	@ (8012fe0 <__multadd+0x8c>)
 8012fae:	f001 fecf 	bl	8014d50 <__assert_func>
 8012fb2:	6922      	ldr	r2, [r4, #16]
 8012fb4:	f104 010c 	add.w	r1, r4, #12
 8012fb8:	300c      	adds	r0, #12
 8012fba:	3202      	adds	r2, #2
 8012fbc:	0092      	lsls	r2, r2, #2
 8012fbe:	f001 feaf 	bl	8014d20 <memcpy>
 8012fc2:	4621      	mov	r1, r4
 8012fc4:	4644      	mov	r4, r8
 8012fc6:	4638      	mov	r0, r7
 8012fc8:	f7ff ffa2 	bl	8012f10 <_Bfree>
 8012fcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012fd0:	3501      	adds	r5, #1
 8012fd2:	615e      	str	r6, [r3, #20]
 8012fd4:	6125      	str	r5, [r4, #16]
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fdc:	08015a01 	.word	0x08015a01
 8012fe0:	08015a12 	.word	0x08015a12

08012fe4 <__s2b>:
 8012fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe8:	4615      	mov	r5, r2
 8012fea:	461f      	mov	r7, r3
 8012fec:	2209      	movs	r2, #9
 8012fee:	3308      	adds	r3, #8
 8012ff0:	460c      	mov	r4, r1
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	db09      	blt.n	8013014 <__s2b+0x30>
 8013000:	4630      	mov	r0, r6
 8013002:	f7ff ff45 	bl	8012e90 <_Balloc>
 8013006:	b940      	cbnz	r0, 801301a <__s2b+0x36>
 8013008:	4602      	mov	r2, r0
 801300a:	4b19      	ldr	r3, [pc, #100]	@ (8013070 <__s2b+0x8c>)
 801300c:	21d3      	movs	r1, #211	@ 0xd3
 801300e:	4819      	ldr	r0, [pc, #100]	@ (8013074 <__s2b+0x90>)
 8013010:	f001 fe9e 	bl	8014d50 <__assert_func>
 8013014:	0052      	lsls	r2, r2, #1
 8013016:	3101      	adds	r1, #1
 8013018:	e7f0      	b.n	8012ffc <__s2b+0x18>
 801301a:	9b08      	ldr	r3, [sp, #32]
 801301c:	2d09      	cmp	r5, #9
 801301e:	6143      	str	r3, [r0, #20]
 8013020:	f04f 0301 	mov.w	r3, #1
 8013024:	6103      	str	r3, [r0, #16]
 8013026:	dd16      	ble.n	8013056 <__s2b+0x72>
 8013028:	f104 0909 	add.w	r9, r4, #9
 801302c:	442c      	add	r4, r5
 801302e:	46c8      	mov	r8, r9
 8013030:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013034:	4601      	mov	r1, r0
 8013036:	220a      	movs	r2, #10
 8013038:	4630      	mov	r0, r6
 801303a:	3b30      	subs	r3, #48	@ 0x30
 801303c:	f7ff ff8a 	bl	8012f54 <__multadd>
 8013040:	45a0      	cmp	r8, r4
 8013042:	d1f5      	bne.n	8013030 <__s2b+0x4c>
 8013044:	f1a5 0408 	sub.w	r4, r5, #8
 8013048:	444c      	add	r4, r9
 801304a:	1b2d      	subs	r5, r5, r4
 801304c:	1963      	adds	r3, r4, r5
 801304e:	42bb      	cmp	r3, r7
 8013050:	db04      	blt.n	801305c <__s2b+0x78>
 8013052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013056:	340a      	adds	r4, #10
 8013058:	2509      	movs	r5, #9
 801305a:	e7f6      	b.n	801304a <__s2b+0x66>
 801305c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013060:	4601      	mov	r1, r0
 8013062:	220a      	movs	r2, #10
 8013064:	4630      	mov	r0, r6
 8013066:	3b30      	subs	r3, #48	@ 0x30
 8013068:	f7ff ff74 	bl	8012f54 <__multadd>
 801306c:	e7ee      	b.n	801304c <__s2b+0x68>
 801306e:	bf00      	nop
 8013070:	08015a01 	.word	0x08015a01
 8013074:	08015a12 	.word	0x08015a12

08013078 <__hi0bits>:
 8013078:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801307c:	4603      	mov	r3, r0
 801307e:	bf36      	itet	cc
 8013080:	0403      	lslcc	r3, r0, #16
 8013082:	2000      	movcs	r0, #0
 8013084:	2010      	movcc	r0, #16
 8013086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801308a:	bf3c      	itt	cc
 801308c:	021b      	lslcc	r3, r3, #8
 801308e:	3008      	addcc	r0, #8
 8013090:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013094:	bf3c      	itt	cc
 8013096:	011b      	lslcc	r3, r3, #4
 8013098:	3004      	addcc	r0, #4
 801309a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801309e:	bf3c      	itt	cc
 80130a0:	009b      	lslcc	r3, r3, #2
 80130a2:	3002      	addcc	r0, #2
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	db05      	blt.n	80130b4 <__hi0bits+0x3c>
 80130a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80130ac:	f100 0001 	add.w	r0, r0, #1
 80130b0:	bf08      	it	eq
 80130b2:	2020      	moveq	r0, #32
 80130b4:	4770      	bx	lr

080130b6 <__lo0bits>:
 80130b6:	6803      	ldr	r3, [r0, #0]
 80130b8:	4602      	mov	r2, r0
 80130ba:	f013 0007 	ands.w	r0, r3, #7
 80130be:	d00b      	beq.n	80130d8 <__lo0bits+0x22>
 80130c0:	07d9      	lsls	r1, r3, #31
 80130c2:	d421      	bmi.n	8013108 <__lo0bits+0x52>
 80130c4:	0798      	lsls	r0, r3, #30
 80130c6:	bf47      	ittee	mi
 80130c8:	085b      	lsrmi	r3, r3, #1
 80130ca:	2001      	movmi	r0, #1
 80130cc:	089b      	lsrpl	r3, r3, #2
 80130ce:	2002      	movpl	r0, #2
 80130d0:	bf4c      	ite	mi
 80130d2:	6013      	strmi	r3, [r2, #0]
 80130d4:	6013      	strpl	r3, [r2, #0]
 80130d6:	4770      	bx	lr
 80130d8:	b299      	uxth	r1, r3
 80130da:	b909      	cbnz	r1, 80130e0 <__lo0bits+0x2a>
 80130dc:	0c1b      	lsrs	r3, r3, #16
 80130de:	2010      	movs	r0, #16
 80130e0:	b2d9      	uxtb	r1, r3
 80130e2:	b909      	cbnz	r1, 80130e8 <__lo0bits+0x32>
 80130e4:	3008      	adds	r0, #8
 80130e6:	0a1b      	lsrs	r3, r3, #8
 80130e8:	0719      	lsls	r1, r3, #28
 80130ea:	bf04      	itt	eq
 80130ec:	091b      	lsreq	r3, r3, #4
 80130ee:	3004      	addeq	r0, #4
 80130f0:	0799      	lsls	r1, r3, #30
 80130f2:	bf04      	itt	eq
 80130f4:	089b      	lsreq	r3, r3, #2
 80130f6:	3002      	addeq	r0, #2
 80130f8:	07d9      	lsls	r1, r3, #31
 80130fa:	d403      	bmi.n	8013104 <__lo0bits+0x4e>
 80130fc:	085b      	lsrs	r3, r3, #1
 80130fe:	f100 0001 	add.w	r0, r0, #1
 8013102:	d003      	beq.n	801310c <__lo0bits+0x56>
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	4770      	bx	lr
 8013108:	2000      	movs	r0, #0
 801310a:	4770      	bx	lr
 801310c:	2020      	movs	r0, #32
 801310e:	4770      	bx	lr

08013110 <__i2b>:
 8013110:	b510      	push	{r4, lr}
 8013112:	460c      	mov	r4, r1
 8013114:	2101      	movs	r1, #1
 8013116:	f7ff febb 	bl	8012e90 <_Balloc>
 801311a:	4602      	mov	r2, r0
 801311c:	b928      	cbnz	r0, 801312a <__i2b+0x1a>
 801311e:	4b05      	ldr	r3, [pc, #20]	@ (8013134 <__i2b+0x24>)
 8013120:	f240 1145 	movw	r1, #325	@ 0x145
 8013124:	4804      	ldr	r0, [pc, #16]	@ (8013138 <__i2b+0x28>)
 8013126:	f001 fe13 	bl	8014d50 <__assert_func>
 801312a:	2301      	movs	r3, #1
 801312c:	6144      	str	r4, [r0, #20]
 801312e:	6103      	str	r3, [r0, #16]
 8013130:	bd10      	pop	{r4, pc}
 8013132:	bf00      	nop
 8013134:	08015a01 	.word	0x08015a01
 8013138:	08015a12 	.word	0x08015a12

0801313c <__multiply>:
 801313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013140:	4614      	mov	r4, r2
 8013142:	690a      	ldr	r2, [r1, #16]
 8013144:	460f      	mov	r7, r1
 8013146:	b085      	sub	sp, #20
 8013148:	6923      	ldr	r3, [r4, #16]
 801314a:	429a      	cmp	r2, r3
 801314c:	bfa2      	ittt	ge
 801314e:	4623      	movge	r3, r4
 8013150:	460c      	movge	r4, r1
 8013152:	461f      	movge	r7, r3
 8013154:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013158:	68a3      	ldr	r3, [r4, #8]
 801315a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801315e:	6861      	ldr	r1, [r4, #4]
 8013160:	eb0a 0609 	add.w	r6, sl, r9
 8013164:	42b3      	cmp	r3, r6
 8013166:	bfb8      	it	lt
 8013168:	3101      	addlt	r1, #1
 801316a:	f7ff fe91 	bl	8012e90 <_Balloc>
 801316e:	b930      	cbnz	r0, 801317e <__multiply+0x42>
 8013170:	4602      	mov	r2, r0
 8013172:	4b45      	ldr	r3, [pc, #276]	@ (8013288 <__multiply+0x14c>)
 8013174:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013178:	4844      	ldr	r0, [pc, #272]	@ (801328c <__multiply+0x150>)
 801317a:	f001 fde9 	bl	8014d50 <__assert_func>
 801317e:	f100 0514 	add.w	r5, r0, #20
 8013182:	2200      	movs	r2, #0
 8013184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013188:	462b      	mov	r3, r5
 801318a:	4543      	cmp	r3, r8
 801318c:	d321      	bcc.n	80131d2 <__multiply+0x96>
 801318e:	f107 0114 	add.w	r1, r7, #20
 8013192:	f104 0214 	add.w	r2, r4, #20
 8013196:	f104 0715 	add.w	r7, r4, #21
 801319a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801319e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80131a2:	9302      	str	r3, [sp, #8]
 80131a4:	1b13      	subs	r3, r2, r4
 80131a6:	3b15      	subs	r3, #21
 80131a8:	f023 0303 	bic.w	r3, r3, #3
 80131ac:	3304      	adds	r3, #4
 80131ae:	42ba      	cmp	r2, r7
 80131b0:	bf38      	it	cc
 80131b2:	2304      	movcc	r3, #4
 80131b4:	9301      	str	r3, [sp, #4]
 80131b6:	9b02      	ldr	r3, [sp, #8]
 80131b8:	9103      	str	r1, [sp, #12]
 80131ba:	428b      	cmp	r3, r1
 80131bc:	d80c      	bhi.n	80131d8 <__multiply+0x9c>
 80131be:	2e00      	cmp	r6, #0
 80131c0:	dd03      	ble.n	80131ca <__multiply+0x8e>
 80131c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d05b      	beq.n	8013282 <__multiply+0x146>
 80131ca:	6106      	str	r6, [r0, #16]
 80131cc:	b005      	add	sp, #20
 80131ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d2:	f843 2b04 	str.w	r2, [r3], #4
 80131d6:	e7d8      	b.n	801318a <__multiply+0x4e>
 80131d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80131dc:	f1ba 0f00 	cmp.w	sl, #0
 80131e0:	d024      	beq.n	801322c <__multiply+0xf0>
 80131e2:	f104 0e14 	add.w	lr, r4, #20
 80131e6:	46a9      	mov	r9, r5
 80131e8:	f04f 0c00 	mov.w	ip, #0
 80131ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80131f0:	f8d9 3000 	ldr.w	r3, [r9]
 80131f4:	fa1f fb87 	uxth.w	fp, r7
 80131f8:	4572      	cmp	r2, lr
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8013200:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013204:	f8d9 7000 	ldr.w	r7, [r9]
 8013208:	4463      	add	r3, ip
 801320a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801320e:	fb0a c70b 	mla	r7, sl, fp, ip
 8013212:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013216:	b29b      	uxth	r3, r3
 8013218:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801321c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013220:	f849 3b04 	str.w	r3, [r9], #4
 8013224:	d8e2      	bhi.n	80131ec <__multiply+0xb0>
 8013226:	9b01      	ldr	r3, [sp, #4]
 8013228:	f845 c003 	str.w	ip, [r5, r3]
 801322c:	9b03      	ldr	r3, [sp, #12]
 801322e:	3104      	adds	r1, #4
 8013230:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013234:	f1b9 0f00 	cmp.w	r9, #0
 8013238:	d021      	beq.n	801327e <__multiply+0x142>
 801323a:	682b      	ldr	r3, [r5, #0]
 801323c:	f104 0c14 	add.w	ip, r4, #20
 8013240:	46ae      	mov	lr, r5
 8013242:	f04f 0a00 	mov.w	sl, #0
 8013246:	f8bc b000 	ldrh.w	fp, [ip]
 801324a:	b29b      	uxth	r3, r3
 801324c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013250:	fb09 770b 	mla	r7, r9, fp, r7
 8013254:	4457      	add	r7, sl
 8013256:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801325a:	f84e 3b04 	str.w	r3, [lr], #4
 801325e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013266:	f8be 3000 	ldrh.w	r3, [lr]
 801326a:	4562      	cmp	r2, ip
 801326c:	fb09 330a 	mla	r3, r9, sl, r3
 8013270:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013278:	d8e5      	bhi.n	8013246 <__multiply+0x10a>
 801327a:	9f01      	ldr	r7, [sp, #4]
 801327c:	51eb      	str	r3, [r5, r7]
 801327e:	3504      	adds	r5, #4
 8013280:	e799      	b.n	80131b6 <__multiply+0x7a>
 8013282:	3e01      	subs	r6, #1
 8013284:	e79b      	b.n	80131be <__multiply+0x82>
 8013286:	bf00      	nop
 8013288:	08015a01 	.word	0x08015a01
 801328c:	08015a12 	.word	0x08015a12

08013290 <__pow5mult>:
 8013290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013294:	4615      	mov	r5, r2
 8013296:	f012 0203 	ands.w	r2, r2, #3
 801329a:	4607      	mov	r7, r0
 801329c:	460e      	mov	r6, r1
 801329e:	d007      	beq.n	80132b0 <__pow5mult+0x20>
 80132a0:	3a01      	subs	r2, #1
 80132a2:	4c25      	ldr	r4, [pc, #148]	@ (8013338 <__pow5mult+0xa8>)
 80132a4:	2300      	movs	r3, #0
 80132a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80132aa:	f7ff fe53 	bl	8012f54 <__multadd>
 80132ae:	4606      	mov	r6, r0
 80132b0:	10ad      	asrs	r5, r5, #2
 80132b2:	d03d      	beq.n	8013330 <__pow5mult+0xa0>
 80132b4:	69fc      	ldr	r4, [r7, #28]
 80132b6:	b97c      	cbnz	r4, 80132d8 <__pow5mult+0x48>
 80132b8:	2010      	movs	r0, #16
 80132ba:	f7ff fd33 	bl	8012d24 <malloc>
 80132be:	4602      	mov	r2, r0
 80132c0:	61f8      	str	r0, [r7, #28]
 80132c2:	b928      	cbnz	r0, 80132d0 <__pow5mult+0x40>
 80132c4:	4b1d      	ldr	r3, [pc, #116]	@ (801333c <__pow5mult+0xac>)
 80132c6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80132ca:	481d      	ldr	r0, [pc, #116]	@ (8013340 <__pow5mult+0xb0>)
 80132cc:	f001 fd40 	bl	8014d50 <__assert_func>
 80132d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132d4:	6004      	str	r4, [r0, #0]
 80132d6:	60c4      	str	r4, [r0, #12]
 80132d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80132dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80132e0:	b94c      	cbnz	r4, 80132f6 <__pow5mult+0x66>
 80132e2:	f240 2171 	movw	r1, #625	@ 0x271
 80132e6:	4638      	mov	r0, r7
 80132e8:	f7ff ff12 	bl	8013110 <__i2b>
 80132ec:	2300      	movs	r3, #0
 80132ee:	4604      	mov	r4, r0
 80132f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80132f4:	6003      	str	r3, [r0, #0]
 80132f6:	f04f 0900 	mov.w	r9, #0
 80132fa:	07eb      	lsls	r3, r5, #31
 80132fc:	d50a      	bpl.n	8013314 <__pow5mult+0x84>
 80132fe:	4631      	mov	r1, r6
 8013300:	4622      	mov	r2, r4
 8013302:	4638      	mov	r0, r7
 8013304:	f7ff ff1a 	bl	801313c <__multiply>
 8013308:	4680      	mov	r8, r0
 801330a:	4631      	mov	r1, r6
 801330c:	4638      	mov	r0, r7
 801330e:	4646      	mov	r6, r8
 8013310:	f7ff fdfe 	bl	8012f10 <_Bfree>
 8013314:	106d      	asrs	r5, r5, #1
 8013316:	d00b      	beq.n	8013330 <__pow5mult+0xa0>
 8013318:	6820      	ldr	r0, [r4, #0]
 801331a:	b938      	cbnz	r0, 801332c <__pow5mult+0x9c>
 801331c:	4622      	mov	r2, r4
 801331e:	4621      	mov	r1, r4
 8013320:	4638      	mov	r0, r7
 8013322:	f7ff ff0b 	bl	801313c <__multiply>
 8013326:	6020      	str	r0, [r4, #0]
 8013328:	f8c0 9000 	str.w	r9, [r0]
 801332c:	4604      	mov	r4, r0
 801332e:	e7e4      	b.n	80132fa <__pow5mult+0x6a>
 8013330:	4630      	mov	r0, r6
 8013332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013336:	bf00      	nop
 8013338:	08015a6c 	.word	0x08015a6c
 801333c:	08015992 	.word	0x08015992
 8013340:	08015a12 	.word	0x08015a12

08013344 <__lshift>:
 8013344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013348:	460c      	mov	r4, r1
 801334a:	4607      	mov	r7, r0
 801334c:	4691      	mov	r9, r2
 801334e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013352:	6923      	ldr	r3, [r4, #16]
 8013354:	6849      	ldr	r1, [r1, #4]
 8013356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801335a:	68a3      	ldr	r3, [r4, #8]
 801335c:	f108 0601 	add.w	r6, r8, #1
 8013360:	42b3      	cmp	r3, r6
 8013362:	db0b      	blt.n	801337c <__lshift+0x38>
 8013364:	4638      	mov	r0, r7
 8013366:	f7ff fd93 	bl	8012e90 <_Balloc>
 801336a:	4605      	mov	r5, r0
 801336c:	b948      	cbnz	r0, 8013382 <__lshift+0x3e>
 801336e:	4602      	mov	r2, r0
 8013370:	4b28      	ldr	r3, [pc, #160]	@ (8013414 <__lshift+0xd0>)
 8013372:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013376:	4828      	ldr	r0, [pc, #160]	@ (8013418 <__lshift+0xd4>)
 8013378:	f001 fcea 	bl	8014d50 <__assert_func>
 801337c:	3101      	adds	r1, #1
 801337e:	005b      	lsls	r3, r3, #1
 8013380:	e7ee      	b.n	8013360 <__lshift+0x1c>
 8013382:	2300      	movs	r3, #0
 8013384:	f100 0114 	add.w	r1, r0, #20
 8013388:	f100 0210 	add.w	r2, r0, #16
 801338c:	4618      	mov	r0, r3
 801338e:	4553      	cmp	r3, sl
 8013390:	db33      	blt.n	80133fa <__lshift+0xb6>
 8013392:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013396:	f104 0314 	add.w	r3, r4, #20
 801339a:	6920      	ldr	r0, [r4, #16]
 801339c:	f019 091f 	ands.w	r9, r9, #31
 80133a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80133a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80133a8:	d02b      	beq.n	8013402 <__lshift+0xbe>
 80133aa:	f1c9 0e20 	rsb	lr, r9, #32
 80133ae:	468a      	mov	sl, r1
 80133b0:	2200      	movs	r2, #0
 80133b2:	6818      	ldr	r0, [r3, #0]
 80133b4:	fa00 f009 	lsl.w	r0, r0, r9
 80133b8:	4310      	orrs	r0, r2
 80133ba:	f84a 0b04 	str.w	r0, [sl], #4
 80133be:	f853 2b04 	ldr.w	r2, [r3], #4
 80133c2:	459c      	cmp	ip, r3
 80133c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80133c8:	d8f3      	bhi.n	80133b2 <__lshift+0x6e>
 80133ca:	ebac 0304 	sub.w	r3, ip, r4
 80133ce:	f104 0015 	add.w	r0, r4, #21
 80133d2:	3b15      	subs	r3, #21
 80133d4:	f023 0303 	bic.w	r3, r3, #3
 80133d8:	3304      	adds	r3, #4
 80133da:	4584      	cmp	ip, r0
 80133dc:	bf38      	it	cc
 80133de:	2304      	movcc	r3, #4
 80133e0:	50ca      	str	r2, [r1, r3]
 80133e2:	b10a      	cbz	r2, 80133e8 <__lshift+0xa4>
 80133e4:	f108 0602 	add.w	r6, r8, #2
 80133e8:	3e01      	subs	r6, #1
 80133ea:	4638      	mov	r0, r7
 80133ec:	4621      	mov	r1, r4
 80133ee:	612e      	str	r6, [r5, #16]
 80133f0:	f7ff fd8e 	bl	8012f10 <_Bfree>
 80133f4:	4628      	mov	r0, r5
 80133f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133fa:	3301      	adds	r3, #1
 80133fc:	f842 0f04 	str.w	r0, [r2, #4]!
 8013400:	e7c5      	b.n	801338e <__lshift+0x4a>
 8013402:	3904      	subs	r1, #4
 8013404:	f853 2b04 	ldr.w	r2, [r3], #4
 8013408:	459c      	cmp	ip, r3
 801340a:	f841 2f04 	str.w	r2, [r1, #4]!
 801340e:	d8f9      	bhi.n	8013404 <__lshift+0xc0>
 8013410:	e7ea      	b.n	80133e8 <__lshift+0xa4>
 8013412:	bf00      	nop
 8013414:	08015a01 	.word	0x08015a01
 8013418:	08015a12 	.word	0x08015a12

0801341c <__mcmp>:
 801341c:	4603      	mov	r3, r0
 801341e:	690a      	ldr	r2, [r1, #16]
 8013420:	6900      	ldr	r0, [r0, #16]
 8013422:	1a80      	subs	r0, r0, r2
 8013424:	b530      	push	{r4, r5, lr}
 8013426:	d10e      	bne.n	8013446 <__mcmp+0x2a>
 8013428:	3314      	adds	r3, #20
 801342a:	3114      	adds	r1, #20
 801342c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013430:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013434:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801343c:	4295      	cmp	r5, r2
 801343e:	d003      	beq.n	8013448 <__mcmp+0x2c>
 8013440:	d205      	bcs.n	801344e <__mcmp+0x32>
 8013442:	f04f 30ff 	mov.w	r0, #4294967295
 8013446:	bd30      	pop	{r4, r5, pc}
 8013448:	42a3      	cmp	r3, r4
 801344a:	d3f3      	bcc.n	8013434 <__mcmp+0x18>
 801344c:	e7fb      	b.n	8013446 <__mcmp+0x2a>
 801344e:	2001      	movs	r0, #1
 8013450:	e7f9      	b.n	8013446 <__mcmp+0x2a>
	...

08013454 <__mdiff>:
 8013454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013458:	4689      	mov	r9, r1
 801345a:	4606      	mov	r6, r0
 801345c:	4611      	mov	r1, r2
 801345e:	4614      	mov	r4, r2
 8013460:	4648      	mov	r0, r9
 8013462:	f7ff ffdb 	bl	801341c <__mcmp>
 8013466:	1e05      	subs	r5, r0, #0
 8013468:	d112      	bne.n	8013490 <__mdiff+0x3c>
 801346a:	4629      	mov	r1, r5
 801346c:	4630      	mov	r0, r6
 801346e:	f7ff fd0f 	bl	8012e90 <_Balloc>
 8013472:	4602      	mov	r2, r0
 8013474:	b928      	cbnz	r0, 8013482 <__mdiff+0x2e>
 8013476:	4b41      	ldr	r3, [pc, #260]	@ (801357c <__mdiff+0x128>)
 8013478:	f240 2137 	movw	r1, #567	@ 0x237
 801347c:	4840      	ldr	r0, [pc, #256]	@ (8013580 <__mdiff+0x12c>)
 801347e:	f001 fc67 	bl	8014d50 <__assert_func>
 8013482:	2301      	movs	r3, #1
 8013484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013488:	4610      	mov	r0, r2
 801348a:	b003      	add	sp, #12
 801348c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013490:	bfbc      	itt	lt
 8013492:	464b      	movlt	r3, r9
 8013494:	46a1      	movlt	r9, r4
 8013496:	4630      	mov	r0, r6
 8013498:	bfb8      	it	lt
 801349a:	2501      	movlt	r5, #1
 801349c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80134a0:	bfb4      	ite	lt
 80134a2:	461c      	movlt	r4, r3
 80134a4:	2500      	movge	r5, #0
 80134a6:	f7ff fcf3 	bl	8012e90 <_Balloc>
 80134aa:	4602      	mov	r2, r0
 80134ac:	b918      	cbnz	r0, 80134b6 <__mdiff+0x62>
 80134ae:	4b33      	ldr	r3, [pc, #204]	@ (801357c <__mdiff+0x128>)
 80134b0:	f240 2145 	movw	r1, #581	@ 0x245
 80134b4:	e7e2      	b.n	801347c <__mdiff+0x28>
 80134b6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80134ba:	f104 0e14 	add.w	lr, r4, #20
 80134be:	6926      	ldr	r6, [r4, #16]
 80134c0:	f100 0b14 	add.w	fp, r0, #20
 80134c4:	60c5      	str	r5, [r0, #12]
 80134c6:	f109 0514 	add.w	r5, r9, #20
 80134ca:	f109 0310 	add.w	r3, r9, #16
 80134ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80134d2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80134d6:	46d9      	mov	r9, fp
 80134d8:	f04f 0c00 	mov.w	ip, #0
 80134dc:	9301      	str	r3, [sp, #4]
 80134de:	9b01      	ldr	r3, [sp, #4]
 80134e0:	f85e 0b04 	ldr.w	r0, [lr], #4
 80134e4:	f853 af04 	ldr.w	sl, [r3, #4]!
 80134e8:	4576      	cmp	r6, lr
 80134ea:	9301      	str	r3, [sp, #4]
 80134ec:	fa1f f38a 	uxth.w	r3, sl
 80134f0:	4619      	mov	r1, r3
 80134f2:	b283      	uxth	r3, r0
 80134f4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80134f8:	eba1 0303 	sub.w	r3, r1, r3
 80134fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013500:	4463      	add	r3, ip
 8013502:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013506:	b29b      	uxth	r3, r3
 8013508:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801350c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013510:	f849 3b04 	str.w	r3, [r9], #4
 8013514:	d8e3      	bhi.n	80134de <__mdiff+0x8a>
 8013516:	1b33      	subs	r3, r6, r4
 8013518:	3415      	adds	r4, #21
 801351a:	3b15      	subs	r3, #21
 801351c:	f023 0303 	bic.w	r3, r3, #3
 8013520:	3304      	adds	r3, #4
 8013522:	42a6      	cmp	r6, r4
 8013524:	bf38      	it	cc
 8013526:	2304      	movcc	r3, #4
 8013528:	441d      	add	r5, r3
 801352a:	445b      	add	r3, fp
 801352c:	462c      	mov	r4, r5
 801352e:	461e      	mov	r6, r3
 8013530:	4544      	cmp	r4, r8
 8013532:	d30e      	bcc.n	8013552 <__mdiff+0xfe>
 8013534:	f108 0103 	add.w	r1, r8, #3
 8013538:	1b49      	subs	r1, r1, r5
 801353a:	3d03      	subs	r5, #3
 801353c:	f021 0103 	bic.w	r1, r1, #3
 8013540:	45a8      	cmp	r8, r5
 8013542:	bf38      	it	cc
 8013544:	2100      	movcc	r1, #0
 8013546:	440b      	add	r3, r1
 8013548:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801354c:	b199      	cbz	r1, 8013576 <__mdiff+0x122>
 801354e:	6117      	str	r7, [r2, #16]
 8013550:	e79a      	b.n	8013488 <__mdiff+0x34>
 8013552:	f854 1b04 	ldr.w	r1, [r4], #4
 8013556:	46e6      	mov	lr, ip
 8013558:	fa1f fc81 	uxth.w	ip, r1
 801355c:	0c08      	lsrs	r0, r1, #16
 801355e:	4471      	add	r1, lr
 8013560:	44f4      	add	ip, lr
 8013562:	b289      	uxth	r1, r1
 8013564:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801356c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013570:	f846 1b04 	str.w	r1, [r6], #4
 8013574:	e7dc      	b.n	8013530 <__mdiff+0xdc>
 8013576:	3f01      	subs	r7, #1
 8013578:	e7e6      	b.n	8013548 <__mdiff+0xf4>
 801357a:	bf00      	nop
 801357c:	08015a01 	.word	0x08015a01
 8013580:	08015a12 	.word	0x08015a12

08013584 <__ulp>:
 8013584:	b082      	sub	sp, #8
 8013586:	4b11      	ldr	r3, [pc, #68]	@ (80135cc <__ulp+0x48>)
 8013588:	ed8d 0b00 	vstr	d0, [sp]
 801358c:	9a01      	ldr	r2, [sp, #4]
 801358e:	4013      	ands	r3, r2
 8013590:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013594:	2b00      	cmp	r3, #0
 8013596:	dc08      	bgt.n	80135aa <__ulp+0x26>
 8013598:	425b      	negs	r3, r3
 801359a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801359e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80135a2:	da04      	bge.n	80135ae <__ulp+0x2a>
 80135a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80135a8:	4113      	asrs	r3, r2
 80135aa:	2200      	movs	r2, #0
 80135ac:	e008      	b.n	80135c0 <__ulp+0x3c>
 80135ae:	f1a2 0314 	sub.w	r3, r2, #20
 80135b2:	2b1e      	cmp	r3, #30
 80135b4:	bfd6      	itet	le
 80135b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80135ba:	2201      	movgt	r2, #1
 80135bc:	40da      	lsrle	r2, r3
 80135be:	2300      	movs	r3, #0
 80135c0:	4619      	mov	r1, r3
 80135c2:	4610      	mov	r0, r2
 80135c4:	ec41 0b10 	vmov	d0, r0, r1
 80135c8:	b002      	add	sp, #8
 80135ca:	4770      	bx	lr
 80135cc:	7ff00000 	.word	0x7ff00000

080135d0 <__b2d>:
 80135d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d4:	6906      	ldr	r6, [r0, #16]
 80135d6:	f100 0814 	add.w	r8, r0, #20
 80135da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80135de:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80135e2:	1f37      	subs	r7, r6, #4
 80135e4:	4610      	mov	r0, r2
 80135e6:	f7ff fd47 	bl	8013078 <__hi0bits>
 80135ea:	f1c0 0320 	rsb	r3, r0, #32
 80135ee:	280a      	cmp	r0, #10
 80135f0:	600b      	str	r3, [r1, #0]
 80135f2:	491d      	ldr	r1, [pc, #116]	@ (8013668 <__b2d+0x98>)
 80135f4:	dc16      	bgt.n	8013624 <__b2d+0x54>
 80135f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80135fa:	45b8      	cmp	r8, r7
 80135fc:	f100 0015 	add.w	r0, r0, #21
 8013600:	fa22 f30c 	lsr.w	r3, r2, ip
 8013604:	fa02 f000 	lsl.w	r0, r2, r0
 8013608:	ea43 0501 	orr.w	r5, r3, r1
 801360c:	bf34      	ite	cc
 801360e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013612:	2300      	movcs	r3, #0
 8013614:	fa23 f30c 	lsr.w	r3, r3, ip
 8013618:	4303      	orrs	r3, r0
 801361a:	461c      	mov	r4, r3
 801361c:	ec45 4b10 	vmov	d0, r4, r5
 8013620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013624:	45b8      	cmp	r8, r7
 8013626:	bf3a      	itte	cc
 8013628:	f1a6 0708 	subcc.w	r7, r6, #8
 801362c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013630:	2300      	movcs	r3, #0
 8013632:	380b      	subs	r0, #11
 8013634:	d014      	beq.n	8013660 <__b2d+0x90>
 8013636:	f1c0 0120 	rsb	r1, r0, #32
 801363a:	4082      	lsls	r2, r0
 801363c:	4547      	cmp	r7, r8
 801363e:	fa23 f401 	lsr.w	r4, r3, r1
 8013642:	fa03 f300 	lsl.w	r3, r3, r0
 8013646:	ea42 0204 	orr.w	r2, r2, r4
 801364a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801364e:	bf8c      	ite	hi
 8013650:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013654:	2200      	movls	r2, #0
 8013656:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801365a:	40ca      	lsrs	r2, r1
 801365c:	4313      	orrs	r3, r2
 801365e:	e7dc      	b.n	801361a <__b2d+0x4a>
 8013660:	ea42 0501 	orr.w	r5, r2, r1
 8013664:	e7d9      	b.n	801361a <__b2d+0x4a>
 8013666:	bf00      	nop
 8013668:	3ff00000 	.word	0x3ff00000

0801366c <__d2b>:
 801366c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013670:	460f      	mov	r7, r1
 8013672:	2101      	movs	r1, #1
 8013674:	4616      	mov	r6, r2
 8013676:	ec59 8b10 	vmov	r8, r9, d0
 801367a:	f7ff fc09 	bl	8012e90 <_Balloc>
 801367e:	4604      	mov	r4, r0
 8013680:	b930      	cbnz	r0, 8013690 <__d2b+0x24>
 8013682:	4602      	mov	r2, r0
 8013684:	4b23      	ldr	r3, [pc, #140]	@ (8013714 <__d2b+0xa8>)
 8013686:	f240 310f 	movw	r1, #783	@ 0x30f
 801368a:	4823      	ldr	r0, [pc, #140]	@ (8013718 <__d2b+0xac>)
 801368c:	f001 fb60 	bl	8014d50 <__assert_func>
 8013690:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013698:	b10d      	cbz	r5, 801369e <__d2b+0x32>
 801369a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801369e:	9301      	str	r3, [sp, #4]
 80136a0:	f1b8 0300 	subs.w	r3, r8, #0
 80136a4:	d023      	beq.n	80136ee <__d2b+0x82>
 80136a6:	4668      	mov	r0, sp
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	f7ff fd04 	bl	80130b6 <__lo0bits>
 80136ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80136b2:	b1d0      	cbz	r0, 80136ea <__d2b+0x7e>
 80136b4:	f1c0 0320 	rsb	r3, r0, #32
 80136b8:	fa02 f303 	lsl.w	r3, r2, r3
 80136bc:	40c2      	lsrs	r2, r0
 80136be:	430b      	orrs	r3, r1
 80136c0:	9201      	str	r2, [sp, #4]
 80136c2:	6163      	str	r3, [r4, #20]
 80136c4:	9b01      	ldr	r3, [sp, #4]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	61a3      	str	r3, [r4, #24]
 80136ca:	bf0c      	ite	eq
 80136cc:	2201      	moveq	r2, #1
 80136ce:	2202      	movne	r2, #2
 80136d0:	6122      	str	r2, [r4, #16]
 80136d2:	b1a5      	cbz	r5, 80136fe <__d2b+0x92>
 80136d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80136d8:	4405      	add	r5, r0
 80136da:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80136de:	603d      	str	r5, [r7, #0]
 80136e0:	6030      	str	r0, [r6, #0]
 80136e2:	4620      	mov	r0, r4
 80136e4:	b003      	add	sp, #12
 80136e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136ea:	6161      	str	r1, [r4, #20]
 80136ec:	e7ea      	b.n	80136c4 <__d2b+0x58>
 80136ee:	a801      	add	r0, sp, #4
 80136f0:	f7ff fce1 	bl	80130b6 <__lo0bits>
 80136f4:	9b01      	ldr	r3, [sp, #4]
 80136f6:	3020      	adds	r0, #32
 80136f8:	2201      	movs	r2, #1
 80136fa:	6163      	str	r3, [r4, #20]
 80136fc:	e7e8      	b.n	80136d0 <__d2b+0x64>
 80136fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013702:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013706:	6038      	str	r0, [r7, #0]
 8013708:	6918      	ldr	r0, [r3, #16]
 801370a:	f7ff fcb5 	bl	8013078 <__hi0bits>
 801370e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013712:	e7e5      	b.n	80136e0 <__d2b+0x74>
 8013714:	08015a01 	.word	0x08015a01
 8013718:	08015a12 	.word	0x08015a12

0801371c <__ratio>:
 801371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013720:	b085      	sub	sp, #20
 8013722:	e9cd 1000 	strd	r1, r0, [sp]
 8013726:	a902      	add	r1, sp, #8
 8013728:	f7ff ff52 	bl	80135d0 <__b2d>
 801372c:	a903      	add	r1, sp, #12
 801372e:	9800      	ldr	r0, [sp, #0]
 8013730:	ec55 4b10 	vmov	r4, r5, d0
 8013734:	f7ff ff4c 	bl	80135d0 <__b2d>
 8013738:	9b01      	ldr	r3, [sp, #4]
 801373a:	462f      	mov	r7, r5
 801373c:	4620      	mov	r0, r4
 801373e:	6919      	ldr	r1, [r3, #16]
 8013740:	9b00      	ldr	r3, [sp, #0]
 8013742:	691b      	ldr	r3, [r3, #16]
 8013744:	1ac9      	subs	r1, r1, r3
 8013746:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801374a:	ec5b ab10 	vmov	sl, fp, d0
 801374e:	1a9b      	subs	r3, r3, r2
 8013750:	46d9      	mov	r9, fp
 8013752:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013756:	2b00      	cmp	r3, #0
 8013758:	bfcd      	iteet	gt
 801375a:	462a      	movgt	r2, r5
 801375c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013760:	465a      	movle	r2, fp
 8013762:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013766:	bfd8      	it	le
 8013768:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801376c:	4652      	mov	r2, sl
 801376e:	4639      	mov	r1, r7
 8013770:	464b      	mov	r3, r9
 8013772:	f7ed f86f 	bl	8000854 <__aeabi_ddiv>
 8013776:	ec41 0b10 	vmov	d0, r0, r1
 801377a:	b005      	add	sp, #20
 801377c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013780 <__copybits>:
 8013780:	3901      	subs	r1, #1
 8013782:	f102 0314 	add.w	r3, r2, #20
 8013786:	1149      	asrs	r1, r1, #5
 8013788:	b570      	push	{r4, r5, r6, lr}
 801378a:	3101      	adds	r1, #1
 801378c:	6914      	ldr	r4, [r2, #16]
 801378e:	1f05      	subs	r5, r0, #4
 8013790:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013794:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013798:	42a3      	cmp	r3, r4
 801379a:	d30c      	bcc.n	80137b6 <__copybits+0x36>
 801379c:	1aa3      	subs	r3, r4, r2
 801379e:	3211      	adds	r2, #17
 80137a0:	3b11      	subs	r3, #17
 80137a2:	f023 0303 	bic.w	r3, r3, #3
 80137a6:	42a2      	cmp	r2, r4
 80137a8:	bf88      	it	hi
 80137aa:	2300      	movhi	r3, #0
 80137ac:	4418      	add	r0, r3
 80137ae:	2300      	movs	r3, #0
 80137b0:	4288      	cmp	r0, r1
 80137b2:	d305      	bcc.n	80137c0 <__copybits+0x40>
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
 80137b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80137ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80137be:	e7eb      	b.n	8013798 <__copybits+0x18>
 80137c0:	f840 3b04 	str.w	r3, [r0], #4
 80137c4:	e7f4      	b.n	80137b0 <__copybits+0x30>

080137c6 <__any_on>:
 80137c6:	f100 0214 	add.w	r2, r0, #20
 80137ca:	114b      	asrs	r3, r1, #5
 80137cc:	6900      	ldr	r0, [r0, #16]
 80137ce:	4298      	cmp	r0, r3
 80137d0:	b510      	push	{r4, lr}
 80137d2:	db11      	blt.n	80137f8 <__any_on+0x32>
 80137d4:	dd0a      	ble.n	80137ec <__any_on+0x26>
 80137d6:	f011 011f 	ands.w	r1, r1, #31
 80137da:	d007      	beq.n	80137ec <__any_on+0x26>
 80137dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80137e0:	fa24 f001 	lsr.w	r0, r4, r1
 80137e4:	fa00 f101 	lsl.w	r1, r0, r1
 80137e8:	428c      	cmp	r4, r1
 80137ea:	d10b      	bne.n	8013804 <__any_on+0x3e>
 80137ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80137f0:	4293      	cmp	r3, r2
 80137f2:	d803      	bhi.n	80137fc <__any_on+0x36>
 80137f4:	2000      	movs	r0, #0
 80137f6:	bd10      	pop	{r4, pc}
 80137f8:	4603      	mov	r3, r0
 80137fa:	e7f7      	b.n	80137ec <__any_on+0x26>
 80137fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013800:	2900      	cmp	r1, #0
 8013802:	d0f5      	beq.n	80137f0 <__any_on+0x2a>
 8013804:	2001      	movs	r0, #1
 8013806:	e7f6      	b.n	80137f6 <__any_on+0x30>

08013808 <sulp>:
 8013808:	b570      	push	{r4, r5, r6, lr}
 801380a:	4604      	mov	r4, r0
 801380c:	460d      	mov	r5, r1
 801380e:	4616      	mov	r6, r2
 8013810:	ec45 4b10 	vmov	d0, r4, r5
 8013814:	f7ff feb6 	bl	8013584 <__ulp>
 8013818:	ec51 0b10 	vmov	r0, r1, d0
 801381c:	b17e      	cbz	r6, 801383e <sulp+0x36>
 801381e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013822:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013826:	2b00      	cmp	r3, #0
 8013828:	dd09      	ble.n	801383e <sulp+0x36>
 801382a:	051b      	lsls	r3, r3, #20
 801382c:	2400      	movs	r4, #0
 801382e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013832:	4622      	mov	r2, r4
 8013834:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013838:	462b      	mov	r3, r5
 801383a:	f7ec fee1 	bl	8000600 <__aeabi_dmul>
 801383e:	ec41 0b10 	vmov	d0, r0, r1
 8013842:	bd70      	pop	{r4, r5, r6, pc}
 8013844:	0000      	movs	r0, r0
	...

08013848 <_strtod_l>:
 8013848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801384c:	b09f      	sub	sp, #124	@ 0x7c
 801384e:	460c      	mov	r4, r1
 8013850:	f04f 0a00 	mov.w	sl, #0
 8013854:	f04f 0b00 	mov.w	fp, #0
 8013858:	9217      	str	r2, [sp, #92]	@ 0x5c
 801385a:	2200      	movs	r2, #0
 801385c:	9005      	str	r0, [sp, #20]
 801385e:	921a      	str	r2, [sp, #104]	@ 0x68
 8013860:	460a      	mov	r2, r1
 8013862:	9219      	str	r2, [sp, #100]	@ 0x64
 8013864:	7811      	ldrb	r1, [r2, #0]
 8013866:	292b      	cmp	r1, #43	@ 0x2b
 8013868:	d04a      	beq.n	8013900 <_strtod_l+0xb8>
 801386a:	d838      	bhi.n	80138de <_strtod_l+0x96>
 801386c:	290d      	cmp	r1, #13
 801386e:	d832      	bhi.n	80138d6 <_strtod_l+0x8e>
 8013870:	2908      	cmp	r1, #8
 8013872:	d832      	bhi.n	80138da <_strtod_l+0x92>
 8013874:	2900      	cmp	r1, #0
 8013876:	d03b      	beq.n	80138f0 <_strtod_l+0xa8>
 8013878:	2200      	movs	r2, #0
 801387a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801387c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801387e:	782a      	ldrb	r2, [r5, #0]
 8013880:	2a30      	cmp	r2, #48	@ 0x30
 8013882:	f040 80b3 	bne.w	80139ec <_strtod_l+0x1a4>
 8013886:	786a      	ldrb	r2, [r5, #1]
 8013888:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801388c:	2a58      	cmp	r2, #88	@ 0x58
 801388e:	d16e      	bne.n	801396e <_strtod_l+0x126>
 8013890:	9302      	str	r3, [sp, #8]
 8013892:	a919      	add	r1, sp, #100	@ 0x64
 8013894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013896:	4a90      	ldr	r2, [pc, #576]	@ (8013ad8 <_strtod_l+0x290>)
 8013898:	9301      	str	r3, [sp, #4]
 801389a:	ab1a      	add	r3, sp, #104	@ 0x68
 801389c:	9805      	ldr	r0, [sp, #20]
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80138a2:	f001 faed 	bl	8014e80 <__gethex>
 80138a6:	f010 060f 	ands.w	r6, r0, #15
 80138aa:	4604      	mov	r4, r0
 80138ac:	d005      	beq.n	80138ba <_strtod_l+0x72>
 80138ae:	2e06      	cmp	r6, #6
 80138b0:	d128      	bne.n	8013904 <_strtod_l+0xbc>
 80138b2:	3501      	adds	r5, #1
 80138b4:	2300      	movs	r3, #0
 80138b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80138b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80138bc:	2b00      	cmp	r3, #0
 80138be:	f040 858e 	bne.w	80143de <_strtod_l+0xb96>
 80138c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138c4:	b1cb      	cbz	r3, 80138fa <_strtod_l+0xb2>
 80138c6:	4652      	mov	r2, sl
 80138c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80138cc:	ec43 2b10 	vmov	d0, r2, r3
 80138d0:	b01f      	add	sp, #124	@ 0x7c
 80138d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138d6:	2920      	cmp	r1, #32
 80138d8:	d1ce      	bne.n	8013878 <_strtod_l+0x30>
 80138da:	3201      	adds	r2, #1
 80138dc:	e7c1      	b.n	8013862 <_strtod_l+0x1a>
 80138de:	292d      	cmp	r1, #45	@ 0x2d
 80138e0:	d1ca      	bne.n	8013878 <_strtod_l+0x30>
 80138e2:	2101      	movs	r1, #1
 80138e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80138e6:	1c51      	adds	r1, r2, #1
 80138e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80138ea:	7852      	ldrb	r2, [r2, #1]
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	d1c5      	bne.n	801387c <_strtod_l+0x34>
 80138f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80138f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f040 8570 	bne.w	80143da <_strtod_l+0xb92>
 80138fa:	4652      	mov	r2, sl
 80138fc:	465b      	mov	r3, fp
 80138fe:	e7e5      	b.n	80138cc <_strtod_l+0x84>
 8013900:	2100      	movs	r1, #0
 8013902:	e7ef      	b.n	80138e4 <_strtod_l+0x9c>
 8013904:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013906:	b13a      	cbz	r2, 8013918 <_strtod_l+0xd0>
 8013908:	2135      	movs	r1, #53	@ 0x35
 801390a:	a81c      	add	r0, sp, #112	@ 0x70
 801390c:	f7ff ff38 	bl	8013780 <__copybits>
 8013910:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013912:	9805      	ldr	r0, [sp, #20]
 8013914:	f7ff fafc 	bl	8012f10 <_Bfree>
 8013918:	3e01      	subs	r6, #1
 801391a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801391c:	2e04      	cmp	r6, #4
 801391e:	d806      	bhi.n	801392e <_strtod_l+0xe6>
 8013920:	e8df f006 	tbb	[pc, r6]
 8013924:	201d0314 	.word	0x201d0314
 8013928:	14          	.byte	0x14
 8013929:	00          	.byte	0x00
 801392a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801392e:	05e1      	lsls	r1, r4, #23
 8013930:	bf48      	it	mi
 8013932:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801393a:	0d1b      	lsrs	r3, r3, #20
 801393c:	051b      	lsls	r3, r3, #20
 801393e:	2b00      	cmp	r3, #0
 8013940:	d1bb      	bne.n	80138ba <_strtod_l+0x72>
 8013942:	f7fe fb11 	bl	8011f68 <__errno>
 8013946:	2322      	movs	r3, #34	@ 0x22
 8013948:	6003      	str	r3, [r0, #0]
 801394a:	e7b6      	b.n	80138ba <_strtod_l+0x72>
 801394c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013950:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013954:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013958:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801395c:	e7e7      	b.n	801392e <_strtod_l+0xe6>
 801395e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013ae0 <_strtod_l+0x298>
 8013962:	e7e4      	b.n	801392e <_strtod_l+0xe6>
 8013964:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013968:	f04f 3aff 	mov.w	sl, #4294967295
 801396c:	e7df      	b.n	801392e <_strtod_l+0xe6>
 801396e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013970:	1c5a      	adds	r2, r3, #1
 8013972:	9219      	str	r2, [sp, #100]	@ 0x64
 8013974:	785b      	ldrb	r3, [r3, #1]
 8013976:	2b30      	cmp	r3, #48	@ 0x30
 8013978:	d0f9      	beq.n	801396e <_strtod_l+0x126>
 801397a:	2b00      	cmp	r3, #0
 801397c:	d09d      	beq.n	80138ba <_strtod_l+0x72>
 801397e:	2301      	movs	r3, #1
 8013980:	9309      	str	r3, [sp, #36]	@ 0x24
 8013982:	220a      	movs	r2, #10
 8013984:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013986:	930c      	str	r3, [sp, #48]	@ 0x30
 8013988:	2300      	movs	r3, #0
 801398a:	461f      	mov	r7, r3
 801398c:	9308      	str	r3, [sp, #32]
 801398e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013990:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013992:	7805      	ldrb	r5, [r0, #0]
 8013994:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013998:	b2d9      	uxtb	r1, r3
 801399a:	2909      	cmp	r1, #9
 801399c:	d928      	bls.n	80139f0 <_strtod_l+0x1a8>
 801399e:	2201      	movs	r2, #1
 80139a0:	494e      	ldr	r1, [pc, #312]	@ (8013adc <_strtod_l+0x294>)
 80139a2:	f001 f978 	bl	8014c96 <strncmp>
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d033      	beq.n	8013a12 <_strtod_l+0x1ca>
 80139aa:	2000      	movs	r0, #0
 80139ac:	462a      	mov	r2, r5
 80139ae:	463d      	mov	r5, r7
 80139b0:	4681      	mov	r9, r0
 80139b2:	4603      	mov	r3, r0
 80139b4:	2a65      	cmp	r2, #101	@ 0x65
 80139b6:	d001      	beq.n	80139bc <_strtod_l+0x174>
 80139b8:	2a45      	cmp	r2, #69	@ 0x45
 80139ba:	d114      	bne.n	80139e6 <_strtod_l+0x19e>
 80139bc:	b91d      	cbnz	r5, 80139c6 <_strtod_l+0x17e>
 80139be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139c0:	4302      	orrs	r2, r0
 80139c2:	d095      	beq.n	80138f0 <_strtod_l+0xa8>
 80139c4:	2500      	movs	r5, #0
 80139c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80139c8:	1c62      	adds	r2, r4, #1
 80139ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80139cc:	7862      	ldrb	r2, [r4, #1]
 80139ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80139d0:	d078      	beq.n	8013ac4 <_strtod_l+0x27c>
 80139d2:	2a2d      	cmp	r2, #45	@ 0x2d
 80139d4:	d07c      	beq.n	8013ad0 <_strtod_l+0x288>
 80139d6:	f04f 0c00 	mov.w	ip, #0
 80139da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80139de:	2909      	cmp	r1, #9
 80139e0:	f240 8084 	bls.w	8013aec <_strtod_l+0x2a4>
 80139e4:	9419      	str	r4, [sp, #100]	@ 0x64
 80139e6:	f04f 0800 	mov.w	r8, #0
 80139ea:	e0a4      	b.n	8013b36 <_strtod_l+0x2ee>
 80139ec:	2300      	movs	r3, #0
 80139ee:	e7c7      	b.n	8013980 <_strtod_l+0x138>
 80139f0:	2f08      	cmp	r7, #8
 80139f2:	f100 0001 	add.w	r0, r0, #1
 80139f6:	f107 0701 	add.w	r7, r7, #1
 80139fa:	bfd5      	itete	le
 80139fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80139fe:	9908      	ldrgt	r1, [sp, #32]
 8013a00:	fb02 3301 	mlale	r3, r2, r1, r3
 8013a04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013a08:	bfd4      	ite	le
 8013a0a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013a0c:	9308      	strgt	r3, [sp, #32]
 8013a0e:	9019      	str	r0, [sp, #100]	@ 0x64
 8013a10:	e7be      	b.n	8013990 <_strtod_l+0x148>
 8013a12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a14:	1c5a      	adds	r2, r3, #1
 8013a16:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a18:	785a      	ldrb	r2, [r3, #1]
 8013a1a:	b37f      	cbz	r7, 8013a7c <_strtod_l+0x234>
 8013a1c:	4681      	mov	r9, r0
 8013a1e:	463d      	mov	r5, r7
 8013a20:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013a24:	2b09      	cmp	r3, #9
 8013a26:	d912      	bls.n	8013a4e <_strtod_l+0x206>
 8013a28:	2301      	movs	r3, #1
 8013a2a:	e7c3      	b.n	80139b4 <_strtod_l+0x16c>
 8013a2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a2e:	3001      	adds	r0, #1
 8013a30:	1c5a      	adds	r2, r3, #1
 8013a32:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a34:	785a      	ldrb	r2, [r3, #1]
 8013a36:	2a30      	cmp	r2, #48	@ 0x30
 8013a38:	d0f8      	beq.n	8013a2c <_strtod_l+0x1e4>
 8013a3a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013a3e:	2b08      	cmp	r3, #8
 8013a40:	f200 84d2 	bhi.w	80143e8 <_strtod_l+0xba0>
 8013a44:	4681      	mov	r9, r0
 8013a46:	2000      	movs	r0, #0
 8013a48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a4a:	4605      	mov	r5, r0
 8013a4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8013a4e:	3a30      	subs	r2, #48	@ 0x30
 8013a50:	f100 0301 	add.w	r3, r0, #1
 8013a54:	d02a      	beq.n	8013aac <_strtod_l+0x264>
 8013a56:	4499      	add	r9, r3
 8013a58:	eb00 0c05 	add.w	ip, r0, r5
 8013a5c:	462b      	mov	r3, r5
 8013a5e:	210a      	movs	r1, #10
 8013a60:	4563      	cmp	r3, ip
 8013a62:	d10d      	bne.n	8013a80 <_strtod_l+0x238>
 8013a64:	1c69      	adds	r1, r5, #1
 8013a66:	4401      	add	r1, r0
 8013a68:	4428      	add	r0, r5
 8013a6a:	2808      	cmp	r0, #8
 8013a6c:	dc16      	bgt.n	8013a9c <_strtod_l+0x254>
 8013a6e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013a70:	230a      	movs	r3, #10
 8013a72:	fb03 2300 	mla	r3, r3, r0, r2
 8013a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a78:	2300      	movs	r3, #0
 8013a7a:	e018      	b.n	8013aae <_strtod_l+0x266>
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	e7da      	b.n	8013a36 <_strtod_l+0x1ee>
 8013a80:	2b08      	cmp	r3, #8
 8013a82:	f103 0301 	add.w	r3, r3, #1
 8013a86:	dc03      	bgt.n	8013a90 <_strtod_l+0x248>
 8013a88:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013a8a:	434e      	muls	r6, r1
 8013a8c:	960a      	str	r6, [sp, #40]	@ 0x28
 8013a8e:	e7e7      	b.n	8013a60 <_strtod_l+0x218>
 8013a90:	2b10      	cmp	r3, #16
 8013a92:	bfde      	ittt	le
 8013a94:	9e08      	ldrle	r6, [sp, #32]
 8013a96:	434e      	mulle	r6, r1
 8013a98:	9608      	strle	r6, [sp, #32]
 8013a9a:	e7e1      	b.n	8013a60 <_strtod_l+0x218>
 8013a9c:	280f      	cmp	r0, #15
 8013a9e:	dceb      	bgt.n	8013a78 <_strtod_l+0x230>
 8013aa0:	9808      	ldr	r0, [sp, #32]
 8013aa2:	230a      	movs	r3, #10
 8013aa4:	fb03 2300 	mla	r3, r3, r0, r2
 8013aa8:	9308      	str	r3, [sp, #32]
 8013aaa:	e7e5      	b.n	8013a78 <_strtod_l+0x230>
 8013aac:	4629      	mov	r1, r5
 8013aae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013ab0:	460d      	mov	r5, r1
 8013ab2:	1c50      	adds	r0, r2, #1
 8013ab4:	9019      	str	r0, [sp, #100]	@ 0x64
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	7852      	ldrb	r2, [r2, #1]
 8013aba:	e7b1      	b.n	8013a20 <_strtod_l+0x1d8>
 8013abc:	f04f 0900 	mov.w	r9, #0
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	e77c      	b.n	80139be <_strtod_l+0x176>
 8013ac4:	f04f 0c00 	mov.w	ip, #0
 8013ac8:	1ca2      	adds	r2, r4, #2
 8013aca:	9219      	str	r2, [sp, #100]	@ 0x64
 8013acc:	78a2      	ldrb	r2, [r4, #2]
 8013ace:	e784      	b.n	80139da <_strtod_l+0x192>
 8013ad0:	f04f 0c01 	mov.w	ip, #1
 8013ad4:	e7f8      	b.n	8013ac8 <_strtod_l+0x280>
 8013ad6:	bf00      	nop
 8013ad8:	08015b80 	.word	0x08015b80
 8013adc:	08015b68 	.word	0x08015b68
 8013ae0:	7ff00000 	.word	0x7ff00000
 8013ae4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013ae6:	1c51      	adds	r1, r2, #1
 8013ae8:	9119      	str	r1, [sp, #100]	@ 0x64
 8013aea:	7852      	ldrb	r2, [r2, #1]
 8013aec:	2a30      	cmp	r2, #48	@ 0x30
 8013aee:	d0f9      	beq.n	8013ae4 <_strtod_l+0x29c>
 8013af0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013af4:	2908      	cmp	r1, #8
 8013af6:	f63f af76 	bhi.w	80139e6 <_strtod_l+0x19e>
 8013afa:	3a30      	subs	r2, #48	@ 0x30
 8013afc:	f04f 080a 	mov.w	r8, #10
 8013b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013b06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b08:	1c56      	adds	r6, r2, #1
 8013b0a:	9619      	str	r6, [sp, #100]	@ 0x64
 8013b0c:	7852      	ldrb	r2, [r2, #1]
 8013b0e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013b12:	f1be 0f09 	cmp.w	lr, #9
 8013b16:	d939      	bls.n	8013b8c <_strtod_l+0x344>
 8013b18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013b1e:	1a76      	subs	r6, r6, r1
 8013b20:	2e08      	cmp	r6, #8
 8013b22:	dc03      	bgt.n	8013b2c <_strtod_l+0x2e4>
 8013b24:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013b26:	4588      	cmp	r8, r1
 8013b28:	bfa8      	it	ge
 8013b2a:	4688      	movge	r8, r1
 8013b2c:	f1bc 0f00 	cmp.w	ip, #0
 8013b30:	d001      	beq.n	8013b36 <_strtod_l+0x2ee>
 8013b32:	f1c8 0800 	rsb	r8, r8, #0
 8013b36:	2d00      	cmp	r5, #0
 8013b38:	d14e      	bne.n	8013bd8 <_strtod_l+0x390>
 8013b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013b3c:	4308      	orrs	r0, r1
 8013b3e:	f47f aebc 	bne.w	80138ba <_strtod_l+0x72>
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	f47f aed4 	bne.w	80138f0 <_strtod_l+0xa8>
 8013b48:	2a69      	cmp	r2, #105	@ 0x69
 8013b4a:	d028      	beq.n	8013b9e <_strtod_l+0x356>
 8013b4c:	dc25      	bgt.n	8013b9a <_strtod_l+0x352>
 8013b4e:	2a49      	cmp	r2, #73	@ 0x49
 8013b50:	d025      	beq.n	8013b9e <_strtod_l+0x356>
 8013b52:	2a4e      	cmp	r2, #78	@ 0x4e
 8013b54:	f47f aecc 	bne.w	80138f0 <_strtod_l+0xa8>
 8013b58:	499b      	ldr	r1, [pc, #620]	@ (8013dc8 <_strtod_l+0x580>)
 8013b5a:	a819      	add	r0, sp, #100	@ 0x64
 8013b5c:	f001 fbb0 	bl	80152c0 <__match>
 8013b60:	2800      	cmp	r0, #0
 8013b62:	f43f aec5 	beq.w	80138f0 <_strtod_l+0xa8>
 8013b66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	2b28      	cmp	r3, #40	@ 0x28
 8013b6c:	d12e      	bne.n	8013bcc <_strtod_l+0x384>
 8013b6e:	aa1c      	add	r2, sp, #112	@ 0x70
 8013b70:	4996      	ldr	r1, [pc, #600]	@ (8013dcc <_strtod_l+0x584>)
 8013b72:	a819      	add	r0, sp, #100	@ 0x64
 8013b74:	f001 fbb8 	bl	80152e8 <__hexnan>
 8013b78:	2805      	cmp	r0, #5
 8013b7a:	d127      	bne.n	8013bcc <_strtod_l+0x384>
 8013b7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013b7e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013b82:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013b86:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013b8a:	e696      	b.n	80138ba <_strtod_l+0x72>
 8013b8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013b8e:	fb08 2101 	mla	r1, r8, r1, r2
 8013b92:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013b96:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b98:	e7b5      	b.n	8013b06 <_strtod_l+0x2be>
 8013b9a:	2a6e      	cmp	r2, #110	@ 0x6e
 8013b9c:	e7da      	b.n	8013b54 <_strtod_l+0x30c>
 8013b9e:	498c      	ldr	r1, [pc, #560]	@ (8013dd0 <_strtod_l+0x588>)
 8013ba0:	a819      	add	r0, sp, #100	@ 0x64
 8013ba2:	f001 fb8d 	bl	80152c0 <__match>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	f43f aea2 	beq.w	80138f0 <_strtod_l+0xa8>
 8013bac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bae:	a819      	add	r0, sp, #100	@ 0x64
 8013bb0:	4988      	ldr	r1, [pc, #544]	@ (8013dd4 <_strtod_l+0x58c>)
 8013bb2:	3b01      	subs	r3, #1
 8013bb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8013bb6:	f001 fb83 	bl	80152c0 <__match>
 8013bba:	b910      	cbnz	r0, 8013bc2 <_strtod_l+0x37a>
 8013bbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8013bc2:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013de4 <_strtod_l+0x59c>
 8013bc6:	f04f 0a00 	mov.w	sl, #0
 8013bca:	e676      	b.n	80138ba <_strtod_l+0x72>
 8013bcc:	4882      	ldr	r0, [pc, #520]	@ (8013dd8 <_strtod_l+0x590>)
 8013bce:	f001 f8b7 	bl	8014d40 <nan>
 8013bd2:	ec5b ab10 	vmov	sl, fp, d0
 8013bd6:	e670      	b.n	80138ba <_strtod_l+0x72>
 8013bd8:	eba8 0309 	sub.w	r3, r8, r9
 8013bdc:	2f00      	cmp	r7, #0
 8013bde:	bf08      	it	eq
 8013be0:	462f      	moveq	r7, r5
 8013be2:	2d10      	cmp	r5, #16
 8013be4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013be6:	462c      	mov	r4, r5
 8013be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bea:	bfa8      	it	ge
 8013bec:	2410      	movge	r4, #16
 8013bee:	f7ec fc8d 	bl	800050c <__aeabi_ui2d>
 8013bf2:	2d09      	cmp	r5, #9
 8013bf4:	4682      	mov	sl, r0
 8013bf6:	468b      	mov	fp, r1
 8013bf8:	dc13      	bgt.n	8013c22 <_strtod_l+0x3da>
 8013bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	f43f ae5c 	beq.w	80138ba <_strtod_l+0x72>
 8013c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c04:	dd78      	ble.n	8013cf8 <_strtod_l+0x4b0>
 8013c06:	2b16      	cmp	r3, #22
 8013c08:	dc5f      	bgt.n	8013cca <_strtod_l+0x482>
 8013c0a:	4974      	ldr	r1, [pc, #464]	@ (8013ddc <_strtod_l+0x594>)
 8013c0c:	4652      	mov	r2, sl
 8013c0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c12:	465b      	mov	r3, fp
 8013c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c18:	f7ec fcf2 	bl	8000600 <__aeabi_dmul>
 8013c1c:	4682      	mov	sl, r0
 8013c1e:	468b      	mov	fp, r1
 8013c20:	e64b      	b.n	80138ba <_strtod_l+0x72>
 8013c22:	4b6e      	ldr	r3, [pc, #440]	@ (8013ddc <_strtod_l+0x594>)
 8013c24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013c28:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013c2c:	f7ec fce8 	bl	8000600 <__aeabi_dmul>
 8013c30:	4682      	mov	sl, r0
 8013c32:	468b      	mov	fp, r1
 8013c34:	9808      	ldr	r0, [sp, #32]
 8013c36:	f7ec fc69 	bl	800050c <__aeabi_ui2d>
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	4650      	mov	r0, sl
 8013c40:	4659      	mov	r1, fp
 8013c42:	f7ec fb27 	bl	8000294 <__adddf3>
 8013c46:	2d0f      	cmp	r5, #15
 8013c48:	4682      	mov	sl, r0
 8013c4a:	468b      	mov	fp, r1
 8013c4c:	ddd5      	ble.n	8013bfa <_strtod_l+0x3b2>
 8013c4e:	1b2c      	subs	r4, r5, r4
 8013c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c52:	441c      	add	r4, r3
 8013c54:	2c00      	cmp	r4, #0
 8013c56:	f340 8096 	ble.w	8013d86 <_strtod_l+0x53e>
 8013c5a:	f014 030f 	ands.w	r3, r4, #15
 8013c5e:	d00a      	beq.n	8013c76 <_strtod_l+0x42e>
 8013c60:	495e      	ldr	r1, [pc, #376]	@ (8013ddc <_strtod_l+0x594>)
 8013c62:	4652      	mov	r2, sl
 8013c64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c68:	465b      	mov	r3, fp
 8013c6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c6e:	f7ec fcc7 	bl	8000600 <__aeabi_dmul>
 8013c72:	4682      	mov	sl, r0
 8013c74:	468b      	mov	fp, r1
 8013c76:	f034 040f 	bics.w	r4, r4, #15
 8013c7a:	d073      	beq.n	8013d64 <_strtod_l+0x51c>
 8013c7c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013c80:	dd48      	ble.n	8013d14 <_strtod_l+0x4cc>
 8013c82:	2400      	movs	r4, #0
 8013c84:	46a0      	mov	r8, r4
 8013c86:	46a1      	mov	r9, r4
 8013c88:	940a      	str	r4, [sp, #40]	@ 0x28
 8013c8a:	2322      	movs	r3, #34	@ 0x22
 8013c8c:	9a05      	ldr	r2, [sp, #20]
 8013c8e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013de4 <_strtod_l+0x59c>
 8013c92:	f04f 0a00 	mov.w	sl, #0
 8013c96:	6013      	str	r3, [r2, #0]
 8013c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	f43f ae0d 	beq.w	80138ba <_strtod_l+0x72>
 8013ca0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ca2:	9805      	ldr	r0, [sp, #20]
 8013ca4:	f7ff f934 	bl	8012f10 <_Bfree>
 8013ca8:	4649      	mov	r1, r9
 8013caa:	9805      	ldr	r0, [sp, #20]
 8013cac:	f7ff f930 	bl	8012f10 <_Bfree>
 8013cb0:	4641      	mov	r1, r8
 8013cb2:	9805      	ldr	r0, [sp, #20]
 8013cb4:	f7ff f92c 	bl	8012f10 <_Bfree>
 8013cb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013cba:	9805      	ldr	r0, [sp, #20]
 8013cbc:	f7ff f928 	bl	8012f10 <_Bfree>
 8013cc0:	4621      	mov	r1, r4
 8013cc2:	9805      	ldr	r0, [sp, #20]
 8013cc4:	f7ff f924 	bl	8012f10 <_Bfree>
 8013cc8:	e5f7      	b.n	80138ba <_strtod_l+0x72>
 8013cca:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013cd0:	4293      	cmp	r3, r2
 8013cd2:	dbbc      	blt.n	8013c4e <_strtod_l+0x406>
 8013cd4:	f1c5 050f 	rsb	r5, r5, #15
 8013cd8:	4c40      	ldr	r4, [pc, #256]	@ (8013ddc <_strtod_l+0x594>)
 8013cda:	4652      	mov	r2, sl
 8013cdc:	465b      	mov	r3, fp
 8013cde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ce6:	f7ec fc8b 	bl	8000600 <__aeabi_dmul>
 8013cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cec:	1b5d      	subs	r5, r3, r5
 8013cee:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013cf2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013cf6:	e78f      	b.n	8013c18 <_strtod_l+0x3d0>
 8013cf8:	3316      	adds	r3, #22
 8013cfa:	dba8      	blt.n	8013c4e <_strtod_l+0x406>
 8013cfc:	eba9 0808 	sub.w	r8, r9, r8
 8013d00:	4b36      	ldr	r3, [pc, #216]	@ (8013ddc <_strtod_l+0x594>)
 8013d02:	4650      	mov	r0, sl
 8013d04:	4659      	mov	r1, fp
 8013d06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013d0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013d0e:	f7ec fda1 	bl	8000854 <__aeabi_ddiv>
 8013d12:	e783      	b.n	8013c1c <_strtod_l+0x3d4>
 8013d14:	4b32      	ldr	r3, [pc, #200]	@ (8013de0 <_strtod_l+0x598>)
 8013d16:	1124      	asrs	r4, r4, #4
 8013d18:	4650      	mov	r0, sl
 8013d1a:	4659      	mov	r1, fp
 8013d1c:	9308      	str	r3, [sp, #32]
 8013d1e:	2300      	movs	r3, #0
 8013d20:	461e      	mov	r6, r3
 8013d22:	2c01      	cmp	r4, #1
 8013d24:	dc21      	bgt.n	8013d6a <_strtod_l+0x522>
 8013d26:	b10b      	cbz	r3, 8013d2c <_strtod_l+0x4e4>
 8013d28:	4682      	mov	sl, r0
 8013d2a:	468b      	mov	fp, r1
 8013d2c:	492c      	ldr	r1, [pc, #176]	@ (8013de0 <_strtod_l+0x598>)
 8013d2e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013d32:	4652      	mov	r2, sl
 8013d34:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013d38:	465b      	mov	r3, fp
 8013d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d3e:	f7ec fc5f 	bl	8000600 <__aeabi_dmul>
 8013d42:	4b28      	ldr	r3, [pc, #160]	@ (8013de4 <_strtod_l+0x59c>)
 8013d44:	460a      	mov	r2, r1
 8013d46:	4682      	mov	sl, r0
 8013d48:	400b      	ands	r3, r1
 8013d4a:	4927      	ldr	r1, [pc, #156]	@ (8013de8 <_strtod_l+0x5a0>)
 8013d4c:	428b      	cmp	r3, r1
 8013d4e:	d898      	bhi.n	8013c82 <_strtod_l+0x43a>
 8013d50:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013d54:	428b      	cmp	r3, r1
 8013d56:	bf86      	itte	hi
 8013d58:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013dec <_strtod_l+0x5a4>
 8013d5c:	f04f 3aff 	movhi.w	sl, #4294967295
 8013d60:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013d64:	2300      	movs	r3, #0
 8013d66:	9308      	str	r3, [sp, #32]
 8013d68:	e07a      	b.n	8013e60 <_strtod_l+0x618>
 8013d6a:	07e2      	lsls	r2, r4, #31
 8013d6c:	d505      	bpl.n	8013d7a <_strtod_l+0x532>
 8013d6e:	9b08      	ldr	r3, [sp, #32]
 8013d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d74:	f7ec fc44 	bl	8000600 <__aeabi_dmul>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	9a08      	ldr	r2, [sp, #32]
 8013d7c:	3601      	adds	r6, #1
 8013d7e:	1064      	asrs	r4, r4, #1
 8013d80:	3208      	adds	r2, #8
 8013d82:	9208      	str	r2, [sp, #32]
 8013d84:	e7cd      	b.n	8013d22 <_strtod_l+0x4da>
 8013d86:	d0ed      	beq.n	8013d64 <_strtod_l+0x51c>
 8013d88:	4264      	negs	r4, r4
 8013d8a:	f014 020f 	ands.w	r2, r4, #15
 8013d8e:	d00a      	beq.n	8013da6 <_strtod_l+0x55e>
 8013d90:	4b12      	ldr	r3, [pc, #72]	@ (8013ddc <_strtod_l+0x594>)
 8013d92:	4650      	mov	r0, sl
 8013d94:	4659      	mov	r1, fp
 8013d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9e:	f7ec fd59 	bl	8000854 <__aeabi_ddiv>
 8013da2:	4682      	mov	sl, r0
 8013da4:	468b      	mov	fp, r1
 8013da6:	1124      	asrs	r4, r4, #4
 8013da8:	d0dc      	beq.n	8013d64 <_strtod_l+0x51c>
 8013daa:	2c1f      	cmp	r4, #31
 8013dac:	dd20      	ble.n	8013df0 <_strtod_l+0x5a8>
 8013dae:	2400      	movs	r4, #0
 8013db0:	46a0      	mov	r8, r4
 8013db2:	46a1      	mov	r9, r4
 8013db4:	940a      	str	r4, [sp, #40]	@ 0x28
 8013db6:	2322      	movs	r3, #34	@ 0x22
 8013db8:	9a05      	ldr	r2, [sp, #20]
 8013dba:	f04f 0a00 	mov.w	sl, #0
 8013dbe:	f04f 0b00 	mov.w	fp, #0
 8013dc2:	6013      	str	r3, [r2, #0]
 8013dc4:	e768      	b.n	8013c98 <_strtod_l+0x450>
 8013dc6:	bf00      	nop
 8013dc8:	08015959 	.word	0x08015959
 8013dcc:	08015b6c 	.word	0x08015b6c
 8013dd0:	08015951 	.word	0x08015951
 8013dd4:	08015988 	.word	0x08015988
 8013dd8:	08015d15 	.word	0x08015d15
 8013ddc:	08015aa0 	.word	0x08015aa0
 8013de0:	08015a78 	.word	0x08015a78
 8013de4:	7ff00000 	.word	0x7ff00000
 8013de8:	7ca00000 	.word	0x7ca00000
 8013dec:	7fefffff 	.word	0x7fefffff
 8013df0:	f014 0310 	ands.w	r3, r4, #16
 8013df4:	4650      	mov	r0, sl
 8013df6:	4659      	mov	r1, fp
 8013df8:	4ea9      	ldr	r6, [pc, #676]	@ (80140a0 <_strtod_l+0x858>)
 8013dfa:	bf18      	it	ne
 8013dfc:	236a      	movne	r3, #106	@ 0x6a
 8013dfe:	9308      	str	r3, [sp, #32]
 8013e00:	2300      	movs	r3, #0
 8013e02:	07e2      	lsls	r2, r4, #31
 8013e04:	d504      	bpl.n	8013e10 <_strtod_l+0x5c8>
 8013e06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013e0a:	f7ec fbf9 	bl	8000600 <__aeabi_dmul>
 8013e0e:	2301      	movs	r3, #1
 8013e10:	1064      	asrs	r4, r4, #1
 8013e12:	f106 0608 	add.w	r6, r6, #8
 8013e16:	d1f4      	bne.n	8013e02 <_strtod_l+0x5ba>
 8013e18:	b10b      	cbz	r3, 8013e1e <_strtod_l+0x5d6>
 8013e1a:	4682      	mov	sl, r0
 8013e1c:	468b      	mov	fp, r1
 8013e1e:	9b08      	ldr	r3, [sp, #32]
 8013e20:	b1b3      	cbz	r3, 8013e50 <_strtod_l+0x608>
 8013e22:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013e26:	4659      	mov	r1, fp
 8013e28:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	dd0f      	ble.n	8013e50 <_strtod_l+0x608>
 8013e30:	2b1f      	cmp	r3, #31
 8013e32:	dd55      	ble.n	8013ee0 <_strtod_l+0x698>
 8013e34:	2b34      	cmp	r3, #52	@ 0x34
 8013e36:	f04f 0a00 	mov.w	sl, #0
 8013e3a:	bfdb      	ittet	le
 8013e3c:	f04f 33ff 	movle.w	r3, #4294967295
 8013e40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013e44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013e48:	4093      	lslle	r3, r2
 8013e4a:	bfd8      	it	le
 8013e4c:	ea03 0b01 	andle.w	fp, r3, r1
 8013e50:	2200      	movs	r2, #0
 8013e52:	2300      	movs	r3, #0
 8013e54:	4650      	mov	r0, sl
 8013e56:	4659      	mov	r1, fp
 8013e58:	f7ec fe3a 	bl	8000ad0 <__aeabi_dcmpeq>
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	d1a6      	bne.n	8013dae <_strtod_l+0x566>
 8013e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e62:	463a      	mov	r2, r7
 8013e64:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013e66:	9300      	str	r3, [sp, #0]
 8013e68:	462b      	mov	r3, r5
 8013e6a:	9805      	ldr	r0, [sp, #20]
 8013e6c:	f7ff f8ba 	bl	8012fe4 <__s2b>
 8013e70:	900a      	str	r0, [sp, #40]	@ 0x28
 8013e72:	2800      	cmp	r0, #0
 8013e74:	f43f af05 	beq.w	8013c82 <_strtod_l+0x43a>
 8013e78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e7a:	eba9 0308 	sub.w	r3, r9, r8
 8013e7e:	2400      	movs	r4, #0
 8013e80:	2a00      	cmp	r2, #0
 8013e82:	46a0      	mov	r8, r4
 8013e84:	bfa8      	it	ge
 8013e86:	2300      	movge	r3, #0
 8013e88:	9312      	str	r3, [sp, #72]	@ 0x48
 8013e8a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013e8e:	9316      	str	r3, [sp, #88]	@ 0x58
 8013e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e92:	9805      	ldr	r0, [sp, #20]
 8013e94:	6859      	ldr	r1, [r3, #4]
 8013e96:	f7fe fffb 	bl	8012e90 <_Balloc>
 8013e9a:	4681      	mov	r9, r0
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	f43f aef4 	beq.w	8013c8a <_strtod_l+0x442>
 8013ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ea4:	300c      	adds	r0, #12
 8013ea6:	691a      	ldr	r2, [r3, #16]
 8013ea8:	f103 010c 	add.w	r1, r3, #12
 8013eac:	3202      	adds	r2, #2
 8013eae:	0092      	lsls	r2, r2, #2
 8013eb0:	f000 ff36 	bl	8014d20 <memcpy>
 8013eb4:	aa1c      	add	r2, sp, #112	@ 0x70
 8013eb6:	a91b      	add	r1, sp, #108	@ 0x6c
 8013eb8:	9805      	ldr	r0, [sp, #20]
 8013eba:	ec4b ab10 	vmov	d0, sl, fp
 8013ebe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013ec2:	f7ff fbd3 	bl	801366c <__d2b>
 8013ec6:	901a      	str	r0, [sp, #104]	@ 0x68
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	f43f aede 	beq.w	8013c8a <_strtod_l+0x442>
 8013ece:	2101      	movs	r1, #1
 8013ed0:	9805      	ldr	r0, [sp, #20]
 8013ed2:	f7ff f91d 	bl	8013110 <__i2b>
 8013ed6:	4680      	mov	r8, r0
 8013ed8:	b948      	cbnz	r0, 8013eee <_strtod_l+0x6a6>
 8013eda:	f04f 0800 	mov.w	r8, #0
 8013ede:	e6d4      	b.n	8013c8a <_strtod_l+0x442>
 8013ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8013ee8:	ea03 0a0a 	and.w	sl, r3, sl
 8013eec:	e7b0      	b.n	8013e50 <_strtod_l+0x608>
 8013eee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013ef0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013ef2:	2d00      	cmp	r5, #0
 8013ef4:	bfa9      	itett	ge
 8013ef6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013ef8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013efa:	18ef      	addge	r7, r5, r3
 8013efc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013efe:	bfb8      	it	lt
 8013f00:	1b5e      	sublt	r6, r3, r5
 8013f02:	9b08      	ldr	r3, [sp, #32]
 8013f04:	bfb8      	it	lt
 8013f06:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013f08:	1aed      	subs	r5, r5, r3
 8013f0a:	4b66      	ldr	r3, [pc, #408]	@ (80140a4 <_strtod_l+0x85c>)
 8013f0c:	4415      	add	r5, r2
 8013f0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013f12:	3d01      	subs	r5, #1
 8013f14:	429d      	cmp	r5, r3
 8013f16:	da4f      	bge.n	8013fb8 <_strtod_l+0x770>
 8013f18:	1b5b      	subs	r3, r3, r5
 8013f1a:	2101      	movs	r1, #1
 8013f1c:	2b1f      	cmp	r3, #31
 8013f1e:	eba2 0203 	sub.w	r2, r2, r3
 8013f22:	dc3d      	bgt.n	8013fa0 <_strtod_l+0x758>
 8013f24:	fa01 f303 	lsl.w	r3, r1, r3
 8013f28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	9310      	str	r3, [sp, #64]	@ 0x40
 8013f2e:	18bd      	adds	r5, r7, r2
 8013f30:	9b08      	ldr	r3, [sp, #32]
 8013f32:	4416      	add	r6, r2
 8013f34:	42af      	cmp	r7, r5
 8013f36:	441e      	add	r6, r3
 8013f38:	463b      	mov	r3, r7
 8013f3a:	bfa8      	it	ge
 8013f3c:	462b      	movge	r3, r5
 8013f3e:	42b3      	cmp	r3, r6
 8013f40:	bfa8      	it	ge
 8013f42:	4633      	movge	r3, r6
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	bfc2      	ittt	gt
 8013f48:	1aed      	subgt	r5, r5, r3
 8013f4a:	1af6      	subgt	r6, r6, r3
 8013f4c:	1aff      	subgt	r7, r7, r3
 8013f4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	dd16      	ble.n	8013f82 <_strtod_l+0x73a>
 8013f54:	4641      	mov	r1, r8
 8013f56:	461a      	mov	r2, r3
 8013f58:	9805      	ldr	r0, [sp, #20]
 8013f5a:	f7ff f999 	bl	8013290 <__pow5mult>
 8013f5e:	4680      	mov	r8, r0
 8013f60:	2800      	cmp	r0, #0
 8013f62:	d0ba      	beq.n	8013eda <_strtod_l+0x692>
 8013f64:	4601      	mov	r1, r0
 8013f66:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013f68:	9805      	ldr	r0, [sp, #20]
 8013f6a:	f7ff f8e7 	bl	801313c <__multiply>
 8013f6e:	900e      	str	r0, [sp, #56]	@ 0x38
 8013f70:	2800      	cmp	r0, #0
 8013f72:	f43f ae8a 	beq.w	8013c8a <_strtod_l+0x442>
 8013f76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013f78:	9805      	ldr	r0, [sp, #20]
 8013f7a:	f7fe ffc9 	bl	8012f10 <_Bfree>
 8013f7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f82:	2d00      	cmp	r5, #0
 8013f84:	dc1d      	bgt.n	8013fc2 <_strtod_l+0x77a>
 8013f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	dd23      	ble.n	8013fd4 <_strtod_l+0x78c>
 8013f8c:	4649      	mov	r1, r9
 8013f8e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013f90:	9805      	ldr	r0, [sp, #20]
 8013f92:	f7ff f97d 	bl	8013290 <__pow5mult>
 8013f96:	4681      	mov	r9, r0
 8013f98:	b9e0      	cbnz	r0, 8013fd4 <_strtod_l+0x78c>
 8013f9a:	f04f 0900 	mov.w	r9, #0
 8013f9e:	e674      	b.n	8013c8a <_strtod_l+0x442>
 8013fa0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013fa4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013fa6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013faa:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013fae:	35e2      	adds	r5, #226	@ 0xe2
 8013fb0:	fa01 f305 	lsl.w	r3, r1, r5
 8013fb4:	9310      	str	r3, [sp, #64]	@ 0x40
 8013fb6:	e7ba      	b.n	8013f2e <_strtod_l+0x6e6>
 8013fb8:	2300      	movs	r3, #0
 8013fba:	9310      	str	r3, [sp, #64]	@ 0x40
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013fc0:	e7b5      	b.n	8013f2e <_strtod_l+0x6e6>
 8013fc2:	462a      	mov	r2, r5
 8013fc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013fc6:	9805      	ldr	r0, [sp, #20]
 8013fc8:	f7ff f9bc 	bl	8013344 <__lshift>
 8013fcc:	901a      	str	r0, [sp, #104]	@ 0x68
 8013fce:	2800      	cmp	r0, #0
 8013fd0:	d1d9      	bne.n	8013f86 <_strtod_l+0x73e>
 8013fd2:	e65a      	b.n	8013c8a <_strtod_l+0x442>
 8013fd4:	2e00      	cmp	r6, #0
 8013fd6:	dd07      	ble.n	8013fe8 <_strtod_l+0x7a0>
 8013fd8:	4649      	mov	r1, r9
 8013fda:	4632      	mov	r2, r6
 8013fdc:	9805      	ldr	r0, [sp, #20]
 8013fde:	f7ff f9b1 	bl	8013344 <__lshift>
 8013fe2:	4681      	mov	r9, r0
 8013fe4:	2800      	cmp	r0, #0
 8013fe6:	d0d8      	beq.n	8013f9a <_strtod_l+0x752>
 8013fe8:	2f00      	cmp	r7, #0
 8013fea:	dd08      	ble.n	8013ffe <_strtod_l+0x7b6>
 8013fec:	4641      	mov	r1, r8
 8013fee:	463a      	mov	r2, r7
 8013ff0:	9805      	ldr	r0, [sp, #20]
 8013ff2:	f7ff f9a7 	bl	8013344 <__lshift>
 8013ff6:	4680      	mov	r8, r0
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	f43f ae46 	beq.w	8013c8a <_strtod_l+0x442>
 8013ffe:	464a      	mov	r2, r9
 8014000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014002:	9805      	ldr	r0, [sp, #20]
 8014004:	f7ff fa26 	bl	8013454 <__mdiff>
 8014008:	4604      	mov	r4, r0
 801400a:	2800      	cmp	r0, #0
 801400c:	f43f ae3d 	beq.w	8013c8a <_strtod_l+0x442>
 8014010:	68c3      	ldr	r3, [r0, #12]
 8014012:	4641      	mov	r1, r8
 8014014:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014016:	2300      	movs	r3, #0
 8014018:	60c3      	str	r3, [r0, #12]
 801401a:	f7ff f9ff 	bl	801341c <__mcmp>
 801401e:	2800      	cmp	r0, #0
 8014020:	da46      	bge.n	80140b0 <_strtod_l+0x868>
 8014022:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014024:	ea53 030a 	orrs.w	r3, r3, sl
 8014028:	d16c      	bne.n	8014104 <_strtod_l+0x8bc>
 801402a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801402e:	2b00      	cmp	r3, #0
 8014030:	d168      	bne.n	8014104 <_strtod_l+0x8bc>
 8014032:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014036:	0d1b      	lsrs	r3, r3, #20
 8014038:	051b      	lsls	r3, r3, #20
 801403a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801403e:	d961      	bls.n	8014104 <_strtod_l+0x8bc>
 8014040:	6963      	ldr	r3, [r4, #20]
 8014042:	b913      	cbnz	r3, 801404a <_strtod_l+0x802>
 8014044:	6923      	ldr	r3, [r4, #16]
 8014046:	2b01      	cmp	r3, #1
 8014048:	dd5c      	ble.n	8014104 <_strtod_l+0x8bc>
 801404a:	4621      	mov	r1, r4
 801404c:	2201      	movs	r2, #1
 801404e:	9805      	ldr	r0, [sp, #20]
 8014050:	f7ff f978 	bl	8013344 <__lshift>
 8014054:	4641      	mov	r1, r8
 8014056:	4604      	mov	r4, r0
 8014058:	f7ff f9e0 	bl	801341c <__mcmp>
 801405c:	2800      	cmp	r0, #0
 801405e:	dd51      	ble.n	8014104 <_strtod_l+0x8bc>
 8014060:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014064:	9a08      	ldr	r2, [sp, #32]
 8014066:	0d1b      	lsrs	r3, r3, #20
 8014068:	051b      	lsls	r3, r3, #20
 801406a:	2a00      	cmp	r2, #0
 801406c:	d06b      	beq.n	8014146 <_strtod_l+0x8fe>
 801406e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014072:	d868      	bhi.n	8014146 <_strtod_l+0x8fe>
 8014074:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8014078:	f67f ae9d 	bls.w	8013db6 <_strtod_l+0x56e>
 801407c:	4b0a      	ldr	r3, [pc, #40]	@ (80140a8 <_strtod_l+0x860>)
 801407e:	4650      	mov	r0, sl
 8014080:	4659      	mov	r1, fp
 8014082:	2200      	movs	r2, #0
 8014084:	f7ec fabc 	bl	8000600 <__aeabi_dmul>
 8014088:	4b08      	ldr	r3, [pc, #32]	@ (80140ac <_strtod_l+0x864>)
 801408a:	4682      	mov	sl, r0
 801408c:	468b      	mov	fp, r1
 801408e:	400b      	ands	r3, r1
 8014090:	2b00      	cmp	r3, #0
 8014092:	f47f ae05 	bne.w	8013ca0 <_strtod_l+0x458>
 8014096:	2322      	movs	r3, #34	@ 0x22
 8014098:	9a05      	ldr	r2, [sp, #20]
 801409a:	6013      	str	r3, [r2, #0]
 801409c:	e600      	b.n	8013ca0 <_strtod_l+0x458>
 801409e:	bf00      	nop
 80140a0:	08015b98 	.word	0x08015b98
 80140a4:	fffffc02 	.word	0xfffffc02
 80140a8:	39500000 	.word	0x39500000
 80140ac:	7ff00000 	.word	0x7ff00000
 80140b0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80140b4:	d165      	bne.n	8014182 <_strtod_l+0x93a>
 80140b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80140b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80140bc:	b35a      	cbz	r2, 8014116 <_strtod_l+0x8ce>
 80140be:	4a9e      	ldr	r2, [pc, #632]	@ (8014338 <_strtod_l+0xaf0>)
 80140c0:	4293      	cmp	r3, r2
 80140c2:	d12b      	bne.n	801411c <_strtod_l+0x8d4>
 80140c4:	9b08      	ldr	r3, [sp, #32]
 80140c6:	4651      	mov	r1, sl
 80140c8:	b303      	cbz	r3, 801410c <_strtod_l+0x8c4>
 80140ca:	465a      	mov	r2, fp
 80140cc:	4b9b      	ldr	r3, [pc, #620]	@ (801433c <_strtod_l+0xaf4>)
 80140ce:	4013      	ands	r3, r2
 80140d0:	f04f 32ff 	mov.w	r2, #4294967295
 80140d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80140d8:	d81b      	bhi.n	8014112 <_strtod_l+0x8ca>
 80140da:	0d1b      	lsrs	r3, r3, #20
 80140dc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80140e0:	fa02 f303 	lsl.w	r3, r2, r3
 80140e4:	4299      	cmp	r1, r3
 80140e6:	d119      	bne.n	801411c <_strtod_l+0x8d4>
 80140e8:	4b95      	ldr	r3, [pc, #596]	@ (8014340 <_strtod_l+0xaf8>)
 80140ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d102      	bne.n	80140f6 <_strtod_l+0x8ae>
 80140f0:	3101      	adds	r1, #1
 80140f2:	f43f adca 	beq.w	8013c8a <_strtod_l+0x442>
 80140f6:	4b91      	ldr	r3, [pc, #580]	@ (801433c <_strtod_l+0xaf4>)
 80140f8:	f04f 0a00 	mov.w	sl, #0
 80140fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80140fe:	401a      	ands	r2, r3
 8014100:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8014104:	9b08      	ldr	r3, [sp, #32]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d1b8      	bne.n	801407c <_strtod_l+0x834>
 801410a:	e5c9      	b.n	8013ca0 <_strtod_l+0x458>
 801410c:	f04f 33ff 	mov.w	r3, #4294967295
 8014110:	e7e8      	b.n	80140e4 <_strtod_l+0x89c>
 8014112:	4613      	mov	r3, r2
 8014114:	e7e6      	b.n	80140e4 <_strtod_l+0x89c>
 8014116:	ea53 030a 	orrs.w	r3, r3, sl
 801411a:	d0a1      	beq.n	8014060 <_strtod_l+0x818>
 801411c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801411e:	b1db      	cbz	r3, 8014158 <_strtod_l+0x910>
 8014120:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014122:	4213      	tst	r3, r2
 8014124:	d0ee      	beq.n	8014104 <_strtod_l+0x8bc>
 8014126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014128:	4650      	mov	r0, sl
 801412a:	9a08      	ldr	r2, [sp, #32]
 801412c:	4659      	mov	r1, fp
 801412e:	b1bb      	cbz	r3, 8014160 <_strtod_l+0x918>
 8014130:	f7ff fb6a 	bl	8013808 <sulp>
 8014134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014138:	ec53 2b10 	vmov	r2, r3, d0
 801413c:	f7ec f8aa 	bl	8000294 <__adddf3>
 8014140:	4682      	mov	sl, r0
 8014142:	468b      	mov	fp, r1
 8014144:	e7de      	b.n	8014104 <_strtod_l+0x8bc>
 8014146:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801414a:	f04f 3aff 	mov.w	sl, #4294967295
 801414e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014152:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014156:	e7d5      	b.n	8014104 <_strtod_l+0x8bc>
 8014158:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801415a:	ea13 0f0a 	tst.w	r3, sl
 801415e:	e7e1      	b.n	8014124 <_strtod_l+0x8dc>
 8014160:	f7ff fb52 	bl	8013808 <sulp>
 8014164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014168:	ec53 2b10 	vmov	r2, r3, d0
 801416c:	f7ec f890 	bl	8000290 <__aeabi_dsub>
 8014170:	2200      	movs	r2, #0
 8014172:	2300      	movs	r3, #0
 8014174:	4682      	mov	sl, r0
 8014176:	468b      	mov	fp, r1
 8014178:	f7ec fcaa 	bl	8000ad0 <__aeabi_dcmpeq>
 801417c:	2800      	cmp	r0, #0
 801417e:	d0c1      	beq.n	8014104 <_strtod_l+0x8bc>
 8014180:	e619      	b.n	8013db6 <_strtod_l+0x56e>
 8014182:	4641      	mov	r1, r8
 8014184:	4620      	mov	r0, r4
 8014186:	f7ff fac9 	bl	801371c <__ratio>
 801418a:	2200      	movs	r2, #0
 801418c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014190:	ec57 6b10 	vmov	r6, r7, d0
 8014194:	4630      	mov	r0, r6
 8014196:	4639      	mov	r1, r7
 8014198:	f7ec fcae 	bl	8000af8 <__aeabi_dcmple>
 801419c:	2800      	cmp	r0, #0
 801419e:	d06f      	beq.n	8014280 <_strtod_l+0xa38>
 80141a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d17a      	bne.n	801429c <_strtod_l+0xa54>
 80141a6:	f1ba 0f00 	cmp.w	sl, #0
 80141aa:	d158      	bne.n	801425e <_strtod_l+0xa16>
 80141ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d15a      	bne.n	801426c <_strtod_l+0xa24>
 80141b6:	2200      	movs	r2, #0
 80141b8:	4b62      	ldr	r3, [pc, #392]	@ (8014344 <_strtod_l+0xafc>)
 80141ba:	4630      	mov	r0, r6
 80141bc:	4639      	mov	r1, r7
 80141be:	f7ec fc91 	bl	8000ae4 <__aeabi_dcmplt>
 80141c2:	2800      	cmp	r0, #0
 80141c4:	d159      	bne.n	801427a <_strtod_l+0xa32>
 80141c6:	4630      	mov	r0, r6
 80141c8:	4639      	mov	r1, r7
 80141ca:	2200      	movs	r2, #0
 80141cc:	4b5e      	ldr	r3, [pc, #376]	@ (8014348 <_strtod_l+0xb00>)
 80141ce:	f7ec fa17 	bl	8000600 <__aeabi_dmul>
 80141d2:	4606      	mov	r6, r0
 80141d4:	460f      	mov	r7, r1
 80141d6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80141da:	9606      	str	r6, [sp, #24]
 80141dc:	9307      	str	r3, [sp, #28]
 80141de:	4d57      	ldr	r5, [pc, #348]	@ (801433c <_strtod_l+0xaf4>)
 80141e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80141e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80141e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141ea:	401d      	ands	r5, r3
 80141ec:	4b57      	ldr	r3, [pc, #348]	@ (801434c <_strtod_l+0xb04>)
 80141ee:	429d      	cmp	r5, r3
 80141f0:	f040 80b0 	bne.w	8014354 <_strtod_l+0xb0c>
 80141f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141f6:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80141fa:	ec4b ab10 	vmov	d0, sl, fp
 80141fe:	f7ff f9c1 	bl	8013584 <__ulp>
 8014202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014206:	ec51 0b10 	vmov	r0, r1, d0
 801420a:	f7ec f9f9 	bl	8000600 <__aeabi_dmul>
 801420e:	4652      	mov	r2, sl
 8014210:	465b      	mov	r3, fp
 8014212:	f7ec f83f 	bl	8000294 <__adddf3>
 8014216:	460b      	mov	r3, r1
 8014218:	4948      	ldr	r1, [pc, #288]	@ (801433c <_strtod_l+0xaf4>)
 801421a:	4682      	mov	sl, r0
 801421c:	4a4c      	ldr	r2, [pc, #304]	@ (8014350 <_strtod_l+0xb08>)
 801421e:	4019      	ands	r1, r3
 8014220:	4291      	cmp	r1, r2
 8014222:	d942      	bls.n	80142aa <_strtod_l+0xa62>
 8014224:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014226:	4b46      	ldr	r3, [pc, #280]	@ (8014340 <_strtod_l+0xaf8>)
 8014228:	429a      	cmp	r2, r3
 801422a:	d103      	bne.n	8014234 <_strtod_l+0x9ec>
 801422c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801422e:	3301      	adds	r3, #1
 8014230:	f43f ad2b 	beq.w	8013c8a <_strtod_l+0x442>
 8014234:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8014340 <_strtod_l+0xaf8>
 8014238:	f04f 3aff 	mov.w	sl, #4294967295
 801423c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801423e:	9805      	ldr	r0, [sp, #20]
 8014240:	f7fe fe66 	bl	8012f10 <_Bfree>
 8014244:	4649      	mov	r1, r9
 8014246:	9805      	ldr	r0, [sp, #20]
 8014248:	f7fe fe62 	bl	8012f10 <_Bfree>
 801424c:	4641      	mov	r1, r8
 801424e:	9805      	ldr	r0, [sp, #20]
 8014250:	f7fe fe5e 	bl	8012f10 <_Bfree>
 8014254:	4621      	mov	r1, r4
 8014256:	9805      	ldr	r0, [sp, #20]
 8014258:	f7fe fe5a 	bl	8012f10 <_Bfree>
 801425c:	e618      	b.n	8013e90 <_strtod_l+0x648>
 801425e:	f1ba 0f01 	cmp.w	sl, #1
 8014262:	d103      	bne.n	801426c <_strtod_l+0xa24>
 8014264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014266:	2b00      	cmp	r3, #0
 8014268:	f43f ada5 	beq.w	8013db6 <_strtod_l+0x56e>
 801426c:	2600      	movs	r6, #0
 801426e:	4f35      	ldr	r7, [pc, #212]	@ (8014344 <_strtod_l+0xafc>)
 8014270:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8014318 <_strtod_l+0xad0>
 8014274:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014278:	e7b1      	b.n	80141de <_strtod_l+0x996>
 801427a:	2600      	movs	r6, #0
 801427c:	4f32      	ldr	r7, [pc, #200]	@ (8014348 <_strtod_l+0xb00>)
 801427e:	e7aa      	b.n	80141d6 <_strtod_l+0x98e>
 8014280:	4b31      	ldr	r3, [pc, #196]	@ (8014348 <_strtod_l+0xb00>)
 8014282:	4630      	mov	r0, r6
 8014284:	4639      	mov	r1, r7
 8014286:	2200      	movs	r2, #0
 8014288:	f7ec f9ba 	bl	8000600 <__aeabi_dmul>
 801428c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801428e:	4606      	mov	r6, r0
 8014290:	460f      	mov	r7, r1
 8014292:	2b00      	cmp	r3, #0
 8014294:	d09f      	beq.n	80141d6 <_strtod_l+0x98e>
 8014296:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801429a:	e7a0      	b.n	80141de <_strtod_l+0x996>
 801429c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8014320 <_strtod_l+0xad8>
 80142a0:	ec57 6b17 	vmov	r6, r7, d7
 80142a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80142a8:	e799      	b.n	80141de <_strtod_l+0x996>
 80142aa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80142ae:	9b08      	ldr	r3, [sp, #32]
 80142b0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d1c1      	bne.n	801423c <_strtod_l+0x9f4>
 80142b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80142bc:	0d1b      	lsrs	r3, r3, #20
 80142be:	051b      	lsls	r3, r3, #20
 80142c0:	429d      	cmp	r5, r3
 80142c2:	d1bb      	bne.n	801423c <_strtod_l+0x9f4>
 80142c4:	4630      	mov	r0, r6
 80142c6:	4639      	mov	r1, r7
 80142c8:	f7ec fcfa 	bl	8000cc0 <__aeabi_d2lz>
 80142cc:	f7ec f96a 	bl	80005a4 <__aeabi_l2d>
 80142d0:	4602      	mov	r2, r0
 80142d2:	460b      	mov	r3, r1
 80142d4:	4630      	mov	r0, r6
 80142d6:	4639      	mov	r1, r7
 80142d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80142dc:	f7eb ffd8 	bl	8000290 <__aeabi_dsub>
 80142e0:	460b      	mov	r3, r1
 80142e2:	4602      	mov	r2, r0
 80142e4:	ea46 060a 	orr.w	r6, r6, sl
 80142e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80142ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142ee:	431e      	orrs	r6, r3
 80142f0:	d06d      	beq.n	80143ce <_strtod_l+0xb86>
 80142f2:	a30d      	add	r3, pc, #52	@ (adr r3, 8014328 <_strtod_l+0xae0>)
 80142f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f8:	f7ec fbf4 	bl	8000ae4 <__aeabi_dcmplt>
 80142fc:	2800      	cmp	r0, #0
 80142fe:	f47f accf 	bne.w	8013ca0 <_strtod_l+0x458>
 8014302:	a30b      	add	r3, pc, #44	@ (adr r3, 8014330 <_strtod_l+0xae8>)
 8014304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801430c:	f7ec fc08 	bl	8000b20 <__aeabi_dcmpgt>
 8014310:	2800      	cmp	r0, #0
 8014312:	d093      	beq.n	801423c <_strtod_l+0x9f4>
 8014314:	e4c4      	b.n	8013ca0 <_strtod_l+0x458>
 8014316:	bf00      	nop
 8014318:	00000000 	.word	0x00000000
 801431c:	bff00000 	.word	0xbff00000
 8014320:	00000000 	.word	0x00000000
 8014324:	3ff00000 	.word	0x3ff00000
 8014328:	94a03595 	.word	0x94a03595
 801432c:	3fdfffff 	.word	0x3fdfffff
 8014330:	35afe535 	.word	0x35afe535
 8014334:	3fe00000 	.word	0x3fe00000
 8014338:	000fffff 	.word	0x000fffff
 801433c:	7ff00000 	.word	0x7ff00000
 8014340:	7fefffff 	.word	0x7fefffff
 8014344:	3ff00000 	.word	0x3ff00000
 8014348:	3fe00000 	.word	0x3fe00000
 801434c:	7fe00000 	.word	0x7fe00000
 8014350:	7c9fffff 	.word	0x7c9fffff
 8014354:	9b08      	ldr	r3, [sp, #32]
 8014356:	b323      	cbz	r3, 80143a2 <_strtod_l+0xb5a>
 8014358:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801435c:	d821      	bhi.n	80143a2 <_strtod_l+0xb5a>
 801435e:	4630      	mov	r0, r6
 8014360:	4639      	mov	r1, r7
 8014362:	a327      	add	r3, pc, #156	@ (adr r3, 8014400 <_strtod_l+0xbb8>)
 8014364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014368:	f7ec fbc6 	bl	8000af8 <__aeabi_dcmple>
 801436c:	b1a0      	cbz	r0, 8014398 <_strtod_l+0xb50>
 801436e:	4639      	mov	r1, r7
 8014370:	4630      	mov	r0, r6
 8014372:	f7ec fc1d 	bl	8000bb0 <__aeabi_d2uiz>
 8014376:	2801      	cmp	r0, #1
 8014378:	bf38      	it	cc
 801437a:	2001      	movcc	r0, #1
 801437c:	f7ec f8c6 	bl	800050c <__aeabi_ui2d>
 8014380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014382:	4606      	mov	r6, r0
 8014384:	460f      	mov	r7, r1
 8014386:	b9fb      	cbnz	r3, 80143c8 <_strtod_l+0xb80>
 8014388:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801438c:	9014      	str	r0, [sp, #80]	@ 0x50
 801438e:	9315      	str	r3, [sp, #84]	@ 0x54
 8014390:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8014394:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014398:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801439a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801439e:	1b5b      	subs	r3, r3, r5
 80143a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80143a2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80143a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80143aa:	f7ff f8eb 	bl	8013584 <__ulp>
 80143ae:	4650      	mov	r0, sl
 80143b0:	4659      	mov	r1, fp
 80143b2:	ec53 2b10 	vmov	r2, r3, d0
 80143b6:	f7ec f923 	bl	8000600 <__aeabi_dmul>
 80143ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80143be:	f7eb ff69 	bl	8000294 <__adddf3>
 80143c2:	4682      	mov	sl, r0
 80143c4:	468b      	mov	fp, r1
 80143c6:	e772      	b.n	80142ae <_strtod_l+0xa66>
 80143c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80143cc:	e7e0      	b.n	8014390 <_strtod_l+0xb48>
 80143ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8014408 <_strtod_l+0xbc0>)
 80143d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d4:	f7ec fb86 	bl	8000ae4 <__aeabi_dcmplt>
 80143d8:	e79a      	b.n	8014310 <_strtod_l+0xac8>
 80143da:	2300      	movs	r3, #0
 80143dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80143de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80143e0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80143e2:	6013      	str	r3, [r2, #0]
 80143e4:	f7ff ba6d 	b.w	80138c2 <_strtod_l+0x7a>
 80143e8:	2a65      	cmp	r2, #101	@ 0x65
 80143ea:	f43f ab67 	beq.w	8013abc <_strtod_l+0x274>
 80143ee:	2a45      	cmp	r2, #69	@ 0x45
 80143f0:	f43f ab64 	beq.w	8013abc <_strtod_l+0x274>
 80143f4:	2301      	movs	r3, #1
 80143f6:	f7ff bba0 	b.w	8013b3a <_strtod_l+0x2f2>
 80143fa:	bf00      	nop
 80143fc:	f3af 8000 	nop.w
 8014400:	ffc00000 	.word	0xffc00000
 8014404:	41dfffff 	.word	0x41dfffff
 8014408:	94a03595 	.word	0x94a03595
 801440c:	3fcfffff 	.word	0x3fcfffff

08014410 <_strtod_r>:
 8014410:	4b01      	ldr	r3, [pc, #4]	@ (8014418 <_strtod_r+0x8>)
 8014412:	f7ff ba19 	b.w	8013848 <_strtod_l>
 8014416:	bf00      	nop
 8014418:	200001cc 	.word	0x200001cc

0801441c <_strtol_l.constprop.0>:
 801441c:	2b24      	cmp	r3, #36	@ 0x24
 801441e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014422:	4686      	mov	lr, r0
 8014424:	4690      	mov	r8, r2
 8014426:	d801      	bhi.n	801442c <_strtol_l.constprop.0+0x10>
 8014428:	2b01      	cmp	r3, #1
 801442a:	d106      	bne.n	801443a <_strtol_l.constprop.0+0x1e>
 801442c:	f7fd fd9c 	bl	8011f68 <__errno>
 8014430:	2316      	movs	r3, #22
 8014432:	6003      	str	r3, [r0, #0]
 8014434:	2000      	movs	r0, #0
 8014436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801443a:	460d      	mov	r5, r1
 801443c:	4833      	ldr	r0, [pc, #204]	@ (801450c <_strtol_l.constprop.0+0xf0>)
 801443e:	462a      	mov	r2, r5
 8014440:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014444:	5d06      	ldrb	r6, [r0, r4]
 8014446:	f016 0608 	ands.w	r6, r6, #8
 801444a:	d1f8      	bne.n	801443e <_strtol_l.constprop.0+0x22>
 801444c:	2c2d      	cmp	r4, #45	@ 0x2d
 801444e:	d12d      	bne.n	80144ac <_strtol_l.constprop.0+0x90>
 8014450:	782c      	ldrb	r4, [r5, #0]
 8014452:	2601      	movs	r6, #1
 8014454:	1c95      	adds	r5, r2, #2
 8014456:	f033 0210 	bics.w	r2, r3, #16
 801445a:	d109      	bne.n	8014470 <_strtol_l.constprop.0+0x54>
 801445c:	2c30      	cmp	r4, #48	@ 0x30
 801445e:	d12a      	bne.n	80144b6 <_strtol_l.constprop.0+0x9a>
 8014460:	782a      	ldrb	r2, [r5, #0]
 8014462:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014466:	2a58      	cmp	r2, #88	@ 0x58
 8014468:	d125      	bne.n	80144b6 <_strtol_l.constprop.0+0x9a>
 801446a:	786c      	ldrb	r4, [r5, #1]
 801446c:	2310      	movs	r3, #16
 801446e:	3502      	adds	r5, #2
 8014470:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014474:	2200      	movs	r2, #0
 8014476:	f10c 3cff 	add.w	ip, ip, #4294967295
 801447a:	4610      	mov	r0, r2
 801447c:	fbbc f9f3 	udiv	r9, ip, r3
 8014480:	fb03 ca19 	mls	sl, r3, r9, ip
 8014484:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014488:	2f09      	cmp	r7, #9
 801448a:	d81b      	bhi.n	80144c4 <_strtol_l.constprop.0+0xa8>
 801448c:	463c      	mov	r4, r7
 801448e:	42a3      	cmp	r3, r4
 8014490:	dd27      	ble.n	80144e2 <_strtol_l.constprop.0+0xc6>
 8014492:	1c57      	adds	r7, r2, #1
 8014494:	d007      	beq.n	80144a6 <_strtol_l.constprop.0+0x8a>
 8014496:	4581      	cmp	r9, r0
 8014498:	d320      	bcc.n	80144dc <_strtol_l.constprop.0+0xc0>
 801449a:	d101      	bne.n	80144a0 <_strtol_l.constprop.0+0x84>
 801449c:	45a2      	cmp	sl, r4
 801449e:	db1d      	blt.n	80144dc <_strtol_l.constprop.0+0xc0>
 80144a0:	fb00 4003 	mla	r0, r0, r3, r4
 80144a4:	2201      	movs	r2, #1
 80144a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144aa:	e7eb      	b.n	8014484 <_strtol_l.constprop.0+0x68>
 80144ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80144ae:	bf04      	itt	eq
 80144b0:	782c      	ldrbeq	r4, [r5, #0]
 80144b2:	1c95      	addeq	r5, r2, #2
 80144b4:	e7cf      	b.n	8014456 <_strtol_l.constprop.0+0x3a>
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d1da      	bne.n	8014470 <_strtol_l.constprop.0+0x54>
 80144ba:	2c30      	cmp	r4, #48	@ 0x30
 80144bc:	bf0c      	ite	eq
 80144be:	2308      	moveq	r3, #8
 80144c0:	230a      	movne	r3, #10
 80144c2:	e7d5      	b.n	8014470 <_strtol_l.constprop.0+0x54>
 80144c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80144c8:	2f19      	cmp	r7, #25
 80144ca:	d801      	bhi.n	80144d0 <_strtol_l.constprop.0+0xb4>
 80144cc:	3c37      	subs	r4, #55	@ 0x37
 80144ce:	e7de      	b.n	801448e <_strtol_l.constprop.0+0x72>
 80144d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80144d4:	2f19      	cmp	r7, #25
 80144d6:	d804      	bhi.n	80144e2 <_strtol_l.constprop.0+0xc6>
 80144d8:	3c57      	subs	r4, #87	@ 0x57
 80144da:	e7d8      	b.n	801448e <_strtol_l.constprop.0+0x72>
 80144dc:	f04f 32ff 	mov.w	r2, #4294967295
 80144e0:	e7e1      	b.n	80144a6 <_strtol_l.constprop.0+0x8a>
 80144e2:	1c53      	adds	r3, r2, #1
 80144e4:	d108      	bne.n	80144f8 <_strtol_l.constprop.0+0xdc>
 80144e6:	2322      	movs	r3, #34	@ 0x22
 80144e8:	4660      	mov	r0, ip
 80144ea:	f8ce 3000 	str.w	r3, [lr]
 80144ee:	f1b8 0f00 	cmp.w	r8, #0
 80144f2:	d0a0      	beq.n	8014436 <_strtol_l.constprop.0+0x1a>
 80144f4:	1e69      	subs	r1, r5, #1
 80144f6:	e006      	b.n	8014506 <_strtol_l.constprop.0+0xea>
 80144f8:	b106      	cbz	r6, 80144fc <_strtol_l.constprop.0+0xe0>
 80144fa:	4240      	negs	r0, r0
 80144fc:	f1b8 0f00 	cmp.w	r8, #0
 8014500:	d099      	beq.n	8014436 <_strtol_l.constprop.0+0x1a>
 8014502:	2a00      	cmp	r2, #0
 8014504:	d1f6      	bne.n	80144f4 <_strtol_l.constprop.0+0xd8>
 8014506:	f8c8 1000 	str.w	r1, [r8]
 801450a:	e794      	b.n	8014436 <_strtol_l.constprop.0+0x1a>
 801450c:	08015bc1 	.word	0x08015bc1

08014510 <_strtol_r>:
 8014510:	f7ff bf84 	b.w	801441c <_strtol_l.constprop.0>

08014514 <__ssputs_r>:
 8014514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014518:	461f      	mov	r7, r3
 801451a:	688e      	ldr	r6, [r1, #8]
 801451c:	4682      	mov	sl, r0
 801451e:	460c      	mov	r4, r1
 8014520:	42be      	cmp	r6, r7
 8014522:	4690      	mov	r8, r2
 8014524:	680b      	ldr	r3, [r1, #0]
 8014526:	d82d      	bhi.n	8014584 <__ssputs_r+0x70>
 8014528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801452c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014530:	d026      	beq.n	8014580 <__ssputs_r+0x6c>
 8014532:	6965      	ldr	r5, [r4, #20]
 8014534:	6909      	ldr	r1, [r1, #16]
 8014536:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801453a:	eba3 0901 	sub.w	r9, r3, r1
 801453e:	1c7b      	adds	r3, r7, #1
 8014540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014544:	444b      	add	r3, r9
 8014546:	106d      	asrs	r5, r5, #1
 8014548:	429d      	cmp	r5, r3
 801454a:	bf38      	it	cc
 801454c:	461d      	movcc	r5, r3
 801454e:	0553      	lsls	r3, r2, #21
 8014550:	d527      	bpl.n	80145a2 <__ssputs_r+0x8e>
 8014552:	4629      	mov	r1, r5
 8014554:	f7fe fc10 	bl	8012d78 <_malloc_r>
 8014558:	4606      	mov	r6, r0
 801455a:	b360      	cbz	r0, 80145b6 <__ssputs_r+0xa2>
 801455c:	464a      	mov	r2, r9
 801455e:	6921      	ldr	r1, [r4, #16]
 8014560:	f000 fbde 	bl	8014d20 <memcpy>
 8014564:	89a3      	ldrh	r3, [r4, #12]
 8014566:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801456a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801456e:	81a3      	strh	r3, [r4, #12]
 8014570:	6126      	str	r6, [r4, #16]
 8014572:	444e      	add	r6, r9
 8014574:	6165      	str	r5, [r4, #20]
 8014576:	eba5 0509 	sub.w	r5, r5, r9
 801457a:	6026      	str	r6, [r4, #0]
 801457c:	463e      	mov	r6, r7
 801457e:	60a5      	str	r5, [r4, #8]
 8014580:	42be      	cmp	r6, r7
 8014582:	d900      	bls.n	8014586 <__ssputs_r+0x72>
 8014584:	463e      	mov	r6, r7
 8014586:	4632      	mov	r2, r6
 8014588:	4641      	mov	r1, r8
 801458a:	6820      	ldr	r0, [r4, #0]
 801458c:	f000 fb69 	bl	8014c62 <memmove>
 8014590:	68a3      	ldr	r3, [r4, #8]
 8014592:	2000      	movs	r0, #0
 8014594:	1b9b      	subs	r3, r3, r6
 8014596:	60a3      	str	r3, [r4, #8]
 8014598:	6823      	ldr	r3, [r4, #0]
 801459a:	4433      	add	r3, r6
 801459c:	6023      	str	r3, [r4, #0]
 801459e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145a2:	462a      	mov	r2, r5
 80145a4:	f000 ff4d 	bl	8015442 <_realloc_r>
 80145a8:	4606      	mov	r6, r0
 80145aa:	2800      	cmp	r0, #0
 80145ac:	d1e0      	bne.n	8014570 <__ssputs_r+0x5c>
 80145ae:	6921      	ldr	r1, [r4, #16]
 80145b0:	4650      	mov	r0, sl
 80145b2:	f7fe fb6d 	bl	8012c90 <_free_r>
 80145b6:	230c      	movs	r3, #12
 80145b8:	f04f 30ff 	mov.w	r0, #4294967295
 80145bc:	f8ca 3000 	str.w	r3, [sl]
 80145c0:	89a3      	ldrh	r3, [r4, #12]
 80145c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145c6:	81a3      	strh	r3, [r4, #12]
 80145c8:	e7e9      	b.n	801459e <__ssputs_r+0x8a>
	...

080145cc <_svfiprintf_r>:
 80145cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d0:	4698      	mov	r8, r3
 80145d2:	898b      	ldrh	r3, [r1, #12]
 80145d4:	b09d      	sub	sp, #116	@ 0x74
 80145d6:	4607      	mov	r7, r0
 80145d8:	061b      	lsls	r3, r3, #24
 80145da:	460d      	mov	r5, r1
 80145dc:	4614      	mov	r4, r2
 80145de:	d510      	bpl.n	8014602 <_svfiprintf_r+0x36>
 80145e0:	690b      	ldr	r3, [r1, #16]
 80145e2:	b973      	cbnz	r3, 8014602 <_svfiprintf_r+0x36>
 80145e4:	2140      	movs	r1, #64	@ 0x40
 80145e6:	f7fe fbc7 	bl	8012d78 <_malloc_r>
 80145ea:	6028      	str	r0, [r5, #0]
 80145ec:	6128      	str	r0, [r5, #16]
 80145ee:	b930      	cbnz	r0, 80145fe <_svfiprintf_r+0x32>
 80145f0:	230c      	movs	r3, #12
 80145f2:	603b      	str	r3, [r7, #0]
 80145f4:	f04f 30ff 	mov.w	r0, #4294967295
 80145f8:	b01d      	add	sp, #116	@ 0x74
 80145fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145fe:	2340      	movs	r3, #64	@ 0x40
 8014600:	616b      	str	r3, [r5, #20]
 8014602:	2300      	movs	r3, #0
 8014604:	f8cd 800c 	str.w	r8, [sp, #12]
 8014608:	f04f 0901 	mov.w	r9, #1
 801460c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80147b0 <_svfiprintf_r+0x1e4>
 8014610:	9309      	str	r3, [sp, #36]	@ 0x24
 8014612:	2320      	movs	r3, #32
 8014614:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014618:	2330      	movs	r3, #48	@ 0x30
 801461a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801461e:	4623      	mov	r3, r4
 8014620:	469a      	mov	sl, r3
 8014622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014626:	b10a      	cbz	r2, 801462c <_svfiprintf_r+0x60>
 8014628:	2a25      	cmp	r2, #37	@ 0x25
 801462a:	d1f9      	bne.n	8014620 <_svfiprintf_r+0x54>
 801462c:	ebba 0b04 	subs.w	fp, sl, r4
 8014630:	d00b      	beq.n	801464a <_svfiprintf_r+0x7e>
 8014632:	465b      	mov	r3, fp
 8014634:	4622      	mov	r2, r4
 8014636:	4629      	mov	r1, r5
 8014638:	4638      	mov	r0, r7
 801463a:	f7ff ff6b 	bl	8014514 <__ssputs_r>
 801463e:	3001      	adds	r0, #1
 8014640:	f000 80a7 	beq.w	8014792 <_svfiprintf_r+0x1c6>
 8014644:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014646:	445a      	add	r2, fp
 8014648:	9209      	str	r2, [sp, #36]	@ 0x24
 801464a:	f89a 3000 	ldrb.w	r3, [sl]
 801464e:	2b00      	cmp	r3, #0
 8014650:	f000 809f 	beq.w	8014792 <_svfiprintf_r+0x1c6>
 8014654:	2300      	movs	r3, #0
 8014656:	f04f 32ff 	mov.w	r2, #4294967295
 801465a:	f10a 0a01 	add.w	sl, sl, #1
 801465e:	9304      	str	r3, [sp, #16]
 8014660:	9307      	str	r3, [sp, #28]
 8014662:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014666:	931a      	str	r3, [sp, #104]	@ 0x68
 8014668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801466c:	4654      	mov	r4, sl
 801466e:	2205      	movs	r2, #5
 8014670:	484f      	ldr	r0, [pc, #316]	@ (80147b0 <_svfiprintf_r+0x1e4>)
 8014672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014676:	f7fd fca4 	bl	8011fc2 <memchr>
 801467a:	9a04      	ldr	r2, [sp, #16]
 801467c:	b9d8      	cbnz	r0, 80146b6 <_svfiprintf_r+0xea>
 801467e:	06d0      	lsls	r0, r2, #27
 8014680:	bf44      	itt	mi
 8014682:	2320      	movmi	r3, #32
 8014684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014688:	0711      	lsls	r1, r2, #28
 801468a:	bf44      	itt	mi
 801468c:	232b      	movmi	r3, #43	@ 0x2b
 801468e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014692:	f89a 3000 	ldrb.w	r3, [sl]
 8014696:	2b2a      	cmp	r3, #42	@ 0x2a
 8014698:	d015      	beq.n	80146c6 <_svfiprintf_r+0xfa>
 801469a:	9a07      	ldr	r2, [sp, #28]
 801469c:	4654      	mov	r4, sl
 801469e:	2000      	movs	r0, #0
 80146a0:	f04f 0c0a 	mov.w	ip, #10
 80146a4:	4621      	mov	r1, r4
 80146a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146aa:	3b30      	subs	r3, #48	@ 0x30
 80146ac:	2b09      	cmp	r3, #9
 80146ae:	d94b      	bls.n	8014748 <_svfiprintf_r+0x17c>
 80146b0:	b1b0      	cbz	r0, 80146e0 <_svfiprintf_r+0x114>
 80146b2:	9207      	str	r2, [sp, #28]
 80146b4:	e014      	b.n	80146e0 <_svfiprintf_r+0x114>
 80146b6:	eba0 0308 	sub.w	r3, r0, r8
 80146ba:	46a2      	mov	sl, r4
 80146bc:	fa09 f303 	lsl.w	r3, r9, r3
 80146c0:	4313      	orrs	r3, r2
 80146c2:	9304      	str	r3, [sp, #16]
 80146c4:	e7d2      	b.n	801466c <_svfiprintf_r+0xa0>
 80146c6:	9b03      	ldr	r3, [sp, #12]
 80146c8:	1d19      	adds	r1, r3, #4
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	9103      	str	r1, [sp, #12]
 80146d0:	bfbb      	ittet	lt
 80146d2:	425b      	neglt	r3, r3
 80146d4:	f042 0202 	orrlt.w	r2, r2, #2
 80146d8:	9307      	strge	r3, [sp, #28]
 80146da:	9307      	strlt	r3, [sp, #28]
 80146dc:	bfb8      	it	lt
 80146de:	9204      	strlt	r2, [sp, #16]
 80146e0:	7823      	ldrb	r3, [r4, #0]
 80146e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80146e4:	d10a      	bne.n	80146fc <_svfiprintf_r+0x130>
 80146e6:	7863      	ldrb	r3, [r4, #1]
 80146e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80146ea:	d132      	bne.n	8014752 <_svfiprintf_r+0x186>
 80146ec:	9b03      	ldr	r3, [sp, #12]
 80146ee:	3402      	adds	r4, #2
 80146f0:	1d1a      	adds	r2, r3, #4
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80146f8:	9203      	str	r2, [sp, #12]
 80146fa:	9305      	str	r3, [sp, #20]
 80146fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80147c0 <_svfiprintf_r+0x1f4>
 8014700:	2203      	movs	r2, #3
 8014702:	7821      	ldrb	r1, [r4, #0]
 8014704:	4650      	mov	r0, sl
 8014706:	f7fd fc5c 	bl	8011fc2 <memchr>
 801470a:	b138      	cbz	r0, 801471c <_svfiprintf_r+0x150>
 801470c:	eba0 000a 	sub.w	r0, r0, sl
 8014710:	2240      	movs	r2, #64	@ 0x40
 8014712:	9b04      	ldr	r3, [sp, #16]
 8014714:	3401      	adds	r4, #1
 8014716:	4082      	lsls	r2, r0
 8014718:	4313      	orrs	r3, r2
 801471a:	9304      	str	r3, [sp, #16]
 801471c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014720:	2206      	movs	r2, #6
 8014722:	4824      	ldr	r0, [pc, #144]	@ (80147b4 <_svfiprintf_r+0x1e8>)
 8014724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014728:	f7fd fc4b 	bl	8011fc2 <memchr>
 801472c:	2800      	cmp	r0, #0
 801472e:	d036      	beq.n	801479e <_svfiprintf_r+0x1d2>
 8014730:	4b21      	ldr	r3, [pc, #132]	@ (80147b8 <_svfiprintf_r+0x1ec>)
 8014732:	bb1b      	cbnz	r3, 801477c <_svfiprintf_r+0x1b0>
 8014734:	9b03      	ldr	r3, [sp, #12]
 8014736:	3307      	adds	r3, #7
 8014738:	f023 0307 	bic.w	r3, r3, #7
 801473c:	3308      	adds	r3, #8
 801473e:	9303      	str	r3, [sp, #12]
 8014740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014742:	4433      	add	r3, r6
 8014744:	9309      	str	r3, [sp, #36]	@ 0x24
 8014746:	e76a      	b.n	801461e <_svfiprintf_r+0x52>
 8014748:	fb0c 3202 	mla	r2, ip, r2, r3
 801474c:	460c      	mov	r4, r1
 801474e:	2001      	movs	r0, #1
 8014750:	e7a8      	b.n	80146a4 <_svfiprintf_r+0xd8>
 8014752:	2300      	movs	r3, #0
 8014754:	3401      	adds	r4, #1
 8014756:	f04f 0c0a 	mov.w	ip, #10
 801475a:	4619      	mov	r1, r3
 801475c:	9305      	str	r3, [sp, #20]
 801475e:	4620      	mov	r0, r4
 8014760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014764:	3a30      	subs	r2, #48	@ 0x30
 8014766:	2a09      	cmp	r2, #9
 8014768:	d903      	bls.n	8014772 <_svfiprintf_r+0x1a6>
 801476a:	2b00      	cmp	r3, #0
 801476c:	d0c6      	beq.n	80146fc <_svfiprintf_r+0x130>
 801476e:	9105      	str	r1, [sp, #20]
 8014770:	e7c4      	b.n	80146fc <_svfiprintf_r+0x130>
 8014772:	fb0c 2101 	mla	r1, ip, r1, r2
 8014776:	4604      	mov	r4, r0
 8014778:	2301      	movs	r3, #1
 801477a:	e7f0      	b.n	801475e <_svfiprintf_r+0x192>
 801477c:	ab03      	add	r3, sp, #12
 801477e:	462a      	mov	r2, r5
 8014780:	a904      	add	r1, sp, #16
 8014782:	4638      	mov	r0, r7
 8014784:	9300      	str	r3, [sp, #0]
 8014786:	4b0d      	ldr	r3, [pc, #52]	@ (80147bc <_svfiprintf_r+0x1f0>)
 8014788:	f7fc fba4 	bl	8010ed4 <_printf_float>
 801478c:	1c42      	adds	r2, r0, #1
 801478e:	4606      	mov	r6, r0
 8014790:	d1d6      	bne.n	8014740 <_svfiprintf_r+0x174>
 8014792:	89ab      	ldrh	r3, [r5, #12]
 8014794:	065b      	lsls	r3, r3, #25
 8014796:	f53f af2d 	bmi.w	80145f4 <_svfiprintf_r+0x28>
 801479a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801479c:	e72c      	b.n	80145f8 <_svfiprintf_r+0x2c>
 801479e:	ab03      	add	r3, sp, #12
 80147a0:	462a      	mov	r2, r5
 80147a2:	a904      	add	r1, sp, #16
 80147a4:	4638      	mov	r0, r7
 80147a6:	9300      	str	r3, [sp, #0]
 80147a8:	4b04      	ldr	r3, [pc, #16]	@ (80147bc <_svfiprintf_r+0x1f0>)
 80147aa:	f7fc fe2f 	bl	801140c <_printf_i>
 80147ae:	e7ed      	b.n	801478c <_svfiprintf_r+0x1c0>
 80147b0:	08015cc1 	.word	0x08015cc1
 80147b4:	08015ccb 	.word	0x08015ccb
 80147b8:	08010ed5 	.word	0x08010ed5
 80147bc:	08014515 	.word	0x08014515
 80147c0:	08015cc7 	.word	0x08015cc7

080147c4 <__sfputc_r>:
 80147c4:	6893      	ldr	r3, [r2, #8]
 80147c6:	3b01      	subs	r3, #1
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	6093      	str	r3, [r2, #8]
 80147cc:	b410      	push	{r4}
 80147ce:	da08      	bge.n	80147e2 <__sfputc_r+0x1e>
 80147d0:	6994      	ldr	r4, [r2, #24]
 80147d2:	42a3      	cmp	r3, r4
 80147d4:	db01      	blt.n	80147da <__sfputc_r+0x16>
 80147d6:	290a      	cmp	r1, #10
 80147d8:	d103      	bne.n	80147e2 <__sfputc_r+0x1e>
 80147da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147de:	f7fd badc 	b.w	8011d9a <__swbuf_r>
 80147e2:	6813      	ldr	r3, [r2, #0]
 80147e4:	1c58      	adds	r0, r3, #1
 80147e6:	6010      	str	r0, [r2, #0]
 80147e8:	4608      	mov	r0, r1
 80147ea:	7019      	strb	r1, [r3, #0]
 80147ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147f0:	4770      	bx	lr

080147f2 <__sfputs_r>:
 80147f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f4:	4606      	mov	r6, r0
 80147f6:	460f      	mov	r7, r1
 80147f8:	4614      	mov	r4, r2
 80147fa:	18d5      	adds	r5, r2, r3
 80147fc:	42ac      	cmp	r4, r5
 80147fe:	d101      	bne.n	8014804 <__sfputs_r+0x12>
 8014800:	2000      	movs	r0, #0
 8014802:	e007      	b.n	8014814 <__sfputs_r+0x22>
 8014804:	463a      	mov	r2, r7
 8014806:	f814 1b01 	ldrb.w	r1, [r4], #1
 801480a:	4630      	mov	r0, r6
 801480c:	f7ff ffda 	bl	80147c4 <__sfputc_r>
 8014810:	1c43      	adds	r3, r0, #1
 8014812:	d1f3      	bne.n	80147fc <__sfputs_r+0xa>
 8014814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014818 <_vfiprintf_r>:
 8014818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801481c:	460d      	mov	r5, r1
 801481e:	b09d      	sub	sp, #116	@ 0x74
 8014820:	4614      	mov	r4, r2
 8014822:	4698      	mov	r8, r3
 8014824:	4606      	mov	r6, r0
 8014826:	b118      	cbz	r0, 8014830 <_vfiprintf_r+0x18>
 8014828:	6a03      	ldr	r3, [r0, #32]
 801482a:	b90b      	cbnz	r3, 8014830 <_vfiprintf_r+0x18>
 801482c:	f7fd f9ac 	bl	8011b88 <__sinit>
 8014830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014832:	07d9      	lsls	r1, r3, #31
 8014834:	d405      	bmi.n	8014842 <_vfiprintf_r+0x2a>
 8014836:	89ab      	ldrh	r3, [r5, #12]
 8014838:	059a      	lsls	r2, r3, #22
 801483a:	d402      	bmi.n	8014842 <_vfiprintf_r+0x2a>
 801483c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801483e:	f7fd fbbe 	bl	8011fbe <__retarget_lock_acquire_recursive>
 8014842:	89ab      	ldrh	r3, [r5, #12]
 8014844:	071b      	lsls	r3, r3, #28
 8014846:	d501      	bpl.n	801484c <_vfiprintf_r+0x34>
 8014848:	692b      	ldr	r3, [r5, #16]
 801484a:	b99b      	cbnz	r3, 8014874 <_vfiprintf_r+0x5c>
 801484c:	4629      	mov	r1, r5
 801484e:	4630      	mov	r0, r6
 8014850:	f7fd fae2 	bl	8011e18 <__swsetup_r>
 8014854:	b170      	cbz	r0, 8014874 <_vfiprintf_r+0x5c>
 8014856:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014858:	07dc      	lsls	r4, r3, #31
 801485a:	d504      	bpl.n	8014866 <_vfiprintf_r+0x4e>
 801485c:	f04f 30ff 	mov.w	r0, #4294967295
 8014860:	b01d      	add	sp, #116	@ 0x74
 8014862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014866:	89ab      	ldrh	r3, [r5, #12]
 8014868:	0598      	lsls	r0, r3, #22
 801486a:	d4f7      	bmi.n	801485c <_vfiprintf_r+0x44>
 801486c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801486e:	f7fd fba7 	bl	8011fc0 <__retarget_lock_release_recursive>
 8014872:	e7f3      	b.n	801485c <_vfiprintf_r+0x44>
 8014874:	2300      	movs	r3, #0
 8014876:	f8cd 800c 	str.w	r8, [sp, #12]
 801487a:	f04f 0901 	mov.w	r9, #1
 801487e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8014a34 <_vfiprintf_r+0x21c>
 8014882:	9309      	str	r3, [sp, #36]	@ 0x24
 8014884:	2320      	movs	r3, #32
 8014886:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801488a:	2330      	movs	r3, #48	@ 0x30
 801488c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014890:	4623      	mov	r3, r4
 8014892:	469a      	mov	sl, r3
 8014894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014898:	b10a      	cbz	r2, 801489e <_vfiprintf_r+0x86>
 801489a:	2a25      	cmp	r2, #37	@ 0x25
 801489c:	d1f9      	bne.n	8014892 <_vfiprintf_r+0x7a>
 801489e:	ebba 0b04 	subs.w	fp, sl, r4
 80148a2:	d00b      	beq.n	80148bc <_vfiprintf_r+0xa4>
 80148a4:	465b      	mov	r3, fp
 80148a6:	4622      	mov	r2, r4
 80148a8:	4629      	mov	r1, r5
 80148aa:	4630      	mov	r0, r6
 80148ac:	f7ff ffa1 	bl	80147f2 <__sfputs_r>
 80148b0:	3001      	adds	r0, #1
 80148b2:	f000 80a7 	beq.w	8014a04 <_vfiprintf_r+0x1ec>
 80148b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148b8:	445a      	add	r2, fp
 80148ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80148bc:	f89a 3000 	ldrb.w	r3, [sl]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	f000 809f 	beq.w	8014a04 <_vfiprintf_r+0x1ec>
 80148c6:	2300      	movs	r3, #0
 80148c8:	f04f 32ff 	mov.w	r2, #4294967295
 80148cc:	f10a 0a01 	add.w	sl, sl, #1
 80148d0:	9304      	str	r3, [sp, #16]
 80148d2:	9307      	str	r3, [sp, #28]
 80148d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80148d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80148da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148de:	4654      	mov	r4, sl
 80148e0:	2205      	movs	r2, #5
 80148e2:	4854      	ldr	r0, [pc, #336]	@ (8014a34 <_vfiprintf_r+0x21c>)
 80148e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148e8:	f7fd fb6b 	bl	8011fc2 <memchr>
 80148ec:	9a04      	ldr	r2, [sp, #16]
 80148ee:	b9d8      	cbnz	r0, 8014928 <_vfiprintf_r+0x110>
 80148f0:	06d1      	lsls	r1, r2, #27
 80148f2:	bf44      	itt	mi
 80148f4:	2320      	movmi	r3, #32
 80148f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148fa:	0713      	lsls	r3, r2, #28
 80148fc:	bf44      	itt	mi
 80148fe:	232b      	movmi	r3, #43	@ 0x2b
 8014900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014904:	f89a 3000 	ldrb.w	r3, [sl]
 8014908:	2b2a      	cmp	r3, #42	@ 0x2a
 801490a:	d015      	beq.n	8014938 <_vfiprintf_r+0x120>
 801490c:	9a07      	ldr	r2, [sp, #28]
 801490e:	4654      	mov	r4, sl
 8014910:	2000      	movs	r0, #0
 8014912:	f04f 0c0a 	mov.w	ip, #10
 8014916:	4621      	mov	r1, r4
 8014918:	f811 3b01 	ldrb.w	r3, [r1], #1
 801491c:	3b30      	subs	r3, #48	@ 0x30
 801491e:	2b09      	cmp	r3, #9
 8014920:	d94b      	bls.n	80149ba <_vfiprintf_r+0x1a2>
 8014922:	b1b0      	cbz	r0, 8014952 <_vfiprintf_r+0x13a>
 8014924:	9207      	str	r2, [sp, #28]
 8014926:	e014      	b.n	8014952 <_vfiprintf_r+0x13a>
 8014928:	eba0 0308 	sub.w	r3, r0, r8
 801492c:	46a2      	mov	sl, r4
 801492e:	fa09 f303 	lsl.w	r3, r9, r3
 8014932:	4313      	orrs	r3, r2
 8014934:	9304      	str	r3, [sp, #16]
 8014936:	e7d2      	b.n	80148de <_vfiprintf_r+0xc6>
 8014938:	9b03      	ldr	r3, [sp, #12]
 801493a:	1d19      	adds	r1, r3, #4
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	2b00      	cmp	r3, #0
 8014940:	9103      	str	r1, [sp, #12]
 8014942:	bfbb      	ittet	lt
 8014944:	425b      	neglt	r3, r3
 8014946:	f042 0202 	orrlt.w	r2, r2, #2
 801494a:	9307      	strge	r3, [sp, #28]
 801494c:	9307      	strlt	r3, [sp, #28]
 801494e:	bfb8      	it	lt
 8014950:	9204      	strlt	r2, [sp, #16]
 8014952:	7823      	ldrb	r3, [r4, #0]
 8014954:	2b2e      	cmp	r3, #46	@ 0x2e
 8014956:	d10a      	bne.n	801496e <_vfiprintf_r+0x156>
 8014958:	7863      	ldrb	r3, [r4, #1]
 801495a:	2b2a      	cmp	r3, #42	@ 0x2a
 801495c:	d132      	bne.n	80149c4 <_vfiprintf_r+0x1ac>
 801495e:	9b03      	ldr	r3, [sp, #12]
 8014960:	3402      	adds	r4, #2
 8014962:	1d1a      	adds	r2, r3, #4
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801496a:	9203      	str	r2, [sp, #12]
 801496c:	9305      	str	r3, [sp, #20]
 801496e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014a44 <_vfiprintf_r+0x22c>
 8014972:	2203      	movs	r2, #3
 8014974:	7821      	ldrb	r1, [r4, #0]
 8014976:	4650      	mov	r0, sl
 8014978:	f7fd fb23 	bl	8011fc2 <memchr>
 801497c:	b138      	cbz	r0, 801498e <_vfiprintf_r+0x176>
 801497e:	eba0 000a 	sub.w	r0, r0, sl
 8014982:	2240      	movs	r2, #64	@ 0x40
 8014984:	9b04      	ldr	r3, [sp, #16]
 8014986:	3401      	adds	r4, #1
 8014988:	4082      	lsls	r2, r0
 801498a:	4313      	orrs	r3, r2
 801498c:	9304      	str	r3, [sp, #16]
 801498e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014992:	2206      	movs	r2, #6
 8014994:	4828      	ldr	r0, [pc, #160]	@ (8014a38 <_vfiprintf_r+0x220>)
 8014996:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801499a:	f7fd fb12 	bl	8011fc2 <memchr>
 801499e:	2800      	cmp	r0, #0
 80149a0:	d03f      	beq.n	8014a22 <_vfiprintf_r+0x20a>
 80149a2:	4b26      	ldr	r3, [pc, #152]	@ (8014a3c <_vfiprintf_r+0x224>)
 80149a4:	bb1b      	cbnz	r3, 80149ee <_vfiprintf_r+0x1d6>
 80149a6:	9b03      	ldr	r3, [sp, #12]
 80149a8:	3307      	adds	r3, #7
 80149aa:	f023 0307 	bic.w	r3, r3, #7
 80149ae:	3308      	adds	r3, #8
 80149b0:	9303      	str	r3, [sp, #12]
 80149b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149b4:	443b      	add	r3, r7
 80149b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80149b8:	e76a      	b.n	8014890 <_vfiprintf_r+0x78>
 80149ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80149be:	460c      	mov	r4, r1
 80149c0:	2001      	movs	r0, #1
 80149c2:	e7a8      	b.n	8014916 <_vfiprintf_r+0xfe>
 80149c4:	2300      	movs	r3, #0
 80149c6:	3401      	adds	r4, #1
 80149c8:	f04f 0c0a 	mov.w	ip, #10
 80149cc:	4619      	mov	r1, r3
 80149ce:	9305      	str	r3, [sp, #20]
 80149d0:	4620      	mov	r0, r4
 80149d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149d6:	3a30      	subs	r2, #48	@ 0x30
 80149d8:	2a09      	cmp	r2, #9
 80149da:	d903      	bls.n	80149e4 <_vfiprintf_r+0x1cc>
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d0c6      	beq.n	801496e <_vfiprintf_r+0x156>
 80149e0:	9105      	str	r1, [sp, #20]
 80149e2:	e7c4      	b.n	801496e <_vfiprintf_r+0x156>
 80149e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80149e8:	4604      	mov	r4, r0
 80149ea:	2301      	movs	r3, #1
 80149ec:	e7f0      	b.n	80149d0 <_vfiprintf_r+0x1b8>
 80149ee:	ab03      	add	r3, sp, #12
 80149f0:	462a      	mov	r2, r5
 80149f2:	a904      	add	r1, sp, #16
 80149f4:	4630      	mov	r0, r6
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	4b11      	ldr	r3, [pc, #68]	@ (8014a40 <_vfiprintf_r+0x228>)
 80149fa:	f7fc fa6b 	bl	8010ed4 <_printf_float>
 80149fe:	4607      	mov	r7, r0
 8014a00:	1c78      	adds	r0, r7, #1
 8014a02:	d1d6      	bne.n	80149b2 <_vfiprintf_r+0x19a>
 8014a04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a06:	07d9      	lsls	r1, r3, #31
 8014a08:	d405      	bmi.n	8014a16 <_vfiprintf_r+0x1fe>
 8014a0a:	89ab      	ldrh	r3, [r5, #12]
 8014a0c:	059a      	lsls	r2, r3, #22
 8014a0e:	d402      	bmi.n	8014a16 <_vfiprintf_r+0x1fe>
 8014a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a12:	f7fd fad5 	bl	8011fc0 <__retarget_lock_release_recursive>
 8014a16:	89ab      	ldrh	r3, [r5, #12]
 8014a18:	065b      	lsls	r3, r3, #25
 8014a1a:	f53f af1f 	bmi.w	801485c <_vfiprintf_r+0x44>
 8014a1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014a20:	e71e      	b.n	8014860 <_vfiprintf_r+0x48>
 8014a22:	ab03      	add	r3, sp, #12
 8014a24:	462a      	mov	r2, r5
 8014a26:	a904      	add	r1, sp, #16
 8014a28:	4630      	mov	r0, r6
 8014a2a:	9300      	str	r3, [sp, #0]
 8014a2c:	4b04      	ldr	r3, [pc, #16]	@ (8014a40 <_vfiprintf_r+0x228>)
 8014a2e:	f7fc fced 	bl	801140c <_printf_i>
 8014a32:	e7e4      	b.n	80149fe <_vfiprintf_r+0x1e6>
 8014a34:	08015cc1 	.word	0x08015cc1
 8014a38:	08015ccb 	.word	0x08015ccb
 8014a3c:	08010ed5 	.word	0x08010ed5
 8014a40:	080147f3 	.word	0x080147f3
 8014a44:	08015cc7 	.word	0x08015cc7

08014a48 <__sflush_r>:
 8014a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a50:	0716      	lsls	r6, r2, #28
 8014a52:	4605      	mov	r5, r0
 8014a54:	460c      	mov	r4, r1
 8014a56:	d454      	bmi.n	8014b02 <__sflush_r+0xba>
 8014a58:	684b      	ldr	r3, [r1, #4]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	dc02      	bgt.n	8014a64 <__sflush_r+0x1c>
 8014a5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	dd48      	ble.n	8014af6 <__sflush_r+0xae>
 8014a64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014a66:	2e00      	cmp	r6, #0
 8014a68:	d045      	beq.n	8014af6 <__sflush_r+0xae>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014a70:	682f      	ldr	r7, [r5, #0]
 8014a72:	6a21      	ldr	r1, [r4, #32]
 8014a74:	602b      	str	r3, [r5, #0]
 8014a76:	d030      	beq.n	8014ada <__sflush_r+0x92>
 8014a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014a7a:	89a3      	ldrh	r3, [r4, #12]
 8014a7c:	0759      	lsls	r1, r3, #29
 8014a7e:	d505      	bpl.n	8014a8c <__sflush_r+0x44>
 8014a80:	6863      	ldr	r3, [r4, #4]
 8014a82:	1ad2      	subs	r2, r2, r3
 8014a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014a86:	b10b      	cbz	r3, 8014a8c <__sflush_r+0x44>
 8014a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014a8a:	1ad2      	subs	r2, r2, r3
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014a90:	6a21      	ldr	r1, [r4, #32]
 8014a92:	4628      	mov	r0, r5
 8014a94:	47b0      	blx	r6
 8014a96:	1c43      	adds	r3, r0, #1
 8014a98:	89a3      	ldrh	r3, [r4, #12]
 8014a9a:	d106      	bne.n	8014aaa <__sflush_r+0x62>
 8014a9c:	6829      	ldr	r1, [r5, #0]
 8014a9e:	291d      	cmp	r1, #29
 8014aa0:	d82b      	bhi.n	8014afa <__sflush_r+0xb2>
 8014aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8014b4c <__sflush_r+0x104>)
 8014aa4:	410a      	asrs	r2, r1
 8014aa6:	07d6      	lsls	r6, r2, #31
 8014aa8:	d427      	bmi.n	8014afa <__sflush_r+0xb2>
 8014aaa:	2200      	movs	r2, #0
 8014aac:	04d9      	lsls	r1, r3, #19
 8014aae:	6062      	str	r2, [r4, #4]
 8014ab0:	6922      	ldr	r2, [r4, #16]
 8014ab2:	6022      	str	r2, [r4, #0]
 8014ab4:	d504      	bpl.n	8014ac0 <__sflush_r+0x78>
 8014ab6:	1c42      	adds	r2, r0, #1
 8014ab8:	d101      	bne.n	8014abe <__sflush_r+0x76>
 8014aba:	682b      	ldr	r3, [r5, #0]
 8014abc:	b903      	cbnz	r3, 8014ac0 <__sflush_r+0x78>
 8014abe:	6560      	str	r0, [r4, #84]	@ 0x54
 8014ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ac2:	602f      	str	r7, [r5, #0]
 8014ac4:	b1b9      	cbz	r1, 8014af6 <__sflush_r+0xae>
 8014ac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014aca:	4299      	cmp	r1, r3
 8014acc:	d002      	beq.n	8014ad4 <__sflush_r+0x8c>
 8014ace:	4628      	mov	r0, r5
 8014ad0:	f7fe f8de 	bl	8012c90 <_free_r>
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	6363      	str	r3, [r4, #52]	@ 0x34
 8014ad8:	e00d      	b.n	8014af6 <__sflush_r+0xae>
 8014ada:	2301      	movs	r3, #1
 8014adc:	4628      	mov	r0, r5
 8014ade:	47b0      	blx	r6
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	1c50      	adds	r0, r2, #1
 8014ae4:	d1c9      	bne.n	8014a7a <__sflush_r+0x32>
 8014ae6:	682b      	ldr	r3, [r5, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d0c6      	beq.n	8014a7a <__sflush_r+0x32>
 8014aec:	2b1d      	cmp	r3, #29
 8014aee:	d001      	beq.n	8014af4 <__sflush_r+0xac>
 8014af0:	2b16      	cmp	r3, #22
 8014af2:	d11d      	bne.n	8014b30 <__sflush_r+0xe8>
 8014af4:	602f      	str	r7, [r5, #0]
 8014af6:	2000      	movs	r0, #0
 8014af8:	e021      	b.n	8014b3e <__sflush_r+0xf6>
 8014afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014afe:	b21b      	sxth	r3, r3
 8014b00:	e01a      	b.n	8014b38 <__sflush_r+0xf0>
 8014b02:	690f      	ldr	r7, [r1, #16]
 8014b04:	2f00      	cmp	r7, #0
 8014b06:	d0f6      	beq.n	8014af6 <__sflush_r+0xae>
 8014b08:	0793      	lsls	r3, r2, #30
 8014b0a:	680e      	ldr	r6, [r1, #0]
 8014b0c:	600f      	str	r7, [r1, #0]
 8014b0e:	bf0c      	ite	eq
 8014b10:	694b      	ldreq	r3, [r1, #20]
 8014b12:	2300      	movne	r3, #0
 8014b14:	eba6 0807 	sub.w	r8, r6, r7
 8014b18:	608b      	str	r3, [r1, #8]
 8014b1a:	f1b8 0f00 	cmp.w	r8, #0
 8014b1e:	ddea      	ble.n	8014af6 <__sflush_r+0xae>
 8014b20:	4643      	mov	r3, r8
 8014b22:	463a      	mov	r2, r7
 8014b24:	6a21      	ldr	r1, [r4, #32]
 8014b26:	4628      	mov	r0, r5
 8014b28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014b2a:	47b0      	blx	r6
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	dc08      	bgt.n	8014b42 <__sflush_r+0xfa>
 8014b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b38:	f04f 30ff 	mov.w	r0, #4294967295
 8014b3c:	81a3      	strh	r3, [r4, #12]
 8014b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b42:	4407      	add	r7, r0
 8014b44:	eba8 0800 	sub.w	r8, r8, r0
 8014b48:	e7e7      	b.n	8014b1a <__sflush_r+0xd2>
 8014b4a:	bf00      	nop
 8014b4c:	dfbffffe 	.word	0xdfbffffe

08014b50 <_fflush_r>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	690b      	ldr	r3, [r1, #16]
 8014b54:	4605      	mov	r5, r0
 8014b56:	460c      	mov	r4, r1
 8014b58:	b913      	cbnz	r3, 8014b60 <_fflush_r+0x10>
 8014b5a:	2500      	movs	r5, #0
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	bd38      	pop	{r3, r4, r5, pc}
 8014b60:	b118      	cbz	r0, 8014b6a <_fflush_r+0x1a>
 8014b62:	6a03      	ldr	r3, [r0, #32]
 8014b64:	b90b      	cbnz	r3, 8014b6a <_fflush_r+0x1a>
 8014b66:	f7fd f80f 	bl	8011b88 <__sinit>
 8014b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d0f3      	beq.n	8014b5a <_fflush_r+0xa>
 8014b72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014b74:	07d0      	lsls	r0, r2, #31
 8014b76:	d404      	bmi.n	8014b82 <_fflush_r+0x32>
 8014b78:	0599      	lsls	r1, r3, #22
 8014b7a:	d402      	bmi.n	8014b82 <_fflush_r+0x32>
 8014b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b7e:	f7fd fa1e 	bl	8011fbe <__retarget_lock_acquire_recursive>
 8014b82:	4628      	mov	r0, r5
 8014b84:	4621      	mov	r1, r4
 8014b86:	f7ff ff5f 	bl	8014a48 <__sflush_r>
 8014b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014b8c:	4605      	mov	r5, r0
 8014b8e:	07da      	lsls	r2, r3, #31
 8014b90:	d4e4      	bmi.n	8014b5c <_fflush_r+0xc>
 8014b92:	89a3      	ldrh	r3, [r4, #12]
 8014b94:	059b      	lsls	r3, r3, #22
 8014b96:	d4e1      	bmi.n	8014b5c <_fflush_r+0xc>
 8014b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b9a:	f7fd fa11 	bl	8011fc0 <__retarget_lock_release_recursive>
 8014b9e:	e7dd      	b.n	8014b5c <_fflush_r+0xc>

08014ba0 <__swhatbuf_r>:
 8014ba0:	b570      	push	{r4, r5, r6, lr}
 8014ba2:	460c      	mov	r4, r1
 8014ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ba8:	b096      	sub	sp, #88	@ 0x58
 8014baa:	4615      	mov	r5, r2
 8014bac:	2900      	cmp	r1, #0
 8014bae:	461e      	mov	r6, r3
 8014bb0:	da0c      	bge.n	8014bcc <__swhatbuf_r+0x2c>
 8014bb2:	89a3      	ldrh	r3, [r4, #12]
 8014bb4:	2100      	movs	r1, #0
 8014bb6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014bba:	bf14      	ite	ne
 8014bbc:	2340      	movne	r3, #64	@ 0x40
 8014bbe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014bc2:	2000      	movs	r0, #0
 8014bc4:	6031      	str	r1, [r6, #0]
 8014bc6:	602b      	str	r3, [r5, #0]
 8014bc8:	b016      	add	sp, #88	@ 0x58
 8014bca:	bd70      	pop	{r4, r5, r6, pc}
 8014bcc:	466a      	mov	r2, sp
 8014bce:	f000 f875 	bl	8014cbc <_fstat_r>
 8014bd2:	2800      	cmp	r0, #0
 8014bd4:	dbed      	blt.n	8014bb2 <__swhatbuf_r+0x12>
 8014bd6:	9901      	ldr	r1, [sp, #4]
 8014bd8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014bdc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014be0:	4259      	negs	r1, r3
 8014be2:	4159      	adcs	r1, r3
 8014be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014be8:	e7eb      	b.n	8014bc2 <__swhatbuf_r+0x22>

08014bea <__smakebuf_r>:
 8014bea:	898b      	ldrh	r3, [r1, #12]
 8014bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014bee:	079d      	lsls	r5, r3, #30
 8014bf0:	4606      	mov	r6, r0
 8014bf2:	460c      	mov	r4, r1
 8014bf4:	d507      	bpl.n	8014c06 <__smakebuf_r+0x1c>
 8014bf6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014bfa:	6023      	str	r3, [r4, #0]
 8014bfc:	6123      	str	r3, [r4, #16]
 8014bfe:	2301      	movs	r3, #1
 8014c00:	6163      	str	r3, [r4, #20]
 8014c02:	b003      	add	sp, #12
 8014c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c06:	ab01      	add	r3, sp, #4
 8014c08:	466a      	mov	r2, sp
 8014c0a:	f7ff ffc9 	bl	8014ba0 <__swhatbuf_r>
 8014c0e:	9f00      	ldr	r7, [sp, #0]
 8014c10:	4605      	mov	r5, r0
 8014c12:	4630      	mov	r0, r6
 8014c14:	4639      	mov	r1, r7
 8014c16:	f7fe f8af 	bl	8012d78 <_malloc_r>
 8014c1a:	b948      	cbnz	r0, 8014c30 <__smakebuf_r+0x46>
 8014c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c20:	059a      	lsls	r2, r3, #22
 8014c22:	d4ee      	bmi.n	8014c02 <__smakebuf_r+0x18>
 8014c24:	f023 0303 	bic.w	r3, r3, #3
 8014c28:	f043 0302 	orr.w	r3, r3, #2
 8014c2c:	81a3      	strh	r3, [r4, #12]
 8014c2e:	e7e2      	b.n	8014bf6 <__smakebuf_r+0xc>
 8014c30:	89a3      	ldrh	r3, [r4, #12]
 8014c32:	6020      	str	r0, [r4, #0]
 8014c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c38:	81a3      	strh	r3, [r4, #12]
 8014c3a:	9b01      	ldr	r3, [sp, #4]
 8014c3c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014c40:	b15b      	cbz	r3, 8014c5a <__smakebuf_r+0x70>
 8014c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c46:	4630      	mov	r0, r6
 8014c48:	f000 f84a 	bl	8014ce0 <_isatty_r>
 8014c4c:	b128      	cbz	r0, 8014c5a <__smakebuf_r+0x70>
 8014c4e:	89a3      	ldrh	r3, [r4, #12]
 8014c50:	f023 0303 	bic.w	r3, r3, #3
 8014c54:	f043 0301 	orr.w	r3, r3, #1
 8014c58:	81a3      	strh	r3, [r4, #12]
 8014c5a:	89a3      	ldrh	r3, [r4, #12]
 8014c5c:	431d      	orrs	r5, r3
 8014c5e:	81a5      	strh	r5, [r4, #12]
 8014c60:	e7cf      	b.n	8014c02 <__smakebuf_r+0x18>

08014c62 <memmove>:
 8014c62:	4288      	cmp	r0, r1
 8014c64:	b510      	push	{r4, lr}
 8014c66:	eb01 0402 	add.w	r4, r1, r2
 8014c6a:	d902      	bls.n	8014c72 <memmove+0x10>
 8014c6c:	4284      	cmp	r4, r0
 8014c6e:	4623      	mov	r3, r4
 8014c70:	d807      	bhi.n	8014c82 <memmove+0x20>
 8014c72:	1e43      	subs	r3, r0, #1
 8014c74:	42a1      	cmp	r1, r4
 8014c76:	d008      	beq.n	8014c8a <memmove+0x28>
 8014c78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c80:	e7f8      	b.n	8014c74 <memmove+0x12>
 8014c82:	4402      	add	r2, r0
 8014c84:	4601      	mov	r1, r0
 8014c86:	428a      	cmp	r2, r1
 8014c88:	d100      	bne.n	8014c8c <memmove+0x2a>
 8014c8a:	bd10      	pop	{r4, pc}
 8014c8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014c94:	e7f7      	b.n	8014c86 <memmove+0x24>

08014c96 <strncmp>:
 8014c96:	b510      	push	{r4, lr}
 8014c98:	b16a      	cbz	r2, 8014cb6 <strncmp+0x20>
 8014c9a:	3901      	subs	r1, #1
 8014c9c:	1884      	adds	r4, r0, r2
 8014c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ca2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d103      	bne.n	8014cb2 <strncmp+0x1c>
 8014caa:	42a0      	cmp	r0, r4
 8014cac:	d001      	beq.n	8014cb2 <strncmp+0x1c>
 8014cae:	2a00      	cmp	r2, #0
 8014cb0:	d1f5      	bne.n	8014c9e <strncmp+0x8>
 8014cb2:	1ad0      	subs	r0, r2, r3
 8014cb4:	bd10      	pop	{r4, pc}
 8014cb6:	4610      	mov	r0, r2
 8014cb8:	e7fc      	b.n	8014cb4 <strncmp+0x1e>
	...

08014cbc <_fstat_r>:
 8014cbc:	b538      	push	{r3, r4, r5, lr}
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	4d06      	ldr	r5, [pc, #24]	@ (8014cdc <_fstat_r+0x20>)
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	4608      	mov	r0, r1
 8014cc6:	4611      	mov	r1, r2
 8014cc8:	602b      	str	r3, [r5, #0]
 8014cca:	f7ed f8f1 	bl	8001eb0 <_fstat>
 8014cce:	1c43      	adds	r3, r0, #1
 8014cd0:	d102      	bne.n	8014cd8 <_fstat_r+0x1c>
 8014cd2:	682b      	ldr	r3, [r5, #0]
 8014cd4:	b103      	cbz	r3, 8014cd8 <_fstat_r+0x1c>
 8014cd6:	6023      	str	r3, [r4, #0]
 8014cd8:	bd38      	pop	{r3, r4, r5, pc}
 8014cda:	bf00      	nop
 8014cdc:	20000a24 	.word	0x20000a24

08014ce0 <_isatty_r>:
 8014ce0:	b538      	push	{r3, r4, r5, lr}
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	4d05      	ldr	r5, [pc, #20]	@ (8014cfc <_isatty_r+0x1c>)
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	4608      	mov	r0, r1
 8014cea:	602b      	str	r3, [r5, #0]
 8014cec:	f7ed f8f0 	bl	8001ed0 <_isatty>
 8014cf0:	1c43      	adds	r3, r0, #1
 8014cf2:	d102      	bne.n	8014cfa <_isatty_r+0x1a>
 8014cf4:	682b      	ldr	r3, [r5, #0]
 8014cf6:	b103      	cbz	r3, 8014cfa <_isatty_r+0x1a>
 8014cf8:	6023      	str	r3, [r4, #0]
 8014cfa:	bd38      	pop	{r3, r4, r5, pc}
 8014cfc:	20000a24 	.word	0x20000a24

08014d00 <_sbrk_r>:
 8014d00:	b538      	push	{r3, r4, r5, lr}
 8014d02:	2300      	movs	r3, #0
 8014d04:	4d05      	ldr	r5, [pc, #20]	@ (8014d1c <_sbrk_r+0x1c>)
 8014d06:	4604      	mov	r4, r0
 8014d08:	4608      	mov	r0, r1
 8014d0a:	602b      	str	r3, [r5, #0]
 8014d0c:	f7ed f8f8 	bl	8001f00 <_sbrk>
 8014d10:	1c43      	adds	r3, r0, #1
 8014d12:	d102      	bne.n	8014d1a <_sbrk_r+0x1a>
 8014d14:	682b      	ldr	r3, [r5, #0]
 8014d16:	b103      	cbz	r3, 8014d1a <_sbrk_r+0x1a>
 8014d18:	6023      	str	r3, [r4, #0]
 8014d1a:	bd38      	pop	{r3, r4, r5, pc}
 8014d1c:	20000a24 	.word	0x20000a24

08014d20 <memcpy>:
 8014d20:	440a      	add	r2, r1
 8014d22:	1e43      	subs	r3, r0, #1
 8014d24:	4291      	cmp	r1, r2
 8014d26:	d100      	bne.n	8014d2a <memcpy+0xa>
 8014d28:	4770      	bx	lr
 8014d2a:	b510      	push	{r4, lr}
 8014d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d30:	4291      	cmp	r1, r2
 8014d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d36:	d1f9      	bne.n	8014d2c <memcpy+0xc>
 8014d38:	bd10      	pop	{r4, pc}
 8014d3a:	0000      	movs	r0, r0
 8014d3c:	0000      	movs	r0, r0
	...

08014d40 <nan>:
 8014d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014d48 <nan+0x8>
 8014d44:	4770      	bx	lr
 8014d46:	bf00      	nop
 8014d48:	00000000 	.word	0x00000000
 8014d4c:	7ff80000 	.word	0x7ff80000

08014d50 <__assert_func>:
 8014d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d52:	4614      	mov	r4, r2
 8014d54:	461a      	mov	r2, r3
 8014d56:	4b09      	ldr	r3, [pc, #36]	@ (8014d7c <__assert_func+0x2c>)
 8014d58:	4605      	mov	r5, r0
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	68d8      	ldr	r0, [r3, #12]
 8014d5e:	b954      	cbnz	r4, 8014d76 <__assert_func+0x26>
 8014d60:	4b07      	ldr	r3, [pc, #28]	@ (8014d80 <__assert_func+0x30>)
 8014d62:	461c      	mov	r4, r3
 8014d64:	9100      	str	r1, [sp, #0]
 8014d66:	4907      	ldr	r1, [pc, #28]	@ (8014d84 <__assert_func+0x34>)
 8014d68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d6c:	462b      	mov	r3, r5
 8014d6e:	f000 fba3 	bl	80154b8 <fiprintf>
 8014d72:	f000 fbb3 	bl	80154dc <abort>
 8014d76:	4b04      	ldr	r3, [pc, #16]	@ (8014d88 <__assert_func+0x38>)
 8014d78:	e7f4      	b.n	8014d64 <__assert_func+0x14>
 8014d7a:	bf00      	nop
 8014d7c:	2000017c 	.word	0x2000017c
 8014d80:	08015d15 	.word	0x08015d15
 8014d84:	08015ce7 	.word	0x08015ce7
 8014d88:	08015cda 	.word	0x08015cda

08014d8c <_calloc_r>:
 8014d8c:	b570      	push	{r4, r5, r6, lr}
 8014d8e:	fba1 5402 	umull	r5, r4, r1, r2
 8014d92:	b93c      	cbnz	r4, 8014da4 <_calloc_r+0x18>
 8014d94:	4629      	mov	r1, r5
 8014d96:	f7fd ffef 	bl	8012d78 <_malloc_r>
 8014d9a:	4606      	mov	r6, r0
 8014d9c:	b928      	cbnz	r0, 8014daa <_calloc_r+0x1e>
 8014d9e:	2600      	movs	r6, #0
 8014da0:	4630      	mov	r0, r6
 8014da2:	bd70      	pop	{r4, r5, r6, pc}
 8014da4:	220c      	movs	r2, #12
 8014da6:	6002      	str	r2, [r0, #0]
 8014da8:	e7f9      	b.n	8014d9e <_calloc_r+0x12>
 8014daa:	462a      	mov	r2, r5
 8014dac:	4621      	mov	r1, r4
 8014dae:	f7fd f889 	bl	8011ec4 <memset>
 8014db2:	e7f5      	b.n	8014da0 <_calloc_r+0x14>

08014db4 <rshift>:
 8014db4:	6903      	ldr	r3, [r0, #16]
 8014db6:	114a      	asrs	r2, r1, #5
 8014db8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dc0:	f100 0414 	add.w	r4, r0, #20
 8014dc4:	dd45      	ble.n	8014e52 <rshift+0x9e>
 8014dc6:	f011 011f 	ands.w	r1, r1, #31
 8014dca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014dce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014dd2:	d10c      	bne.n	8014dee <rshift+0x3a>
 8014dd4:	f100 0710 	add.w	r7, r0, #16
 8014dd8:	4629      	mov	r1, r5
 8014dda:	42b1      	cmp	r1, r6
 8014ddc:	d334      	bcc.n	8014e48 <rshift+0x94>
 8014dde:	1a9b      	subs	r3, r3, r2
 8014de0:	1eea      	subs	r2, r5, #3
 8014de2:	009b      	lsls	r3, r3, #2
 8014de4:	4296      	cmp	r6, r2
 8014de6:	bf38      	it	cc
 8014de8:	2300      	movcc	r3, #0
 8014dea:	4423      	add	r3, r4
 8014dec:	e015      	b.n	8014e1a <rshift+0x66>
 8014dee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014df2:	f1c1 0820 	rsb	r8, r1, #32
 8014df6:	f105 0e04 	add.w	lr, r5, #4
 8014dfa:	46a1      	mov	r9, r4
 8014dfc:	40cf      	lsrs	r7, r1
 8014dfe:	4576      	cmp	r6, lr
 8014e00:	46f4      	mov	ip, lr
 8014e02:	d815      	bhi.n	8014e30 <rshift+0x7c>
 8014e04:	1a9a      	subs	r2, r3, r2
 8014e06:	3501      	adds	r5, #1
 8014e08:	0092      	lsls	r2, r2, #2
 8014e0a:	3a04      	subs	r2, #4
 8014e0c:	42ae      	cmp	r6, r5
 8014e0e:	bf38      	it	cc
 8014e10:	2200      	movcc	r2, #0
 8014e12:	18a3      	adds	r3, r4, r2
 8014e14:	50a7      	str	r7, [r4, r2]
 8014e16:	b107      	cbz	r7, 8014e1a <rshift+0x66>
 8014e18:	3304      	adds	r3, #4
 8014e1a:	1b1a      	subs	r2, r3, r4
 8014e1c:	42a3      	cmp	r3, r4
 8014e1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014e22:	bf08      	it	eq
 8014e24:	2300      	moveq	r3, #0
 8014e26:	6102      	str	r2, [r0, #16]
 8014e28:	bf08      	it	eq
 8014e2a:	6143      	streq	r3, [r0, #20]
 8014e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e30:	f8dc c000 	ldr.w	ip, [ip]
 8014e34:	fa0c fc08 	lsl.w	ip, ip, r8
 8014e38:	ea4c 0707 	orr.w	r7, ip, r7
 8014e3c:	f849 7b04 	str.w	r7, [r9], #4
 8014e40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014e44:	40cf      	lsrs	r7, r1
 8014e46:	e7da      	b.n	8014dfe <rshift+0x4a>
 8014e48:	f851 cb04 	ldr.w	ip, [r1], #4
 8014e4c:	f847 cf04 	str.w	ip, [r7, #4]!
 8014e50:	e7c3      	b.n	8014dda <rshift+0x26>
 8014e52:	4623      	mov	r3, r4
 8014e54:	e7e1      	b.n	8014e1a <rshift+0x66>

08014e56 <__hexdig_fun>:
 8014e56:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014e5a:	2b09      	cmp	r3, #9
 8014e5c:	d802      	bhi.n	8014e64 <__hexdig_fun+0xe>
 8014e5e:	3820      	subs	r0, #32
 8014e60:	b2c0      	uxtb	r0, r0
 8014e62:	4770      	bx	lr
 8014e64:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014e68:	2b05      	cmp	r3, #5
 8014e6a:	d801      	bhi.n	8014e70 <__hexdig_fun+0x1a>
 8014e6c:	3847      	subs	r0, #71	@ 0x47
 8014e6e:	e7f7      	b.n	8014e60 <__hexdig_fun+0xa>
 8014e70:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014e74:	2b05      	cmp	r3, #5
 8014e76:	d801      	bhi.n	8014e7c <__hexdig_fun+0x26>
 8014e78:	3827      	subs	r0, #39	@ 0x27
 8014e7a:	e7f1      	b.n	8014e60 <__hexdig_fun+0xa>
 8014e7c:	2000      	movs	r0, #0
 8014e7e:	4770      	bx	lr

08014e80 <__gethex>:
 8014e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e84:	b085      	sub	sp, #20
 8014e86:	468a      	mov	sl, r1
 8014e88:	4690      	mov	r8, r2
 8014e8a:	9302      	str	r3, [sp, #8]
 8014e8c:	680b      	ldr	r3, [r1, #0]
 8014e8e:	9001      	str	r0, [sp, #4]
 8014e90:	1c9c      	adds	r4, r3, #2
 8014e92:	46a1      	mov	r9, r4
 8014e94:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014e98:	2830      	cmp	r0, #48	@ 0x30
 8014e9a:	d0fa      	beq.n	8014e92 <__gethex+0x12>
 8014e9c:	eba9 0303 	sub.w	r3, r9, r3
 8014ea0:	f1a3 0b02 	sub.w	fp, r3, #2
 8014ea4:	f7ff ffd7 	bl	8014e56 <__hexdig_fun>
 8014ea8:	4605      	mov	r5, r0
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	d166      	bne.n	8014f7c <__gethex+0xfc>
 8014eae:	2201      	movs	r2, #1
 8014eb0:	499e      	ldr	r1, [pc, #632]	@ (801512c <__gethex+0x2ac>)
 8014eb2:	4648      	mov	r0, r9
 8014eb4:	f7ff feef 	bl	8014c96 <strncmp>
 8014eb8:	4607      	mov	r7, r0
 8014eba:	2800      	cmp	r0, #0
 8014ebc:	d165      	bne.n	8014f8a <__gethex+0x10a>
 8014ebe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014ec2:	4626      	mov	r6, r4
 8014ec4:	f7ff ffc7 	bl	8014e56 <__hexdig_fun>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d060      	beq.n	8014f8e <__gethex+0x10e>
 8014ecc:	4623      	mov	r3, r4
 8014ece:	7818      	ldrb	r0, [r3, #0]
 8014ed0:	4699      	mov	r9, r3
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	2830      	cmp	r0, #48	@ 0x30
 8014ed6:	d0fa      	beq.n	8014ece <__gethex+0x4e>
 8014ed8:	f7ff ffbd 	bl	8014e56 <__hexdig_fun>
 8014edc:	fab0 f580 	clz	r5, r0
 8014ee0:	f04f 0b01 	mov.w	fp, #1
 8014ee4:	096d      	lsrs	r5, r5, #5
 8014ee6:	464a      	mov	r2, r9
 8014ee8:	4616      	mov	r6, r2
 8014eea:	3201      	adds	r2, #1
 8014eec:	7830      	ldrb	r0, [r6, #0]
 8014eee:	f7ff ffb2 	bl	8014e56 <__hexdig_fun>
 8014ef2:	2800      	cmp	r0, #0
 8014ef4:	d1f8      	bne.n	8014ee8 <__gethex+0x68>
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	498c      	ldr	r1, [pc, #560]	@ (801512c <__gethex+0x2ac>)
 8014efa:	4630      	mov	r0, r6
 8014efc:	f7ff fecb 	bl	8014c96 <strncmp>
 8014f00:	2800      	cmp	r0, #0
 8014f02:	d13e      	bne.n	8014f82 <__gethex+0x102>
 8014f04:	b944      	cbnz	r4, 8014f18 <__gethex+0x98>
 8014f06:	1c74      	adds	r4, r6, #1
 8014f08:	4622      	mov	r2, r4
 8014f0a:	4616      	mov	r6, r2
 8014f0c:	3201      	adds	r2, #1
 8014f0e:	7830      	ldrb	r0, [r6, #0]
 8014f10:	f7ff ffa1 	bl	8014e56 <__hexdig_fun>
 8014f14:	2800      	cmp	r0, #0
 8014f16:	d1f8      	bne.n	8014f0a <__gethex+0x8a>
 8014f18:	1ba4      	subs	r4, r4, r6
 8014f1a:	00a7      	lsls	r7, r4, #2
 8014f1c:	7833      	ldrb	r3, [r6, #0]
 8014f1e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014f22:	2b50      	cmp	r3, #80	@ 0x50
 8014f24:	d13d      	bne.n	8014fa2 <__gethex+0x122>
 8014f26:	7873      	ldrb	r3, [r6, #1]
 8014f28:	2b2b      	cmp	r3, #43	@ 0x2b
 8014f2a:	d032      	beq.n	8014f92 <__gethex+0x112>
 8014f2c:	2b2d      	cmp	r3, #45	@ 0x2d
 8014f2e:	d033      	beq.n	8014f98 <__gethex+0x118>
 8014f30:	1c71      	adds	r1, r6, #1
 8014f32:	2400      	movs	r4, #0
 8014f34:	7808      	ldrb	r0, [r1, #0]
 8014f36:	f7ff ff8e 	bl	8014e56 <__hexdig_fun>
 8014f3a:	1e43      	subs	r3, r0, #1
 8014f3c:	b2db      	uxtb	r3, r3
 8014f3e:	2b18      	cmp	r3, #24
 8014f40:	d82f      	bhi.n	8014fa2 <__gethex+0x122>
 8014f42:	f1a0 0210 	sub.w	r2, r0, #16
 8014f46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014f4a:	f7ff ff84 	bl	8014e56 <__hexdig_fun>
 8014f4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8014f52:	230a      	movs	r3, #10
 8014f54:	fa5f fc8c 	uxtb.w	ip, ip
 8014f58:	f1bc 0f18 	cmp.w	ip, #24
 8014f5c:	d91e      	bls.n	8014f9c <__gethex+0x11c>
 8014f5e:	b104      	cbz	r4, 8014f62 <__gethex+0xe2>
 8014f60:	4252      	negs	r2, r2
 8014f62:	4417      	add	r7, r2
 8014f64:	f8ca 1000 	str.w	r1, [sl]
 8014f68:	b1ed      	cbz	r5, 8014fa6 <__gethex+0x126>
 8014f6a:	f1bb 0f00 	cmp.w	fp, #0
 8014f6e:	bf0c      	ite	eq
 8014f70:	2506      	moveq	r5, #6
 8014f72:	2500      	movne	r5, #0
 8014f74:	4628      	mov	r0, r5
 8014f76:	b005      	add	sp, #20
 8014f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f7c:	2500      	movs	r5, #0
 8014f7e:	462c      	mov	r4, r5
 8014f80:	e7b1      	b.n	8014ee6 <__gethex+0x66>
 8014f82:	2c00      	cmp	r4, #0
 8014f84:	d1c8      	bne.n	8014f18 <__gethex+0x98>
 8014f86:	4627      	mov	r7, r4
 8014f88:	e7c8      	b.n	8014f1c <__gethex+0x9c>
 8014f8a:	464e      	mov	r6, r9
 8014f8c:	462f      	mov	r7, r5
 8014f8e:	2501      	movs	r5, #1
 8014f90:	e7c4      	b.n	8014f1c <__gethex+0x9c>
 8014f92:	2400      	movs	r4, #0
 8014f94:	1cb1      	adds	r1, r6, #2
 8014f96:	e7cd      	b.n	8014f34 <__gethex+0xb4>
 8014f98:	2401      	movs	r4, #1
 8014f9a:	e7fb      	b.n	8014f94 <__gethex+0x114>
 8014f9c:	fb03 0002 	mla	r0, r3, r2, r0
 8014fa0:	e7cf      	b.n	8014f42 <__gethex+0xc2>
 8014fa2:	4631      	mov	r1, r6
 8014fa4:	e7de      	b.n	8014f64 <__gethex+0xe4>
 8014fa6:	eba6 0309 	sub.w	r3, r6, r9
 8014faa:	4629      	mov	r1, r5
 8014fac:	3b01      	subs	r3, #1
 8014fae:	2b07      	cmp	r3, #7
 8014fb0:	dc0a      	bgt.n	8014fc8 <__gethex+0x148>
 8014fb2:	9801      	ldr	r0, [sp, #4]
 8014fb4:	f7fd ff6c 	bl	8012e90 <_Balloc>
 8014fb8:	4604      	mov	r4, r0
 8014fba:	b940      	cbnz	r0, 8014fce <__gethex+0x14e>
 8014fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8015130 <__gethex+0x2b0>)
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	21e4      	movs	r1, #228	@ 0xe4
 8014fc2:	485c      	ldr	r0, [pc, #368]	@ (8015134 <__gethex+0x2b4>)
 8014fc4:	f7ff fec4 	bl	8014d50 <__assert_func>
 8014fc8:	3101      	adds	r1, #1
 8014fca:	105b      	asrs	r3, r3, #1
 8014fcc:	e7ef      	b.n	8014fae <__gethex+0x12e>
 8014fce:	f100 0a14 	add.w	sl, r0, #20
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	4655      	mov	r5, sl
 8014fd6:	469b      	mov	fp, r3
 8014fd8:	45b1      	cmp	r9, r6
 8014fda:	d337      	bcc.n	801504c <__gethex+0x1cc>
 8014fdc:	f845 bb04 	str.w	fp, [r5], #4
 8014fe0:	eba5 050a 	sub.w	r5, r5, sl
 8014fe4:	4658      	mov	r0, fp
 8014fe6:	10ad      	asrs	r5, r5, #2
 8014fe8:	6125      	str	r5, [r4, #16]
 8014fea:	016d      	lsls	r5, r5, #5
 8014fec:	f7fe f844 	bl	8013078 <__hi0bits>
 8014ff0:	f8d8 6000 	ldr.w	r6, [r8]
 8014ff4:	1a2d      	subs	r5, r5, r0
 8014ff6:	42b5      	cmp	r5, r6
 8014ff8:	dd54      	ble.n	80150a4 <__gethex+0x224>
 8014ffa:	1bad      	subs	r5, r5, r6
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	4629      	mov	r1, r5
 8015000:	f7fe fbe1 	bl	80137c6 <__any_on>
 8015004:	4681      	mov	r9, r0
 8015006:	b178      	cbz	r0, 8015028 <__gethex+0x1a8>
 8015008:	1e6b      	subs	r3, r5, #1
 801500a:	f04f 0901 	mov.w	r9, #1
 801500e:	1159      	asrs	r1, r3, #5
 8015010:	f003 021f 	and.w	r2, r3, #31
 8015014:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015018:	fa09 f202 	lsl.w	r2, r9, r2
 801501c:	420a      	tst	r2, r1
 801501e:	d003      	beq.n	8015028 <__gethex+0x1a8>
 8015020:	454b      	cmp	r3, r9
 8015022:	dc36      	bgt.n	8015092 <__gethex+0x212>
 8015024:	f04f 0902 	mov.w	r9, #2
 8015028:	442f      	add	r7, r5
 801502a:	4629      	mov	r1, r5
 801502c:	4620      	mov	r0, r4
 801502e:	f7ff fec1 	bl	8014db4 <rshift>
 8015032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015036:	42bb      	cmp	r3, r7
 8015038:	da42      	bge.n	80150c0 <__gethex+0x240>
 801503a:	4621      	mov	r1, r4
 801503c:	9801      	ldr	r0, [sp, #4]
 801503e:	f7fd ff67 	bl	8012f10 <_Bfree>
 8015042:	2300      	movs	r3, #0
 8015044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015046:	25a3      	movs	r5, #163	@ 0xa3
 8015048:	6013      	str	r3, [r2, #0]
 801504a:	e793      	b.n	8014f74 <__gethex+0xf4>
 801504c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015050:	2a2e      	cmp	r2, #46	@ 0x2e
 8015052:	d012      	beq.n	801507a <__gethex+0x1fa>
 8015054:	2b20      	cmp	r3, #32
 8015056:	d104      	bne.n	8015062 <__gethex+0x1e2>
 8015058:	f845 bb04 	str.w	fp, [r5], #4
 801505c:	f04f 0b00 	mov.w	fp, #0
 8015060:	465b      	mov	r3, fp
 8015062:	7830      	ldrb	r0, [r6, #0]
 8015064:	9303      	str	r3, [sp, #12]
 8015066:	f7ff fef6 	bl	8014e56 <__hexdig_fun>
 801506a:	9b03      	ldr	r3, [sp, #12]
 801506c:	f000 000f 	and.w	r0, r0, #15
 8015070:	4098      	lsls	r0, r3
 8015072:	3304      	adds	r3, #4
 8015074:	ea4b 0b00 	orr.w	fp, fp, r0
 8015078:	e7ae      	b.n	8014fd8 <__gethex+0x158>
 801507a:	45b1      	cmp	r9, r6
 801507c:	d8ea      	bhi.n	8015054 <__gethex+0x1d4>
 801507e:	2201      	movs	r2, #1
 8015080:	492a      	ldr	r1, [pc, #168]	@ (801512c <__gethex+0x2ac>)
 8015082:	4630      	mov	r0, r6
 8015084:	9303      	str	r3, [sp, #12]
 8015086:	f7ff fe06 	bl	8014c96 <strncmp>
 801508a:	9b03      	ldr	r3, [sp, #12]
 801508c:	2800      	cmp	r0, #0
 801508e:	d1e1      	bne.n	8015054 <__gethex+0x1d4>
 8015090:	e7a2      	b.n	8014fd8 <__gethex+0x158>
 8015092:	1ea9      	subs	r1, r5, #2
 8015094:	4620      	mov	r0, r4
 8015096:	f7fe fb96 	bl	80137c6 <__any_on>
 801509a:	2800      	cmp	r0, #0
 801509c:	d0c2      	beq.n	8015024 <__gethex+0x1a4>
 801509e:	f04f 0903 	mov.w	r9, #3
 80150a2:	e7c1      	b.n	8015028 <__gethex+0x1a8>
 80150a4:	da09      	bge.n	80150ba <__gethex+0x23a>
 80150a6:	1b75      	subs	r5, r6, r5
 80150a8:	4621      	mov	r1, r4
 80150aa:	9801      	ldr	r0, [sp, #4]
 80150ac:	462a      	mov	r2, r5
 80150ae:	1b7f      	subs	r7, r7, r5
 80150b0:	f7fe f948 	bl	8013344 <__lshift>
 80150b4:	4604      	mov	r4, r0
 80150b6:	f100 0a14 	add.w	sl, r0, #20
 80150ba:	f04f 0900 	mov.w	r9, #0
 80150be:	e7b8      	b.n	8015032 <__gethex+0x1b2>
 80150c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80150c4:	42bd      	cmp	r5, r7
 80150c6:	dd6f      	ble.n	80151a8 <__gethex+0x328>
 80150c8:	1bed      	subs	r5, r5, r7
 80150ca:	42ae      	cmp	r6, r5
 80150cc:	dc34      	bgt.n	8015138 <__gethex+0x2b8>
 80150ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80150d2:	2b02      	cmp	r3, #2
 80150d4:	d022      	beq.n	801511c <__gethex+0x29c>
 80150d6:	2b03      	cmp	r3, #3
 80150d8:	d024      	beq.n	8015124 <__gethex+0x2a4>
 80150da:	2b01      	cmp	r3, #1
 80150dc:	d115      	bne.n	801510a <__gethex+0x28a>
 80150de:	42ae      	cmp	r6, r5
 80150e0:	d113      	bne.n	801510a <__gethex+0x28a>
 80150e2:	2e01      	cmp	r6, #1
 80150e4:	d10b      	bne.n	80150fe <__gethex+0x27e>
 80150e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80150ea:	2562      	movs	r5, #98	@ 0x62
 80150ec:	9a02      	ldr	r2, [sp, #8]
 80150ee:	6013      	str	r3, [r2, #0]
 80150f0:	2301      	movs	r3, #1
 80150f2:	6123      	str	r3, [r4, #16]
 80150f4:	f8ca 3000 	str.w	r3, [sl]
 80150f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80150fa:	601c      	str	r4, [r3, #0]
 80150fc:	e73a      	b.n	8014f74 <__gethex+0xf4>
 80150fe:	1e71      	subs	r1, r6, #1
 8015100:	4620      	mov	r0, r4
 8015102:	f7fe fb60 	bl	80137c6 <__any_on>
 8015106:	2800      	cmp	r0, #0
 8015108:	d1ed      	bne.n	80150e6 <__gethex+0x266>
 801510a:	4621      	mov	r1, r4
 801510c:	9801      	ldr	r0, [sp, #4]
 801510e:	f7fd feff 	bl	8012f10 <_Bfree>
 8015112:	2300      	movs	r3, #0
 8015114:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015116:	2550      	movs	r5, #80	@ 0x50
 8015118:	6013      	str	r3, [r2, #0]
 801511a:	e72b      	b.n	8014f74 <__gethex+0xf4>
 801511c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801511e:	2b00      	cmp	r3, #0
 8015120:	d1f3      	bne.n	801510a <__gethex+0x28a>
 8015122:	e7e0      	b.n	80150e6 <__gethex+0x266>
 8015124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015126:	2b00      	cmp	r3, #0
 8015128:	d1dd      	bne.n	80150e6 <__gethex+0x266>
 801512a:	e7ee      	b.n	801510a <__gethex+0x28a>
 801512c:	08015b68 	.word	0x08015b68
 8015130:	08015a01 	.word	0x08015a01
 8015134:	08015d16 	.word	0x08015d16
 8015138:	1e6f      	subs	r7, r5, #1
 801513a:	f1b9 0f00 	cmp.w	r9, #0
 801513e:	d130      	bne.n	80151a2 <__gethex+0x322>
 8015140:	b127      	cbz	r7, 801514c <__gethex+0x2cc>
 8015142:	4639      	mov	r1, r7
 8015144:	4620      	mov	r0, r4
 8015146:	f7fe fb3e 	bl	80137c6 <__any_on>
 801514a:	4681      	mov	r9, r0
 801514c:	117a      	asrs	r2, r7, #5
 801514e:	2301      	movs	r3, #1
 8015150:	f007 071f 	and.w	r7, r7, #31
 8015154:	4629      	mov	r1, r5
 8015156:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801515a:	4620      	mov	r0, r4
 801515c:	40bb      	lsls	r3, r7
 801515e:	1b76      	subs	r6, r6, r5
 8015160:	2502      	movs	r5, #2
 8015162:	4213      	tst	r3, r2
 8015164:	bf18      	it	ne
 8015166:	f049 0902 	orrne.w	r9, r9, #2
 801516a:	f7ff fe23 	bl	8014db4 <rshift>
 801516e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015172:	f1b9 0f00 	cmp.w	r9, #0
 8015176:	d047      	beq.n	8015208 <__gethex+0x388>
 8015178:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801517c:	2b02      	cmp	r3, #2
 801517e:	d015      	beq.n	80151ac <__gethex+0x32c>
 8015180:	2b03      	cmp	r3, #3
 8015182:	d017      	beq.n	80151b4 <__gethex+0x334>
 8015184:	2b01      	cmp	r3, #1
 8015186:	d109      	bne.n	801519c <__gethex+0x31c>
 8015188:	f019 0f02 	tst.w	r9, #2
 801518c:	d006      	beq.n	801519c <__gethex+0x31c>
 801518e:	f8da 3000 	ldr.w	r3, [sl]
 8015192:	ea49 0903 	orr.w	r9, r9, r3
 8015196:	f019 0f01 	tst.w	r9, #1
 801519a:	d10e      	bne.n	80151ba <__gethex+0x33a>
 801519c:	f045 0510 	orr.w	r5, r5, #16
 80151a0:	e032      	b.n	8015208 <__gethex+0x388>
 80151a2:	f04f 0901 	mov.w	r9, #1
 80151a6:	e7d1      	b.n	801514c <__gethex+0x2cc>
 80151a8:	2501      	movs	r5, #1
 80151aa:	e7e2      	b.n	8015172 <__gethex+0x2f2>
 80151ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80151ae:	f1c3 0301 	rsb	r3, r3, #1
 80151b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80151b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d0f0      	beq.n	801519c <__gethex+0x31c>
 80151ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80151be:	f104 0314 	add.w	r3, r4, #20
 80151c2:	f04f 0c00 	mov.w	ip, #0
 80151c6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80151ca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80151ce:	4618      	mov	r0, r3
 80151d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80151d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80151d8:	d01b      	beq.n	8015212 <__gethex+0x392>
 80151da:	3201      	adds	r2, #1
 80151dc:	6002      	str	r2, [r0, #0]
 80151de:	2d02      	cmp	r5, #2
 80151e0:	f104 0314 	add.w	r3, r4, #20
 80151e4:	d13c      	bne.n	8015260 <__gethex+0x3e0>
 80151e6:	f8d8 2000 	ldr.w	r2, [r8]
 80151ea:	3a01      	subs	r2, #1
 80151ec:	42b2      	cmp	r2, r6
 80151ee:	d109      	bne.n	8015204 <__gethex+0x384>
 80151f0:	1171      	asrs	r1, r6, #5
 80151f2:	2201      	movs	r2, #1
 80151f4:	f006 061f 	and.w	r6, r6, #31
 80151f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80151fc:	fa02 f606 	lsl.w	r6, r2, r6
 8015200:	421e      	tst	r6, r3
 8015202:	d13a      	bne.n	801527a <__gethex+0x3fa>
 8015204:	f045 0520 	orr.w	r5, r5, #32
 8015208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801520a:	601c      	str	r4, [r3, #0]
 801520c:	9b02      	ldr	r3, [sp, #8]
 801520e:	601f      	str	r7, [r3, #0]
 8015210:	e6b0      	b.n	8014f74 <__gethex+0xf4>
 8015212:	4299      	cmp	r1, r3
 8015214:	f843 cc04 	str.w	ip, [r3, #-4]
 8015218:	d8d9      	bhi.n	80151ce <__gethex+0x34e>
 801521a:	68a3      	ldr	r3, [r4, #8]
 801521c:	459b      	cmp	fp, r3
 801521e:	db17      	blt.n	8015250 <__gethex+0x3d0>
 8015220:	6861      	ldr	r1, [r4, #4]
 8015222:	9801      	ldr	r0, [sp, #4]
 8015224:	3101      	adds	r1, #1
 8015226:	f7fd fe33 	bl	8012e90 <_Balloc>
 801522a:	4681      	mov	r9, r0
 801522c:	b918      	cbnz	r0, 8015236 <__gethex+0x3b6>
 801522e:	4b1a      	ldr	r3, [pc, #104]	@ (8015298 <__gethex+0x418>)
 8015230:	4602      	mov	r2, r0
 8015232:	2184      	movs	r1, #132	@ 0x84
 8015234:	e6c5      	b.n	8014fc2 <__gethex+0x142>
 8015236:	6922      	ldr	r2, [r4, #16]
 8015238:	f104 010c 	add.w	r1, r4, #12
 801523c:	300c      	adds	r0, #12
 801523e:	3202      	adds	r2, #2
 8015240:	0092      	lsls	r2, r2, #2
 8015242:	f7ff fd6d 	bl	8014d20 <memcpy>
 8015246:	4621      	mov	r1, r4
 8015248:	464c      	mov	r4, r9
 801524a:	9801      	ldr	r0, [sp, #4]
 801524c:	f7fd fe60 	bl	8012f10 <_Bfree>
 8015250:	6923      	ldr	r3, [r4, #16]
 8015252:	1c5a      	adds	r2, r3, #1
 8015254:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015258:	6122      	str	r2, [r4, #16]
 801525a:	2201      	movs	r2, #1
 801525c:	615a      	str	r2, [r3, #20]
 801525e:	e7be      	b.n	80151de <__gethex+0x35e>
 8015260:	6922      	ldr	r2, [r4, #16]
 8015262:	455a      	cmp	r2, fp
 8015264:	dd0b      	ble.n	801527e <__gethex+0x3fe>
 8015266:	2101      	movs	r1, #1
 8015268:	4620      	mov	r0, r4
 801526a:	f7ff fda3 	bl	8014db4 <rshift>
 801526e:	3701      	adds	r7, #1
 8015270:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015274:	42bb      	cmp	r3, r7
 8015276:	f6ff aee0 	blt.w	801503a <__gethex+0x1ba>
 801527a:	2501      	movs	r5, #1
 801527c:	e7c2      	b.n	8015204 <__gethex+0x384>
 801527e:	f016 061f 	ands.w	r6, r6, #31
 8015282:	d0fa      	beq.n	801527a <__gethex+0x3fa>
 8015284:	4453      	add	r3, sl
 8015286:	f1c6 0620 	rsb	r6, r6, #32
 801528a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801528e:	f7fd fef3 	bl	8013078 <__hi0bits>
 8015292:	42b0      	cmp	r0, r6
 8015294:	dbe7      	blt.n	8015266 <__gethex+0x3e6>
 8015296:	e7f0      	b.n	801527a <__gethex+0x3fa>
 8015298:	08015a01 	.word	0x08015a01

0801529c <L_shift>:
 801529c:	f1c2 0208 	rsb	r2, r2, #8
 80152a0:	0092      	lsls	r2, r2, #2
 80152a2:	b570      	push	{r4, r5, r6, lr}
 80152a4:	f1c2 0620 	rsb	r6, r2, #32
 80152a8:	6843      	ldr	r3, [r0, #4]
 80152aa:	6804      	ldr	r4, [r0, #0]
 80152ac:	fa03 f506 	lsl.w	r5, r3, r6
 80152b0:	40d3      	lsrs	r3, r2
 80152b2:	432c      	orrs	r4, r5
 80152b4:	6004      	str	r4, [r0, #0]
 80152b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80152ba:	4288      	cmp	r0, r1
 80152bc:	d3f4      	bcc.n	80152a8 <L_shift+0xc>
 80152be:	bd70      	pop	{r4, r5, r6, pc}

080152c0 <__match>:
 80152c0:	6803      	ldr	r3, [r0, #0]
 80152c2:	3301      	adds	r3, #1
 80152c4:	b530      	push	{r4, r5, lr}
 80152c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152ca:	b914      	cbnz	r4, 80152d2 <__match+0x12>
 80152cc:	6003      	str	r3, [r0, #0]
 80152ce:	2001      	movs	r0, #1
 80152d0:	bd30      	pop	{r4, r5, pc}
 80152d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80152da:	2d19      	cmp	r5, #25
 80152dc:	bf98      	it	ls
 80152de:	3220      	addls	r2, #32
 80152e0:	42a2      	cmp	r2, r4
 80152e2:	d0f0      	beq.n	80152c6 <__match+0x6>
 80152e4:	2000      	movs	r0, #0
 80152e6:	e7f3      	b.n	80152d0 <__match+0x10>

080152e8 <__hexnan>:
 80152e8:	680b      	ldr	r3, [r1, #0]
 80152ea:	6801      	ldr	r1, [r0, #0]
 80152ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152f0:	115e      	asrs	r6, r3, #5
 80152f2:	f013 031f 	ands.w	r3, r3, #31
 80152f6:	f04f 0500 	mov.w	r5, #0
 80152fa:	b087      	sub	sp, #28
 80152fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015300:	4682      	mov	sl, r0
 8015302:	4690      	mov	r8, r2
 8015304:	46ab      	mov	fp, r5
 8015306:	bf18      	it	ne
 8015308:	3604      	addne	r6, #4
 801530a:	9301      	str	r3, [sp, #4]
 801530c:	9502      	str	r5, [sp, #8]
 801530e:	1f37      	subs	r7, r6, #4
 8015310:	f846 5c04 	str.w	r5, [r6, #-4]
 8015314:	46b9      	mov	r9, r7
 8015316:	463c      	mov	r4, r7
 8015318:	1c4b      	adds	r3, r1, #1
 801531a:	784a      	ldrb	r2, [r1, #1]
 801531c:	9303      	str	r3, [sp, #12]
 801531e:	b342      	cbz	r2, 8015372 <__hexnan+0x8a>
 8015320:	4610      	mov	r0, r2
 8015322:	9105      	str	r1, [sp, #20]
 8015324:	9204      	str	r2, [sp, #16]
 8015326:	f7ff fd96 	bl	8014e56 <__hexdig_fun>
 801532a:	2800      	cmp	r0, #0
 801532c:	d151      	bne.n	80153d2 <__hexnan+0xea>
 801532e:	9a04      	ldr	r2, [sp, #16]
 8015330:	9905      	ldr	r1, [sp, #20]
 8015332:	2a20      	cmp	r2, #32
 8015334:	d818      	bhi.n	8015368 <__hexnan+0x80>
 8015336:	9b02      	ldr	r3, [sp, #8]
 8015338:	459b      	cmp	fp, r3
 801533a:	dd13      	ble.n	8015364 <__hexnan+0x7c>
 801533c:	454c      	cmp	r4, r9
 801533e:	d206      	bcs.n	801534e <__hexnan+0x66>
 8015340:	2d07      	cmp	r5, #7
 8015342:	dc04      	bgt.n	801534e <__hexnan+0x66>
 8015344:	462a      	mov	r2, r5
 8015346:	4649      	mov	r1, r9
 8015348:	4620      	mov	r0, r4
 801534a:	f7ff ffa7 	bl	801529c <L_shift>
 801534e:	4544      	cmp	r4, r8
 8015350:	d951      	bls.n	80153f6 <__hexnan+0x10e>
 8015352:	2300      	movs	r3, #0
 8015354:	f1a4 0904 	sub.w	r9, r4, #4
 8015358:	f8cd b008 	str.w	fp, [sp, #8]
 801535c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015360:	461d      	mov	r5, r3
 8015362:	464c      	mov	r4, r9
 8015364:	9903      	ldr	r1, [sp, #12]
 8015366:	e7d7      	b.n	8015318 <__hexnan+0x30>
 8015368:	2a29      	cmp	r2, #41	@ 0x29
 801536a:	d156      	bne.n	801541a <__hexnan+0x132>
 801536c:	3102      	adds	r1, #2
 801536e:	f8ca 1000 	str.w	r1, [sl]
 8015372:	f1bb 0f00 	cmp.w	fp, #0
 8015376:	d050      	beq.n	801541a <__hexnan+0x132>
 8015378:	454c      	cmp	r4, r9
 801537a:	d206      	bcs.n	801538a <__hexnan+0xa2>
 801537c:	2d07      	cmp	r5, #7
 801537e:	dc04      	bgt.n	801538a <__hexnan+0xa2>
 8015380:	462a      	mov	r2, r5
 8015382:	4649      	mov	r1, r9
 8015384:	4620      	mov	r0, r4
 8015386:	f7ff ff89 	bl	801529c <L_shift>
 801538a:	4544      	cmp	r4, r8
 801538c:	d935      	bls.n	80153fa <__hexnan+0x112>
 801538e:	f1a8 0204 	sub.w	r2, r8, #4
 8015392:	4623      	mov	r3, r4
 8015394:	f853 1b04 	ldr.w	r1, [r3], #4
 8015398:	429f      	cmp	r7, r3
 801539a:	f842 1f04 	str.w	r1, [r2, #4]!
 801539e:	d2f9      	bcs.n	8015394 <__hexnan+0xac>
 80153a0:	1b3b      	subs	r3, r7, r4
 80153a2:	3e03      	subs	r6, #3
 80153a4:	3401      	adds	r4, #1
 80153a6:	2200      	movs	r2, #0
 80153a8:	f023 0303 	bic.w	r3, r3, #3
 80153ac:	3304      	adds	r3, #4
 80153ae:	42b4      	cmp	r4, r6
 80153b0:	bf88      	it	hi
 80153b2:	2304      	movhi	r3, #4
 80153b4:	4443      	add	r3, r8
 80153b6:	f843 2b04 	str.w	r2, [r3], #4
 80153ba:	429f      	cmp	r7, r3
 80153bc:	d2fb      	bcs.n	80153b6 <__hexnan+0xce>
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	b91b      	cbnz	r3, 80153ca <__hexnan+0xe2>
 80153c2:	4547      	cmp	r7, r8
 80153c4:	d127      	bne.n	8015416 <__hexnan+0x12e>
 80153c6:	2301      	movs	r3, #1
 80153c8:	603b      	str	r3, [r7, #0]
 80153ca:	2005      	movs	r0, #5
 80153cc:	b007      	add	sp, #28
 80153ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d2:	3501      	adds	r5, #1
 80153d4:	f10b 0b01 	add.w	fp, fp, #1
 80153d8:	2d08      	cmp	r5, #8
 80153da:	dd05      	ble.n	80153e8 <__hexnan+0x100>
 80153dc:	4544      	cmp	r4, r8
 80153de:	d9c1      	bls.n	8015364 <__hexnan+0x7c>
 80153e0:	2300      	movs	r3, #0
 80153e2:	3c04      	subs	r4, #4
 80153e4:	2501      	movs	r5, #1
 80153e6:	6023      	str	r3, [r4, #0]
 80153e8:	6822      	ldr	r2, [r4, #0]
 80153ea:	f000 000f 	and.w	r0, r0, #15
 80153ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80153f2:	6020      	str	r0, [r4, #0]
 80153f4:	e7b6      	b.n	8015364 <__hexnan+0x7c>
 80153f6:	2508      	movs	r5, #8
 80153f8:	e7b4      	b.n	8015364 <__hexnan+0x7c>
 80153fa:	9b01      	ldr	r3, [sp, #4]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d0de      	beq.n	80153be <__hexnan+0xd6>
 8015400:	f1c3 0320 	rsb	r3, r3, #32
 8015404:	f04f 32ff 	mov.w	r2, #4294967295
 8015408:	40da      	lsrs	r2, r3
 801540a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801540e:	4013      	ands	r3, r2
 8015410:	f846 3c04 	str.w	r3, [r6, #-4]
 8015414:	e7d3      	b.n	80153be <__hexnan+0xd6>
 8015416:	3f04      	subs	r7, #4
 8015418:	e7d1      	b.n	80153be <__hexnan+0xd6>
 801541a:	2004      	movs	r0, #4
 801541c:	e7d6      	b.n	80153cc <__hexnan+0xe4>

0801541e <__ascii_mbtowc>:
 801541e:	b082      	sub	sp, #8
 8015420:	b901      	cbnz	r1, 8015424 <__ascii_mbtowc+0x6>
 8015422:	a901      	add	r1, sp, #4
 8015424:	b142      	cbz	r2, 8015438 <__ascii_mbtowc+0x1a>
 8015426:	b14b      	cbz	r3, 801543c <__ascii_mbtowc+0x1e>
 8015428:	7813      	ldrb	r3, [r2, #0]
 801542a:	600b      	str	r3, [r1, #0]
 801542c:	7812      	ldrb	r2, [r2, #0]
 801542e:	1e10      	subs	r0, r2, #0
 8015430:	bf18      	it	ne
 8015432:	2001      	movne	r0, #1
 8015434:	b002      	add	sp, #8
 8015436:	4770      	bx	lr
 8015438:	4610      	mov	r0, r2
 801543a:	e7fb      	b.n	8015434 <__ascii_mbtowc+0x16>
 801543c:	f06f 0001 	mvn.w	r0, #1
 8015440:	e7f8      	b.n	8015434 <__ascii_mbtowc+0x16>

08015442 <_realloc_r>:
 8015442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015446:	4680      	mov	r8, r0
 8015448:	4615      	mov	r5, r2
 801544a:	460c      	mov	r4, r1
 801544c:	b921      	cbnz	r1, 8015458 <_realloc_r+0x16>
 801544e:	4611      	mov	r1, r2
 8015450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015454:	f7fd bc90 	b.w	8012d78 <_malloc_r>
 8015458:	b92a      	cbnz	r2, 8015466 <_realloc_r+0x24>
 801545a:	f7fd fc19 	bl	8012c90 <_free_r>
 801545e:	2400      	movs	r4, #0
 8015460:	4620      	mov	r0, r4
 8015462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015466:	f000 f840 	bl	80154ea <_malloc_usable_size_r>
 801546a:	4285      	cmp	r5, r0
 801546c:	4606      	mov	r6, r0
 801546e:	d802      	bhi.n	8015476 <_realloc_r+0x34>
 8015470:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015474:	d8f4      	bhi.n	8015460 <_realloc_r+0x1e>
 8015476:	4629      	mov	r1, r5
 8015478:	4640      	mov	r0, r8
 801547a:	f7fd fc7d 	bl	8012d78 <_malloc_r>
 801547e:	4607      	mov	r7, r0
 8015480:	2800      	cmp	r0, #0
 8015482:	d0ec      	beq.n	801545e <_realloc_r+0x1c>
 8015484:	42b5      	cmp	r5, r6
 8015486:	462a      	mov	r2, r5
 8015488:	4621      	mov	r1, r4
 801548a:	bf28      	it	cs
 801548c:	4632      	movcs	r2, r6
 801548e:	f7ff fc47 	bl	8014d20 <memcpy>
 8015492:	4621      	mov	r1, r4
 8015494:	4640      	mov	r0, r8
 8015496:	463c      	mov	r4, r7
 8015498:	f7fd fbfa 	bl	8012c90 <_free_r>
 801549c:	e7e0      	b.n	8015460 <_realloc_r+0x1e>

0801549e <__ascii_wctomb>:
 801549e:	4603      	mov	r3, r0
 80154a0:	4608      	mov	r0, r1
 80154a2:	b141      	cbz	r1, 80154b6 <__ascii_wctomb+0x18>
 80154a4:	2aff      	cmp	r2, #255	@ 0xff
 80154a6:	d904      	bls.n	80154b2 <__ascii_wctomb+0x14>
 80154a8:	228a      	movs	r2, #138	@ 0x8a
 80154aa:	f04f 30ff 	mov.w	r0, #4294967295
 80154ae:	601a      	str	r2, [r3, #0]
 80154b0:	4770      	bx	lr
 80154b2:	2001      	movs	r0, #1
 80154b4:	700a      	strb	r2, [r1, #0]
 80154b6:	4770      	bx	lr

080154b8 <fiprintf>:
 80154b8:	b40e      	push	{r1, r2, r3}
 80154ba:	b503      	push	{r0, r1, lr}
 80154bc:	ab03      	add	r3, sp, #12
 80154be:	4601      	mov	r1, r0
 80154c0:	4805      	ldr	r0, [pc, #20]	@ (80154d8 <fiprintf+0x20>)
 80154c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80154c6:	6800      	ldr	r0, [r0, #0]
 80154c8:	9301      	str	r3, [sp, #4]
 80154ca:	f7ff f9a5 	bl	8014818 <_vfiprintf_r>
 80154ce:	b002      	add	sp, #8
 80154d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80154d4:	b003      	add	sp, #12
 80154d6:	4770      	bx	lr
 80154d8:	2000017c 	.word	0x2000017c

080154dc <abort>:
 80154dc:	2006      	movs	r0, #6
 80154de:	b508      	push	{r3, lr}
 80154e0:	f000 f834 	bl	801554c <raise>
 80154e4:	2001      	movs	r0, #1
 80154e6:	f7ec fcaf 	bl	8001e48 <_exit>

080154ea <_malloc_usable_size_r>:
 80154ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154ee:	1f18      	subs	r0, r3, #4
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	bfbc      	itt	lt
 80154f4:	580b      	ldrlt	r3, [r1, r0]
 80154f6:	18c0      	addlt	r0, r0, r3
 80154f8:	4770      	bx	lr

080154fa <_raise_r>:
 80154fa:	291f      	cmp	r1, #31
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4605      	mov	r5, r0
 8015500:	460c      	mov	r4, r1
 8015502:	d904      	bls.n	801550e <_raise_r+0x14>
 8015504:	2316      	movs	r3, #22
 8015506:	6003      	str	r3, [r0, #0]
 8015508:	f04f 30ff 	mov.w	r0, #4294967295
 801550c:	bd38      	pop	{r3, r4, r5, pc}
 801550e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015510:	b112      	cbz	r2, 8015518 <_raise_r+0x1e>
 8015512:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015516:	b94b      	cbnz	r3, 801552c <_raise_r+0x32>
 8015518:	4628      	mov	r0, r5
 801551a:	f000 f831 	bl	8015580 <_getpid_r>
 801551e:	4622      	mov	r2, r4
 8015520:	4601      	mov	r1, r0
 8015522:	4628      	mov	r0, r5
 8015524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015528:	f000 b818 	b.w	801555c <_kill_r>
 801552c:	2b01      	cmp	r3, #1
 801552e:	d00a      	beq.n	8015546 <_raise_r+0x4c>
 8015530:	1c59      	adds	r1, r3, #1
 8015532:	d103      	bne.n	801553c <_raise_r+0x42>
 8015534:	2316      	movs	r3, #22
 8015536:	6003      	str	r3, [r0, #0]
 8015538:	2001      	movs	r0, #1
 801553a:	e7e7      	b.n	801550c <_raise_r+0x12>
 801553c:	2100      	movs	r1, #0
 801553e:	4620      	mov	r0, r4
 8015540:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015544:	4798      	blx	r3
 8015546:	2000      	movs	r0, #0
 8015548:	e7e0      	b.n	801550c <_raise_r+0x12>
	...

0801554c <raise>:
 801554c:	4b02      	ldr	r3, [pc, #8]	@ (8015558 <raise+0xc>)
 801554e:	4601      	mov	r1, r0
 8015550:	6818      	ldr	r0, [r3, #0]
 8015552:	f7ff bfd2 	b.w	80154fa <_raise_r>
 8015556:	bf00      	nop
 8015558:	2000017c 	.word	0x2000017c

0801555c <_kill_r>:
 801555c:	b538      	push	{r3, r4, r5, lr}
 801555e:	2300      	movs	r3, #0
 8015560:	4d06      	ldr	r5, [pc, #24]	@ (801557c <_kill_r+0x20>)
 8015562:	4604      	mov	r4, r0
 8015564:	4608      	mov	r0, r1
 8015566:	4611      	mov	r1, r2
 8015568:	602b      	str	r3, [r5, #0]
 801556a:	f7ec fc5d 	bl	8001e28 <_kill>
 801556e:	1c43      	adds	r3, r0, #1
 8015570:	d102      	bne.n	8015578 <_kill_r+0x1c>
 8015572:	682b      	ldr	r3, [r5, #0]
 8015574:	b103      	cbz	r3, 8015578 <_kill_r+0x1c>
 8015576:	6023      	str	r3, [r4, #0]
 8015578:	bd38      	pop	{r3, r4, r5, pc}
 801557a:	bf00      	nop
 801557c:	20000a24 	.word	0x20000a24

08015580 <_getpid_r>:
 8015580:	f7ec bc4a 	b.w	8001e18 <_getpid>

08015584 <_init>:
 8015584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015586:	bf00      	nop
 8015588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801558a:	bc08      	pop	{r3}
 801558c:	469e      	mov	lr, r3
 801558e:	4770      	bx	lr

08015590 <_fini>:
 8015590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015592:	bf00      	nop
 8015594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015596:	bc08      	pop	{r3}
 8015598:	469e      	mov	lr, r3
 801559a:	4770      	bx	lr
